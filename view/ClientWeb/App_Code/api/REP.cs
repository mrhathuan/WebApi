using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Security;
using DTO;
using CacheManager.Core;
using System.Web;
using Microsoft.Practices.Unity;
using Newtonsoft.Json;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using Presentation;
using Microsoft.SqlServer;
using System.IO;
using OfficeOpenXml;
using IServices;
using OfficeOpenXml.Style;
using System.Drawing;
//using System.ServiceModel;
using System.Reflection;
using ServicesExtend;
using System.Text;

namespace ClientWeb
{
    public class REPController : BaseController
    {
        #region Common
        public DTOResult REP_Customer_Read()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.Customer_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult REP_Vendor_Read()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.Vendor_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult REP_Vendor_List()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.Vendor_Read();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult REP_GroupOfProduct_Read(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.GroupOfProduct_List(lstid);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOCUSStock> REPDIPL_StockList(dynamic dynParam)
        {
            try
            {
                List<DTOCUSStock> result = new List<DTOCUSStock>();
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_StockList(lstid);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPFormula_Replace(string str, int row, int rowStart, int rowEnd)
        {
            StringBuilder strFormula = new StringBuilder(str);
            strFormula = strFormula.Replace("[ROW]", row.ToString()).Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
            string rowMinus = "[ROW-";
            string rowPlus = "[ROW+";
            if (str.Contains(rowMinus))
            {
                var lstStr = str.Split(new string[] { rowMinus }, StringSplitOptions.RemoveEmptyEntries);
                foreach (var item in lstStr)
                {
                    var idx = item.IndexOf(']');
                    if (idx >= 1)
                    {
                        try
                        {
                            int iRow = Convert.ToInt32(item.Substring(0, idx));
                            if (iRow > 0)
                            {
                                var rowReplace = rowMinus + iRow.ToString();
                                strFormula.Replace(rowReplace, (row - iRow).ToString());
                            }
                        }
                        catch { }
                    }
                }
            }
            if (str.Contains(rowPlus))
            {
                var lstStr = str.Split(new string[] { rowPlus }, StringSplitOptions.RemoveEmptyEntries);
                foreach (var item in lstStr)
                {
                    var idx = item.IndexOf(']');
                    if (idx >= 1)
                    {
                        try
                        {
                            int iRow = Convert.ToInt32(item.Substring(0, idx));
                            if (iRow > 0)
                            {
                                var rowReplace = rowPlus + iRow.ToString();
                                strFormula.Replace(rowReplace, (row + iRow).ToString());
                            }
                        }
                        catch { }
                    }
                }
            }

            strFormula = strFormula.Replace("]", "");
            return strFormula.ToString();
        }
        #endregion

        #region REPDIPivotOrder
        public List<REPDIPivotOrder> REPDIPivotOrder_List(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<REPDIPivotOrder>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPivotOrder_List(lstid, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPTRPL_Detail> REPDIPivotOrder_Read(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPTRPL_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPivotOrder_Read(lstid, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public REPDIPLPivot_Template REPDIPivotOrder_GetTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);

                var result = new REPDIPLPivot_Template();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPivotOrder_GetTemplate(functionID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void REPDIPivotOrder_SaveTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);
                REPDIPLPivot_TemplateDetail item = Newtonsoft.Json.JsonConvert.DeserializeObject<REPDIPLPivot_TemplateDetail>(dynParam.item.ToString());
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.REPDIPivotOrder_SaveTemplate(item, functionID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void REPDIPivotOrder_DeleteTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.REPDIPivotOrder_DeleteTemplate(functionID, lstid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPCOPivotOrder
        public List<DTOREPCOPL_Order> REPCOPivotOrder_Data(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                string request = string.Empty;
                var result = new List<DTOREPCOPL_Order>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_OrderData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public REPCOPLPivot_Template REPCOPivotOrder_GetTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);

                var result = new REPCOPLPivot_Template();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPivotOrder_GetTemplate(functionID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void REPCOPivotOrder_SaveTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);
                REPCOPLPivot_TemplateDetail item = Newtonsoft.Json.JsonConvert.DeserializeObject<REPCOPLPivot_TemplateDetail>(dynParam.item.ToString());
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.REPCOPivotOrder_SaveTemplate(item, functionID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void REPCOPivotOrder_DeleteTemplate(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.REPCOPivotOrder_DeleteTemplate(functionID, lstid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDIPivotPOD
        public List<REPDIPivotPOD> REPDIPivotPOD_List(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<REPDIPivotPOD>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPivotPOD_List(lstid, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDISchedulePivot
        public List<REPDISchedulePivot> REPDISchedulePivot_List(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<REPDISchedulePivot>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDISchedulePivot_Data(lstid, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDIOPSPlan
        public string REPDIOPSPlan_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();
                    var lstgroupid = new List<int>();
                    if (item.ListGroupProduct != null)
                        lstgroupid = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();
                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIOPSPlan_SettingDownload_Detail(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 2: return REPDIOPSPlan_SettingDownload_DetailColumn(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 3: return REPDIOPSPlan_SettingDownload_DetailGroupStock(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);

                            case 4: return REPDIOPSPlan_SettingDownload_Order(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 5: return REPDIOPSPlan_SettingDownload_OrderColumn(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 6: return REPDIOPSPlan_SettingDownload_OrderGroupStock(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);

                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIOPSPlan_SettingDownload_Detail(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPOPSPlan_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_DetailData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIOPSPlan_SettingDownload_DetailColumn(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPOPSPlan_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_ColumnDetailData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Detail);
                    var typePropGroup = typeof(DTOREPOPSPlan_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIOPSPlan_SettingDownload_DetailGroupStock(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPOPSPlan_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_ColumnDetailGroupStockData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Detail);
                    var typePropGroup = typeof(DTOREPOPSPlan_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIOPSPlan_SettingDownload_Order(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPOPSPlan_Order>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_OrderData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Order);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIOPSPlan_SettingDownload_OrderColumn(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPOPSPlan_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_ColumnOrderData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Order);
                    var typePropGroup = typeof(DTOREPOPSPlan_ColumnOrder_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIOPSPlan_SettingDownload_OrderGroupStock(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPOPSPlan_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIOPSPlan_ColumnOrderGroupStockData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPOPSPlan_Order);
                    var typePropGroup = typeof(DTOREPOPSPlan_ColumnOrder_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }


        public List<DTOREPOPSPlan_Detail> REPDIOPSPlan_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPOPSPlan_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_DetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]";
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Description]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TelNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DrivingLicense]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IntReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Ton]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocation]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMStart]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMEnd]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPOPSPlan_ColumnDetail REPDIOPSPlan_DetailColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnDetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnDetail_Group group = new DTOREPOPSPlan_ColumnDetail_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnDetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnDetail_Group group = new DTOREPOPSPlan_ColumnDetail_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanDetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "CostUnitPrice", "CostQuantity", "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad", "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Description]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TelNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DrivingLicense]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IntReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Ton]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Quantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMStart]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMEnd]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPOPSPlan_ColumnDetail REPDIOPSPlan_DetailGroupStock(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnDetailGroupStockData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnDetail_Group group = new DTOREPOPSPlan_ColumnDetail_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_DetailGroupStock_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnDetailGroupStockData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnDetail_Group group = new DTOREPOPSPlan_ColumnDetail_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanDetailGroupStock_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "CostUnitPrice", "CostQuantity", "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad", "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Description]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TelNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DrivingLicense]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IntReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Ton]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Quantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMStart]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMEnd]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPOPSPlan_Order> REPDIOPSPlan_Order(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPOPSPlan_Order>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_OrderData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_Order_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanOrder_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]";
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Description]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TelNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DrivingLicense]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IntReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Ton]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocation]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMStart]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMEnd]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPOPSPlan_ColumnOrder REPDIOPSPlan_OrderColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnOrder();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnOrderData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnOrder_Group group = new DTOREPOPSPlan_ColumnOrder_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_OrderColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnOrder();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnOrderData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnOrder_Group group = new DTOREPOPSPlan_ColumnOrder_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanOrderColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "CostUnitPrice", "CostQuantity", "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad", "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Description]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TelNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DrivingLicense]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IntReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Ton]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Quantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMStart]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMEnd]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPOPSPlan_ColumnOrder REPDIOPSPlan_OrderGroupStock(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnOrder();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnOrderGroupStockData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnOrder_Group group = new DTOREPOPSPlan_ColumnOrder_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIOPSPlan_OrderGroupStock_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnOrder();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnOrderGroupStockData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnOrder_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnOrder_Group group = new DTOREPOPSPlan_ColumnOrder_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIOPSPlanOrderGroupStock_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng Vendor"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối kế hoạch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng kế hoạch"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    //ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    //col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    //ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    //col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "CostUnitPrice", "CostQuantity", "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad", "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Description]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TelNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DrivingLicense]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IntReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Ton]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Quantity]"; worksheet.Column(col1).Width = 20;
                    //col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    //ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    //col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    //col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    //ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    //col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMStart]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMEnd]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDIPL
        public string REPDIPL_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now.Date;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now.Date;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1).Date;
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1).Date;
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    var ListCustomerID = new List<int>();
                    if (item.ListCustomer != null)
                        ListCustomerID = item.ListCustomer.Select(c => c.CustomerID).ToList();

                    var ListGroupProductID = new List<int>();
                    if (item.ListGroupProduct != null)
                        ListGroupProductID = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();

                    var ListStockID = new List<int>();
                    if (item.ListStock != null)
                        ListStockID = item.ListStock.Select(c => c.StockID).ToList();

                    var ListGroupOfLocationID = new List<int>();
                    if (item.ListGroupOfLocation != null)
                        ListGroupOfLocationID = item.ListGroupOfLocation.Select(c => c.GroupOfLocationID).ToList();

                    var ListPartnerID = new List<int>();
                    if (item.ListPartner != null)
                        ListPartnerID = item.ListPartner.Select(c => c.PartnerID).ToList();

                    var ListGroupOfPartnerID = new List<int>();
                    if (item.ListGroupOfPartner != null)
                        ListGroupOfPartnerID = item.ListGroupOfPartner.Select(c => c.GroupOfPartnerID).ToList();

                    var ListProvinceID = new List<int>();
                    if (item.ListProvince != null)
                        ListProvinceID = item.ListProvince.Select(c => c.ProvinceID).ToList();

                    var ListOrderRoutingID = new List<int>();
                    if (item.ListOrderRouting != null)
                        ListOrderRoutingID = item.ListOrderRouting.Select(c => c.RoutingID).ToList();

                    var ListOPSRoutingID = new List<int>();
                    if (item.ListOPSRouting != null)
                        ListOPSRoutingID = item.ListOPSRouting.Select(c => c.RoutingID).ToList();

                    if (ListCustomerID.Count > 0)
                    {
                        CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                        filter.DateFrom = dtfrom;
                        filter.DateTo = dtto;
                        filter.ListCustomerID = ListCustomerID;
                        filter.ListGroupProductID = ListGroupProductID;
                        filter.ListStockID = ListStockID;
                        filter.ListGroupOfLocationID = ListGroupOfLocationID;
                        filter.ListPartnerID = ListPartnerID;
                        filter.ListGroupOfPartnerID = ListGroupOfPartnerID;
                        filter.ListProvinceID = ListProvinceID;
                        filter.ListOrderRoutingID = ListOrderRoutingID;
                        filter.ListOPSRoutingID = ListOPSRoutingID;
                        filter.Request = request;
                        filter.IsComplete = item.IsCompleted;
                        filter.IsReceived = item.IsReceived;
                        filter.TypeOfDate = item.TypeOfDate == null ? 0 : item.TypeOfDate.Value;
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIPL_SettingDownload_Detail(filter, itemfile);
                            case 2: return REPDIPL_SettingDownload_DetailColumn(filter, itemfile);
                            case 3: return REPDIPL_SettingDownload_DetailGroupStock(filter, itemfile);
                            case 4: return REPDIPL_SettingDownload_DetailGroupProduct(filter, itemfile);
                            case 5: return REPDIPL_SettingDownload_DetailMOQ(filter, itemfile);
                            case 6: return REPDIPL_SettingDownload_Order(filter, itemfile);
                            case 7: return REPDIPL_SettingDownload_OrderColumn(filter, itemfile);
                            case 8: return REPDIPL_SettingDownload_OrderGroupStock(filter, itemfile);
                            case 9: return REPDIPL_SettingDownload_OrderGroupProduct(filter, itemfile);
                            case 10: return REPDIPL_SettingDownload_OrderMOQ(filter, itemfile);
                            case 11: return REPDIPL_SettingDownload_Spotrate(filter, itemfile);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIPL_SettingDownload_Detail(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new List<DTOREPTRPL_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_DetailData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        // Data
                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }

                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_DetailColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnDetailData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Detail);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_DetailGroupStock(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnDetailGroupStockData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Detail);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_DetailGroupProduct(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnDetailGroupProductData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Detail);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_DetailMOQ(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnDetailMOQData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Detail);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_MOQ);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;

                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }


        private string REPDIPL_SettingDownload_Order(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new List<DTOREPTRPL_Order>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_OrderData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Order);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_OrderColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnOrderData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Order);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_OrderGroupStock(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnOrderGroupStockData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Order);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_OrderGroupProduct(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnOrderGroupProductData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Order);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_OrderMOQ(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPTRPL_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_ColumnOrderMOQData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Order);
                    var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_MOQ);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == groupKey && c.OrderGroupProductID == item.OrderGroupProductID);
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPDIPL_SettingDownload_Spotrate(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new List<DTOREPTRPL_Spotrate>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPL_SpotrateData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPTRPL_Spotrate);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        public string REPDIPL_SettingDownload_Summary(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Summary> lstTemplate = new List<CUSSettingsReport_Summary>();
                List<CUSSettingsReport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport>>(dynParam.lst.ToString());

                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                if (lst != null)
                {
                    #region Lấy thông tin các template
                    foreach (var item in lst)
                    {
                        var ListCustomerID = new List<int>();
                        if (item.ListCustomer != null)
                            ListCustomerID = item.ListCustomer.Select(c => c.CustomerID).ToList();

                        var ListGroupProductID = new List<int>();
                        if (item.ListGroupProduct != null)
                            ListGroupProductID = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();

                        var ListStockID = new List<int>();
                        if (item.ListStock != null)
                            ListStockID = item.ListStock.Select(c => c.StockID).ToList();

                        var ListGroupOfLocationID = new List<int>();
                        if (item.ListGroupOfLocation != null)
                            ListGroupOfLocationID = item.ListGroupOfLocation.Select(c => c.GroupOfLocationID).ToList();

                        var ListGroupOfPartnerID = new List<int>();
                        if (item.ListGroupOfPartner != null)
                            ListGroupOfPartnerID = item.ListGroupOfPartner.Select(c => c.GroupOfPartnerID).ToList();

                        var ListProvinceID = new List<int>();
                        if (item.ListProvince != null)
                            ListProvinceID = item.ListProvince.Select(c => c.ProvinceID).ToList();

                        var ListOrderRoutingID = new List<int>();
                        if (item.ListOrderRouting != null)
                            ListOrderRoutingID = item.ListOrderRouting.Select(c => c.RoutingID).ToList();

                        var ListOPSRoutingID = new List<int>();
                        if (item.ListOPSRouting != null)
                            ListOPSRoutingID = item.ListOPSRouting.Select(c => c.RoutingID).ToList();

                        if (ListCustomerID.Count > 0)
                        {
                            CUSSettingsReport_Summary sum = new CUSSettingsReport_Summary();
                            sum.File = new CATFile();
                            sum.File.FileName = item.FileName;
                            sum.File.FilePath = item.FilePath;
                            sum.File.FileExt = "";
                            if (sum.File.FileName.LastIndexOf(".") > 0)
                                sum.File.FileExt = sum.File.FileName.Substring(sum.File.FileName.LastIndexOf("."), sum.File.FileName.Length - sum.File.FileName.LastIndexOf("."));

                            CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                            filter.DateFrom = dtfrom;
                            filter.DateTo = dtto;
                            filter.ListCustomerID = ListCustomerID;
                            filter.ListGroupProductID = ListGroupProductID;
                            filter.ListStockID = ListStockID;
                            filter.ListGroupOfLocationID = ListGroupOfLocationID;
                            filter.ListGroupOfPartnerID = ListGroupOfPartnerID;
                            filter.ListProvinceID = ListProvinceID;
                            filter.ListOrderRoutingID = ListOrderRoutingID;
                            filter.ListOPSRoutingID = ListOPSRoutingID;
                            filter.IsComplete = item.IsCompleted;
                            filter.IsReceived = item.IsReceived;
                            filter.TypeOfDate = item.TypeOfDate == null ? 0 : item.TypeOfDate.Value;
                            sum.Filter = filter;
                            sum.Setting = item;
                            lstTemplate.Add(sum);
                        }
                        else
                            throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                    }
                    #endregion

                    #region Xuất file
                    if (lstTemplate.Count > 0)
                    {
                        var strFile = "/" + FolderUpload.Export + "DataSummary_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                        FileInfo fileMain = new FileInfo(HttpContext.Current.Server.MapPath(strFile));
                        using (var packageMain = new ExcelPackage(fileMain))
                        {
                            foreach (var item in lstTemplate)
                            {
                                REPDIPL_SettingDownload_Summary_GetWorkSheet(item, packageMain);
                            }
                            packageMain.Save();
                        }
                        return strFile;
                    }
                    else
                        throw new Exception("Không có dữ liệu");
                    
                    #endregion
                }
                else
                    throw new Exception("Vui lòng chọn ít nhất 1 template");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void REPDIPL_SettingDownload_Summary_GetWorkSheet(CUSSettingsReport_Summary template, ExcelPackage packageMain)
        {
            try
            {
                string filePath = string.Empty;
                switch (template.Setting.TypeExport)
                {
                    case 1: filePath = REPDIPL_SettingDownload_Detail(template.Filter, template.File); break;
                    case 2: filePath = REPDIPL_SettingDownload_DetailColumn(template.Filter, template.File); break;
                    case 3: filePath = REPDIPL_SettingDownload_DetailGroupStock(template.Filter, template.File); break;
                    case 4: filePath = REPDIPL_SettingDownload_DetailGroupProduct(template.Filter, template.File); break;
                    case 5: filePath = REPDIPL_SettingDownload_DetailMOQ(template.Filter, template.File); break;
                    case 6: filePath = REPDIPL_SettingDownload_Order(template.Filter, template.File); break;
                    case 7: filePath = REPDIPL_SettingDownload_OrderColumn(template.Filter, template.File); break;
                    case 8: filePath = REPDIPL_SettingDownload_OrderGroupStock(template.Filter, template.File); break;
                    case 9: filePath = REPDIPL_SettingDownload_OrderGroupProduct(template.Filter, template.File); break;
                    case 10: filePath = REPDIPL_SettingDownload_OrderMOQ(template.Filter, template.File); break;
                    case 11: filePath = REPDIPL_SettingDownload_Spotrate(template.Filter, template.File); break;
                }

                if (!string.IsNullOrEmpty(filePath))
                {
                    if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(filePath)))
                    {
                        FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(filePath));
                        using (var package = new ExcelPackage(file))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                                packageMain.Workbook.Worksheets.Add(template.Setting.Name, worksheet);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<DTOREPTRPL_Detail> REPDIPL_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPTRPL_Detail>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_DetailData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public string REPDIPL_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIPLDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "S/p mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SortOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Income]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeReturnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostLoadVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostLoadVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnLoadVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnLoad]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostDepreciation]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostSchedule]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostDriver]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostStation]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalPL]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToCodeCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToNameCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[PODStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationMaster]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[HasCashCollect]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaxWeightCal]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateDN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SortConfigOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SortConfigMaster]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalOrderInDay]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalMasterInDay]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_DetailColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIPLDetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "S/p mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "ProductDescription", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_DetailGroupStock(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailGroupStockData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID, c.StockID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        group.StockID = item.StockID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailGroupStock_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailGroupStockData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID, c.StockID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        group.StockID = item.StockID;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIPL_DetailGroupStock_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "S/p mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "ProductDescription", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_DetailMOQ(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailMOQData(filter);
                });
                if (result.ListColumnMOQ != null)
                {
                    var lsttest = result.ListColumnMOQ.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = lsttest.Select(c => new DTOREPTRPL_ColumnDetail_Group
                    {
                        KeyCode = c.KeyCode
                    }).ToList();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailMOQ_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailMOQData(filter);
                });
                if (result.ListColumnMOQ != null)
                {
                    var lsttest = result.ListColumnMOQ.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = lsttest.Select(c => new DTOREPTRPL_ColumnDetail_Group
                    {
                        KeyCode = c.KeyCode
                    }).ToList();
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIPL_DetailMOQ_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "S/p mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "Cost", "Income", "IncomeQuantity", "IncomeUnitPrice", "CostQuantity", "CostUnitPrice", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnDetail REPDIPL_DetailGroupProduct(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailGroupProductData(filter);
                });

                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailGroupProduct_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnDetailGroupProductData(filter);
                });

                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnDetail_Group group = new DTOREPTRPL_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIPL_DetailGroupProduct_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "S/p mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "ProductDescription", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CardNumber]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Ton]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Quantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new List<DTOREPTRPL_Detail>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_DetailData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailColumnTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnDetailData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.Where(c => c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailGroupStockTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnDetailGroupStockData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.Where(c => c.TOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailMOQTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnDetailMOQData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_MOQ);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_DetailGroupProductTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnDetailGroupProductData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnDetail_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey && c.TOMasterID == item.DITOMasterID && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPTRPL_Order> REPDIPL_Order(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPTRPL_Order>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_OrderData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_Order_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIPLOrder_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TonOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CBMOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "QuantityOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KgOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_OrderColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, OrderGroupProductID = c.OrderGroupProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.OrderGroupProductID = item.OrderGroupProductID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, OrderGroupProductID = c.OrderGroupProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.OrderGroupProductID = item.OrderGroupProductID;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIPLOrderColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TonOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CBMOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "QuantityOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KgOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_OrderGroupStock(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderGroupStockData(filter);
                });

                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID, StockID = c.StockID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        group.StockID = item.StockID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderGroupStock_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderGroupStockData(filter);
                });

                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID, StockID = c.StockID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        group.StockID = item.StockID;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIPL_OrderGroupStock_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TonOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CBMOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "QuantityOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KgOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nhĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_OrderMOQ(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderMOQData(filter);
                });

                if (result.ListColumnMOQ != null)
                {
                    //IEnumerable<DTOREPTRPL_ColumnDetail_Group> list = result.ListColumn.Select(c => new DTOREPTRPL_ColumnDetail_Group { StockGroupOfProductCode = c.StockGroupOfProductCode, StockID = c.StockID, GroupOfProductID = c.GroupOfProductID });
                    var lsttest = result.ListColumnMOQ.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    //result.ListColumnKey = result.ListColumn.Select(c => new DTOREPTRPL_ColumnDetail_Group { StockGroupOfProductCode = c.StockGroupOfProductCode, StockID = c.StockID, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();

                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderMOQ_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderMOQData(filter);
                });

                if (result.ListColumnMOQ != null)
                {
                    //IEnumerable<DTOREPTRPL_ColumnDetail_Group> list = result.ListColumn.Select(c => new DTOREPTRPL_ColumnDetail_Group { StockGroupOfProductCode = c.StockGroupOfProductCode, StockID = c.StockID, GroupOfProductID = c.GroupOfProductID });
                    var lsttest = result.ListColumnMOQ.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    //result.ListColumnKey = result.ListColumn.Select(c => new DTOREPTRPL_ColumnDetail_Group { StockGroupOfProductCode = c.StockGroupOfProductCode, StockID = c.StockID, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();

                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIPL_OrderMOQ_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TonOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CBMOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "QuantityOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KgOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] { "Cost", "Income", "IncomeQuantity", "IncomeUnitPrice", "CostQuantity", "CostUnitPrice", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPTRPL_ColumnOrder REPDIPL_OrderGroupProduct(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderGroupProductData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderGroupProduct_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_ColumnOrderGroupProductData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPTRPL_ColumnOrder_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPTRPL_ColumnOrder_Group group = new DTOREPTRPL_ColumnOrder_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIPL_OrderGroupProduct_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lêCước b.x lên chin thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên trả về thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú thu nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x lên chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước b.x xuống trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x xuống trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá b.x lên trả về chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi mã nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "B.x lên trả về chi nhà xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chi nhập tay"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cước trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TonOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CBMOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "QuantityOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KgOrder"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnDate"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "PL"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự đơn hàng trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thứ tự chuyến trong tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng đơn hàng trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến trong ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn","PODStatus", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceReturnDate", "ProductCode", "ProductName", "IncomeUnitPrice", "IncomeQuantity", "Income",
        "IncomeUnLoadUnitPrice", "IncomeUnLoadQuantity", "IncomeUnLoad", "IncomeLoadUnitPrice", "IncomeLoadQuantity", "IncomeLoad", "IncomeReturnUnitPrice",
        "IncomeReturnQuantity", "IncomeReturn", "IncomeReturnUnLoadUnitPrice", "IncomeReturnUnLoadQuantity", "IncomeReturnUnLoad", "IncomeReturnLoadUnitPrice",
        "IncomeReturnLoadQuantity", "IncomeReturnLoad", "IncomeManual", "IncomeManualUnitPrice", "IncomeManualQuantity", "IncomeManualNote", "CostUnitPrice", "CostQuantity",
        "Cost", "CostUnLoadUnitPrice", "CostUnLoadQuantity", "CostUnLoad", "CostUnLoadVendorCode", "CostUnLoadVendorName",
        "CostLoadUnitPrice", "CostLoadQuantity", "CostLoad", "CostLoadVendorCode", "CostLoadVendorName", "CostReturnUnitPrice", "CostReturnQuantity", "CostReturn", "CostReturnUnLoadUnitPrice", "CostReturnUnLoadQuantity",
        "CostReturnUnLoad", "CostReturnUnLoadVendorCode", "CostReturnUnLoadVendorName", "CostReturnLoadUnitPrice", "CostReturnLoadQuantity", "CostReturnLoad",
        "CostReturnLoadVendorCode", "CostReturnLoadVendorName", "CostManual", "CostManualUnitPrice", "CostManualQuantity", "CostManualNote",
        "IncomeTrouble", "CostTrouble", "IncomeEx", "CostEx", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "HasCashCollect"};

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[SortOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnUnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoad]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReturnLoadVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManual]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostManualNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDriver]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SortConfigMaster]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOrderInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalMasterInDay]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPTRPL_Spotrate> REPDIPL_Spotrate(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPTRPL_Spotrate>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPL_SpotrateData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_Spotrate_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIPLSpotrate_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "STT Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thành tiền"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceReturnNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghu chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/h 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số Đ/đ giao hàng theo Đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SortOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Price]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[PODStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationMaster]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationMasterDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationOrder]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationOrderDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[HasCashCollect]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new List<DTOREPTRPL_Order>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_OrderData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Order);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderColumnTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnOrderData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Order);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.Where(c => c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderGroupStockTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnOrderGroupStockData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Order);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderMOQTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnOrderMOQData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Order);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_MOQ);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumnMOQ.FirstOrDefault(c => c.KeyCode == groupKey && c.OrderGroupProductID == item.OrderGroupProductID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderGroupProductTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lststockid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lststockid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPTRPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.ListGroupProductID = lstgroupid;
                filter.ListStockID = lststockid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIPL_ColumnOrderGroupProductData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Order);
                        var typePropGroup = typeof(DTOREPTRPL_ColumnOrder_Group);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }


                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey && c.OrderID == item.OrderID && c.LocationToID == item.LocationToID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDLKPI

        public string REPDIKPI_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now.Date;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now.Date;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1).Date;
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1).Date;
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();
                    var lstgroupid = new List<int>();
                    if (item.ListGroupProduct != null)
                        lstgroupid = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();
                    var lststockid = new List<int>();
                    if (item.ListStock != null)
                        lststockid = item.ListStock.Select(c => c.StockID).ToList();
                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIKPI_SettingDownload_TimeData(lstcustomerid, lstgroupid, lststockid, dtfrom, dtto, item.IsCompleted, item.TypeOfFilter, itemfile, request);
                            case 2: return REPDIKPI_SettingDownload_OrderData(lstcustomerid, lstgroupid, lststockid, dtfrom, dtto, item.IsCompleted, item.TypeOfFilter, itemfile, request);
                            case 3: return REPDIKPI_SettingDownload_TimeDateData(lstcustomerid, lstgroupid, lststockid, dtfrom, dtto, item.IsCompleted, item.TypeOfFilter, itemfile, request);
                            case 4: return REPDIKPI_SettingDownload_TimeDate_OrderData(lstcustomerid, lstgroupid, lststockid, dtfrom, dtto, item.IsCompleted, item.TypeOfFilter, itemfile, request);

                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOREPDIKPI_Time REPDIKPI_TimeData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
                
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIKPI_TimeDataTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIKPI_TimeData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                        var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey );
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_TimeData_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIKPI_TimeDta_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng điểm chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày gửi đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy "; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đối tác "; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh/Thành điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "FINSort"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CustomerShortName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến nhà phân phối"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời nhà phân phối"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian BD dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian KT dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận chứng từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận chứng từ trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chứng từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên ngắn nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/H 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/H 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c.t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t Đ/H"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] { "IsKPI", "KPIDate", "LeadTime", "Zone", "ReasonName", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[FINSort]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIKPI_SettingDownload_TimeData(List<int> lstcustomerid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, CATFile itemfile, string request)
        {
            var data = new DTOREPDIKPI_Time();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIKPI_TimeData(lstcustomerid, lstgroupid, lstStockID, dtfrom, dtto, isKPI, typeOfFilter, request);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                    var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        public DTOREPDIKPI_Time REPDIKPI_OrderData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_Time_OrderData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIKPI_OrderDataTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIKPI_TimeData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                        var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumnKey.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_OrderData_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_Time_OrderData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIKPI_OrderDta_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CustomerShortName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "FINSort"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "IsKPI", "KPIDate", "LeadTime", "Zone", "ReasonName", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[FINSort]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIKPI_SettingDownload_OrderData(List<int> lstcustomerid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, CATFile itemfile, string request)
        {
            var data = new DTOREPDIKPI_Time();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIKPI_Time_OrderData(lstcustomerid, lstgroupid, lstStockID, dtfrom, dtto, isKPI, typeOfFilter, request);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                    var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey );
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        #region TimeDate
        public DTOREPDIKPI_Time REPDIKPI_TimeDate_Data(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeDate_Data(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIKPI_TimeDateDataTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIKPI_TimeDate_Data(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                        var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_TimeDateData_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeDate_Data(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIKPI_TimeDta_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng điểm chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày gửi đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy "; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm lấy 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đối tác "; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh/Thành điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm giao 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày DN"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "FINSort"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CustomerShortName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến nhà phân phối"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời nhà phân phối"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian BD dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian KT dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận chứng từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận chứng từ trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chứng từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ton trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG chở"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên ngắn nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/H 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú Đ/H 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c.t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t Đ/H"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] { "IsKPI", "KPIDate", "LeadTime", "Zone", "ReasonName", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalLocation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateDN]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[FINSort]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[MaxWeightCal]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIKPI_SettingDownload_TimeDateData(List<int> lstcustomerid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, CATFile itemfile, string request)
        {
            var data = new DTOREPDIKPI_Time();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIKPI_TimeDate_Data(lstcustomerid, lstgroupid, lstStockID, dtfrom, dtto, isKPI, typeOfFilter, request);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                    var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }
        #endregion

        #region OrderDate
        public DTOREPDIKPI_Time REPDIKPI_TimeDate_OrderData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeDate_OrderData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIKPI_TimeDate_OrderDataTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIKPI_TimeDate_OrderData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                        var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumnKey.FirstOrDefault(c => c.KeyCode == groupKey && c.DITOGroupProductID == item.DITOGroupProductID);
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;

                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPL_TimeDate_OrderData_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                List<int> lstStockID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstStockID.ToString());
                int? typeOfFilter = Convert.ToInt32(dynParam.typeOfFilter);
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIKPI_Time();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIKPI_TimeDate_OrderData(lstid, lstgroupid, lstStockID, dtfrom, dtto, false, typeOfFilter, request);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIKPI_Time_KPI>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIKPI_Time_KPI group = new DTOREPDIKPI_Time_KPI();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPDIKPI_OrderDta_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CustomerShortName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "FINSort"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KG yêu cầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng c/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Có thu hộ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "IsKPI", "KPIDate", "LeadTime", "Zone", "ReasonName", "Note" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorShortName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[FINSort]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityOrder]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[HasCashCollect]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIKPI_SettingDownload_TimeDate_OrderData(List<int> lstcustomerid, List<int> lstgroupid, List<int> lstStockID, DateTime dtfrom, DateTime dtto, bool isKPI, int? typeOfFilter, CATFile itemfile, string request)
        {
            var data = new DTOREPDIKPI_Time();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIKPI_TimeDate_OrderData(lstcustomerid, lstgroupid, lstStockID, dtfrom, dtto, isKPI, typeOfFilter, request);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIKPI_Time_Detail);
                    var typePropGroup = typeof(DTOREPDIKPI_Time_KPI);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.FirstOrDefault(c => c.KeyCode == groupKey);
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }
        #endregion

        #endregion

        #region REPDIPOD
        [HttpPost]
        public string REPDIPOD_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();
                    var lstgroupid = new List<int>();
                    if (item.ListGroupProduct != null)
                        lstgroupid = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();
                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIPOD_SettingDownload_Detail(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 2: return REPDIPOD_SettingDownload_DetailColumn(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 3: return REPDIPOD_SettingDownload_DetailPODData(lstcustomerid, lstgroupid, dtfrom, dtto, item.StatusID, itemfile, request);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        private string REPDIPOD_SettingDownload_Detail(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPDIPOD_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPOD_DetailData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIPOD_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        [HttpPost]
        private string REPDIPOD_SettingDownload_DetailPODData(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPDIPOD_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPOD_DetailPODData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIPOD_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }


        [HttpPost]
        private string REPDIPOD_SettingDownload_DetailColumn(List<int> lstcustomerid, List<int> lstgroupid, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPDIPOD_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIPOD_ColumnDetailData(lstcustomerid, lstgroupid, dtfrom, dtto, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIPOD_Detail);
                    var typePropGroup = typeof(DTOREPDIPOD_ColumnDetail_Group);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.TOMasterID == item.TOMasterID && c.OrderID == item.OrderID && c.StockID == item.StockID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        [HttpPost]
        public List<DTOREPDIPOD_Detail> REPDIPOD_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPDIPOD_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPOD_DetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public string REPDIPOD_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIPODDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CMND Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SĐT Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chứng từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú lí do"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày c/t trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Người nhận c.từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 2"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCard]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverTel]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ReasonCancelNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToCodeCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToNameCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PODStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote2]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPDIPOD_Detail> REPDIPOD_DetailPODData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPDIPOD_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPOD_DetailPODData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPOD_DetailPODData_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIPODDetailPODData_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CMND Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SĐT Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chứng từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú lí do"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày c/t trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Người nhận c.từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số Shipment"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số Billing"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCard]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverTel]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ReasonCancelNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToCodeCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[AreaToNameCredit]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PODStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ShipmentNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[BillingNo]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPDIPOD_ColumnDetail REPDIPOD_DetailColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPDIPOD_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIPOD_ColumnDetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPDIPOD_ColumnDetail_Group>();
                    foreach (var item in lsttest)
                    {
                        DTOREPDIPOD_ColumnDetail_Group group = new DTOREPDIPOD_ColumnDetail_Group();
                        group.KeyCode = item.KeyCode;
                        group.GroupOfProductID = item.GroupOfProductID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIPOD_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                List<int> lstgroupid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstgroupid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIOPSPlan_ColumnDetailData(lstid, lstgroupid, dtfrom, dtto, statusID);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, GroupOfProductID = c.GroupOfProductID }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPOPSPlan_ColumnDetail_Group>();
                foreach (var item in lsttest)
                {
                    DTOREPOPSPlan_ColumnDetail_Group group = new DTOREPOPSPlan_ColumnDetail_Group();
                    group.KeyCode = item.KeyCode;
                    group.GroupOfProductID = item.GroupOfProductID;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPDIPODDetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CMND Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SĐT Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hàng đ/t"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Sản phẩm mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chứng từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú lí do"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày c/t trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Người nhận c.từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "InvoiceNote"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chứng từ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TransportModeCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ExternalCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ExternalDate"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "UserDefine1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "UserDefine2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TOMasterNote1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "TOMasterNote2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú đ/h"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 2"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"TonTranfer", "CBMTranfer", "QuantityTranfer", "TonBBGN", "CBMBBGN", "QuantityBBGN", "TonReturn", "CBMReturn", "QuantityReturn", "KgTranfer", "KgBBGN",
        "KgReturn", "InvoiceNote", "InvoiceReturnNote", "InvoiceDate", "InvoiceBy", "InvoiceReturnDate", "ProductCode", "ProductName", "GroupOfProductCode", "GroupOfProductName", "PODStatus", "SOCode", "DNCode"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverCard]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverTel]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DNCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SOCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[StockCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StockAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PartnerCodeName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Address]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfLocationToName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductVendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityTranfer]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityBBGN]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KgReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TonReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CBMReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[QuantityReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ReasonCancelNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceReturnDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupProductRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToCodeCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[AreaToNameCredit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ATA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadStart]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLoadEnd]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[InvoiceNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PODStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TransportModeCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TOMasterNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSGroupNote2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDGroupNote2]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPDIReturn (Công nợ trả về)
        public string REPDIReturn_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();
                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIReturn_SettingDownload_Detail(lstcustomerid, dtfrom, dtto, itemfile, request);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPDIReturn_SettingDownload_Detail(List<int> lstcustomerid, DateTime dtfrom, DateTime dtto, CATFile itemfile, string request)
        {
            var data = new List<DTOREPDIReturn_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIReturn_DetailData(lstcustomerid, dtfrom, dtto, request);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPDIReturn_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        public List<DTOREPDIReturn_Detail> REPDIReturn_DetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPDIReturn_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIReturn_DetailData(lstid, dtfrom, dtto, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPDIReturn_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIReturn_Detail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã đối tác";
                    col++; worksheet.Cells[row, col].Value = "Đối tác";
                    col++; worksheet.Cells[row, col].Value = "Số xe";
                    col++; worksheet.Cells[row, col].Value = "Số chứng từ";
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c/t";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Nhóm sản phẩm";
                    col++; worksheet.Cells[row, col].Value = "Mã hàng";
                    col++; worksheet.Cells[row, col].Value = "Số lượng";
                    col++; worksheet.Cells[row, col].Value = "Tình trạng";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú";
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Số DN";
                    col++; worksheet.Cells[row, col].Value = "Số SO";
                    col++; worksheet.Cells[row, col].Value = "Tài xế";
                    col++; worksheet.Cells[row, col].Value = "SĐT Tài xế";
                    col++; worksheet.Cells[row, col].Value = "CMND";
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Mã NPP";
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối";
                    col++; worksheet.Cells[row, col].Value = "Mã + Tên phân phối";
                    col++; worksheet.Cells[row, col].Value = "Điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường";
                    col++; worksheet.Cells[row, col].Value = "Cung đường";
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode";
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName";
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCodeVEN";
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleNameVEN";
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng";
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng đối tác";
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng đối tác";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "ETD";
                    col++; worksheet.Cells[row, col].Value = "ETA";
                    col++; worksheet.Cells[row, col].Value = "ATD";
                    col++; worksheet.Cells[row, col].Value = "ATA";
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH";
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH";
                    col++; worksheet.Cells[row, col].Value = "ExternalCode";
                    col++; worksheet.Cells[row, col].Value = "ExternalDate";
                    col++; worksheet.Cells[row, col].Value = "UserDefine1";
                    col++; worksheet.Cells[row, col].Value = "UserDefine2";
                    col++; worksheet.Cells[row, col].Value = "TOMasterNote1";
                    col++; worksheet.Cells[row, col].Value = "TOMasterNote2";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú đ/h";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 1";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú c/t đơn hàng 2";

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[GroupProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExtReturnStatusName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverTel]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCard]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCodeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCodeVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleNameVEN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductVendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupNote2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDGroupNote2]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPCOOPSPlan
        public string REPCOOPSPlan_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();

                    var listServiceOfOrderID = new List<int>();
                    if (item.ListServiceOfOrder != null)
                        listServiceOfOrderID = item.ListServiceOfOrder.Select(c => c.ServiceOfOrderID).ToList();

                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPCOOPSPlan_SettingDownload_Detail(lstcustomerid, listServiceOfOrderID, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 2: return REPCOOPSPlan_SettingDownload_DetailColumn(lstcustomerid, listServiceOfOrderID, dtfrom, dtto, item.StatusID, itemfile, request);
                            case 3: return REPCOOPSPlan_SettingDownload_Order(lstcustomerid, listServiceOfOrderID, dtfrom, dtto, item.StatusID, itemfile, request);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPCOOPSPlan_SettingDownload_Detail(List<int> lstcustomerid, List<int> listServiceOfOrderID, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPCOOPSPlan_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOOPSPlan_DetailData(lstcustomerid, dtfrom, dtto, statusID, listServiceOfOrderID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOOPSPlan_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPCOOPSPlan_SettingDownload_DetailColumn(List<int> lstcustomerid, List<int> listServiceOfOrderID, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new DTOREPCOOPSPlan_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOOPSPlan_ColumnDetailData(lstcustomerid, dtfrom, dtto, statusID, listServiceOfOrderID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOOPSPlan_ColumnDetail_Data);
                    var typePropGroup = typeof(DTOREPCOOPSPlan_ColumnDetail_Container);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.COTOMasterID == item.COTOMasterID && c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPCOOPSPlan_SettingDownload_Order(List<int> lstcustomerid, List<int> listServiceOfOrderID, DateTime dtfrom, DateTime dtto, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPCOOPSPlan_Order>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOOPSPlan_OrderData(lstcustomerid, dtfrom, dtto, statusID, listServiceOfOrderID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOOPSPlan_Order);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }
        
        public List<DTOREPCOOPSPlan_Detail> REPCOOPSPlan_DetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPCOOPSPlan_Detail>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOOPSPlan_DetailData(lstid, dtfrom, dtto, statusID, null);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPCOOPSPlan_ColumnDetail REPCOOPSPlan_ColumnDetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOOPSPlan_ColumnDetailData(lstid, dtfrom, dtto, statusID, null);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPCOOPSPlan_ColumnDetail_Container>();
                foreach (var item in lsttest)
                {
                    DTOREPCOOPSPlan_ColumnDetail_Container group = new DTOREPCOOPSPlan_ColumnDetail_Container();
                    group.KeyCode = item.KeyCode;
                    result.ListColumnKey.Add(group);
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOOPSPlan_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPCOOPSPlan_Detail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c tới kho đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 4"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 5"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 6"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 7"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 8"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 9"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Miễn kiểm hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian gửi tờ khai kiểm hoá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng hóa";
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng hóa";
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa mô tả";
                    col++; worksheet.Cells[row, col].Value = "Trọng tải";

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]";
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ContainerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[COMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TelNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DrivingLicense]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerETDRequest]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerETARequest]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IntReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[LocationFromCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine4]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine5]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine6]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine7]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine8]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine9]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CutOffTime]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETARequest]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TripNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfWAInspectionStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InspectionDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ORDContainerTon]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOOPSPlan_ColumnDetail_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());

                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOOPSPlan_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOOPSPlan_ColumnDetailData(lstid, dtfrom, dtto, statusID, null);
                });

                var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                result.ListColumnKey = new List<DTOREPCOOPSPlan_ColumnDetail_Container>();
                foreach (var item in lsttest)
                {
                    DTOREPCOOPSPlan_ColumnDetail_Container group = new DTOREPCOOPSPlan_ColumnDetail_Container();
                    group.KeyCode = item.KeyCode;
                    result.ListColumnKey.Add(group);
                }

                string file = "/" + FolderUpload.Export + "ExportREPCOOPSPlan_ColumnDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c tới kho đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng đ/h"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 4"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 5"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 6"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 7"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 8"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 9"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Miễn kiểm hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian gửi tờ khai kiểm hoá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng hóa";
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng hóa";
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa mô tả";
                    col++; worksheet.Cells[row, col].Value = "Trọng tải";

                    string[] arrayColumn = new string[] { "PackingCode", "Quantity" };
                    string[] arrayColumnTilte = new string[] { "Loại cont", "Số lượng" };
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title1 = "[" + group.KeyCode + '-' + arrayColumnTilte[i] + "]";
                                col++; worksheet.Cells[row - 1, col].Value = title1; worksheet.Column(col).Width = 25;
                                var title2 = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                worksheet.Cells[row, col].Value = title2; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ContainerNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[COMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TelNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DrivingLicense]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerETDRequest]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerETARequest]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IntReturn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine3]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine4]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine5]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine6]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine7]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine8]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine9]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CutOffTime]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETARequest]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TypeOfContainerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TripNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TypeOfWAInspectionStatus]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[InspectionDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[GroupOfProductDescription]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ORDContainerTon]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPCOOPSPlan_Order> REPCOOPSPlan_OrderData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                int statusID = Convert.ToInt32(dynParam.statusID.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPCOOPSPlan_Order>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOOPSPlan_OrderData(lstid, dtfrom, dtto, statusID, null);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOOPSPlan_Order_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPCOOPSPlan_Order_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên nhà v/t rút gọn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên k/h rút gọn"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Điểm trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 4"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 5"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 6"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 7"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 8"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Định nghĩa 9"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số seal 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    //col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký xe"; worksheet.Column(col).Width = 20;


                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]";
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ContainerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[COMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[LocationFromCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CutOffTime]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETARequest]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TripNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PackingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RegWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegCapacity]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPCOPL
        public string REPCOPL_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    var ListCustomerID = new List<int>();
                    if (item.ListCustomer != null)
                        ListCustomerID = item.ListCustomer.Select(c => c.CustomerID).ToList();

                    var ListGroupProductID = new List<int>();
                    if (item.ListGroupProduct != null)
                        ListGroupProductID = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();

                    var ListStockID = new List<int>();
                    if (item.ListStock != null)
                        ListStockID = item.ListStock.Select(c => c.StockID).ToList();

                    var ListGroupOfLocationID = new List<int>();
                    if (item.ListGroupOfLocation != null)
                        ListGroupOfLocationID = item.ListGroupOfLocation.Select(c => c.GroupOfLocationID).ToList();

                    var ListGroupOfPartnerID = new List<int>();
                    if (item.ListGroupOfPartner != null)
                        ListGroupOfPartnerID = item.ListGroupOfPartner.Select(c => c.GroupOfPartnerID).ToList();

                    var ListProvinceID = new List<int>();
                    if (item.ListProvince != null)
                        ListProvinceID = item.ListProvince.Select(c => c.ProvinceID).ToList();

                    var ListServiceOfOrderID = new List<int>();
                    if (item.ListServiceOfOrder != null)
                        ListServiceOfOrderID = item.ListServiceOfOrder.Select(c => c.ServiceOfOrderID).ToList();

                    if (ListCustomerID.Count > 0)
                    {
                        CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                        filter.DateFrom = dtfrom;
                        filter.DateTo = dtto;
                        filter.ListCustomerID = ListCustomerID;
                        filter.ListGroupProductID = ListGroupProductID;
                        filter.ListStockID = ListStockID;
                        filter.ListGroupOfLocationID = ListGroupOfLocationID;
                        filter.ListGroupOfPartnerID = ListGroupOfPartnerID;
                        filter.ListProvinceID = ListProvinceID;
                        filter.ListServiceOfOrderID = ListServiceOfOrderID;
                        filter.Request = request;
                        filter.IsComplete = item.IsCompleted;
                        filter.IsReceived = item.IsReceived;
                        switch (item.TypeExport)
                        {
                            case 1: return REPCOPL_SettingDownload_Detail(filter, itemfile);
                            case 2: return REPCOPL_SettingDownload_DetailColumn(filter, itemfile);

                            case 3: return REPCOPL_SettingDownload_Order(filter, itemfile);
                            case 4: return REPCOPL_SettingDownload_OrderColumn(filter, itemfile);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private string REPCOPL_SettingDownload_Detail(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new List<DTOREPCOPL_Detail>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOPL_DetailData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOPL_Detail);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPCOPL_SettingDownload_DetailColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPCOPL_ColumnDetail();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOPL_ColumnDetailData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOPL_Detail);
                    var typePropGroup = typeof(DTOREPCOPL_ColumnDetail_Container);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.COTOMasterID == item.COTOMasterID && c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }


        private string REPCOPL_SettingDownload_Order(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new List<DTOREPCOPL_Order>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOPL_OrderData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOPL_Order);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        private string REPCOPL_SettingDownload_OrderColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            var data = new DTOREPCOPL_ColumnOrder();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPCOPL_ColumnOrderData(filter);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                    Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPCOPL_Order);
                    var typePropGroup = typeof(DTOREPCOPL_ColumnOrder_Container);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        if (str.Split('-').Length == 1)
                                        {
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                        else
                                        {
                                            string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                            string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                            try
                                            {
                                                var prop = typePropGroup.GetProperty(strLast);
                                                if (prop != null)
                                                {
                                                    dicPropGroup.Add(col, prop);
                                                    dicPropGroupKey.Add(col, strFirst);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.ListData.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                }
                            }
                        }

                        rowEnd = rowStart + data.ListData.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data.ListData)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var prop in dicPropGroup)
                            {
                                var groupKey = dicPropGroupKey[prop.Key];
                                var group = data.ListColumn.Where(c => c.OrderID == item.OrderID && c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.KeyCode == groupKey).FirstOrDefault();
                                if (group != null)
                                {
                                    var val = prop.Value.GetValue(group);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }

                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }

        public List<DTOREPCOPL_Detail> REPCOPL_DetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPCOPL_Detail>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_DetailData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPCOPL_ColumnDetail REPCOPL_ColumnDetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_ColumnDetailData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, PackingID = c.PackingID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPCOPL_ColumnDetail_Container>();
                    foreach (var item in lsttest)
                    {
                        DTOREPCOPL_ColumnDetail_Container group = new DTOREPCOPL_ColumnDetail_Container();
                        group.KeyCode = item.KeyCode;
                        group.PackingID = item.PackingID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOREPCOPL_Order> REPCOPL_OrderData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new List<DTOREPCOPL_Order>();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_OrderData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOREPCOPL_ColumnOrder REPCOPL_ColumnOrderData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_ColumnOrderData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode, PackingID = c.PackingID }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPCOPL_ColumnOrder_Container>();
                    foreach (var item in lsttest)
                    {
                        DTOREPCOPL_ColumnOrder_Container group = new DTOREPCOPL_ColumnOrder_Container();
                        group.KeyCode = item.KeyCode;
                        group.PackingID = item.PackingID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOPL_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPCOPL_Detail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Số Container";
                    col++; worksheet.Cells[row, col].Value = "Số chuyến";
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường";
                    col++; worksheet.Cells[row, col].Value = "Cung đường";
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chặng";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu";
                    col++; worksheet.Cells[row, col].Value = "Cước thu";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Chi phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi";
                    col++; worksheet.Cells[row, col].Value = "Cước chi";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Tổng thu";
                    col++; worksheet.Cells[row, col].Value = "Tổng chi";
                    col++; worksheet.Cells[row, col].Value = "PL";
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn";
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá cont";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH";
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến";
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "KM";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú cont";
                    col++; worksheet.Cells[row, col].Value = "Cung đường khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Loại cont";
                    col++; worksheet.Cells[row, col].Value = "Tỉ lệ doanh thu";
                    col++; worksheet.Cells[row, col].Value = "Số seal 1";
                    col++; worksheet.Cells[row, col].Value = "Số seal 2";
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch";
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục thu";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục chi";
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số Khối đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ chi"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContainerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[COMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StatusOfCOContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Income]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalPL]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSContainerRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PackingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PercentPLIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractTermIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractTermCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CutOffTime]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETARequest]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TripNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeServiceQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeServiceUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeService]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostServiceQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostServiceUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostService]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOPL_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOPL_ColumnDetail();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_ColumnDetailData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPCOPL_ColumnDetail_Container>();
                    foreach (var item in lsttest)
                    {
                        DTOREPCOPL_ColumnDetail_Container group = new DTOREPCOPL_ColumnDetail_Container();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPCOPLDetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Số Container";
                    col++; worksheet.Cells[row, col].Value = "Số chuyến";
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường";
                    col++; worksheet.Cells[row, col].Value = "Cung đường";
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chặng";
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu";
                    col++; worksheet.Cells[row, col].Value = "Cước thu";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Chi phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi";
                    col++; worksheet.Cells[row, col].Value = "Cước chi";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Tổng thu";
                    col++; worksheet.Cells[row, col].Value = "Tổng chi";
                    col++; worksheet.Cells[row, col].Value = "PL";
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn";
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá cont";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH";
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến";
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "KM";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú cont";
                    col++; worksheet.Cells[row, col].Value = "Cung đường khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Loại cont";
                    col++; worksheet.Cells[row, col].Value = "Tỉ lệ doanh thu";
                    col++; worksheet.Cells[row, col].Value = "Số seal 1";
                    col++; worksheet.Cells[row, col].Value = "Số seal 2";
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch";
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục thu";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục chi";
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ chi"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "Cost", "CostEx", "CostQuantity", "CostTrouble", "CostUnitPrice", "Income", "IncomeEx", "IncomeQuantity", "IncomeTrouble", "IncomeUnitPrice", "PackingCode", "GroupOfProductName", "Description", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "IncomeServiceQuantity", "IncomeServiceUnitPrice", "IncomeService", "CostServiceQuantity", "CostServiceUnitPrice", "CostService" };
                    string[] arrayColumnRS = new string[] { "Chi phí v.chuyển", "Chi phí phụ thu", "Chi số lượng", "Chi phí phát sinh", "Chi đơn giá", "Doanh thu", "Thu phụ thu", "Thu số lượng", "Thu phát sinh", "Thu đơn giá", "Loại cont", "Nhóm hàng", "Mô tả nhóm hàng", "Chi phí khấu hao", "Chi phí hàng tháng", "Chi phí tài xế", "Chi phí trạm", "Số lượng thu của dịch vụ", "Giá thu của dịch vụ", "Dịch vụ thu", "Số lượng chi của dịch vụ", "Giá chi của dịch vụ", "Dịch vụ chi"};
                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                var title1 = "[" + group.KeyCode + '-' + arrayColumnRS[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                                worksheet.Cells[row - 1, col].Value = title1; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContainerNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[COMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StatusOfCOContainerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContainerRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PackingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PercentPLIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine3]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContractTermIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContractTermCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CutOffTime]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETARequest]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TypeOfContainerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TripNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeServiceQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeServiceUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeService]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostServiceQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostServiceUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostService]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOPL_OrderColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPCOPL_ColumnOrder();
                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOPL_ColumnOrderData(filter);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPCOPL_ColumnOrder_Container>();
                    foreach (var item in lsttest)
                    {
                        DTOREPCOPL_ColumnOrder_Container group = new DTOREPCOPL_ColumnOrder_Container();
                        group.KeyCode = item.KeyCode;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPCOPLOrderColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Số Container";
                    col++; worksheet.Cells[row, col].Value = "Số chuyến";
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường";
                    col++; worksheet.Cells[row, col].Value = "Cung đường";
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chặng";
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu";
                    col++; worksheet.Cells[row, col].Value = "Cước thu";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Chi phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi";
                    col++; worksheet.Cells[row, col].Value = "Cước chi";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Tổng thu";
                    col++; worksheet.Cells[row, col].Value = "Tổng chi";
                    col++; worksheet.Cells[row, col].Value = "PL";
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn";
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá cont";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH";
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến";
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "KM";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú cont";
                    col++; worksheet.Cells[row, col].Value = "Cung đường khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Loại cont";
                    col++; worksheet.Cells[row, col].Value = "Tỉ lệ doanh thu";
                    col++; worksheet.Cells[row, col].Value = "Số seal 1";
                    col++; worksheet.Cells[row, col].Value = "Số seal 2";
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch";
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục thu";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục chi";
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ chi"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "Cost", "CostEx", "CostQuantity", "CostTrouble", "CostUnitPrice", "Income", "IncomeEx", "IncomeQuantity", "IncomeTrouble", "IncomeUnitPrice", "PackingCode", "GroupOfProductName", "Description", "CostDepreciation", "CostSchedule", "CostDriver", "CostStation", "IncomeServiceQuantity", "IncomeServiceUnitPrice", "IncomeService", "CostServiceQuantity", "CostServiceUnitPrice", "CostService" };
                    string[] arrayColumnRS = new string[] { "Chi phí v.chuyển", "Chi phí phụ thu", "Chi số lượng", "Chi phí phát sinh", "Chi đơn giá", "Doanh thu", "Thu phụ thu", "Thu số lượng", "Thu phát sinh", "Thu đơn giá", "Loại cont", "Nhóm hàng", "Mô tả nhóm hàng", "Chi phí khấu hao", "Chi phí hàng tháng", "Chi phí tài xế", "Chi phí trạm", "Số lượng thu của dịch vụ", "Giá thu của dịch vụ", "Dịch vụ thu", "Số lượng chi của dịch vụ", "Giá chi của dịch vụ", "Dịch vụ chi" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                var title1 = "[" + group.KeyCode + '-' + arrayColumnRS[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                                worksheet.Cells[row - 1, col].Value = title1; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContainerNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[COMasterCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[RequestDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CUSRoutingName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VendorName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CustomerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[StatusOfCOContainerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Income]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostTrouble]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Cost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExCostName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostExNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalPL]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedBy]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderCreatedDate]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSDateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContract]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KM]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationFromAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToAddress]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToProvince]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationToDistrict]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OPSContainerRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerNote]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[OrderContainerRouting]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PackingCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[PercentPLIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SealNo2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETD]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ETA]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateFromLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToCome]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[DateToLeave]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ExternalDate]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine1]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine2]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[UserDefine3]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ServiceOfOrderCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContractTermIncome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ContractTermCost]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CutOffTime]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[ETARequest]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TypeOfContainerName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CarrierName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationDepotName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[LocationReturnName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TripNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[VesselName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegWeight]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[RegCapacity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeServiceQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeServiceUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IncomeService]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostServiceQuantity]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostServiceUnitPrice]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostService]"; worksheet.Column(col1).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPCOPL_Order_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPCOPL_Order_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Số Container";
                    col++; worksheet.Cells[row, col].Value = "Số chuyến";
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường";
                    col++; worksheet.Cells[row, col].Value = "Cung đường";
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Tình trạng chặng";
                    col++; worksheet.Cells[row, col].Value = "Thu phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu";
                    col++; worksheet.Cells[row, col].Value = "Cước thu";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu";
                    col++; worksheet.Cells[row, col].Value = "Chi phát sinh";
                    col++; worksheet.Cells[row, col].Value = "Giá chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi";
                    col++; worksheet.Cells[row, col].Value = "Cước chi";
                    col++; worksheet.Cells[row, col].Value = "Giá phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Số lượng phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Cước phụ chi";
                    col++; worksheet.Cells[row, col].Value = "Loại phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phụ thu chi";
                    col++; worksheet.Cells[row, col].Value = "Tổng thu";
                    col++; worksheet.Cells[row, col].Value = "Tổng chi";
                    col++; worksheet.Cells[row, col].Value = "PL";
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn";
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá cont";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH";
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng";
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến";
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "KM";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy hàng";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm lấy";
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao";
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến";
                    col++; worksheet.Cells[row, col].Value = "Ghi chú cont";
                    col++; worksheet.Cells[row, col].Value = "Cung đường khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Loại cont";
                    col++; worksheet.Cells[row, col].Value = "Tỉ lệ doanh thu";
                    col++; worksheet.Cells[row, col].Value = "Số seal 1";
                    col++; worksheet.Cells[row, col].Value = "Số seal 2";
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm đi";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm giao";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch";
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2";
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ thu";
                    col++; worksheet.Cells[row, col].Value = "Loại dịch vụ chi";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục thu";
                    col++; worksheet.Cells[row, col].Value = "Phụ lục chi";
                    col++; worksheet.Cells[row, col].Value = "CutOffTime"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày giờ trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Loại container"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá thu của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá chi của dịch vụ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Dịch vụ chi"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContainerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[COMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StatusOfCOContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Income]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostEx]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExCostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostExNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalPL]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSContainerRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PackingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PercentPLIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractTermIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractTermCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CutOffTime]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETARequest]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TripNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeServiceQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeServiceUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeService]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostServiceQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostServiceUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostService]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region MAP
        [HttpPost]
        public DTOCartoDB REP_CartoDB_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOCartoDB();
                string request = dynParam.request.ToString();
                DateTime DateFrom = Convert.ToDateTime(dynParam.DateFrom.ToString());
                DateTime DateTo = Convert.ToDateTime(dynParam.DateTo.ToString());
                List<int> lstCustomerID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstCustomerID.ToString());
                int provinceID = Convert.ToInt32(dynParam.provinceID.ToString());
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CartoDB_List(request, lstCustomerID, DateFrom, DateTo, provinceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOOtherVehiclePosition> REP_CartoDB_VehicleRoute_List(dynamic dynParam)
        {
            try
            {
                DateTime DateFrom = Convert.ToDateTime(dynParam.DateFrom.ToString());
                DateTime DateTo = Convert.ToDateTime(dynParam.DateTo.ToString());
                var result = new List<DTOOtherVehiclePosition>();
                var lstVehicleCode = new List<string>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    lstVehicleCode = sv.CartoDB_Vehicle_List(DateFrom, DateTo);
                });
                ServiceFactory.SVOther((ISVOther sv) =>
                {
                    foreach (var vehicleCode in lstVehicleCode)
                    {
                        result.AddRange(sv.VehiclePosition_Get(vehicleCode, DateFrom, DateTo));
                    }
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<string> REP_CartoDB_Vehicle_List(dynamic dynParam)
        {
            try
            {
                DateTime DateFrom = Convert.ToDateTime(dynParam.DateFrom.ToString());
                DateTime DateTo = Convert.ToDateTime(dynParam.DateTo.ToString());
                var result = new List<string>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CartoDB_Vehicle_List(DateFrom, DateTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPFLMVehiclePlan> REPFLMDriverRole_PlanData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dateFrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dateTo.ToString());
                var result = new List<DTOREPFLMVehiclePlan>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPFLMDriverRole_PlanData(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPFLMVehicleActual> REPFLMDriverRole_ActualData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dateFrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dateTo.ToString());
                var result = new List<DTOREPFLMVehicleActual>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPFLMDriverRole_ActualData(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMDriver_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.FLMDriver_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region REPOwner
        [HttpPost]
        public List<DTOREPOwnerDriverRole> REPOwner_DriverRole(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwnerDriverRole>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_DriverRole(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPOwner_DriverFee> REPOwner_DriverFee(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_DriverFee>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_DriverFee(scheduleID, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPOwner_DriverFee_ColumnDetail REPOwner_DriverFee_ColumnDetailData(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                string request = string.Empty;
                var result = new DTOREPOwner_DriverFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_DriverFee_ColumnDetailData(scheduleID, request);
                });
                if (result.ListSalary != null)
                {
                    var lsttest = result.ListSalary.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListSalaryKey = new List<DTOREPOwner_DriverFee_ColumnDetail_Salary>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_DriverFee_ColumnDetail_Salary group = new DTOREPOwner_DriverFee_ColumnDetail_Salary();
                        group.KeyCode = item.KeyCode;
                        result.ListSalaryKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_DriverFee_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_DriverFee_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khoản lương"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Lương căn bản"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày nghỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày nghỉ còn lại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày làm việc"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày ko làm việc"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày lễ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại ngày"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số ngày"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[FeeBase]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DaysAllowOff]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DaysAllowOffRemain]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DaysWorkInOn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DaysWorkInOff]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DaysWorkInHoliday]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfScheduleFeeCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfScheduleFeeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfScheduleFeeDay]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_DriverFeeColumn_Export(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                string request = string.Empty;
                var result = new DTOREPOwner_DriverFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_DriverFee_ColumnDetailData(scheduleID, request);
                });
                if (result.ListSalary != null)
                {
                    var lsttest = result.ListSalary.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListSalaryKey = new List<DTOREPOwner_DriverFee_ColumnDetail_Salary>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_DriverFee_ColumnDetail_Salary group = new DTOREPOwner_DriverFee_ColumnDetail_Salary();
                        group.KeyCode = item.KeyCode;
                        result.ListSalaryKey.Add(group);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPOwner_DriverFeeColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Họ tên"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Lái/Phụ xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày làm việc"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Phép (nghỉ)"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Phép năm (còn lại)"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày LV tính LCB"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày LV tính LTC"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày LV tính LSP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày LV lễ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Lương cơ bản"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng lương cố định"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng lương chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thưởng/phạt/Cấn trừ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Phụ cấp khác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng lương"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;

                    if (result.ListHeader != null)
                    {
                        foreach (var header in result.ListHeader)
                        {
                            var title = header.DateName;
                            col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 15;
                        }
                    }

                    row = 2;
                    if (result.ListSalaryKey != null)
                    {
                        foreach (var header in result.ListSalaryKey)
                        {
                            var title = "[" + header.KeyCode + "]";
                            col++; worksheet.Cells[row - 1, col].Value = header.KeyCode; worksheet.Column(col).Width = 25;
                            worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[DriverCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[IsAssistant]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalSchedule]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInOn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInOff]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysAllowOffRemain]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInOn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInOff]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInOn]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DaysWorkInHoliday]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[FeeBase]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalScheduleFee]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalDriverFee]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalOther]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalEx]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TotalInCome]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Note]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_DriverFee_Template(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());

                string request = Convert.ToString(dynParam.request.ToString());
                var data = new List<DTOREPOwner_DriverFee>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_DriverFee(scheduleID, request);
                });

                var schedule = new DTOFLMSchedule();
                var dtfrom = schedule.DateFrom.Date;
                var dtto = schedule.DateTo.Date;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    schedule = sv.FLMSchedule_Get(scheduleID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_DriverFee);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Lương tài xế
        public string REPOwner_DriverFee_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_DriverFee_SettingDownload_Detail(itemfile, scheduleID, request);
                        case 2: return REPOwner_DriverFee_SettingDownload_DetailColumn(itemfile, scheduleID, request);

                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_DriverFee_SettingDownload_Detail(CATFile itemfile, int scheduleID, string request)
        {
            try
            {
                var data = new List<DTOREPOwner_DriverFee>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_DriverFee(scheduleID, request);
                });

                var schedule = new DTOFLMSchedule();
                var dtfrom = schedule.DateFrom.Date;
                var dtto = schedule.DateTo.Date;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    schedule = sv.FLMSchedule_Get(scheduleID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_DriverFee);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_DriverFee_SettingDownload_DetailColumn(CATFile itemfile, int scheduleID, string request)
        {
            try
            {
                var data = new DTOREPOwner_DriverFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_DriverFee_ColumnDetailData(scheduleID, request);
                });

                var schedule = new DTOFLMSchedule();
                var dtfrom = schedule.DateFrom.Date;
                var dtto = schedule.DateTo.Date;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    schedule = sv.FLMSchedule_Get(scheduleID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_DriverFee_ColumnDetail_Data);

                        bool isColDate = true;
                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0, colDate = -1;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            int countSplit = str.Split('-').Length;
                                            if (countSplit == 1)
                                            {
                                                try
                                                {
                                                    if (str == "ScheduleDate")
                                                    {
                                                        if (col == worksheet.Dimension.End.Column)
                                                            isColDate = true;
                                                        else
                                                            isColDate = false;

                                                        colDate = col;
                                                    }
                                                    else
                                                    {
                                                        var prop = typeProp.GetProperty(str);
                                                        if (prop != null)
                                                        {
                                                            dicProp.Add(col, prop);
                                                            if (!dicColumn.ContainsKey(str))
                                                                dicColumn.Add(str, col);
                                                            flag = false;
                                                        }
                                                    }
                                                }
                                                catch { }
                                            }
                                            else if (countSplit > 1)
                                            {
                                                dicPropGroupKey.Add(col, str);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (!isColDate) throw new Exception("Cột [ScheduleDate] phải nằm ở cột cuối cùng");

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        headerRow = rowStart - 1;

                        // Thêm danh sách ngày khi cột ScheduleDate > 0
                        if (colDate > 0)
                        {
                            int colDateTemp = colDate;
                            foreach (var itemHeader in data.ListHeader)
                            {
                                worksheet.Cells[headerRow, colDateTemp].Value = itemHeader.Date.ToString("dd/MM");
                                ExcelHelper.CopyStyle(worksheet, headerRow, colDate, headerRow, colDateTemp);
                                colDateTemp++;
                            }
                        }

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroupKey)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListSalary.Where(c => c.DriverID == item.DriverID && c.KeyCode == groupKey);
                                    if (group != null)
                                        worksheet.Cells[row, prop.Key].Value = group.Sum(c => c.Value);
                                    else
                                        worksheet.Cells[row, prop.Key].Value = 0;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                if (colDate > 0)
                                {
                                    int colDateTemp = colDate;
                                    foreach (var itemHeader in data.ListHeader)
                                    {
                                        var val = data.ListDate.FirstOrDefault(c => c.DriverID == item.DriverID && c.Date == itemHeader.Date);
                                        if (val != null)
                                            worksheet.Cells[row, colDateTemp].Value = "X";
                                        else
                                            worksheet.Cells[row, colDateTemp].Value = null;

                                        colDateTemp++;
                                    }
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Chi phí đội xe
        public string REPOwner_VehicleFee_Cost_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_VehicleFee_Cost_SettingDownload_Detail(itemfile, dtfrom, dtto, request);
                        case 2: return REPOwner_VehicleFee_Cost_Container_SettingDownload_Container(itemfile, dtfrom, dtto, request);
                        case 3: return REPOwner_VehicleFee_Cost_SettingDownload_DetailColumn(itemfile, dtfrom, dtto, request);
                        case 4: return REPOwner_MaterialQuota_SettingDownload_Quota(itemfile, dtfrom, dtto, request);
                        

                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Cost_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                var data = new List<DTOREPOwner_Vehicle>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee_Cost(dtfrom, dtto, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Cost_SettingDownload_DetailColumn(CATFile itemfile, DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                var data = new DTOREPOwner_VehicleFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee_Cost_ColumnDetailData(dtfrom, dtto, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_VehicleFee_ColumnDetail_Data);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0, colDate = -1;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            int countSplit = str.Split('-').Length;
                                            if (countSplit == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else if (countSplit > 1)
                                            {
                                                dicPropGroupKey.Add(col, str);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }


                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        headerRow = rowStart - 1;

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroupKey)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListCost.Where(c => c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig && c.KeyCode == groupKey);
                                    if (group != null)
                                        worksheet.Cells[row, prop.Key].Value = group.Sum(c => c.Cost);
                                    else
                                        worksheet.Cells[row, prop.Key].Value = 0;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        // Định mức xe cont
        [HttpPost]
        public List<DTOREPOwner_Vehicle_Container> REPOwner_VehicleFee_Cost_Container(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_Vehicle_Container>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_Cost_Container(dtfrom, dtto, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Cost_Container_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "REPOwner_VehicleFeeCost_Container_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên ngắn của nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên ngắn của khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số điện thoại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GPLX"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cut-off-time"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày lấy rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày trả rỗng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Loại Cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên hãng tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm trả rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hiệu tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tàu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Miễn kiểm hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "T/G gửi tờ khai K.hóa"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ServiceOfOrderIncome"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ServiceOfOrderCost"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại Cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số Cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh/Thành điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận/Huyện điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã giao dịch"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày giao dịch"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày gửi đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày Tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SealNo1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SealNo2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "StatusOfCOContainerCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "StatusOfCOContainerName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 3"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 4"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 5"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 6"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 7"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 8"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định nghĩa 9"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên chi phí"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi phí"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi phí"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TelNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DrivingLicense]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CutOffTime]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeGetEmpty]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[Date_TimeReturnEmpty]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETARequest]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[TypeOfContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CarrierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDepotName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationReturnName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TripNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VesselName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfWAInspectionStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InspectionDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ServiceOfOrderCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[COMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PackingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContainerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationFromAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ExternalDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContainerNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SealNo2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StatusOfCOContainerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StatusOfCOContainerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine4]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine5]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine6]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine7]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine8]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UserDefine9]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Cost_Container_SettingDownload_Container(CATFile itemfile, DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                var data = new List<DTOREPOwner_Vehicle_Container>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee_Cost_Container(dtfrom, dtto, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        // Định mức xăng dầu hàng tháng
        [HttpPost]
        public List<DTOREPOwner_MaterialQuota> REPOwner_MaterialQuota(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_MaterialQuota>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_MaterialQuota(dtfrom, dtto, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_MaterialQuota_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "REPOwner_MaterialQuota_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Nhiên liệu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Định mức"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tấn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm đi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ điểm đến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền"; worksheet.Column(col).Width = 20;
                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[TypeOfPriceDIExCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note3]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note4]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note5]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Total]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_MaterialQuota_SettingDownload_Quota(CATFile itemfile, DateTime dtfrom, DateTime dtto, string request)
        {
            try
            {
                var data = new List<DTOREPOwner_MaterialQuota>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_MaterialQuota(dtfrom, dtto, request);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        // Lợi nhuận xe
        public string REPOwner_VehicleFee_PL_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1);
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1);
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    var ListCustomerID = new List<int>();
                    if (item.ListCustomer != null)
                        ListCustomerID = item.ListCustomer.Select(c => c.CustomerID).ToList();

                    var ListGroupProductID = new List<int>();
                    if (item.ListGroupProduct != null)
                        ListGroupProductID = item.ListGroupProduct.Select(c => c.GroupProductID).ToList();

                    var ListStockID = new List<int>();
                    if (item.ListStock != null)
                        ListStockID = item.ListStock.Select(c => c.StockID).ToList();

                    var ListGroupOfLocationID = new List<int>();
                    if (item.ListGroupOfLocation != null)
                        ListGroupOfLocationID = item.ListGroupOfLocation.Select(c => c.GroupOfLocationID).ToList();

                    var ListGroupOfPartnerID = new List<int>();
                    if (item.ListGroupOfPartner != null)
                        ListGroupOfPartnerID = item.ListGroupOfPartner.Select(c => c.GroupOfPartnerID).ToList();

                    var ListProvinceID = new List<int>();
                    if (item.ListProvince != null)
                        ListProvinceID = item.ListProvince.Select(c => c.ProvinceID).ToList();

                    if (ListCustomerID.Count > 0)
                    {
                        CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                        filter.DateFrom = dtfrom;
                        filter.DateTo = dtto;
                        filter.ListCustomerID = ListCustomerID;
                        filter.ListGroupProductID = ListGroupProductID;
                        filter.ListStockID = ListStockID;
                        filter.ListGroupOfLocationID = ListGroupOfLocationID;
                        filter.ListGroupOfPartnerID = ListGroupOfPartnerID;
                        filter.ListProvinceID = ListProvinceID;
                        filter.Request = request;
                        filter.IsComplete = item.IsCompleted;
                        filter.IsReceived = item.IsReceived;

                        switch (item.TypeExport)
                        {
                            case 1: return REPOwner_VehicleFee_PL_SettingDownload_Detail(filter, itemfile);
                            case 2: return REPOwner_VehicleFee_PL_SettingDownload_DetailColumn(filter, itemfile);
                            case 3: return REPOwner_VehiclePrice_PL_SettingDownload_Detail(filter, itemfile);
                            case 4: return REPOwner_VehiclePrice_PL_SettingDownload_DetailColumn(filter, itemfile);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_PL_SettingDownload_Detail(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            try
            {
                var data = new List<DTOREPOwner_Vehicle>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_PL_SettingDownload_DetailColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            try
            {
                var data = new DTOREPOwner_VehicleFee_PL_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee_ColumnDetailData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_VehicleFee_PL_ColumnDetail_Data);
                        var typePropGroup = typeof(DTOREPOwner_VehicleFee_PL_ColumnDetail_Price);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }


                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        headerRow = rowStart - 1;

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListPrice.Where(c => c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehiclePrice_PL_SettingDownload_Detail(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            try
            {
                var data = new List<DTOREPOwner_Vehicle>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehiclePriceData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehiclePrice_PL_SettingDownload_DetailColumn(CUSSettingsReport_Filter filter, CATFile itemfile)
        {
            try
            {
                var data = new DTOREPOwner_VehicleFee_PL_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehiclePrice_ColumnDetailData(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_VehicleFee_PL_ColumnDetail_Data);
                        var typePropGroup = typeof(DTOREPOwner_VehicleFee_PL_ColumnDetail_Price);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }


                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        headerRow = rowStart - 1;

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", filter.DateFrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", filter.DateTo.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListPrice.Where(c => c.VehicleID == item.VehicleID && c.DateConfig == item.DateConfig && c.KeyCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPOwner_Vehicle> REPOwner_VehicleFee(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_Vehicle>();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPOwner_VehicleFee_PL_ColumnDetail REPOwner_VehicleFee_DetailColumn(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_ColumnDetailData(filter);
                });
                if (result.ListPrice != null)
                {
                    var lsttest = result.ListPrice.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListPriceKey = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_PL_ColumnDetail_Price group = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                        group.KeyCode = item.KeyCode;
                        result.ListPriceKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehicleFeeDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "VehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Khoản chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khoản thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y.cầu"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm g.hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Income]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_ColumnDetailData(filter);
                });
                if (result.ListPrice != null)
                {
                    var lsttest = result.ListPrice.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListPriceKey = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_PL_ColumnDetail_Price group = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                        group.KeyCode = item.KeyCode;
                        result.ListPriceKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehicleFee_DetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "VehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "DateConfig"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] { "Depreciation", "DepreciationReceipt", "Receipt", "Station", "Trouble", "ScheduleFee", "Driver", "Transfer" };

                    row = 2;

                    if (result.ListPriceKey != null)
                    {
                        foreach (var group in result.ListPriceKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Template(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                var data = new List<DTOREPOwner_Vehicle>();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_VehicleFee(filter);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Vehicle);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPOwner_Vehicle> REPOwner_VehiclePriceData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_Vehicle>();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehiclePriceData(filter);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPOwner_VehicleFee_PL_ColumnDetail REPOwner_VehiclePrice_ColumnDetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehiclePrice_ColumnDetailData(filter);
                });
                if (result.ListPrice != null)
                {
                    var lsttest = result.ListPrice.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListPriceKey = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_PL_ColumnDetail_Price group = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                        group.KeyCode = item.KeyCode;
                        result.ListPriceKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehiclePrice_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehiclePriceDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "VehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Khoản chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khoản thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 2"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y.cầu"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm g.hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IncomeQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Income]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note2]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehiclePrice_DetailColumn_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = string.Empty;
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var result = new DTOREPOwner_VehicleFee_PL_ColumnDetail();

                CUSSettingsReport_Filter filter = new CUSSettingsReport_Filter();
                filter.DateFrom = dtfrom;
                filter.DateTo = dtto;
                filter.ListCustomerID = lstid;
                filter.Request = request;

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehiclePrice_ColumnDetailData(filter);
                });
                if (result.ListPrice != null)
                {
                    var lsttest = result.ListPrice.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListPriceKey = new List<DTOREPOwner_VehicleFee_PL_ColumnDetail_Price>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_PL_ColumnDetail_Price group = new DTOREPOwner_VehicleFee_PL_ColumnDetail_Price();
                        group.KeyCode = item.KeyCode;
                        result.ListPriceKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehiclePrice_DetailColumn_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "VehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "DateConfig"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    string[] arrayColumn = new string[] { "Depreciation", "DepreciationReceipt", "Receipt", "Station", "Trouble", "ScheduleFee", "Driver", "Transfer" };

                    row = 2;

                    if (result.ListPriceKey != null)
                    {
                        foreach (var group in result.ListPriceKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Định mức xe tải
        [HttpPost]
        public List<DTOREPOwner_Vehicle> REPOwner_VehicleFee_Cost(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = string.Empty;
                var result = new List<DTOREPOwner_Vehicle>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_Cost(dtfrom, dtto, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPOwner_VehicleFee_ColumnDetail REPOwner_VehicleFee_Cost_ColumnDetailData(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = string.Empty;
                var result = new DTOREPOwner_VehicleFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_Cost_ColumnDetailData(dtfrom, dtto, request);
                });
                if (result.ListCost != null)
                {
                    var lsttest = result.ListCost.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListCostKey = new List<DTOREPOwner_VehicleFee_ColumnDetail_Cost>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_ColumnDetail_Cost cost = new DTOREPOwner_VehicleFee_ColumnDetail_Cost();
                        cost.KeyCode = item.KeyCode;
                        result.ListCostKey.Add(cost);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFee_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehicleFee_Truck_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Khoản chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày y.cầu"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã điểm g.hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Người tạo đơn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tạo đơn"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá c.t chuyến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày vận chuyển"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);


                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostUnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostQuantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Cost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Address]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedBy]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCreatedDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_VehicleFeeColumnDetail_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                string request = string.Empty;
                var result = new DTOREPOwner_VehicleFee_ColumnDetail();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_VehicleFee_Cost_ColumnDetailData(dtfrom, dtto, request);
                });
                if (result.ListCost != null)
                {
                    var lsttest = result.ListCost.Select(c => new { KeyCode = c.KeyCode }).Distinct().ToList();
                    result.ListCostKey = new List<DTOREPOwner_VehicleFee_ColumnDetail_Cost>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_VehicleFee_ColumnDetail_Cost cost = new DTOREPOwner_VehicleFee_ColumnDetail_Cost();
                        cost.KeyCode = item.KeyCode;
                        result.ListCostKey.Add(cost);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPOwner_VehicleFeeColumnDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày áp dụng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Chi phí khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí khấu hao theo xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí sửa chữa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí vật liệu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí đăng kiểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí sửa chữa lớn"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí sửa chữa nhỏ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí trạm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí định mức"; worksheet.Column(col).Width = 20;

                    row = 2;
                    if (result.ListCostKey != null)
                    {
                        foreach (var header in result.ListCostKey)
                        {
                            var title = "[" + header.KeyCode + "]";
                            col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DateConfig]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciation]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostDepreciationReceipt]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReceiptMaintence]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReceiptMaterial]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReceiptRegistry]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReceiptRepairLarge]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostReceiptRepairSmall]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostStationDebit]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[CostQuota]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Quay đầu xe
        [HttpPost]
        public DTOREPOwner_TotalSchedule REPOwner_TotalSchedule(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int?> lstVendorid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int?>>(dynParam.lstVendorid.ToString());
                var result = new DTOREPOwner_TotalSchedule();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_TotalSchedule(dtfrom, dtto, lstVendorid);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_TotalSchedule_Template(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int?> lstVendorid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int?>>(dynParam.lstVendorid.ToString());
                var data = new DTOREPOwner_TotalSchedule();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_TotalSchedule(dtfrom, dtto, lstVendorid);
                });

                var newfile = "/" + FolderUpload.Export + "BaoCaoQuayDauXe" + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(newfile)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(newfile));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(newfile));

                using (var package = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1; int row = 1; int stt = 1;
                    worksheet.Cells[row, col].Value = "Báo cáo hệ số quay đầu xe";
                    worksheet.Cells[row, col].Style.Font.Bold = true;
                    worksheet.Cells[row, col].Style.Font.Size = 14;
                    row = 2;
                    col = 1; worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 10;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đối tác"; worksheet.Column(col).Width = 20;

                    foreach (var item in data.lstDate)
                    {
                        col++; worksheet.Cells[row, col].Value = item.DateName; worksheet.Column(col).Width = 13;
                    }
                    col++; worksheet.Cells[row, col].Value = "Tổng chuyến"; worksheet.Column(col).Width = 13;

                    row = 3;
                    stt = 1;

                    foreach (var item in data.lstVehicleDetail)
                    {
                        col = 1;
                        worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = item.VehicleCode;
                        col++; worksheet.Cells[row, col].Value = item.VendorCode;
                        col++; worksheet.Cells[row, col].Value = item.VendorName;

                        foreach (var itemDate in item.lstDate)
                        {
                            col++; worksheet.Cells[row, col].Value = itemDate.TotalSchedule;
                        }
                        col++; worksheet.Cells[row, col].Value = item.TotalSchedule;

                        row++;
                        stt++;
                    }

                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult REPOwner_Schedule()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Schedule();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Phiếu nhiên liệu
        [HttpPost]
        public DTOREPOwner_Receipt REPOwner_Receipt(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new DTOREPOwner_Receipt();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Receipt(dtfrom, dtto);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { c.MaterialID, c.MaterialCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPOwner_Receipt_Detail>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_Receipt_Detail group = new DTOREPOwner_Receipt_Detail();
                        group.MaterialCode = item.MaterialCode;
                        group.MaterialID = item.MaterialID;
                        result.ListColumnKey.Add(group);
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Receipt_Export(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new DTOREPOwner_Receipt();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Receipt(dtfrom, dtto);
                });
                if (result.ListColumn != null)
                {
                    var lsttest = result.ListColumn.Select(c => new { c.MaterialID, c.MaterialCode }).Distinct().ToList();
                    result.ListColumnKey = new List<DTOREPOwner_Receipt_Detail>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_Receipt_Detail group = new DTOREPOwner_Receipt_Detail();
                        group.MaterialCode = item.MaterialCode;
                        group.MaterialID = item.MaterialID;
                        result.ListColumnKey.Add(group);
                    }
                }

                string file = "/" + FolderUpload.Export + "ExportREPOwner_Receipt_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số phiếu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà cung cấp"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] { "Quantity", "UnitPrice", "Total", "Note" };
                    string[] arrayColumnRS = new string[] { "Số lượng", "Đơn giá", "Thành tiền", "Ghi chú" };

                    row = 2;

                    if (result.ListColumnKey != null)
                    {
                        foreach (var group in result.ListColumnKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = group.MaterialCode + '-' + arrayColumnRS[i];
                                col++; worksheet.Cells[row - 1, col].Value = title; worksheet.Column(col).Width = 25;
                                title = "[" + group.MaterialCode + '-' + arrayColumn[i] + "]";
                                worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[VehicleCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[Date]"; worksheet.Column(col1).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col1, ExcelHelper.FormatDDMMYYYY);
                    col1++; worksheet.Cells[row, col1].Value = "[ReceiptCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[SupplierName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverCode]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[DriverName]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMStart]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[KMEnd]"; worksheet.Column(col1).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOREPOwner_ReceiptMaterial> REPOwner_ReceiptDetail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwner_ReceiptMaterial>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Receipt_Detail(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerWorkOrder_ReceiptDetail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_ReceiptDetail_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số phiếu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà cung cấp"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhiên liệu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiên liệu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ReceiptCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SupplierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaterialCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaterialName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UnitPrice]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerWorkOrder_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    if (item.TypeOfReceipt == 1)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPOwner_Receipt_SettingDownload_Detail(itemfile, dtfrom, dtto);
                            case 2: return REPOwner_Receipt_SettingDownload_DetailColumn(itemfile, dtfrom, dtto);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    if (item.TypeOfReceipt == 2)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPOwner_Repair_SettingDownload_Detail(itemfile, dtfrom, dtto);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    throw new Exception("Vui lòng thiết lập loại phiếu xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Receipt_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPOwner_ReceiptMaterial>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Receipt_Detail(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_ReceiptMaterial);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Receipt_SettingDownload_DetailColumn(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new DTOREPOwner_Receipt();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Receipt(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Receipt_Data);
                        var typePropGroup = typeof(DTOREPOwner_Receipt_Detail);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }


                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        headerRow = rowStart - 1;

                        if (data.ListData.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListData.Count - 1, 1, copyrow + data.ListData.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListData.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListData.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.ListData.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListData.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListData)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListColumn.Where(c => c.ReceiptID == item.ReceiptID && c.MaterialCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListData.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        // Phiếu sửa chữa
        [HttpPost]
        public List<DTOREPOwner_Repair> REPOwner_Repair(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwner_Repair>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Repair(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerWorkOrder_Repair_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_Repair_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số phiếu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà cung cấp"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM bắt đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "KM kết thúc"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhiên liệu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn giá"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng tiền"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ReceiptCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SupplierName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMStart]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KMEnd]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaterialCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CostName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Quantity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[UnitPrice]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Total]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Repair_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPOwner_Repair>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Repair(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Repair);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Thiết bị
        [HttpPost]
        public List<DTOREPOwner_Equipment> REPOwner_Equipment(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwner_Equipment>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Equipment(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerEquiment_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_Equiment_Detail_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Giá gốc"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá hiện tại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tình trạng"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Code]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Name]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Date]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[BaseValue]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CurrentValue]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DepreciationPeriod]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfEquipmentName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CurrentStatus]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Equipment_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_Equipment_SettingDownload_Detail(itemfile, dtfrom, dtto);
                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Equipment_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPOwner_Equipment>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Equipment(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Equipment);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // GPS
        [HttpPost]
        public List<DTOREPOwner_GPS> REPOwner_GPS_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwner_GPS>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_GPS_Detail(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_GPS_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_GPS_SettingDownload_Detail(itemfile, dtfrom, dtto);
                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_GPS_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPOwner_GPS>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_GPS_Detail(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_GPS);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerGPS_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_GPS_Detail_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ETD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ETA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATD"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "ATA"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian đến"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Thời gian bắt đầu"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Thời gian kết thúc"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Thời gian rời điểm"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "KM"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm chạy"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "Tổng số điểm giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Chi phí qua trạm/Phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại chi phí phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú phát sinh"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú điểm 1"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ATA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[LocationCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "[LoadingStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "[LoadingEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "[DateLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDMYHM);
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocation]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalLocationDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Price]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfTrouble]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TroubleNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationNote1]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Khấu hao
        [HttpPost]
        public List<DTOREPOwner_FixedCost> REPOwner_FixedCost_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dt = Convert.ToDateTime(dynParam.dtfrom.ToString());
                var result = new List<DTOREPOwner_FixedCost>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_FixedCost_Detail(dt);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPOwner_FixedCost> REPOwner_FixedCost_Vehicle(dynamic dynParam)
        {
            try
            {
                DateTime dt = Convert.ToDateTime(dynParam.dtfrom.ToString());
                var result = new List<DTOREPOwner_FixedCost>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_FixedCost_Vehicle(dt);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_FixedCost_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dt = Convert.ToDateTime(dynParam.dtfrom.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_FixedCost_SettingDownload_Detail(itemfile, dt);
                        case 2: return REPOwner_FixedCost_SettingDownload_Vehicle(itemfile, dt);
                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_FixedCost_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom)
        {
            try
            {
                var data = new List<DTOREPOwner_FixedCost>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_FixedCost_Detail(dtfrom);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_FixedCost);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtfrom.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtfrom.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_FixedCost_SettingDownload_Vehicle(CATFile itemfile, DateTime dtfrom)
        {
            try
            {
                var data = new List<DTOREPOwner_FixedCost>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_FixedCost_Vehicle(dtfrom);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_FixedCost);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtfrom.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtfrom.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public string REPOwnerFixedCost_Vehicle_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_FixedCost_Vehicle_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Năm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền"; worksheet.Column(col).Width = 20;


                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Month]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Year]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Total]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPOwnerFixedCost_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_FixedCost_Detail_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số phiếu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tháng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Năm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số tiền"; worksheet.Column(col).Width = 20;


                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ReceiptNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Month]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Year]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Total]"; worksheet.Column(col).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        // Thiết bị, định mức
        public string REPOwner_Asset_Download(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    if (item.TypeOfFilter < 0)
                        throw new Exception("Vui lòng thiết lập loại báo cáo");
                    if (item.TypeExport < 0)
                        throw new Exception("Vui lòng thiết lập loại tài sản");

                    switch (item.TypeOfFilter)
                    {
                        case 1: return REPOwner_Asset_Download_Asset(itemfile, item.TypeExport);
                        case 2: return REPOwner_Asset_Download_Quota(itemfile, item.TypeExport); 
                    }

                    return string.Empty;
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Asset_Download_Asset(CATFile itemfile, int typeOfAssetID)
        {
            try
            {
                var data = new List<DTOREPOwner_Asset>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Asset(typeOfAssetID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Asset);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row , col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");


                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Asset_Download_Quota(CATFile itemfile, int typeOfAssetID)
        {
            try
            {
                var data = new DTOREPOwner_Quota();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_AssetQuota(typeOfAssetID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, PropertyInfo> dicPropGroup = new Dictionary<int, PropertyInfo>();
                        Dictionary<int, string> dicDate = new Dictionary<int, string>();
                        Dictionary<int, string> dicPropGroupKey = new Dictionary<int, string>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwner_Quota_Asset);
                        var typePropGroup = typeof(DTOREPOwner_Quota_Material);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0, headerRow = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            if (str.Split('-').Length == 1)
                                            {
                                                try
                                                {
                                                    var prop = typeProp.GetProperty(str);
                                                    if (prop != null)
                                                    {
                                                        dicProp.Add(col, prop);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                            else
                                            {
                                                string strFirst = str.Substring(0, str.LastIndexOf('-'));
                                                string strLast = str.Substring(str.LastIndexOf('-') + 1);
                                                try
                                                {
                                                    var prop = typePropGroup.GetProperty(strLast);
                                                    if (prop != null)
                                                    {
                                                        dicPropGroup.Add(col, prop);
                                                        dicPropGroupKey.Add(col, strFirst);
                                                        if (!dicColumn.ContainsKey(str))
                                                            dicColumn.Add(str, col);
                                                        flag = false;
                                                    }
                                                }
                                                catch { }
                                            }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }


                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        headerRow = rowStart - 1;

                        if (data.ListAsset.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.ListAsset.Count - 1, 1, copyrow + data.ListAsset.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.ListAsset.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.ListAsset.Count - 1, col]);
                                    }
                                }
                            }

                            rowEnd = rowStart + data.ListAsset.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data.ListAsset)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                }

                                foreach (var prop in dicPropGroup)
                                {
                                    var groupKey = dicPropGroupKey[prop.Key];
                                    var group = data.ListQuota.Where(c => c.AssetID == item.ID && c.MaterialCode == groupKey).FirstOrDefault();
                                    if (group != null)
                                    {
                                        var val = prop.Value.GetValue(group);
                                        if (val != null)
                                            worksheet.Cells[row, prop.Key].Value = val;
                                        else
                                            worksheet.Cells[row, prop.Key].Value = null;
                                    }
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }

                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.ListAsset.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOREPOwner_Asset> REPOwner_Asset(dynamic dynParam)
        {
            try
            {
                var result = new List<DTOREPOwner_Asset>();
                int typeOfAssetID = Convert.ToInt32(dynParam.typeOfAssetID);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Asset(typeOfAssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOREPOwner_Quota REPOwner_AssetQuota(dynamic dynParam)
        {
            try
            {
                var result = new DTOREPOwner_Quota();
                int typeOfAssetID = Convert.ToInt32(dynParam.typeOfAssetID);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_AssetQuota(typeOfAssetID);
                });
                if (result.ListQuota != null)
                {
                    var lsttest = result.ListQuota.Select(c => new { KeyCode = c.MaterialCode }).Distinct().ToList();
                    result.ListKey = new List<DTOREPOwner_Quota_Material>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_Quota_Material group = new DTOREPOwner_Quota_Material();
                        group.KeyCode = item.KeyCode;
                        result.ListKey.Add(group);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Asset_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_Asset_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kinh độ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Vĩ độ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã địa chỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh/Thành"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận/Huyện"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tài sản"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Giá trị còn lại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian bảo hành"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc bảo hành"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thời gian khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày bắt đầu khấu hao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mô tả"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải tối thiếu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải tối đa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng trọng tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối tối thiểu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối tối đa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số khối đăng ký"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ tối thiểu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ tối đa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ tối thiểu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trọng tải rỗng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã GPS"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cho thuê"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thanh lý"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng cont 20"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Remooc sàn"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Code]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Name]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Lat]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Lng]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationProvinceName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationDistrictName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfAssetName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfEquipmentName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[BaseValue]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CurrentValue]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RemainValue]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[WarrantyPeriod]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[WarrantyEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DepreciationPeriod]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DepreciationStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[YearOfProduction]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Manufactor]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Specification]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MinWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaxWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaxWeightCal]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MinCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[MaxCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[RegCapacity]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TempMin]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TempMax]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[EmptyWeight]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GPSCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IsRent]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IsDisposal]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[NoOfDelivery]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[IsFloor]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_AssetQuota_Export(dynamic dynParam)
        {
            try
            {
                int typeOfAssetID = Convert.ToInt32(dynParam.typeOfAssetID);

                string request = string.Empty;
                var result = new DTOREPOwner_Quota();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_AssetQuota(typeOfAssetID);
                });
                if (result.ListQuota != null)
                {
                    var lsttest = result.ListQuota.Select(c => new { KeyCode = c.MaterialCode }).Distinct().ToList();
                    result.ListKey = new List<DTOREPOwner_Quota_Material>();
                    foreach (var item in lsttest)
                    {
                        DTOREPOwner_Quota_Material cost = new DTOREPOwner_Quota_Material();
                        cost.KeyCode = item.KeyCode;
                        result.ListKey.Add(cost);
                    }
                }
                string file = "/" + FolderUpload.Export + "ExportREPOwner_AssetQuota_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tài sản"; worksheet.Column(col).Width = 20;

                    string[] arrayColumn = new string[] {"QuantityPerKM", "KMCurrent", "KMStart", "IsWarning" };

                    row = 2;

                    if (result.ListKey != null)
                    {
                        foreach (var group in result.ListKey)
                        {
                            for (int i = 0; i < arrayColumn.Count(); i++)
                            {
                                var title = "[" + group.KeyCode + '-' + arrayColumn[i] + "]";
                                col++; worksheet.Cells[row, col].Value = title; worksheet.Column(col).Width = 25;
                                worksheet.Cells[row - 1, col].Value = title; worksheet.Column(col).Width = 25;
                            }
                        }
                    }
                    int col1 = 1; row = 2;
                    worksheet.Cells[row, col1].Value = "[STT]";
                    col1++; worksheet.Cells[row, col1].Value = "[RegNo]"; worksheet.Column(col1).Width = 20;
                    col1++; worksheet.Cells[row, col1].Value = "[TypeOfAssetName]"; worksheet.Column(col1).Width = 20;


                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        

        //bảo trì đăng kiểm
        #region REPOwnerMaintenance
        public List<DTOREPOwnerMaintenance> REPOwner_Maintenance_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPOwnerMaintenance>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPOwner_Maintenance_Detail(dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Maintenance_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));

                    switch (item.TypeExport)
                    {
                        case 1: return REPOwner_Maintenance_SettingDownload_Detail(itemfile, dtfrom, dtto);
                    }
                    throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwner_Maintenance_SettingDownload_Detail(CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPOwnerMaintenance>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPOwner_Maintenance_Detail(dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPOwnerMaintenance);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPOwnerMaintenance_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPOwner_Maintenance_Detail_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày bắt đầu"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày b/đ thực tế"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày k/t thực tế"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tình trạng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StatusName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateFrom]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateTo]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromActual]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToActual]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[TypeOfAsset]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Note]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #endregion

        #region CUSSettingsReport
        public List<CUSSettingsReport> CUSSettingsReport_List(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);

                var result = new List<CUSSettingsReport>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingsReport_List(functionID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CUSSettingsReport_Save(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.CUSSettingsReport_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CUSSettingsReport_Delete(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.CUSSettingsReport_Delete(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_CustomerNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_CustomerNotInList(lstCus, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_CustomerNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstCusId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_CustomerNotInSave(item, lstCusId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_CustomerDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstCusId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_CustomerDeleteList(item, lstCusId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_GroupOfProductNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }
                List<CUSSettingsReport_GroupProduct> lstGOP = new List<CUSSettingsReport_GroupProduct>();
                if (dynParam.lstGOP != null)
                {
                    lstGOP = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_GroupProduct>>(dynParam.lstGOP.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfProductNotInList(lstCus, lstGOP, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfProductNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstGOPId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfProductNotInSave(item, lstGOPId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfProductDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstGOPId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfProductDeleteList(item, lstGOPId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_StockNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }
                List<CUSSettingsReport_Stock> lstStock = new List<CUSSettingsReport_Stock>();
                if (dynParam.lstStock != null)
                {
                    lstStock = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Stock>>(dynParam.lstStock.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_StockNotInList(lstCus, lstStock, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_StockNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstStockId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_StockNotInSave(item, lstStockId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_StockDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstStockId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_StockDeleteList(item, lstStockId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult REP_GetALL_Province()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVCategory((ISVCategory sv) =>
                {
                    result = sv.ALL_Province();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_ProvinceNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Province> lstProvince = new List<CUSSettingsReport_Province>();
                if (dynParam.lstProvince != null)
                {
                    lstProvince = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Province>>(dynParam.lstProvince.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ProvinceNotInList(lstProvince, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_ProvinceNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstProvinceID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstProvinceID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ProvinceNotInSave(item, lstProvinceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_ProvinceDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstProvinceID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstProvinceID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ProvinceDeleteList(item, lstProvinceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DTOResult GroupOfLocation_List()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.GroupOfLocation_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_GroupOfLocationNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_GroupOfLocation> lstGroupOfLocation = new List<CUSSettingsReport_GroupOfLocation>();
                if (dynParam.lstGroupOfLocation != null)
                {
                    lstGroupOfLocation = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_GroupOfLocation>>(dynParam.lstGroupOfLocation.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfLocationNotInList(lstGroupOfLocation, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_GroupOfLocationNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstGroupOfLocationID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstGroupOfLocationID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfLocationNotInSave(item, lstGroupOfLocationID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingReport_GroupOfLocationDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstGroupOfLocationID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstGroupOfLocationID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfLocationDeleteList(item, lstGroupOfLocationID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DTOResult GroupOfPartner_List()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.GroupOfPartner_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_GroupOfPartnerNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_GroupOfPartner> lstGroupOfPartner = new List<CUSSettingsReport_GroupOfPartner>();
                if (dynParam.lstGroupOfPartner != null)
                {
                    lstGroupOfPartner = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_GroupOfPartner>>(dynParam.lstGroupOfPartner.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfPartnerNotInList(lstGroupOfPartner, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_GroupOfPartnerNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstGroupOfPartnerID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstGroupOfPartnerID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfPartnerNotInSave(item, lstGroupOfPartnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_GroupOfPartnerDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstGroupOfPartnerID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstGroupOfPartnerID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_GroupOfPartnerDeleteList(item, lstGroupOfPartnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_ServiceOfOrderNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_ServiceOfOrder> lstServiceOfOrder = new List<CUSSettingsReport_ServiceOfOrder>();
                if (dynParam.lstServiceOfOrder != null)
                {
                    lstServiceOfOrder = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_ServiceOfOrder>>(dynParam.lstServiceOfOrder.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ServiceOfOrderNotInList(lstServiceOfOrder, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_ServiceOfOrderNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstServiceOfOrderID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstServiceOfOrderID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ServiceOfOrderNotInSave(item, lstServiceOfOrderID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_ServiceOfOrderDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstServiceOfOrderID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstServiceOfOrderID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_ServiceOfOrderDeleteList(item, lstServiceOfOrderID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_OrderRoutingNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                List<CUSSettingsReport_Routing> lstOrderRouting = new List<CUSSettingsReport_Routing>();

                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }

                if (dynParam.lstOrderRouting != null)
                {
                    lstOrderRouting = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Routing>>(dynParam.lstOrderRouting.ToString());
                }

                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OrderRoutingNotInList(lstCus, lstOrderRouting, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_OrderRoutingNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstOrderRoutingID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstOrderRoutingID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OrderRoutingNotInSave(item, lstOrderRoutingID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_OrderRoutingDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstOrderRoutingID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstOrderRoutingID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OrderRoutingDeleteList(item, lstOrderRoutingID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DTOResult CUSSettingReport_OPSRoutingNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                List<CUSSettingsReport_Routing> lstOPSRouting = new List<CUSSettingsReport_Routing>();

                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }

                if (dynParam.lstOPSRouting != null)
                {
                    lstOPSRouting = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Routing>>(dynParam.lstOPSRouting.ToString());
                }

                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OPSRoutingNotInList(lstCus, lstOPSRouting, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_OPSRoutingNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstOPSRoutingID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstOPSRoutingID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OPSRoutingNotInSave(item, lstOPSRoutingID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_OPSRoutingDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstOPSRoutingID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstOPSRoutingID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_OPSRoutingDeleteList(item, lstOPSRoutingID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingReport_PartnerNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                List<CUSSettingsReport_Partner> lstPartner = new List<CUSSettingsReport_Partner>();

                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }

                if (dynParam.lstPartner != null)
                {
                    lstPartner = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Partner>>(dynParam.lstPartner.ToString());
                }

                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_PartnerNotInList(lstCus, lstPartner, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_PartnerNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstPartnerID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstPartnerID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_PartnerNotInSave(item, lstPartnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CUSSettingsReport CUSSettingReport_PartnerDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstPartnerID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstPartnerID.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingReport_PartnerDeleteList(item, lstPartnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region CUSSettingsPlan
        public List<CUSSettingsReport> CUSSettingsPlan_List(dynamic dynParam)
        {
            try
            {
                int functionID = Convert.ToInt32(dynParam.functionID);

                var result = new List<CUSSettingsReport>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingsPlan_List(functionID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CUSSettingsPlan_Save(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.CUSSettingsPlan_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void CUSSettingsPlan_Delete(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());

                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    sv.CUSSettingsPlan_Delete(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingPlan_CustomerNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_CustomerNotInList(lstCus, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingPlan_CustomerNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstCusId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_CustomerNotInSave(item, lstCusId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingPlan_CustomerDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstCusId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_CustomerDeleteList(item, lstCusId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult CUSSettingPlan_GroupOfProductNotInList(dynamic dynParam)
        {
            try
            {
                List<CUSSettingsReport_Customer> lstCus = new List<CUSSettingsReport_Customer>();
                if (dynParam.lstCus != null)
                {
                    lstCus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_Customer>>(dynParam.lstCus.ToString());
                }
                List<CUSSettingsReport_GroupProduct> lstGOP = new List<CUSSettingsReport_GroupProduct>();
                if (dynParam.lstGOP != null)
                {
                    lstGOP = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CUSSettingsReport_GroupProduct>>(dynParam.lstGOP.ToString());
                }
                string request = Convert.ToString(dynParam.request.ToString());
                var result = default(DTOResult);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_GroupOfProductNotInList(lstCus, lstGOP, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingPlan_GroupOfProductNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lstGOPId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_GroupOfProductNotInSave(item, lstGOPId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSSettingsReport CUSSettingPlan_GroupOfProductDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lstGOPId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                var result = default(CUSSettingsReport);
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.CUSSettingPlan_GroupOfProductDeleteList(item, lstGOPId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region REPTotalPriceVendor
        public List<REPTotalPriceVendor> REPTotalPriceVendor_Data(dynamic dynParam)
        {
            try
            {
                int transportModeID = (int)dynParam.transportModeID;
                int typePrice = (int)dynParam.typePrice;
                int cusId = (int)dynParam.cusId;
                List<int> lstVenId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstVenId.ToString());
                DateTime effectDate = Convert.ToDateTime(dynParam.effectDate.ToString());

                effectDate = effectDate.Date;
                var result = new List<REPTotalPriceVendor>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPTotalPriceVendor_Data(cusId, lstVenId, transportModeID, typePrice, effectDate);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<int> REPTotalPriceVendor_ListVendor(dynamic dynParam)
        {
            try
            {
                int cusId = (int)dynParam.cusId;
                List<int> result = new List<int>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPTotalPriceVendor_ListVendor(cusId);

                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPTotalPriceVendor_ExportColumn(dynamic dynParam)
        {
            try
            {
                int transportModeID = (int)dynParam.transportModeID;
                int typePrice = (int)dynParam.typePrice;
                int cusId = (int)dynParam.cusId;
                List<int> lstVenId = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstVenId.ToString());
                DateTime effectDate = Convert.ToDateTime(dynParam.effectDate.ToString());

                effectDate = effectDate.Date;
                var result = new List<REPTotalPriceVendor>();
                var lstTransport = new List<SYSVar>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPTotalPriceVendor_Data(cusId, lstVenId, transportModeID, typePrice, effectDate);
                });
                ServiceFactory.SVCategory((ISVCategory sv) =>
                {
                    var data = sv.ALL_CATTransportMode();
                    lstTransport = data.Data.Cast<SYSVar>().ToList();
                });
                int transportID = -1;
                var objTM = lstTransport.FirstOrDefault(c => c.ID == transportModeID && c.TypeOfVar.HasValue);
                if (objTM != null)
                    transportID = objTM.TypeOfVar.Value;
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;
                string[] colorCol = new string[] { ExcelHelper.ColorGreen, ExcelHelper.ColorBlue, ExcelHelper.ColorOrange };

                #region Get Data
                var transMode = "";
                var type = "";

                var ListRoute = result.Select(c => new { ID = c.RoutingID, Code = c.RoutingCode, RoutingName = c.RoutingName }).Distinct().ToList();
                var ListCustomer = result.Select(c => new
                {
                    ID = c.CustomerID,
                    CustomerCode = c.CustomerCode,
                    CustomerName = c.CustomerName,
                    CompanyID = c.CompanyID,
                    CompanyCode = c.CustomerCode,
                    CompanyName = c.CompanyName,
                }).Distinct().ToList();

                if (transportID == iFCL)
                {
                    transMode = "FCL";
                }
                else if (transportID == iFTL)
                {
                    transMode = "FTL";
                }
                else if (transportID == iLTL)
                {
                    transMode = "LTL";
                }

                if (typePrice == 0)
                {
                    type = "Normal";
                }
                else if (typePrice == 1)
                {
                    type = "Level";
                }
                #endregion

                string file = "/Uploads/temp/REPTotalPriceVendor_" + transMode + "_" + type + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo f = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage pk = new ExcelPackage(f))
                {
                    ExcelWorksheet worksheet = pk.Workbook.Worksheets.Add("Sheet1");
                    int col = 1, row = 1;

                    if (result != null)
                    {
                        #region Routing
                        row = 3;
                        int colRte = col;
                        worksheet.Cells[row, colRte].Value = "Mã cung đường";
                        colRte++; worksheet.Cells[row, colRte].Value = "Tên cung đường";
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, colRte, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        row = 4;
                        if (ListRoute != null)
                        {
                            foreach (var route in ListRoute)
                            {
                                colRte = col;
                                worksheet.Cells[row, colRte].Value = route.Code; worksheet.Column(colRte).Width = 20;
                                colRte++; worksheet.Cells[row, colRte].Value = route.RoutingName; worksheet.Column(colRte).Width = 20;
                                row++;
                            }
                        }
                        #endregion

                        #region Price
                        col = colRte;
                        int colPrice = colRte + 1;
                        int index = 0;
                        foreach (var cus in ListCustomer)
                        {
                            var ListPrice = new List<REPTotalPriceVendor>();
                            if (cus.ID == cus.CompanyID && transportID == iLTL)
                            {

                                var ListPriceTemp = result.Where(c => c.CustomerID == cus.ID).ToList();
                                foreach (var temp in ListPriceTemp)
                                {
                                    bool isHas = false;
                                    if (ListPrice != null)
                                    {
                                        foreach (var price in ListPrice)
                                        {
                                            if (temp.RoutingID == price.RoutingID && temp.GroupOfProductID == price.GroupOfProductID)
                                            {
                                                isHas = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (!isHas)
                                    {
                                        var total = (decimal)0;
                                        foreach (var price in ListPriceTemp)
                                        {
                                            if (temp.RoutingID == price.RoutingID && temp.GroupOfProductID == price.GroupOfProductID)
                                            {
                                                total += price.Price;
                                            }
                                        }
                                        temp.Price = total;
                                        ListPrice.Add(temp);
                                    }
                                }
                            }
                            else
                                ListPrice = result.Where(c => c.CustomerID == cus.ID).ToList();

                            row = 1;
                            int colR = col;
                            colPrice = col;
                            var company = cus.CompanyName != string.Empty ? cus.CompanyName + " - " : "";
                            colPrice++; worksheet.Cells[row, colPrice].Value = company + cus.CustomerName + " - " + cus.CompanyCode;
                            row = 3;

                            #region FTL
                            if (transportID == iFTL)
                            {
                                var ListGroupOfVehicle = result.Where(c => c.CustomerID == cus.ID).Select(c => new { ID = c.GroupOfVehicleID, Code = c.GroupOfVehicleCode, GroupName = c.GroupOfVehicleName }).Distinct().ToList();

                                #region FTL Normal
                                if (typePrice == 0)
                                {
                                    colPrice = col;
                                    foreach (var gov in ListGroupOfVehicle)
                                    {
                                        colPrice++; worksheet.Cells[row, colPrice].Value = gov.Code;
                                        ExcelHelper.CreateCellStyle(worksheet, row, colPrice, row, colPrice, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                    }
                                    worksheet.Cells[row, col, row, colPrice].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells[row, col, row, colPrice].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                    row = 4;
                                    if (ListRoute != null)
                                    {
                                        foreach (var route in ListRoute)
                                        {
                                            colPrice = col;
                                            foreach (var gov in ListGroupOfVehicle)
                                            {
                                                var value = ListPrice.Where(c => c.RoutingID == route.ID && c.GroupOfVehicleID == gov.ID).FirstOrDefault();
                                                if (value != null)
                                                {
                                                    colPrice++; worksheet.Cells[row, colPrice].Value = value.Price; worksheet.Column(colPrice).Width = 20;
                                                    ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                }
                                                else
                                                {
                                                    colPrice++; worksheet.Cells[row, colPrice].Value = ""; worksheet.Column(colPrice).Width = 20;
                                                    ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                }
                                            }
                                            row++;
                                        }
                                    }
                                    col = colPrice;
                                }
                                #endregion

                                #region FTL Level
                                if (typePrice == 1)
                                {
                                    var ListLevel = result.Where(c => c.CustomerID == cus.ID).Select(c => new { ID = c.LevelID, Code = c.LevelCode, LevelName = c.LevelName }).Distinct().ToList();
                                    colPrice = col;
                                    foreach (var level in ListLevel)
                                    {
                                        colPrice++; worksheet.Cells[row, colPrice].Value = level.Code;
                                        ExcelHelper.CreateCellStyle(worksheet, row, colPrice, row, colPrice, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                    }
                                    worksheet.Cells[row, col, row, colPrice].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells[row, col, row, colPrice].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                    row = 4;
                                    if (ListRoute != null)
                                    {
                                        foreach (var route in ListRoute)
                                        {
                                            colPrice = col;
                                            foreach (var level in ListLevel)
                                            {
                                                var value = ListPrice.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID).FirstOrDefault();
                                                if (value != null)
                                                {
                                                    colPrice++; worksheet.Cells[row, colPrice].Value = value.Price; worksheet.Column(colPrice).Width = 20;
                                                    ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                }
                                                else
                                                {
                                                    colPrice++; worksheet.Cells[row, colPrice].Value = ""; worksheet.Column(colPrice).Width = 20;
                                                    ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                }
                                            }
                                            row++;
                                        }
                                    }
                                    col = colPrice;
                                }
                                #endregion
                            }
                            #endregion

                            #region LTL
                            if (transportID == iLTL)
                            {
                                var ListGroupOfProduct = result.Where(c => c.CustomerID == cus.ID).Select(c => new { ID = c.GroupOfProductID, Code = c.GroupOfProductCode, GroupName = c.GroupOfProductName }).Distinct().ToList();
                                #region LTL Normal
                                if (typePrice == 0)
                                {
                                    colPrice = col;
                                    foreach (var gop in ListGroupOfProduct)
                                    {
                                        colPrice++; worksheet.Cells[row, colPrice].Value = gop.GroupName;
                                        ExcelHelper.CreateCellStyle(worksheet, row, colPrice, row, colPrice, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                    }
                                    worksheet.Cells[row, col, row, colPrice].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells[row, col, row, colPrice].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                    row = 4;
                                    if (ListPrice != null && ListRoute != null)
                                    {
                                        foreach (var route in ListRoute)
                                        {
                                            foreach (var data in ListPrice)
                                            {
                                                if (data.RoutingID == route.ID)
                                                {
                                                    colPrice = col;
                                                    foreach (var gop in ListGroupOfProduct)
                                                    {
                                                        if (data.GroupOfProductID == gop.ID)
                                                        {
                                                            var value = data.Price;
                                                            if (value != null)
                                                            {
                                                                colPrice++; worksheet.Cells[row, colPrice].Value = value; worksheet.Column(colPrice).Width = 20;
                                                                ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                            }
                                                            else
                                                            {
                                                                colPrice++; worksheet.Cells[row, colPrice].Value = ""; worksheet.Column(colPrice).Width = 20;
                                                                ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            colPrice++;
                                                        }
                                                    }
                                                }
                                            }
                                            row++;
                                        }
                                    }
                                    col = colPrice;
                                }
                                #endregion

                                #region LTL Level
                                if (typePrice == 1)
                                {
                                    row = 2;
                                    colPrice = col;
                                    var ListLevel = result.Where(c => c.CustomerID == cus.ID).Select(c => new { ID = c.LevelID, Code = c.LevelCode, LevelName = c.LevelName }).Distinct().ToList();
                                    foreach (var level in ListLevel)
                                    {
                                        colPrice++; worksheet.Cells[row, colPrice].Value = level.Code;
                                        colPrice--;
                                        foreach (var gop in ListGroupOfProduct)
                                        {
                                            colPrice++; worksheet.Cells[row + 1, colPrice].Value = gop.GroupName;
                                        }
                                        ExcelHelper.CreateCellStyle(worksheet, row, colPrice - ListGroupOfProduct.Count + 1, row, colPrice, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                        ExcelHelper.CreateCellStyle(worksheet, row + 1, colPrice - ListGroupOfProduct.Count + 1, row + 1, colPrice, false, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                    }
                                    worksheet.Cells[row, col, row, colPrice].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells[row, col, row, colPrice].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                    row = 4;
                                    colPrice = col;
                                    if (ListRoute != null)
                                    {
                                        foreach (var route in ListRoute)
                                        {
                                            foreach (var level in ListLevel)
                                            {
                                                foreach (var gop in ListGroupOfProduct)
                                                {
                                                    colPrice++;
                                                    var value = ListPrice.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID && c.GroupOfProductID == gop.ID).FirstOrDefault();
                                                    if (value != null)
                                                    {
                                                        worksheet.Cells[row, colPrice].Value = value.Price; worksheet.Column(colPrice).Width = 20;
                                                        ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[row, colPrice].Value = ""; worksheet.Column(colPrice).Width = 20;
                                                        ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                                    }
                                                }
                                            }

                                            colPrice = colPrice - ListGroupOfProduct.Count * ListLevel.Count;

                                            row++;
                                        }
                                    }
                                    col = colPrice + ListGroupOfProduct.Count * ListLevel.Count;
                                }
                                #endregion
                            }

                            #region Fix merge Column
                            if (col >= colR + 1)
                            {
                                var hasMerge = false;
                                if (transportID == iFTL)
                                {
                                    if (typePrice == 0)
                                    {
                                        ExcelHelper.CreateCellStyle(worksheet, 1, colR + 1, 2, col, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                        hasMerge = true;
                                    }
                                    if (typePrice == 1)
                                    {
                                        ExcelHelper.CreateCellStyle(worksheet, 1, colR + 1, 2, col, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                        hasMerge = true;
                                    }
                                }
                                if (transportID == iLTL)
                                {
                                    if (typePrice == 0)
                                    {
                                        ExcelHelper.CreateCellStyle(worksheet, 1, colR + 1, 2, col, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                        hasMerge = true;
                                    }
                                }
                                if (transportID == iFCL)
                                {
                                    ExcelHelper.CreateCellStyle(worksheet, 1, colR + 1, 2, col, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                    hasMerge = true;
                                }
                                if (hasMerge == false)
                                {
                                    ExcelHelper.CreateCellStyle(worksheet, 1, colR + 1, 1, col, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                }
                                worksheet.Cells[1, colR + 1, 2, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                worksheet.Cells[1, colR + 1, 2, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                index++;
                            }
                            #endregion
                            #endregion

                            #region FCL
                            if (transportID == iFCL)
                            {
                                var ListPacking = result.Where(c => c.CustomerID == cus.ID).Select(c => new { ID = c.PackingID, Code = c.PackingCode, PackingName = c.PackingName }).Distinct().ToList();
                                colPrice = col;
                                foreach (var pack in ListPacking)
                                {
                                    colPrice++; worksheet.Cells[row, colPrice].Value = pack.Code;
                                    ExcelHelper.CreateCellStyle(worksheet, row, colPrice, row, colPrice, true, true, colorCol[index % 3], ExcelHelper.ColorWhite, 0, "");
                                }
                                worksheet.Cells[row, col, row, colPrice].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                worksheet.Cells[row, col, row, colPrice].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                row = 4;
                                if (ListRoute != null)
                                {
                                    foreach (var route in ListRoute)
                                    {
                                        colPrice = col;
                                        foreach (var pack in ListPacking)
                                        {
                                            var value = ListPrice.Where(c => c.RoutingID == route.ID && c.PackingID == pack.ID).FirstOrDefault();
                                            if (value != null)
                                            {
                                                colPrice++; worksheet.Cells[row, colPrice].Value = value.Price; worksheet.Column(colPrice).Width = 20;
                                                ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                            }
                                            else
                                            {
                                                colPrice++; worksheet.Cells[row, colPrice].Value = ""; worksheet.Column(colPrice).Width = 20;
                                                ExcelHelper.CreateFormat(worksheet, row, colPrice, ExcelHelper.FormatMoney);
                                            }
                                        }
                                        row++;
                                    }
                                }

                                col = colPrice;
                            }
                            #endregion
                        }
                        #endregion
                    }

                    if (worksheet.Dimension != null)
                    {
                        for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                        {
                            for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                            {
                                worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                            }
                        }
                    }
                    pk.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Báo cáo tổng hợp
        public List<DTOREP_TotalPL> REPTotalPL_List(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                int typeOfView = Convert.ToInt32(dynParam.typeOfView);
                var result = new List<DTOREP_TotalPL>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPTotalPL_List(dtfrom, dtto, typeOfView);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Báo cáo tờ khai (REPCOInspection)
        public List<DTOREPCOInspection> REPCOInspection_Detail(dynamic dynParam)
        {
            try
            {
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());

                var result = new List<DTOREPCOInspection>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPCOInspection_Detail(lstid, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOInspection_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                if (item != null)
                {
                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstcustomerid = new List<int>();
                    if (item.ListCustomer != null)
                        lstcustomerid = item.ListCustomer.Select(c => c.CustomerID).ToList();

                    if (lstcustomerid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPCOInspection_SettingDownload_Detail(lstcustomerid, itemfile, dtfrom, dtto);
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOInspection_SettingDownload_Detail(List<int> lstcustomerid, CATFile itemfile, DateTime dtfrom, DateTime dtto)
        {
            try
            {
                var data = new List<DTOREPCOInspection>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPCOInspection_Detail(lstcustomerid, dtfrom, dtto);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPCOInspection);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string REPCOInspection_Detail_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPCOInspection_Detail_Export_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã tờ khai"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tờ khai"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tờ khai"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hợp đồng KH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính phí KH"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đối tác"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số hợp đồng ĐT"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính phí ĐT"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Tổng số Cont"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi phí DV thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi phí DV chi"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi phí Cont thu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tổng chi phí Cont chi"; worksheet.Column(col).Width = 20;

                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[Code]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TypeOfDocument]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateDocument]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractCustomerNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfigCustomer]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ContractVendorNo]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DateConfigVendor]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[TotalContainer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalSerPriceCustomer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalSerPriceVendor]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalContPriceCustomer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TotalContPriceVendor]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Báo cáo tình trạng đơn hàng
        public List<DTOREPStatus_Order> REPDIStatus_OrderData(dynamic dynParam)
        {
            try
            {
                int typeOfFilter = (int)dynParam.typeOfFilter;
                int statusID = (int)dynParam.statusID;
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                var result = new List<DTOREPStatus_Order>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    result = sv.REPDIStatus_OrderData(lstid, dtfrom, dtto, typeOfFilter, statusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIStatus_Export()
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportREPDIOrder_Index_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Trạng thái đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Trạng thái nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số DN"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tắt nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số SO"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá đơn hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày tính giá"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày y/c v/c"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Điểm lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà phân phối"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Quận huyện giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại điểm giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhóm hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú hàng hóa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleCode"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "GroupOfVehicleName"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại hình v.chuyển thầu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày tới kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày giao hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhà vận tải"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận c.từ trả về"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời kho"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian vào máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian ra máng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày đến điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày rời điểm giao"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian bắt đầu dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "T.gian kết thúc dỡ hàng"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Ngày nhận C/Từ"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Số c.từ trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tấn trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khối trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số lượng trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg lấy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg giao"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Kg trả về"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường đơn hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường c.t ĐH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Hợp đồng chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường chuyến"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Số KM đã chạy"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 1"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú chuyến 2"; worksheet.Column(col).Width = 20;


                    col = 1; row = 2;
                    worksheet.Cells[row, col].Value = "[STT]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupStatus]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DNCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorShortName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[SOCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderDateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateConfig]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[RequestDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[StockCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[StockAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[PartnerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToAddress]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToProvince]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[LocationToDistrict]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfLocationToName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CUSRoutingName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ProductDescription]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[GroupOfVehicleName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeIncome]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TransportModeCost]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[DriverName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[ETD]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[ETA]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[VendorCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[VendorName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerCode]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CustomerName]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateFromLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToCome]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLeave]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadStart]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[DateToLoadEnd]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceDate]"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "[InvoiceReturnNote]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TonReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[CBMReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[QuantityReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgTranfer]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgBBGN]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KgReturn]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OrderGroupProductRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSContract]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[OPSRouting]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[KM]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote1]"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "[TOMasterNote2]"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIStatus_OrderTemplate(dynamic dynParam)
        {
            try
            {
                CATFile itemfile = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.itemfile.ToString());
                int typeOfFilter = (int)dynParam.typeOfFilter;
                int statusID = (int)dynParam.statusID;
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                string request = Convert.ToString(dynParam.request.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                var data = new List<DTOREPStatus_Order>();
                ServiceFactory.SVReport((ISVReport sv) =>
                {
                    data = sv.REPDIStatus_OrderData(lstid, dtfrom, dtto, typeOfFilter, statusID);
                });

                var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
                else
                    throw new Exception("File không tồn tại!");

                FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
                using (var package = new ExcelPackage(file))
                {
                    ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                    if (worksheet != null)
                    {
                        Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                        Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                        List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                        Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                        var typeProp = typeof(DTOREPTRPL_Detail);

                        int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                        for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                        {
                            if (rowStart == 0)
                            {
                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (str == "[STT]")
                                    {
                                        rowStart = row;
                                        colStart = col;
                                    }
                                    else if (rowStart > 0 && colStart > 0)
                                    {
                                        var flag = true;
                                        if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                        {
                                            str = str.Substring(1, str.Length - 2);
                                            try
                                            {
                                                var prop = typeProp.GetProperty(str);
                                                if (prop != null)
                                                {
                                                    dicProp.Add(col, prop);
                                                    if (!dicColumn.ContainsKey(str))
                                                        dicColumn.Add(str, col);
                                                    flag = false;
                                                }
                                            }
                                            catch { }
                                        }

                                        if (flag)
                                        {
                                            if (str.StartsWith("="))
                                                dicCopy.Add(col, str);
                                            else
                                                dicCopy.Add(col, "");
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[row, col]);
                                    }
                                }
                            }

                            if (rowStart > 0) break;
                        }

                        if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                        // Header
                        for (int copyrow = 1; copyrow < rowStart; copyrow++)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow, col].Value = str;
                                }
                            }
                        }

                        if (data.Count > 0)
                        {
                            // Footer
                            int copyrowend = worksheet.Dimension.End.Row;
                            if (copyrowend > rowStart + 100)
                                copyrowend = rowStart + 100;
                            for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                            {
                                worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                                for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                    {
                                        if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                            lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                    }
                                    if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                    {
                                        str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                        str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                        worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                    }
                                }
                            }

                            rowEnd = rowStart + data.Count - 1;
                            stt = 1;
                            row = rowStart;
                            col = colStart;

                            foreach (var item in data)
                            {
                                if (row != rowStart)
                                    worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                                worksheet.Cells[row, col].Value = stt;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                                foreach (var prop in dicProp)
                                {
                                    var val = prop.Value.GetValue(item);
                                    if (val != null)
                                        worksheet.Cells[row, prop.Key].Value = val;
                                    else
                                        worksheet.Cells[row, prop.Key].Value = null;
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                                }
                                foreach (var colCopy in dicCopy)
                                {
                                    if (!string.IsNullOrEmpty(colCopy.Value))
                                    {
                                        worksheet.Cells[row, colCopy.Key].Value = null;
                                        worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                    }
                                    else if (row != rowStart)
                                    {
                                        worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                        //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                    }
                                }

                                row++;
                                stt++;
                            }

                            Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                            foreach (var item in dicColumn)
                            {
                                dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                            }
                            foreach (var item in lstCheckFormula)
                            {
                                var str = item.Value.ToString().Trim();
                                foreach (var itemCheck in dicTemp)
                                {
                                    str = str.Replace(itemCheck.Key, itemCheck.Value);
                                }
                                item.Value = null;
                                item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                            }
                        }
                    }
                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string REPDIStatusOrder_SettingDownload(dynamic dynParam)
        {
            try
            {
                CUSSettingsReport item = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsReport>(dynParam.item.ToString());
               
                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date;
                string request = Convert.ToString(dynParam.request.ToString());
                if (item != null)
                {
                    switch (item.TypeDateRange)
                    {
                        case 1:
                            dtfrom = DateTime.Now.Date;
                            while (dtfrom.DayOfWeek == DayOfWeek.Monday)
                                dtfrom = dtfrom.AddDays(-1);
                            dtto = dtfrom.AddDays(6);
                            request = "";
                            break;
                        case 2:
                            dtfrom = DateTime.Now.Date;
                            dtfrom = new DateTime(dtfrom.Year, dtfrom.Month, 1).Date;
                            dtto = new DateTime(dtfrom.Year, dtfrom.Month + 1, 1).Date;
                            dtto = dtto.AddDays(-1);
                            request = "";
                            break;
                    }

                    CATFile itemfile = new CATFile();
                    itemfile.FileName = item.FileName;
                    itemfile.FilePath = item.FilePath;
                    itemfile.FileExt = "";
                    if (itemfile.FileName.LastIndexOf(".") > 0)
                        itemfile.FileExt = itemfile.FileName.Substring(itemfile.FileName.LastIndexOf("."), itemfile.FileName.Length - itemfile.FileName.LastIndexOf("."));
                    var lstid = new List<int>();
                    if (item.ListCustomer != null)
                        lstid = item.ListCustomer.Select(c => c.CustomerID).ToList();
                    if (lstid.Count > 0)
                    {
                        switch (item.TypeExport)
                        {
                            case 1: return REPDIStatusOrder_SettingDownload_Detail(lstid, dtfrom, dtto, item.TypeOfFilter, item.StatusID, itemfile, request);
                           
                        }
                        throw new Exception("Vui lòng thiết lập loại xuất báo cáo");
                    }
                    else
                        throw new Exception("Vui lòng thiết lập khách hàng xuất báo cáo");
                }
                else
                    throw new Exception("Thiết lập không tồn tại");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private string REPDIStatusOrder_SettingDownload_Detail(List<int> lstid, DateTime dtfrom, DateTime dtto, int typeOfFilter, int statusID, CATFile itemfile, string request)
        {
            var data = new List<DTOREPStatus_Order>();
            ServiceFactory.SVReport((ISVReport sv) =>
            {
                data = sv.REPDIStatus_OrderData(lstid, dtfrom, dtto, typeOfFilter, statusID);
            });

            var newfile = "/" + FolderUpload.Export + itemfile.FileName.Replace(itemfile.FileExt, "") + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
            if (System.IO.File.Exists(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath)))
                System.IO.File.Copy(HttpContext.Current.Server.MapPath("/" + itemfile.FilePath), HttpContext.Current.Server.MapPath(newfile), true);
            else
                throw new Exception("File không tồn tại!");

            FileInfo file = new FileInfo(HttpContext.Current.Server.MapPath(newfile));
            using (var package = new ExcelPackage(file))
            {
                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                if (worksheet != null)
                {
                    Dictionary<int, PropertyInfo> dicProp = new Dictionary<int, PropertyInfo>();
                    Dictionary<string, int> dicColumn = new Dictionary<string, int>();
                    List<ExcelRange> lstCheckFormula = new List<ExcelRange>();
                    Dictionary<int, string> dicCopy = new Dictionary<int, string>();
                    var typeProp = typeof(DTOREPStatus_Order);

                    int row = 0, col = 0, stt = 0, rowStart = 0, rowEnd = 0, colStart = 0;
                    for (row = 1; row <= worksheet.Dimension.End.Row && row < 200; row++)
                    {
                        if (rowStart == 0)
                        {
                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, row, col);
                                if (str == "[STT]")
                                {
                                    rowStart = row;
                                    colStart = col;
                                }
                                else if (rowStart > 0 && colStart > 0)
                                {
                                    var flag = true;
                                    if (!string.IsNullOrEmpty(str) && str.StartsWith("[") && str.EndsWith("]") && str.Length > 2)
                                    {
                                        str = str.Substring(1, str.Length - 2);
                                        try
                                        {
                                            var prop = typeProp.GetProperty(str);
                                            if (prop != null)
                                            {
                                                dicProp.Add(col, prop);
                                                if (!dicColumn.ContainsKey(str))
                                                    dicColumn.Add(str, col);
                                                flag = false;
                                            }
                                        }
                                        catch { }
                                    }

                                    if (flag)
                                    {
                                        if (str.StartsWith("="))
                                            dicCopy.Add(col, str);
                                        else
                                            dicCopy.Add(col, "");
                                    }
                                }
                                else if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[row, col]);
                                }
                            }
                        }

                        if (rowStart > 0) break;
                    }

                    if (rowStart < 1) throw new Exception("Kiểm tra [STT] có tồn tại và nằm ở sheet đầu tiên hay không");

                    // Header
                    for (int copyrow = 1; copyrow < rowStart; copyrow++)
                    {
                        for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                        {
                            var str = ExcelHelper.GetValue(worksheet, copyrow, col);
                            if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                            {
                                str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                worksheet.Cells[copyrow, col].Value = str;
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        // Footer
                        int copyrowend = worksheet.Dimension.End.Row;
                        if (copyrowend > rowStart + 100)
                            copyrowend = rowStart + 100;
                        for (int copyrow = copyrowend; copyrow > rowStart; copyrow--)
                        {
                            worksheet.Cells[copyrow, 1, copyrow, worksheet.Dimension.End.Column].Copy(worksheet.Cells[copyrow + data.Count - 1, 1, copyrow + data.Count - 1, worksheet.Dimension.End.Column]);

                            for (col = 1; col <= worksheet.Dimension.End.Column && col < 200; col++)
                            {
                                var str = ExcelHelper.GetValue(worksheet, copyrow + data.Count - 1, col);
                                if (!string.IsNullOrEmpty(str) && str.StartsWith("="))
                                {
                                    if (str.IndexOf("[") > 0 && str.IndexOf("]") > 0)
                                        lstCheckFormula.Add(worksheet.Cells[copyrow + data.Count - 1, col]);
                                }
                                if (!string.IsNullOrEmpty(str) && (str.Contains("[DateReportFrom]") || str.Contains("[DateReportTo]")))
                                {
                                    str = str.Replace("[DateReportFrom]", dtfrom.ToString("dd/MM/yyyy"));
                                    str = str.Replace("[DateReportTo]", dtto.ToString("dd/MM/yyyy"));
                                    worksheet.Cells[copyrow + data.Count - 1, col].Value = str;
                                }
                            }
                        }

                        // Data
                        rowEnd = rowStart + data.Count - 1;
                        stt = 1;
                        row = rowStart;
                        col = colStart;

                        foreach (var item in data)
                        {
                            if (row != rowStart)
                                worksheet.Cells[rowStart, 1, rowStart, worksheet.Dimension.End.Column].Copy(worksheet.Cells[row, 1, row, worksheet.Dimension.End.Column]);

                            worksheet.Cells[row, col].Value = stt;
                            //ExcelHelper.CopyStyle(worksheet, rowStart, col, row, col);

                            foreach (var prop in dicProp)
                            {
                                var val = prop.Value.GetValue(item);
                                if (val != null)
                                    worksheet.Cells[row, prop.Key].Value = val;
                                else
                                    worksheet.Cells[row, prop.Key].Value = null;
                                //ExcelHelper.CopyStyle(worksheet, rowStart, prop.Key, row, prop.Key);
                            }
                            foreach (var colCopy in dicCopy)
                            {
                                if (!string.IsNullOrEmpty(colCopy.Value))
                                {
                                    worksheet.Cells[row, colCopy.Key].Value = null;
                                    worksheet.Cells[row, colCopy.Key].Formula = REPFormula_Replace(colCopy.Value, row, rowStart, rowEnd);
                                }
                                else if (row != rowStart)
                                {
                                    worksheet.Cells[row, colCopy.Key].Copy(worksheet.Cells[rowStart, colCopy.Key]);
                                    //ExcelHelper.CopyStyle(worksheet, rowStart, colCopy.Key, row, colCopy.Key);
                                }
                            }

                            row++;
                            stt++;
                        }

                        Dictionary<string, string> dicTemp = new Dictionary<string, string>();
                        foreach (var item in dicColumn)
                        {
                            dicTemp.Add("[" + item.Key + "]", worksheet.Cells[rowStart, item.Value, rowStart + data.Count - 1, item.Value].Address);
                        }
                        foreach (var item in lstCheckFormula)
                        {
                            var str = item.Value.ToString().Trim();
                            foreach (var itemCheck in dicTemp)
                            {
                                str = str.Replace(itemCheck.Key, itemCheck.Value);
                            }
                            item.Value = null;
                            item.Formula = str.Replace("[ROWSTART]", rowStart.ToString()).Replace("[ROWEND]", rowEnd.ToString());
                        }
                    }
                }
                package.Save();
            }
            return newfile;
        }
        #endregion
    }
}