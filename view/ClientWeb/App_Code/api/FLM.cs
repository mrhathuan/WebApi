using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Security;
using DTO;
using CacheManager.Core;
using System.Web;
using Microsoft.Practices.Unity;
using Newtonsoft.Json;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using Presentation;
using Microsoft.SqlServer;
using System.IO;
using OfficeOpenXml;
using IServices;
using OfficeOpenXml.Style;
using System.Drawing;
using System.ServiceModel;
using System.Text.RegularExpressions;

namespace ClientWeb
{
    public class FLMController : BaseController
    {
        #region DriverCost
        public DTOResult FLMTypeDriverCost_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTypeDriverCost_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOFLMTypeDriverCost FLMTypeDriverCost_Get(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMTypeDriverCost();
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTypeDriverCost_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMTypeDriverCost_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMTypeDriverCost_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMTypeDriverCost_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMTypeDriverCost item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMTypeDriverCost>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMTypeDriverCost_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMAsset

        #region LocationAdderss
        public DTOResult FLMAsset_Location_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Location_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMAsset_LocationNotIn_Save(dynamic dynParam)
        {
            try
            {
               
                int locationID = (int)dynParam.locationID;
                int assetID = (int)dynParam.assetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMAsset_LocationNotIn_Save(locationID, assetID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public CATLocation FLMAsset_Location_Get(dynamic dynParam)
        {
            try
            {
                var result = new CATLocation();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Location_Get(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMAsset_Location_Save(dynamic dynParam)
        {
            try
            {
                int result = -1;
                CATLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Location_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMAsset_Location_Delete(dynamic dynParam)
        {
            try
            {
                CATLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMAsset_Location_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Common FLMAsset
        [HttpPost]
        public DTOResult FLMAsset_EQM_ReadByAsset(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Equipment_ListByVehicleID(request, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult Equipment_PastListByVehicleID(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Equipment_PastListByVehicleID(request, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMAsset_FuelHistoryRead(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FuelHistory_List(request, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMAsset_RentRead(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Vendor_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMDriver> FLMAsset_AllDriverRead(dynamic dynParam)
        {
            try
            {
                var result = new List<DTOFLMDriver>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverAll_List().Data.Cast<DTOFLMDriver>().ToList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMAsset_Consumption_ReadByAsset(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.MaterialQuota_List(request, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMAsset_Consumption_UpdateByAsset(dynamic dynParam)
        {
            try
            {
                int result = -1;
                DTOFLMMaterialQuota item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMaterialQuota>(dynParam.item.ToString());
                int AssetID = (int)dynParam.AssetID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.MaterialQuota_Save(item, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Consumption_Destroy(dynamic dynParam)
        {
            try
            {
                DTOFLMMaterialQuota item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMaterialQuota>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.MaterialQuota_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMAsset_Consumption_NotChooseRead(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.MaterialByVehicleID_List(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Consumption_NotChooseUpdate(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMaterialQuota> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMaterialQuota>>(dynParam.lst.ToString());
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.MaterialQuota_SaveList(lst, AssetID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool FLMAsset_IsValidRegNo(string regNo)
        {
            regNo = regNo.Trim();
            bool result = false;
            string pnum = @"[a-zA-Z\d]{2,4}-[\s\S]{1,9}$";
            if (Regex.Match(regNo, pnum).Success) { result = true; }
            return result;
        }

        #endregion

        #region Truck
        public DTOResult FLMAsset_Truck_Read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Truck_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMTruck FLMAsset_Truck_Get(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                DTOFLMTruck result = new DTOFLMTruck();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Truck_Get(AssetID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMScheduleFeeDefault_List(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                string request = dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMScheduleFeeDefault_List(request, AssetID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMScheduleFeeDefault FLMScheduleFeeDefault_Get(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                DTOFLMScheduleFeeDefault result = new DTOFLMScheduleFeeDefault();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMScheduleFeeDefault_Get(ID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMScheduleFeeDefault_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFeeDefault item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleFeeDefault>(dynParam.item.ToString());
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMScheduleFeeDefault_Save(item, AssetID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMScheduleFeeDefault_Delete(dynamic dynParam)
        {
            try
            {
                int item = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMScheduleFeeDefault_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMAsset_Truck_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMTruck item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMTruck>(dynParam.item.ToString());
                int result = -1;
                item.RegNo = item.RegNo.Trim();

                if (!(item.ID > 0))
                {
                    if (string.IsNullOrEmpty(item.RegNo))
                        throw new Exception("Số xe trống");
                    if (!FLMAsset_IsValidRegNo(item.RegNo))
                        throw new Exception("Số xe không đúng định dạng (ví dụ:[29c-1234] [29c-12345] [29LD-1234] [29LD-12345])");
                }

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Truck_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Truck_Destroy(dynamic dynParam)
        {
            try
            {
                DTOFLMTruck item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMTruck>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Truck_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMAsset_Truck_Excel_Export()
        {
            try
            {
                List<DTOFLMTruckImport> result = new List<DTOFLMTruckImport>();
                List<DTOFLMMaterial> lstFuel = new List<DTOFLMMaterial>();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.Truck_Export();
                    lstFuel = sv.FLMMaterial_List().Data.Cast<DTOFLMMaterial>().Where(c => c.IsFuel).ToList();
                });
                //string file = Path.Combine(Server.MapPath("~/" + FolderUpload.Export) + "ExportDistributor_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                string file = "/" + FolderUpload.Export + "ExportTruck_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    for (int i = 1; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    col++; worksheet.Cells[row, col].Value = "Trọng tải"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 2, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet.Cells[row + 1, col].Value = "Đăng kí"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối thiểu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối Đa"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 2, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    col++; worksheet.Cells[row, col].Value = "Số khối"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 2, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet.Cells[row + 1, col].Value = "Đăng kí"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối thiểu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối Đa"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 2, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    // col++; worksheet.Cells[row, col].Value = "Cho thuê"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Phân loại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Phụ lái"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g k.hao(tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g bắt đầu tính KH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g b.hành (tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc BH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Thông số kỹ thuật"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Vĩ độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Kinh độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ thấp nhất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ cao nhất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã GPS"; worksheet.Column(col).Width = 20;
                    for (int i = col - 15; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    //dinh muc

                    if (lstFuel.Count > 0)
                    {
                        col++; worksheet.Cells[row, col].Value = "Định mức";
                        col--;
                        foreach (var item in lstFuel)
                        {
                            col++; worksheet.Cells[row + 1, col].Value = item.Code; worksheet.Column(col).Width = 15;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row, col - lstFuel.Count + 1, row, col, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col - lstFuel.Count - 1, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data

                    if (result.Count > 0)
                    {
                        row = 3;
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = item.RegNo;
                            col++; worksheet.Cells[row, col].Value = item.RegWeight;
                            col++; worksheet.Cells[row, col].Value = item.MinWeight;
                            col++; worksheet.Cells[row, col].Value = item.MaxWeight;
                            col++; worksheet.Cells[row, col].Value = item.RegCapacity;
                            col++; worksheet.Cells[row, col].Value = item.MinCapacity;
                            col++; worksheet.Cells[row, col].Value = item.MaxCapacity;
                            // col++; worksheet.Cells[row, col].Value = item.IsRent ? "X" : string.Empty;
                            col++; worksheet.Cells[row, col].Value = item.GroupOfVehicleCode;
                            col++; worksheet.Cells[row, col].Value = item.DriverCode;
                            col++; worksheet.Cells[row, col].Value = item.AssistantCode;
                            col++; worksheet.Cells[row, col].Value = item.YearOfProduction;
                            col++; worksheet.Cells[row, col].Value = item.Manufactor;

                            col++; worksheet.Cells[row, col].Value = item.BaseValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.CurrentValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationStart;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyEnd;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.Specification;
                            col++; worksheet.Cells[row, col].Value = item.Lat;
                            col++; worksheet.Cells[row, col].Value = item.Lng;
                            col++; worksheet.Cells[row, col].Value = item.TempMin;
                            col++; worksheet.Cells[row, col].Value = item.TempMax;
                            col++; worksheet.Cells[row, col].Value = item.GPSCode;
                            if (item.lstConsumption.Count > 0)
                            {
                                foreach (var material in lstFuel)
                                {
                                    col++;
                                    var check = item.lstConsumption.FirstOrDefault(c => c.MaterialID == material.ID);
                                    if (check != null)
                                    {
                                        worksheet.Cells[row, col].Value = check.QuantityPerKM;
                                        ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                                    }
                                }
                            }
                            row++;
                            stt++;
                        }
                    }

                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMAsset_Truck_Excel_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTruckImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTruckImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.Truck_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMTruckImport> FLMAsset_Truck_Excel_Check(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTruckImport> result = new List<DTOFLMTruckImport>();
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    List<CATVehicle> lstVehicle = new List<CATVehicle>();
                    List<CATGroupOfVehicle> lstGOV = new List<CATGroupOfVehicle>();
                    List<DTOFLMAsset> lstOwnVehicle = new List<DTOFLMAsset>();
                    List<DTOFLMMaterial> lstFuel = new List<DTOFLMMaterial>();
                    List<DTOFLMDriver> lstDriver = new List<DTOFLMDriver>();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        lstVehicle = sv.CATVehicle_AllList().Data.Cast<CATVehicle>().ToList();
                        lstGOV = sv.CATGroupOfVehicle_AllList().Data.Cast<CATGroupOfVehicle>().ToList();
                        lstOwnVehicle = sv.VehicleOwn_List().Where(c => c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck).ToList();
                        lstFuel = sv.FLMMaterial_List().Data.Cast<DTOFLMMaterial>().Where(c => c.IsFuel).ToList();
                        lstDriver = sv.FLMDriverAll_List().Data.Cast<DTOFLMDriver>().ToList();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string Input;
                            if (worksheet != null)
                            {
                                // doc tieu de cac loai dinh muc
                                row = 2; col = 25;
                                Dictionary<int, int> dictCol_ID = new Dictionary<int, int>();
                                Dictionary<int, string> dictCol_Code = new Dictionary<int, string>();
                                while (col <= worksheet.Dimension.End.Column)
                                {
                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(Input))
                                        break;
                                    // throw new Exception("Thiếu mã vật tư để thiết lập định mức");
                                    else
                                    {
                                        if (!dictCol_Code.ContainsValue(Input))
                                        {
                                            var check = lstFuel.FirstOrDefault(c => c.Code == Input);
                                            if (check != null)
                                            {
                                                dictCol_Code.Add(col, check.Code);
                                                dictCol_ID.Add(col, check.ID);
                                                col++;
                                            }
                                            else throw new Exception("Mã vật tư: [" + Input + "] không tốn tại");
                                        }
                                        else throw new Exception("Mã vật tư: [" + Input + "] bị trùng");
                                    }
                                }
                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMTruckImport obj = new DTOFLMTruckImport();

                                    obj.ExcelRow = row;

                                    #region regno
                                    col = 2;

                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RegNo = Input;
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkRegNoOnFile = result.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                        if (checkRegNoOnFile == null)
                                        {
                                            var checkRegNo = lstVehicle.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                            if (checkRegNo == null)// xe moi
                                            {
                                                obj.VehicleID = 0;
                                                obj.ID = 0;
                                                obj.RegNo = Input;
                                            }
                                            else//da ton tai so xe
                                            {
                                                if (checkRegNo.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck)
                                                {
                                                    var checkOwn = lstOwnVehicle.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                                    if (checkOwn == null)
                                                    {
                                                        obj.ID = 0;
                                                        obj.RentID = null;
                                                        obj.IsRent = false;
                                                    }
                                                    else
                                                    {
                                                        obj.ID = checkOwn.ID;
                                                        obj.RentID = checkOwn.RentID;
                                                        obj.IsRent = checkOwn.IsRent;
                                                    }
                                                    obj.VehicleID = checkRegNo.ID;
                                                    obj.RegNo = checkRegNo.RegNo;
                                                }
                                                else
                                                {
                                                    lstError.Add("Số xe [" + Input + "] đã tồn tại và không phải là xe tải");
                                                }
                                            }
                                        }
                                        else
                                            lstError.Add("Số xe[" + Input + "] bị trùng trên file");
                                    }
                                    else
                                        lstError.Add("[Số xe] không được trống");
                                    #endregion

                                    #region trong tai
                                    // Reg Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.RegWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải đăng kí không chính xác");
                                        }
                                    }
                                    else obj.RegWeight = null;
                                    //Min Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MinWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải tối thiểu không chính xác");
                                        }
                                    }
                                    else obj.MinWeight = null;
                                    //Max Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MaxWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải tối đa không chính xác");
                                        }
                                    }
                                    else obj.MaxWeight = null;
                                    #endregion

                                    #region so khoi
                                    // Reg capacity
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.RegCapacity = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Số khối đăng kí không chính xác");
                                        }
                                    }
                                    else obj.RegCapacity = null;
                                    //Min capacity
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MinCapacity = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Số khối tối thiểu không chính xác");
                                        }
                                    }
                                    else obj.MinCapacity = null;

                                    //Max capacity
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MaxCapacity = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Số khối tối đa không chính xác");
                                        }
                                    }
                                    else obj.MaxCapacity = null;
                                    #endregion

                                    #region thong tin khac
                                    //phan loai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstGOV.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                        if (checkGOV != null)
                                            obj.GroupOfVehicleID = checkGOV.ID;
                                        else lstError.Add("Loại[" + Input + "] không tồn tại");
                                    }
                                    else obj.GroupOfVehicleID = null;
                                    //Tai xe
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstDriver.FirstOrDefault(c => c.EmployeeCode == Input);
                                        if (checkGOV != null)
                                            obj.DriverID = checkGOV.ID;
                                        else lstError.Add("Mã[" + Input + "] không tồn tại");
                                    }
                                    else obj.DriverID = null;
                                    //Phu lai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstDriver.FirstOrDefault(c => c.EmployeeCode == Input);
                                        if (checkGOV != null)
                                            obj.AssistantID = checkGOV.ID;
                                        else lstError.Add("Mã[" + Input + "] không tồn tại");
                                    }
                                    else obj.AssistantID = null;
                                    //nam san xuat

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            int year = Convert.ToInt32(Input);
                                            obj.YearOfProduction = year.ToString();
                                        }
                                        catch
                                        {
                                            lstError.Add("[Năm sản xuất] không chính xác");
                                        }
                                    }
                                    else obj.YearOfProduction = null;

                                    //nhà sản xuất
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                        obj.Manufactor = Input;
                                    else obj.Manufactor = null;

                                    //gia tri ban dau

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.BaseValue = Convert.ToDecimal(Input);
                                            obj.BaseValue = Convert.ToDecimal(Input.ToString());
                                        }
                                        catch
                                        {
                                            lstError.Add("[Giá trị ban đầu] không chính xác");
                                        }
                                    }
                                    else obj.BaseValue = null;
                                    //gia tri hiện tại

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.CurrentValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị hiện tại[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.CurrentValue = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g k.hao(tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.DepreciationPeriod = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationStart = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DepreciationStart = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("T/g bắt đầu tính KH[" + Input + "] không chính xác");
                                            }

                                        }
                                    }
                                    else obj.DepreciationStart = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g b.hành (tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.WarrantyPeriod = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyEnd = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.WarrantyEnd = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày kết thúc BH[" + Input + "] không chính xác");
                                            }

                                        }
                                    }
                                    else obj.WarrantyEnd = null;
                                    //Thông số kỹ thuật

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        obj.Specification = Input;
                                    }
                                    else obj.Specification = null;

                                    //Vĩ độ

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lat = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Vĩ độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lat = null;
                                    //Kinh độ

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lng = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kinh độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lng = null;
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.TempMin = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Nhiệt độ thấp nhất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.TempMin = null;
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.TempMax = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Nhiệt độ lớn nhất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.TempMax = null;
                                    //dinh muc
                                    col++;
                                    obj.lstConsumption = new List<DTOFLMMaterialQuota>();
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        DTOFLMMaterialQuota objCon = new DTOFLMMaterialQuota();
                                        Input = ExcelHelper.GetValue(worksheet, row, col);

                                        if (!string.IsNullOrEmpty(Input))
                                        {

                                            try
                                            {
                                                int materialID;

                                                objCon.QuantityPerKM = Convert.ToDouble(Input);
                                                dictCol_ID.TryGetValue(col, out materialID);

                                                objCon.MaterialID = materialID;
                                                objCon.VehicleID = obj.ID;
                                                obj.lstConsumption.Add(objCon);
                                            }
                                            catch
                                            {
                                                string materialCode;
                                                dictCol_Code.TryGetValue(col, out materialCode);
                                                lstError.Add("Định mức" + materialCode + " [" + Input + "] không chính xác");
                                            }
                                        }
                                        col++;
                                    }
                                    #endregion

                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelError = string.Join(", ", lstError);
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Tractor
        public DTOResult FLMAsset_Tractor_Read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMAsset_Tractor_GetRomooc()
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMRomooc_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMTractor FLMAsset_Tractor_Get(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                var result = default(DTOFLMTractor);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_Get(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMAsset_Tractor_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMTractor item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMTractor>(dynParam.item.ToString());
                int result = -1;
                item.RegNo = item.RegNo.Trim();
                if (!(item.ID > 0))
                {
                    if (string.IsNullOrEmpty(item.RegNo))
                        throw new Exception("Số xe trống");
                    if (!FLMAsset_IsValidRegNo(item.RegNo))
                        throw new Exception("Số xe không đúng định dạng (ví dụ:[29c-1234] [29c-12345] [29LD-1234] [29LD-12345])");
                }

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Tractor_Destroy(dynamic dynParam)
        {
            try
            {
                DTOFLMTractor item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMTractor>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Tractor_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMAsset_Tractor_Excel_Export()
        {
            try
            {
                List<DTOFLMTractorExcel> result = new List<DTOFLMTractorExcel>();
                List<DTOFLMMaterial> lstFuel = new List<DTOFLMMaterial>();

                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.Tractor_Export();
                    lstFuel = sv.FLMMaterial_List().Data.Cast<DTOFLMMaterial>().Where(c => c.IsFuel).ToList();
                });
                //string file = Path.Combine(Server.MapPath("~/" + FolderUpload.Export) + "ExportDistributor_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                string file = "/" + FolderUpload.Export + "ExportTractor_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header

                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    for (int i = 1; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    col++; worksheet.Cells[row, col].Value = "Trọng tải"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 2, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet.Cells[row + 1, col].Value = "Đăng kí"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối thiểu"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row + 1, col].Value = "Tối Đa"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 2, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    col++; worksheet.Cells[row, col].Value = "SL Con.20DC tối đa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Phân loại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Tài xế"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Phụ lái"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Romooc mặc định"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g k.hao(tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g bắt đầu tính KH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g b.hành (tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc BH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Thông số kỹ thuật"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Vĩ độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Kinh độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ thấp nhất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Nhiệt độ cao nhất"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã GPS"; worksheet.Column(col).Width = 20;
                    for (int i = col - 17; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    //dinh muc

                    if (lstFuel.Count > 0)
                    {
                        col++; worksheet.Cells[row, col].Value = "Định mức";
                        col--;
                        foreach (var item in lstFuel)
                        {
                            col++; worksheet.Cells[row + 1, col].Value = item.Code; worksheet.Column(col).Width = 15;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row, col - lstFuel.Count + 1, row, col, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col - lstFuel.Count - 1, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }


                    worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data

                    if (result.Count > 0)
                    {
                        row = 3;
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = item.RegNo;
                            col++; worksheet.Cells[row, col].Value = item.RegWeight;
                            col++; worksheet.Cells[row, col].Value = item.MinWeight;
                            col++; worksheet.Cells[row, col].Value = item.MaxWeight;
                            col++; worksheet.Cells[row, col].Value = item.MaxCapacity;
                            col++; worksheet.Cells[row, col].Value = item.GroupOfVehicleCode;
                            col++; worksheet.Cells[row, col].Value = item.DriverCode;
                            col++; worksheet.Cells[row, col].Value = item.AssistantCode;
                            col++; worksheet.Cells[row, col].Value = item.CurrentRomooc;
                            col++; worksheet.Cells[row, col].Value = item.YearOfProduction;
                            col++; worksheet.Cells[row, col].Value = item.Manufactor;

                            col++; worksheet.Cells[row, col].Value = item.BaseValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.CurrentValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationStart;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyEnd;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.Specification;
                            col++; worksheet.Cells[row, col].Value = item.Lat;
                            col++; worksheet.Cells[row, col].Value = item.Lng;
                            col++; worksheet.Cells[row, col].Value = item.TempMin;
                            col++; worksheet.Cells[row, col].Value = item.TempMax;
                            col++; worksheet.Cells[row, col].Value = item.GPSCode;
                            if (item.lstConsumption.Count > 0)
                            {
                                foreach (var material in lstFuel)
                                {
                                    col++;
                                    var check = item.lstConsumption.FirstOrDefault(c => c.MaterialID == material.ID);
                                    if (check != null)
                                    {
                                        worksheet.Cells[row, col].Value = check.QuantityPerKM;
                                        ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                                    }
                                }
                            }
                            row++;
                            stt++;
                        }
                    }

                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMAsset_Tractor_Excel_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTractorExcel> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTractorExcel>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.Tractor_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMTractorExcel> FLMAsset_Tractor_Excel_Check(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTractorExcel> result = new List<DTOFLMTractorExcel>();
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    List<CATVehicle> lstVehicle = new List<CATVehicle>();
                    List<CATGroupOfVehicle> lstGOV = new List<CATGroupOfVehicle>();
                    List<DTOFLMAsset> lstOwnVehicle = new List<DTOFLMAsset>();
                    List<DTOFLMAsset> lstOwnRomooc = new List<DTOFLMAsset>();
                    List<DTOFLMMaterial> lstFuel = new List<DTOFLMMaterial>();
                    List<DTOFLMDriver> lstDriver = new List<DTOFLMDriver>();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        lstVehicle = sv.CATVehicle_AllList().Data.Cast<CATVehicle>().ToList();
                        lstGOV = sv.CATGroupOfVehicle_AllList().Data.Cast<CATGroupOfVehicle>().ToList();
                        lstOwnVehicle = sv.VehicleOwn_List().Where(c => c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor).ToList();
                        lstOwnRomooc = sv.VehicleOwn_List().Where(c => c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).ToList();
                        lstFuel = sv.FLMMaterial_List().Data.Cast<DTOFLMMaterial>().Where(c => c.IsFuel).ToList();
                        lstDriver = sv.FLMDriverAll_List().Data.Cast<DTOFLMDriver>().ToList();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string Input;
                            if (worksheet != null)
                            {
                                row = 2; col = 24;
                                Dictionary<int, int> dictCol_ID = new Dictionary<int, int>();
                                Dictionary<int, string> dictCol_Code = new Dictionary<int, string>();
                                while (col <= worksheet.Dimension.End.Column)
                                {
                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(Input))
                                        break;
                                    //throw new Exception("Thiếu mã vật tư để thiết lập định mức");
                                    else
                                    {
                                        if (!dictCol_Code.ContainsValue(Input))
                                        {
                                            var check = lstFuel.FirstOrDefault(c => c.Code == Input);
                                            if (check != null)
                                            {
                                                dictCol_Code.Add(col, check.Code);
                                                dictCol_ID.Add(col, check.ID);
                                                col++;
                                            }
                                            else throw new Exception("Mã vật tư: [" + Input + "] không tốn tại");
                                        }
                                        else throw new Exception("Mã vật tư: [" + Input + "] bị trùng");
                                    }
                                }
                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMTractorExcel obj = new DTOFLMTractorExcel();

                                    obj.ExcelRow = row;

                                    #region regno
                                    col = 2;

                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RegNo = Input;
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkRegNoOnFile = result.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                        if (checkRegNoOnFile == null)
                                        {
                                            var checkRegNo = lstVehicle.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                            if (checkRegNo == null)// xe moi
                                            {
                                                obj.VehicleID = 0;
                                                obj.ID = 0;
                                                obj.RegNo = Input;
                                            }
                                            else//da ton tai so xe
                                            {
                                                if (checkRegNo.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor)
                                                {
                                                    var checkOwn = lstOwnVehicle.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                                    if (checkOwn == null)
                                                    {
                                                        obj.ID = 0;
                                                        obj.RentID = null;
                                                        obj.IsRent = false;
                                                    }
                                                    else
                                                    {
                                                        obj.ID = checkOwn.ID;
                                                        obj.RentID = checkOwn.RentID;
                                                        obj.IsRent = checkOwn.IsRent;
                                                    }
                                                    obj.VehicleID = checkRegNo.ID;
                                                    obj.RegNo = checkRegNo.RegNo;
                                                }
                                                else
                                                {
                                                    lstError.Add("Số xe [" + Input + "] đã tồn tại và không phải là đầu kéo");
                                                }
                                            }
                                        }
                                        else
                                            lstError.Add("Số xe[" + Input + "] bị trùng trên file");
                                    }
                                    else
                                        lstError.Add("[Số xe] không được trống");
                                    #endregion

                                    #region trong tai
                                    // Reg Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.RegWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải đăng kí không chính xác");
                                        }
                                    }
                                    else obj.RegWeight = null;
                                    //Min Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MinWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải tối thiểu không chính xác");
                                        }
                                    }
                                    else obj.MinWeight = null;
                                    //Max Weight
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MaxWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Trọng tải tối đa không chính xác");
                                        }
                                    }
                                    else obj.MaxWeight = null;
                                    #endregion

                                    #region so con 20 toi da

                                    //Max capacity
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MaxCapacity = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("SL Con.20DC tối đa không chính xác");
                                        }
                                    }
                                    else obj.MaxCapacity = null;
                                    #endregion

                                    #region thong tin khac
                                    //phan loai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstGOV.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                        if (checkGOV != null)
                                            obj.GroupOfVehicleID = checkGOV.ID;
                                        else lstError.Add("Loại[" + Input + "] không tồn tại");
                                    }
                                    else obj.GroupOfVehicleID = null;
                                    //Tai xe
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstDriver.FirstOrDefault(c => c.EmployeeCode == Input);
                                        if (checkGOV != null)
                                            obj.DriverID = checkGOV.ID;
                                        else lstError.Add("Mã[" + Input + "] không tồn tại");
                                    }
                                    else obj.DriverID = null;
                                    //Phu lai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOV = lstDriver.FirstOrDefault(c => c.EmployeeCode == Input);
                                        if (checkGOV != null)
                                            obj.AssistantID = checkGOV.ID;
                                        else lstError.Add("Mã[" + Input + "] không tồn tại");
                                    }
                                    else obj.AssistantID = null;
                                    //romooc mac dinh
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkRomooc = lstOwnRomooc.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                        if (checkRomooc != null)
                                        {
                                            obj.CurrentRomoocID = checkRomooc.RomoocID;
                                            if (obj.MaxWeight != null && checkRomooc.RomoocWeight != null)
                                                obj.MaxWeightCal = obj.MaxWeightCal + checkRomooc.RomoocWeight;
                                            else if (obj.MaxWeight == null && checkRomooc.RomoocWeight != null)
                                                obj.MaxWeightCal = checkRomooc.RomoocWeight;
                                            else if (obj.MaxWeight != null && checkRomooc.RomoocWeight == null)
                                                obj.MaxWeightCal = obj.MaxWeight;
                                            else obj.MaxWeightCal = null;

                                        }
                                        else lstError.Add("Romooc mặc định[" + Input + "] không tồn tại");
                                    }
                                    else
                                    {
                                        obj.CurrentRomoocID = null;
                                        if (obj.MaxWeight != null) obj.MaxWeightCal = obj.MaxWeight;
                                        else obj.MaxWeight = null;
                                    }

                                    //nam san xuat

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            int year = Convert.ToInt32(Input);
                                            obj.YearOfProduction = year.ToString();
                                        }
                                        catch
                                        {
                                            lstError.Add("[Năm sản xuất] không chính xác");
                                        }
                                    }
                                    else obj.YearOfProduction = null;

                                    //nhà sản xuất
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                        obj.Manufactor = Input;
                                    else obj.Manufactor = null;

                                    //gia tri ban dau

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.BaseValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("[Giá trị ban đầu] không chính xác");
                                        }
                                    }
                                    else obj.BaseValue = null;
                                    //gia tri hiện tại

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.CurrentValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị hiện tại[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.CurrentValue = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g k.hao(tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.DepreciationPeriod = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationStart = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DepreciationStart = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("T/g bắt đầu tính KH[" + Input + "] không chính xác");
                                            }

                                        }
                                    }
                                    else obj.DepreciationStart = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g b.hành (tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.WarrantyPeriod = null;
                                    //T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyEnd = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.WarrantyEnd = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày kết thúc BH[" + Input + "] không chính xác");
                                            }

                                        }
                                    }
                                    else obj.WarrantyEnd = null;
                                    //Thông số kỹ thuật

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        obj.Specification = Input;
                                    }
                                    else obj.Specification = null;

                                    //Vĩ độ

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lat = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Vĩ độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lat = null;
                                    //Kinh độ

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lng = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kinh độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lng = null;
                                    //nhiet do
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.TempMin = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Nhiệt độ thấp nhất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.TempMin = null;
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.TempMax = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Nhiệt độ lớn nhất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.TempMax = null;
                                    //dinh muc
                                    col++;
                                    obj.lstConsumption = new List<DTOFLMMaterialQuota>();
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        DTOFLMMaterialQuota objCon = new DTOFLMMaterialQuota();
                                        Input = ExcelHelper.GetValue(worksheet, row, col);

                                        if (!string.IsNullOrEmpty(Input))
                                        {

                                            try
                                            {
                                                int materialID;

                                                objCon.QuantityPerKM = Convert.ToDouble(Input);
                                                dictCol_ID.TryGetValue(col, out materialID);

                                                objCon.MaterialID = materialID;
                                                objCon.VehicleID = obj.ID;
                                                obj.lstConsumption.Add(objCon);
                                            }
                                            catch
                                            {
                                                string materialCode;
                                                dictCol_Code.TryGetValue(col, out materialCode);
                                                lstError.Add("Định mức" + materialCode + " [" + Input + "] không chính xác");
                                            }
                                        }
                                        col++;
                                    }

                                    #endregion

                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelError = string.Join(", ", lstError);
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region CAT_RomoocDefault
        [HttpPost]
        public DTOResult Tractor_RomoocDefault_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCATRomoocDefault Tractor_RomoocDefault_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOCATRomoocDefault);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int Tractor_RomoocDefault_Save(dynamic dynParam)
        {
            try
            {
                DTOCATRomoocDefault item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATRomoocDefault>(dynParam.item.ToString());
                int result = -1;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void Tractor_RomoocDefault_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Tractor_RomoocDefault_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMTractor> Tractor_RomoocDefault_TractorList()
        {
            try
            {
                var result = default(List<DTOFLMTractor>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_TractorList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMRomooc> Tractor_RomoocDefault_RomoocList()
        {
            try
            {
                var result = default(List<DTOFLMRomooc>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_RomoocList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel Tractor_RomoocDefault_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_RomoocDefault_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row Tractor_RomoocDefault_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.Tractor_RomoocDefault_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel Tractor_RomoocDefault_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.Tractor_RomoocDefault_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool Tractor_RomoocDefault_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.Tractor_RomoocDefault_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #endregion

        #region Romooc
        public DTOResult FLMAsset_Romooc_Read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Romooc_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMRomooc FLMAsset_Romooc_Get(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                var result = default(DTOFLMRomooc);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Romooc_Get(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMAsset_Romooc_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMRomooc item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMRomooc>(dynParam.item.ToString());
                int result = -1;
                item.RegNo = item.RegNo.Trim();

                if (!(item.ID > 0))
                {
                    if (string.IsNullOrEmpty(item.RegNo))
                        throw new Exception("Số xe trống");
                    if (!FLMAsset_IsValidRegNo(item.RegNo))
                        throw new Exception("Số xe không đúng định dạng (ví dụ:[29c-1234] [29c-12345] [29LD-1234] [29LD-12345])");
                }

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Romooc_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Romooc_Destroy(dynamic dynParam)
        {
            try
            {
                DTOFLMRomooc item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMRomooc>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Romooc_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMAsset_Romooc_Excel_Export()
        {
            try
            {
                List<DTOFLMRomoocExcel> result = new List<DTOFLMRomoocExcel>();

                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.Romooc_Export();
                });
                //string file = Path.Combine(Server.MapPath("~/" + FolderUpload.Export) + "ExportDistributor_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                string file = "/" + FolderUpload.Export + "ExportRomooc_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header

                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Phân loại"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tải trọng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "SL Con.20DC tối đa"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g k.hao(tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g bắt đầu tính KH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g b.hành (tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc BH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Thông số kỹ thuật"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Vĩ độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Kinh độ"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data

                    if (result.Count > 0)
                    {
                        row = 2;
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = item.RegNo;
                            col++; worksheet.Cells[row, col].Value = item.GroupOfRomoocName;
                            col++; worksheet.Cells[row, col].Value = item.MaxWeight;
                            col++; worksheet.Cells[row, col].Value = item.RegCapacity;
                            col++; worksheet.Cells[row, col].Value = item.YearOfProduction;
                            col++; worksheet.Cells[row, col].Value = item.Manufactor;

                            col++; worksheet.Cells[row, col].Value = item.BaseValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.CurrentValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationStart;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyEnd;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.Specification;
                            col++; worksheet.Cells[row, col].Value = item.Lat;
                            col++; worksheet.Cells[row, col].Value = item.Lng;
                            row++;
                            stt++;
                        }
                    }

                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMAsset_Romooc_Excel_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMRomoocExcel> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMRomoocExcel>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.Romooc_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMRomoocExcel> FLMAsset_Romooc_Excel_Check(dynamic dynParam)
        {
            try
            {
                List<DTOFLMRomoocExcel> result = new List<DTOFLMRomoocExcel>();
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    List<CATRomooc> lstRomooc = new List<CATRomooc>();
                    List<CATGroupOfRomooc> lstGOR = new List<CATGroupOfRomooc>();
                    List<DTOFLMAsset> lstOwnRomooc = new List<DTOFLMAsset>();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        lstRomooc = sv.CATRomooc_AllList().Data.Cast<CATRomooc>().ToList();
                        lstGOR = sv.CATGroupOfRomooc_List().Data.Cast<CATGroupOfRomooc>().ToList();
                        lstOwnRomooc = sv.VehicleOwn_List().Where(c => c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetRomooc).ToList();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string Input;
                            if (worksheet != null)
                            {

                                row = 2;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMRomoocExcel obj = new DTOFLMRomoocExcel();
                                    obj.ExcelRow = row;
                                    System.Diagnostics.Debug.WriteLine("row: " + row);
                                    #region regno
                                    col = 2;

                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RegNo = Input;
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkRegNoOnFile = result.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                        if (checkRegNoOnFile == null)
                                        {
                                            var checkRegNo = lstRomooc.FirstOrDefault(c => c.RegNo.ToLower() == Input.ToLower());
                                            if (checkRegNo == null)// xe moi
                                            {
                                                obj.RomoocID = 0;
                                                obj.ID = 0;
                                                obj.RegNo = Input;
                                            }
                                            else//da ton tai so xe
                                            {

                                                var checkOwn = lstOwnRomooc.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                                if (checkOwn == null)
                                                {
                                                    obj.ID = 0;
                                                    obj.RentID = null;
                                                    obj.IsRent = false;
                                                }
                                                else
                                                {
                                                    obj.ID = checkOwn.ID;
                                                    obj.RentID = checkOwn.RentID;
                                                    obj.IsRent = checkOwn.IsRent;
                                                }
                                                obj.RomoocID = checkRegNo.ID;
                                                obj.RegNo = checkRegNo.RegNo;

                                            }
                                        }
                                        else
                                            lstError.Add("Số xe[" + Input + "] bị trùng trên file");
                                    }
                                    else
                                        lstError.Add("[Số xe] không được trống");
                                    #endregion

                                    #region phân loại
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOR = lstGOR.FirstOrDefault(c => c.GroupName == Input);
                                        if (checkGOR != null)
                                            obj.GroupOfRomoocID = checkGOR.ID;
                                        else lstError.Add("Phân loại[" + Input + "] không tồn tại");
                                    }
                                    else obj.GroupOfRomoocID = null;
                                    #endregion
                                    #region tải trọng
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.MaxWeight = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Tải trọng không chính xác");
                                        }
                                    }
                                    else obj.MaxWeight = null;
                                    #endregion

                                    #region so con 20 toi da

                                    //Max capacity
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.RegCapacity = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("SL Con.20DC tối đa không chính xác");
                                        }
                                    }
                                    else obj.RegCapacity = null;
                                    #endregion

                                    #region năm sản xuất
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            int year = Convert.ToInt32(Input);
                                            obj.YearOfProduction = year.ToString();
                                        }
                                        catch
                                        {
                                            lstError.Add("Năm sản xuất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.YearOfProduction = null;
                                    #endregion

                                    #region nhà sx
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                        obj.Manufactor = Input;
                                    else obj.Manufactor = null;
                                    #endregion

                                    #region gia tri ban dau
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.BaseValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị ban đầu[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.BaseValue = null;
                                    #endregion

                                    #region gia tri hien tai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.CurrentValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị hiện tại[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.CurrentValue = null;
                                    #endregion

                                    #region T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g k.hao(tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.DepreciationPeriod = null;

                                    #endregion

                                    #region T/g bat dau tinh k.hao(tháng)
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationStart = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DepreciationStart = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("T/g bắt đầu tính KH[" + Input + "] không chính xác");
                                            }
                                        }
                                    }
                                    else obj.DepreciationStart = null;
                                    #endregion

                                    #region t/g bảo hành(tháng)
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g b.hành (tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.WarrantyPeriod = null;
                                    #endregion

                                    #region hạn bảo hành

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyEnd = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.WarrantyEnd = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày kết thúc BH[" + Input + "] không chính xác");
                                            }
                                        }
                                    }
                                    else obj.WarrantyEnd = null;
                                    #endregion

                                    #region Thông số kỹ thuật
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        obj.Specification = Input;
                                    }
                                    else obj.Specification = null;
                                    #endregion

                                    #region vĩ độ

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lat = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Vĩ độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lat = null;
                                    #endregion

                                    #region khinh độ
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.Lng = Convert.ToDouble(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kinh độ[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.Lng = null;
                                    #endregion

                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelError = string.Join(", ", lstError);
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Container
        public DTOResult FLMAsset_Container_read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Container_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMContainer FLMAsset_Container_Get(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                var result = default(DTOFLMContainer);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Container_Get(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMAsset_Container_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMContainer item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMContainer>(dynParam.item.ToString());
                int result = -1;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Container_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMAsset_Container_Destroy(dynamic dynParam)
        {
            try
            {
                DTOFLMContainer item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMContainer>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Container_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region EQM
        public DTOResult FLMAsset_EQM_Read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Equipment_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMFixedCost_ByAssetDelete(dynamic dynParam)
        {
            try
            {
                int assetID = (int)dynParam.assetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMFixedCost_ByAssetDelete(assetID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMFixedCost_ByAsset_CheckExpr(dynamic dynParam)
        {
            try
            {
                int assetID = (int)dynParam.assetID;
                string sExpression = dynParam.sExpression.ToString();
                bool result = false;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMFixedCost_ByAsset_CheckExpr(sExpression, assetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMEquipment FLMAsset_EQM_Get(dynamic dynParam)
        {
            try
            {
                int AssetID = (int)dynParam.AssetID;
                var result = default(DTOFLMEquipment);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Equipment_Get(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMAsset_EQM_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMEquipment item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMEquipment>(dynParam.item.ToString());
                int result = -1;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Equipment_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMAsset_EQM_ReadHistory(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.EquipmentHistory_ListByID(AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMAsset_Eqm_Excel_Export()
        {
            try
            {
                List<DTOFLMEquipmentExcel> result = new List<DTOFLMEquipmentExcel>();

                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.Eqm_Export();
                });
                //string file = Path.Combine(Server.MapPath("~/" + FolderUpload.Export) + "ExportDistributor_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx");
                string file = "/" + FolderUpload.Export + "ExportEqm_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header

                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Số Part."; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại thiết bị"; worksheet.Column(col).Width = 20;
                    for (int i = 1; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    col++; worksheet.Cells[row, col].Value = "Vị trí hiện tại"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 3, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[row + 1, col].Value = "Xe tải"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Đầu kéo"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Romooc"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row + 1, col].Value = "Kho"; worksheet.Column(col).Width = 15;
                    ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 3, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g k.hao(tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g bắt đầu tính KH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g b.hành (tháng)"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc BH"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Thông số kỹ thuật"; worksheet.Column(col).Width = 20;

                    for (int i = 9; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data

                    if (result.Count > 0)
                    {
                        row = 3;
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = item.Code;
                            col++; worksheet.Cells[row, col].Value = item.Name;
                            col++; worksheet.Cells[row, col].Value = item.GroupOfEquipmentName;
                            col++; worksheet.Cells[row, col].Value = item.AssetTruckID.HasValue ? item.CurrentLocation : string.Empty;
                            col++; worksheet.Cells[row, col].Value = item.AssetTractorID.HasValue ? item.CurrentLocation : string.Empty;
                            col++; worksheet.Cells[row, col].Value = item.AssetRomoocID.HasValue ? item.CurrentLocation : string.Empty;
                            col++; worksheet.Cells[row, col].Value = item.StockID.HasValue ? item.CurrentLocation : string.Empty;
                            col++; worksheet.Cells[row, col].Value = item.YearOfProduction;
                            col++; worksheet.Cells[row, col].Value = item.Manufactor;
                            col++; worksheet.Cells[row, col].Value = item.BaseValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.CurrentValue;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.DepreciationStart;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyPeriod;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = item.WarrantyEnd;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.Specification;
                            row++;
                            stt++;
                        }
                    }

                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMAsset_Eqm_Excel_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMEquipmentExcel> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMEquipmentExcel>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.Eqm_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMEquipmentExcel> FLMAsset_Eqm_Excel_Check(dynamic dynParam)
        {
            try
            {
                List<DTOFLMEquipmentExcel> result = new List<DTOFLMEquipmentExcel>();
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    List<CATGroupOfEquipment> lstGOE = new List<CATGroupOfEquipment>();
                    List<DTOFLMAsset> lstOwnVehicle = new List<DTOFLMAsset>();
                    List<DTOFLMAsset> lstOwnEqm = new List<DTOFLMAsset>();
                    List<FLMStock> lstStock = new List<FLMStock>();

                    int iTypeOfAssetTruck = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTypeOfAssetTractor = -(int)SYSVarType.TypeOfAssetTractor;
                    int iTypeOfAssetRomooc = -(int)SYSVarType.TypeOfAssetRomooc;
                    int iTypeOfAssetEquipment = -(int)SYSVarType.TypeOfAssetEquipment;

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        lstStock = sv.Stock_List().Data.Cast<FLMStock>().ToList();
                        lstGOE = sv.CATGroupOfEquipment_List().Data.Cast<CATGroupOfEquipment>().ToList();
                        lstOwnVehicle = sv.VehicleOwn_List();
                        lstOwnEqm = sv.EquipmentOwn_List();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string Input;
                            string TruckCode, TractorCode, RomoocCode, StockCode;
                            if (worksheet != null)
                            {

                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMEquipmentExcel obj = new DTOFLMEquipmentExcel();
                                    obj.ExcelRow = row;

                                    #region số Part
                                    col = 2;

                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ID = 0;
                                    obj.Code = Input;
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkPartOnFile = result.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                        if (checkPartOnFile == null)
                                        {
                                            var checkPart = lstOwnEqm.FirstOrDefault(c => c.Code.ToLower() == Input.ToLower());
                                            if (checkPart == null)// thiet bi moi
                                            {
                                                obj.ID = 0;
                                                obj.Code = Input;
                                                obj.IsRent = false;
                                                obj.RentID = null;
                                            }
                                            else//da ton tai so part
                                            {
                                                obj.ID = checkPart.ID;
                                                obj.Code = checkPart.Code;
                                                obj.IsRent = checkPart.IsRent;
                                                obj.RentID = checkPart.RentID;
                                            }
                                        }
                                        else
                                            lstError.Add("Số Part[" + Input + "] bị trùng trên file");
                                    }
                                    else
                                        lstError.Add("[Số Part] không được trống");
                                    #endregion

                                    #region thiết bị

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                        obj.Name = Input;
                                    else
                                        lstError.Add("[Thiết bị] không được trống");
                                    #endregion

                                    #region Loại thiết bị
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        var checkGOE = lstGOE.FirstOrDefault(c => c.GroupName == Input);
                                        if (checkGOE != null)
                                            obj.GroupOfEquipmentID = checkGOE.ID;
                                        else lstError.Add("Loại thiết bị[" + Input + "] không tồn tại");
                                    }
                                    else obj.GroupOfEquipmentID = null;
                                    #endregion

                                    #region vị trí hiện tại
                                    //neu thiết bị cũ thi ko quan tam, moi thi them vao
                                    if (obj.ID == 0)
                                    {
                                        //xe tải
                                        col++; TruckCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(TruckCode))
                                        {
                                            var checkTruck = lstOwnVehicle.FirstOrDefault(c => c.TypeOfAssetID == iTypeOfAssetTruck && c.Code.ToLower() == TruckCode.ToLower());
                                            if (checkTruck != null)
                                                obj.AssetTruckID = checkTruck.ID;
                                            else lstError.Add("Xe tải[" + Input + "] không tồn tại");
                                        }
                                        else obj.AssetTruckID = null;
                                        //đầu kéo
                                        col++; TractorCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(TractorCode))
                                        {
                                            if (string.IsNullOrEmpty(TruckCode))
                                            {
                                                var checkTractor = lstOwnVehicle.FirstOrDefault(c => c.TypeOfAssetID == iTypeOfAssetTractor && c.Code.ToLower() == TractorCode.ToLower());
                                                if (checkTractor != null)
                                                    obj.AssetTractorID = checkTractor.ID;
                                                else lstError.Add("Đầu kéo[" + Input + "] không tồn tại");
                                            }
                                            else lstError.Add("Thiết bị không thể ở nhiều chỗ cùng thời điểm");
                                        }
                                        else obj.AssetTractorID = null;
                                        //romooc
                                        col++; RomoocCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(RomoocCode))
                                        {
                                            if (string.IsNullOrEmpty(TractorCode) && string.IsNullOrEmpty(TruckCode))
                                            {
                                                var checkRomooc = lstOwnVehicle.FirstOrDefault(c => c.TypeOfAssetID == iTypeOfAssetRomooc && c.Code.ToLower() == RomoocCode.ToLower());
                                                if (checkRomooc != null)
                                                    obj.AssetRomoocID = checkRomooc.ID;
                                                else lstError.Add("Romooc[" + Input + "] không tồn tại");
                                            }
                                            else lstError.Add("Thiết bị không thể ở nhiều chỗ cùng thời điểm");
                                        }
                                        else obj.AssetRomoocID = null;
                                        //kho
                                        col++; StockCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(RomoocCode))
                                        {
                                            if (string.IsNullOrEmpty(TractorCode) && string.IsNullOrEmpty(TruckCode) && string.IsNullOrEmpty(RomoocCode))
                                            {
                                                var checkStock = lstStock.FirstOrDefault(c => c.Code.ToLower() == StockCode.ToLower());
                                                if (checkStock != null)
                                                    obj.StockID = checkStock.ID;
                                                else lstError.Add("Kho[" + Input + "] không tồn tại");
                                            }
                                            else lstError.Add("Thiết bị không thể ở nhiều chỗ cùng thời điểm");
                                        }
                                        else obj.StockID = null;
                                        //kiem tra dk thiết bi moi phai nam o 1 vi tri
                                        if (obj.AssetRomoocID == null && obj.AssetTractorID == null && obj.AssetTruckID == null && obj.StockID == null)
                                            lstError.Add("Thiết bị mới thiếu vị trí hiện tại");
                                    }
                                    else col = col + 4;
                                    #endregion

                                    #region năm sản xuất
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            int year = Convert.ToInt32(Input);
                                            obj.YearOfProduction = year.ToString();
                                        }
                                        catch
                                        {
                                            lstError.Add("Năm sản xuất[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.YearOfProduction = null;
                                    #endregion

                                    #region nhà sx
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                        obj.Manufactor = Input;
                                    else obj.Manufactor = null;
                                    #endregion

                                    #region gia tri ban dau
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.BaseValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị ban đầu[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.BaseValue = null;
                                    #endregion

                                    #region gia tri hien tai
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.CurrentValue = Convert.ToDecimal(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị hiện tại[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.CurrentValue = null;
                                    #endregion

                                    #region T/g k.hao(tháng)

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g k.hao(tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.DepreciationPeriod = null;

                                    #endregion

                                    #region T/g bat dau tinh k.hao(tháng)
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.DepreciationStart = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DepreciationStart = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("T/g bắt đầu tính KH[" + Input + "] không chính xác");
                                            }
                                        }
                                    }
                                    else obj.DepreciationStart = null;
                                    #endregion

                                    #region t/g bảo hành(tháng)
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyPeriod = Convert.ToInt32(Input);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g b.hành (tháng)[" + Input + "] không chính xác");
                                        }
                                    }
                                    else obj.WarrantyPeriod = null;
                                    #endregion

                                    #region hạn bảo hành

                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        try
                                        {
                                            obj.WarrantyEnd = ExcelHelper.ValueToDate(Input);
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.WarrantyEnd = Convert.ToDateTime(Input);
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày kết thúc BH[" + Input + "] không chính xác");
                                            }
                                        }
                                    }
                                    else obj.WarrantyEnd = null;
                                    #endregion

                                    #region Thông số kỹ thuật
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(Input))
                                    {
                                        obj.Specification = Input;
                                    }
                                    else obj.Specification = null;
                                    #endregion


                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelError = string.Join(", ", lstError);
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMEquipmentLocation FLMAsset_Eqm_GetLocation()
        {

            try
            {
                DTOFLMEquipmentLocation result = new DTOFLMEquipmentLocation();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.Equipment_GetLocation();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region history
        public DTOResult FLMAsset_History_DepreciationList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_History_DepreciationList(request, AssetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMAsset_History_OPSList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;
                DateTime dtFrom = Convert.ToDateTime(dynParam.dtFrom.ToString());
                DateTime dtTo = Convert.ToDateTime(dynParam.dtTo.ToString());
                bool isDI = (bool)dynParam.isDI;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_History_OPSList(request, AssetID, dtFrom, dtTo, isDI);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMAsset_History_RepairList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int AssetID = (int)dynParam.AssetID;
                DateTime dtFrom = Convert.ToDateTime(dynParam.dtFrom.ToString());
                DateTime dtTo = Convert.ToDateTime(dynParam.dtTo.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_History_RepairList(request, AssetID, dtFrom, dtTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region excel mới
        [HttpPost]
        public SYSExcel FLMAsset_Truck_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Truck_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMAsset_Truck_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Truck_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAsset_Truck_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Truck_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMAsset_Truck_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Truck_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAsset_Tractor_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Tractor_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMAsset_Tractor_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Tractor_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAsset_Tractor_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Tractor_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMAsset_Tractor_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Tractor_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAsset_Romooc_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Romooc_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMAsset_Romooc_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Romooc_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAsset_Romooc_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Romooc_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMAsset_Romooc_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAsset_Romooc_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region FLMSchedule
        #region Main
        [HttpPost]
        public DTOResult FLM_Schedule_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMSchedule FLM_Schedule_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMSchedule result = new DTOFLMSchedule();
                int sID = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Get(sID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLM_Schedule_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMSchedule item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMSchedule>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_Copy(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Copy(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLM_Schedule_Delete(dynamic dynParam)
        {
            try
            {
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Detail
        [HttpPost]
        public DTOFLMScheduleData FLMSchedule_Detail_Data(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleData result = new DTOFLMScheduleData();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Detail_Data(scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_Detail_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMScheduleDetail> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMScheduleDetail>>(dynParam.lst.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Detail_Save(lst, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMSchedule_Excel_Export(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                DTOFLMScheduleData result = new DTOFLMScheduleData();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Detail_Data(scheduleID);
                });

                string file = "/" + FolderUpload.Export + "ExportSchedule_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    foreach (DTOFLMScheduleDate item in result.ListDate)
                    {
                        //string title = item.Date.Day.ToString() + '/' + item.Date.Month.ToString() + '/' + item.Date.Year.ToString();
                        col++; worksheet.Cells[row, col].Value = item.DateName; worksheet.Column(col).Width = 6;
                        worksheet.Cells[row + 1, col].Value = item.Date.ToString("dd/MM"); worksheet.Column(col).Width = 6;
                        if (item.TypeDate == 2)
                        {
                            ExcelHelper.CreateCellStyle(worksheet, row, col, row + 1, col, false, true, "#c9c8c6", ExcelHelper.ColorBlack, 0, "");
                        }
                        else if (item.TypeDate == 3)
                        {
                            ExcelHelper.CreateCellStyle(worksheet, row, col, row + 1, col, false, true, "#ff5119", ExcelHelper.ColorWhite, 0, "");
                        }
                        else
                        {
                            ExcelHelper.CreateCellStyle(worksheet, row, col, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        }
                    }

                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row + 1, 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    ExcelHelper.CreateCellStyle(worksheet, row, 2, row + 1, 2, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    ExcelHelper.CreateCellStyle(worksheet, row, 3, row + 1, 3, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    foreach (DTOFLMDriver driver in result.ListDriver)
                    {
                        col = 1;
                        worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = driver.EmployeeCode;
                        col++; worksheet.Cells[row, col].Value = driver.DriverName;

                        List<DTOFLMScheduleDetail> list = result.ListDetail.Where(d => d.DriverID == driver.ID).ToList();
                        if (list != null || list.Count() != 0)
                        {
                            foreach (DTOFLMScheduleDate date in result.ListDate)
                            {
                                col++;
                                foreach (DTOFLMScheduleDetail item in list)
                                {
                                    if (item.ScheduleDateID == date.ID)
                                    {
                                        worksheet.Cells[row, col].Value = "x";
                                        break;
                                    }
                                }
                            }
                        }

                        row++;
                        stt++;
                    }
                    if (result.ListDriver.Count > 0)
                    {
                        worksheet.Cells[2, 4, row - 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[2, 4, row - 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    #endregion


                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOFLMScheduleImport> FLMSchedule_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleImport> result = new List<DTOFLMScheduleImport>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMScheduleData data = new DTOFLMScheduleData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMSchedule_Detail_Data(scheduleID);
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            int col = 4, row = 2;
                            string date = "", driverCode = "", driverName = "";
                            Dictionary<int, int> dictColDate = new Dictionary<int, int>();
                            Dictionary<int, DateTime> dictColDateCode = new Dictionary<int, DateTime>();
                            if (worksheet != null)
                            {
                                while (col <= worksheet.Dimension.End.Column)
                                {
                                    date = ExcelHelper.GetValue(worksheet, row, col);
                                    if (col == 4 && String.IsNullOrEmpty(date)) break;
                                    if (!string.IsNullOrEmpty(date))
                                    {
                                        var dayElement = date.Split('/').ToList();
                                        if (dayElement.Count != 2)
                                            throw new Exception("Ngày chấm công [" + date + "] không đúng định dạng(ngày/tháng)");
                                        DateTime dt = new DateTime();
                                        try
                                        {
                                            int day = Convert.ToInt32(dayElement[0]);
                                            int month = Convert.ToInt32(dayElement[1]);
                                            if (month > 12 || month < 1)
                                                throw new Exception("Ngày chấm công [" + date + "] không chính xác(ngày/tháng)");
                                            if ((month == 2 && (day > 29 || day < 1)) || (day > 31 || day < 1))
                                                throw new Exception("Ngày chấm công [" + date + "] không chính xác(ngày/tháng)");

                                            dt = new DateTime(DateTime.Now.Year, month, day);
                                        }
                                        catch
                                        {
                                            throw new Exception("Ngày chấm công [" + date + "] không chính xác(ngày/tháng)");
                                        }


                                        var checkScheduleDate = data.ListDate.FirstOrDefault(c => c.Date == dt);
                                        if (checkScheduleDate == null) throw new Exception("Ngày chấm công [" + date + "] không tồn tại");
                                        else
                                        {
                                            dictColDate.Add(col, checkScheduleDate.ID);
                                            dictColDateCode.Add(col, checkScheduleDate.Date);
                                        }
                                    }
                                    else break;
                                    col += 1;
                                }

                                row = 3;

                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMScheduleImport obj = new DTOFLMScheduleImport();
                                    obj.ExcelRow = row;
                                    obj.ListDetail = new List<DTOFLMScheduleDetailImport>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelError = string.Empty;
                                    col = 2;
                                    string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                    driverCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    //neu 2 cot dau rong thì thoat
                                    if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(driverCode)) break;

                                    var checkDriver = data.ListDriver.FirstOrDefault(c => c.EmployeeCode == driverCode);
                                    if (checkDriver == null)
                                    {
                                        lstError.Add("Mã tài xế [" + driverCode + "] không được thiết lập");
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        driverName = ExcelHelper.GetValue(worksheet, row, col);
                                        var checkDriverName = data.ListDriver.FirstOrDefault(c => c.DriverName == driverName);
                                        if (checkDriver == null)
                                        {
                                            lstError.Add("Tên tài xế [" + driverCode + "] không được thiết lập");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.DriverID = checkDriver.ID;
                                            obj.DriverCode = checkDriver.EmployeeCode;
                                            obj.DriverName = checkDriver.DriverName;
                                        }
                                    }

                                    if (dictColDate.Keys.Count > 0)
                                    {
                                        foreach (var word in dictColDate)
                                        {
                                            int pCol = word.Key;
                                            int pDateID = word.Value;
                                            DateTime pDateCode = new DateTime();
                                            dictColDateCode.TryGetValue(pCol, out  pDateCode);

                                            string checkDate = ExcelHelper.GetValue(worksheet, row, pCol);


                                            if (!string.IsNullOrEmpty(checkDate))
                                            {
                                                DTOFLMScheduleDetailImport objDetail = new DTOFLMScheduleDetailImport();
                                                objDetail.IsSuccess = true;
                                                objDetail.DriverID = obj.DriverID;
                                                objDetail.ScheduleDateID = pDateID;
                                                if (checkDate == "x")
                                                {
                                                    objDetail.IsSuccess = true;
                                                    obj.ListDetail.Add(objDetail);
                                                }
                                                else
                                                {
                                                    objDetail.IsSuccess = false;
                                                    lstError.Add("Check chấm công ngày [" + pDateCode + "] không chính xác");
                                                }
                                                //obj.ListDetail.Add(objDetail);
                                            }

                                        }
                                    }

                                    if (lstError.Count > 0)
                                        obj.ExcelError = string.Join(" ,", lstError);
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMSchedule_Excel_Save(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMScheduleImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Detail_Import(lst, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region tai xe 1 bang
        [HttpPost]
        public DTOResult FLMSchedule_Driver_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Driver_List(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMScheduleDriver FLMSchedule_Driver_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleDriver result = new DTOFLMScheduleDriver();
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Driver_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_Driver_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleDriver item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleDriver>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Driver_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_Driver_Delete(dynamic dynParam)
        {
            try
            {
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Driver_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMSchedule_Driver_NotInList(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Driver_NotInList(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSchedule_Driver_NotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Driver_NotInSave(lst, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMSchedule_Driver_UpdateInfo(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Driver_UpdateInfo(scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region loai ngay trong bang

        [HttpPost]
        public DTOResult FLMSchedule_Date_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Date_List(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMScheduleDate FLMSchedule_Date_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleDate result = new DTOFLMScheduleDate();
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_Date_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_Date_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleDate item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleDate>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_Date_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region phi tai xe khac
        [HttpPost]
        public DTOResult FLMSchedule_DriverFee_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_DriverFee_List(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMScheduleFee FLMSchedule_DriverFee_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                int id = Convert.ToInt32(dynParam.id.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_DriverFee_Get(id, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSchedule_DriverFee_Delete(dynamic dynParam)
        {
            try
            {
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_DriverFee_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_DriverFee_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleFee>(dynParam.item.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_DriverFee_Save(item, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMSchedule_DriverFee_DriverList(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_DriverFee_DriverList(scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMScheduleFeeData FLMSchedule_ScheduleFee_Data(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFeeData result = new DTOFLMScheduleFeeData();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_ScheduleFee_Data(scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMDriverFee_Excel_Export(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFeeData result = new DTOFLMScheduleFeeData();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_ScheduleFee_Data(scheduleID);
                });

                string file = "/" + FolderUpload.Export + "ExportDriverFee_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tính phí"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Số ngày"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprPriceDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprPriceTOMaster"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ExprInputDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprInputTOMaster"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 2;
                    List<DTOFLMScheduleFee> data = result.ListData.Where(c => c.DriverID > 0).ToList();
                    if (data.Count > 0)
                    {
                        foreach (var driver in data)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = driver.DriverCode;
                            col++; worksheet.Cells[row, col].Value = driver.DriverName;
                            col++; worksheet.Cells[row, col].Value = driver.TypeOfScheduleFeeCode;
                            col++; worksheet.Cells[row, col].Value = driver.Price;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = driver.ExprDay;
                            col++; worksheet.Cells[row, col].Value = driver.Day;
                            col++; worksheet.Cells[row, col].Value = driver.ExprPriceDay;
                            col++; worksheet.Cells[row, col].Value = driver.ExprPriceTOMaster;
                            col++; worksheet.Cells[row, col].Value = driver.ExprInputDay;
                            col++; worksheet.Cells[row, col].Value = driver.ExprInputTOMaster;
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMDriverFee_Excel_Save(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleFeeImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMScheduleFeeImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_DriverFee_Import(lst, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMScheduleFeeImport> FLMDriverFee_DriverFee_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleFeeImport> result = new List<DTOFLMScheduleFeeImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMScheduleFeeData data = new DTOFLMScheduleFeeData();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        data = sv.FLMSchedule_ScheduleFee_Data(scheduleID);
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string driverCode, driverName, typeOfScheduleFeeCode, price, exprDay, day, exprPriceDay, exprPriceTOMaster;
                            if (worksheet != null)
                            {
                                row = 2;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    col = 2;
                                    List<string> lstError = new List<string>();
                                    DTOFLMScheduleFeeImport obj = new DTOFLMScheduleFeeImport();
                                    obj.ExcelRow = row;

                                    driverCode = ExcelHelper.GetValue(worksheet, row, col);

                                    col = 4;
                                    typeOfScheduleFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(driverCode))
                                    {
                                        lstError.Add("[Mã tài xế] không được trống");
                                    }
                                    else
                                    {
                                        var checkDriver = data.ListData.FirstOrDefault(c => c.DriverCode == driverCode && c.TypeOfScheduleFeeCode == typeOfScheduleFeeCode);
                                        if (checkDriver != null)
                                        {
                                            obj.ID = checkDriver.ID;
                                            obj.DriverID = checkDriver.DriverID;
                                            obj.DriverCode = checkDriver.DriverCode;
                                            obj.DriverName = checkDriver.DriverName;
                                            obj.TypeOfScheduleFeeID = checkDriver.TypeOfScheduleFeeID;
                                        }
                                        else
                                        {
                                            if (result.Count(c => c.DriverCode == driverCode && c.TypeOfScheduleFeeCode == typeOfScheduleFeeCode) > 0)
                                            {
                                                lstError.Add("Mã tài xế [" + driverCode + "], Loại tính phí [" + typeOfScheduleFeeCode + "] đã sử dụng");
                                            }
                                            else
                                            {
                                                var checkCode = data.ListDriver.FirstOrDefault(c => c.DriverCode == driverCode);
                                                if (checkCode != null)
                                                {
                                                    obj.DriverID = checkCode.DriverID;
                                                    obj.DriverCode = checkCode.DriverCode;
                                                    obj.DriverName = checkCode.DriverName;
                                                }
                                                else
                                                {
                                                    lstError.Add("Mã tài xế [" + driverCode + "] không được thiết lập");
                                                }
                                            }
                                        }
                                    }

                                    if (string.IsNullOrEmpty(typeOfScheduleFeeCode))
                                        lstError.Add("[Loại tính phí] không được trống");
                                    else
                                    {
                                        var typeOfScheduleFee = data.ListTypeOfScheduleFee.FirstOrDefault(c => c.Code == typeOfScheduleFeeCode);
                                        if (typeOfScheduleFee != null)
                                        {
                                            obj.TypeOfScheduleFeeCode = typeOfScheduleFee.Code;
                                            obj.TypeOfScheduleFeeID = typeOfScheduleFee.ID;
                                            obj.TypeOfScheduleFeeName = typeOfScheduleFee.TypeName;
                                        }
                                        else
                                        {
                                            lstError.Add("Loại tính phí [" + typeOfScheduleFeeCode + "] không tồn tại");
                                        }
                                    }

                                    col++;
                                    price = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(price))
                                    {
                                        try
                                        {
                                            obj.Price = Convert.ToDecimal(price);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá [" + price + "] không đúng định dạng");
                                        }
                                    }
                                    col++;
                                    exprDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprDay = exprDay;

                                    col++;
                                    day = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(day))
                                    {
                                        try
                                        {
                                            obj.Day = Convert.ToDouble(day);
                                        }
                                        catch
                                        {
                                            lstError.Add("Số ngày [" + day + "] không đúng định dạng");
                                        }
                                    }
                                    col++;
                                    exprPriceDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprPriceDay = exprPriceDay;

                                    col++;
                                    exprPriceTOMaster = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprPriceTOMaster = exprPriceTOMaster;

                                    col++;
                                    string exprInputDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprInputDay = exprInputDay;

                                    col++;
                                    string exprInputTOMaster = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprInputTOMaster = exprInputTOMaster;

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region phí xe
        [HttpPost]
        public DTOResult FLMSchedule_AssetFee_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_AssetFee_List(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMScheduleFee FLMSchedule_AssetFee_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                int id = Convert.ToInt32(dynParam.id.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_AssetFee_Get(id, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_AssetFee_Delete(dynamic dynParam)
        {
            try
            {
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_AssetFee_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSchedule_AssetFee_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleFee>(dynParam.item.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_AssetFee_Save(item, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMSchedule_AssetFee_AsestList(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_AssetFee_AsestList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMAssetFee_Excel_Export(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFeeData result = new DTOFLMScheduleFeeData();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_ScheduleFee_Data(scheduleID);
                });

                string file = "/" + FolderUpload.Export + "ExportAssetFee_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tính phí"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Số ngày"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprPriceDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprPriceTOMaster"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "ExprInputDay"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "ExprInputTOMaster"; worksheet.Column(col).Width = 20;
                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 2;
                    List<DTOFLMScheduleFee> data = result.ListData.Where(c => c.AssetID > 0).ToList();
                    if (data.Count > 0)
                    {
                        foreach (var asset in data)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = asset.AssetNo;
                            col++; worksheet.Cells[row, col].Value = asset.TypeOfScheduleFeeCode;
                            col++; worksheet.Cells[row, col].Value = asset.Price;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = asset.ExprDay;
                            col++; worksheet.Cells[row, col].Value = asset.Day;
                            col++; worksheet.Cells[row, col].Value = asset.ExprPriceDay;
                            col++; worksheet.Cells[row, col].Value = asset.ExprPriceTOMaster;
                            col++; worksheet.Cells[row, col].Value = asset.ExprInputDay;
                            col++; worksheet.Cells[row, col].Value = asset.ExprInputTOMaster;
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMAssetFee_Excel_Save(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleFeeImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMScheduleFeeImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_AssetFee_Import(lst, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMScheduleFeeImport> FLMAssetFee_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                List<DTOFLMScheduleFeeImport> result = new List<DTOFLMScheduleFeeImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMScheduleFeeData data = new DTOFLMScheduleFeeData();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        data = sv.FLMSchedule_ScheduleFee_Data(scheduleID);
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string assetNo, typeOfScheduleFeeCode, price, exprDay, day, exprPriceDay, exprPriceTOMaster;
                            if (worksheet != null)
                            {
                                row = 2;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    col = 2;
                                    List<string> lstError = new List<string>();
                                    DTOFLMScheduleFeeImport obj = new DTOFLMScheduleFeeImport();
                                    obj.ExcelRow = row;

                                    assetNo = ExcelHelper.GetValue(worksheet, row, col);

                                    col = 3;
                                    typeOfScheduleFeeCode = ExcelHelper.GetValue(worksheet, row, col);

                                    if (string.IsNullOrEmpty(assetNo))
                                    {
                                        lstError.Add("[Xe] không được trống");
                                    }
                                    else
                                    {
                                        var checkAssetType = data.ListData.FirstOrDefault(c => c.AssetNo == assetNo && c.TypeOfScheduleFeeCode == typeOfScheduleFeeCode);
                                        if (checkAssetType != null)
                                        {
                                            obj.ID = checkAssetType.ID;
                                            obj.AssetID = checkAssetType.AssetID;
                                            obj.AssetNo = checkAssetType.AssetNo;
                                            obj.TypeOfScheduleFeeID = checkAssetType.TypeOfScheduleFeeID;
                                        }
                                        else
                                        {
                                            if (result.Count(c => c.AssetNo == assetNo && c.TypeOfScheduleFeeCode == typeOfScheduleFeeCode) > 0)
                                            {
                                                lstError.Add("Xe [" + assetNo + "], Loại tính phí [" + typeOfScheduleFeeCode + "] đã sử dụng");
                                            }
                                            else
                                            {
                                                var checkAsset = data.ListAsset.FirstOrDefault(c => c.RegNo == assetNo);
                                                if (checkAsset != null)
                                                {
                                                    obj.AssetID = checkAsset.ID;
                                                    obj.AssetNo = checkAsset.RegNo;
                                                }
                                                else
                                                {
                                                    lstError.Add("Xe [" + assetNo + "] không tồn tại");
                                                }
                                            }
                                        }
                                    }

                                    if (string.IsNullOrEmpty(typeOfScheduleFeeCode))
                                        lstError.Add("[Loại tính phí] không được trống");
                                    else
                                    {
                                        var typeOfScheduleFee = data.ListTypeOfScheduleFee.FirstOrDefault(c => c.Code == typeOfScheduleFeeCode);
                                        if (typeOfScheduleFee != null)
                                        {
                                            obj.TypeOfScheduleFeeCode = typeOfScheduleFee.Code;
                                            obj.TypeOfScheduleFeeID = typeOfScheduleFee.ID;
                                            obj.TypeOfScheduleFeeName = typeOfScheduleFee.TypeName;
                                        }
                                        else
                                        {
                                            lstError.Add("Loại tính phí [" + typeOfScheduleFeeCode + "] không tồn tại");
                                        }
                                    }

                                    col++;
                                    price = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(price))
                                    {
                                        try
                                        {
                                            obj.Price = Convert.ToDecimal(price);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá [" + price + "] không đúng định dạng");
                                        }
                                    }
                                    col++;
                                    exprDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprDay = exprDay;

                                    col++;
                                    day = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(day))
                                    {
                                        try
                                        {
                                            obj.Day = Convert.ToDouble(day);
                                        }
                                        catch
                                        {
                                            lstError.Add("Số ngày [" + day + "] không đúng định dạng");
                                        }
                                    }
                                    col++;
                                    exprPriceDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprPriceDay = exprPriceDay;

                                    col++;
                                    exprPriceTOMaster = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprPriceTOMaster = exprPriceTOMaster;

                                    col++;
                                    string exprInputDay = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprInputDay = exprInputDay;

                                    col++;
                                    string exprInputTOMaster = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.ExprInputTOMaster = exprInputTOMaster;

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        [HttpPost]
        public void FLM_Schedule_Detail_CalculateFee(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLM_Schedule_Detail_CalculateFee(scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLM_Schedule_Detail_RefreshFee(dynamic dynParam)
        {
            try
            {
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLM_Schedule_Detail_RefreshFee(scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region chi phí lái/phụ xe
        [HttpPost]
        public DTOResult FLMSchedule_AssistantFee_List(dynamic dynParam)
        {
            try
            {
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_AssistantFee_List(request, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMScheduleFee FLMSchedule_AssistantFee_Get(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee result = new DTOFLMScheduleFee();
                int id = Convert.ToInt32(dynParam.id.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSchedule_AssistantFee_Get(id, scheduleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSchedule_AssistantFee_Delete(dynamic dynParam)
        {
            try
            {
                int id = Convert.ToInt32(dynParam.id.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_AssistantFee_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSchedule_AssistantFee_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFee item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleFee>(dynParam.item.ToString());
                int scheduleID = Convert.ToInt32(dynParam.scheduleID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSchedule_AssistantFee_Save(item, scheduleID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion
        #endregion

        #region FLMDriver
        public DTOResult FLMDriver_Read(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMDriver_Update(dynamic dynParam)
        {
            try
            {
                DTOFLMDriver item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMDriver>(dynParam.item.ToString());
                int result = 0;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMDriver_Delete(dynamic dynParam)
        {
            try
            {
                DTOFLMDriver item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMDriver>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMDriver FLMDriver_Get(dynamic dynParam)
        {
            try
            {
                int DriverID = (int)dynParam.DriverID;
                DTOFLMDriver result = new DTOFLMDriver();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_Get(DriverID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMDriver_Department_Get()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.CATDepartment_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMDriver_DrivingLicence_Get()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.CATDrivingLicence_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMDriver_TransportHistory_Read(dynamic dynParam)
        {
            try
            {
                int DriverID = (int)dynParam.DriverID;
                DateTime dateFrom = (DateTime)dynParam.dateFrom;
                DateTime dateTo = (DateTime)dynParam.dateTo;
                var typeTrans = (int)dynParam.typeTrans;
                var result = default(DTOResult);
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_TransportHistory_Read(request, dateFrom, dateTo, DriverID, typeTrans);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region FLMDriverRole
        [HttpPost]
        public DTOResult FLMDriver_FLMDriverRole_List(dynamic dynParam)
        {
            try
            {
                int DriverID = (int)dynParam.DriverID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_FLMDriverRole_List(request, DriverID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public FLMDriverRole FLMDriver_FLMDriverRole_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(FLMDriverRole);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_FLMDriverRole_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMDriver_FLMDriverRole_Delete(dynamic dynParam)
        {
            try
            {
                int item = (int)dynParam.item;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_FLMDriverRole_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriver_FLMDriverRole_Save(dynamic dynParam)
        {
            try
            {
                int driverID = (int)dynParam.DriverID;
                FLMDriverRole item = Newtonsoft.Json.JsonConvert.DeserializeObject<FLMDriverRole>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_FLMDriverRole_Save(item, driverID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        public string FLMDriver_Excel_Export()
        {
            try
            {
                List<DTOFLMDriverExcel> result = new List<DTOFLMDriverExcel>();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverExport();
                });

                string file = "/" + FolderUpload.Export + "ExportFLMDriver_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Họ"; worksheet.Column(col).Width = 10;
                    col++; worksheet.Cells[row, col].Value = "Tên"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Lái xe/Phụ xe"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ghi chú"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Số xe"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Điện thoại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Số CMND"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Loại bằng lái"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Số bằng lái"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Lương cơ bản"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày nghỉ phép"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày vào làm"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Ngày thôi việc"; worksheet.Column(col).Width = 15;

                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    List<int> lstDriverNotUse = new List<int>();
                    col = 1;
                    row = 2;
                    if (result.Count > 0)
                    {
                        foreach (var driver in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = driver.DriverCode;
                            col++; worksheet.Cells[row, col].Value = driver.LastName;
                            col++; worksheet.Cells[row, col].Value = driver.FirstName;
                            col++; worksheet.Cells[row, col].Value = driver.IsAssistant == true ? "Phụ xe" : "Lái xe";
                            col++; worksheet.Cells[row, col].Value = driver.Note;
                            col++; worksheet.Cells[row, col].Value = driver.RegNo;
                            col++; worksheet.Cells[row, col].Value = driver.Cellphone;
                            col++; worksheet.Cells[row, col].Value = driver.CardNumber;
                            if (driver.ListDriverLicence != null && driver.ListDriverLicence.Count() > 0)
                            {
                                DTOCATDriverLicence driverLicence = driver.ListDriverLicence.FirstOrDefault();
                                col++; worksheet.Cells[row, col].Value = driverLicence.DrivingLicenceCode;
                                col++; worksheet.Cells[row, col].Value = driverLicence.DrivingLicenceNumber;
                            }
                            else
                            {
                                col++; worksheet.Cells[row, col].Value = "";
                                col++; worksheet.Cells[row, col].Value = "";
                            }
                            col++; worksheet.Cells[row, col].Value = driver.FeeBase;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            col++; worksheet.Cells[row, col].Value = driver.DaysAllowOff;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatNumber);
                            col++; worksheet.Cells[row, col].Value = driver.DateStart;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = driver.DateEnd;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            if (driver.IsUse == false)
                                lstDriverNotUse.Add(row);
                            row++;
                            stt++;
                        }
                    }

                    #endregion
                    if (lstDriverNotUse.Count > 0)
                    {
                        foreach (var dRow in lstDriverNotUse)
                        {
                            ExcelHelper.CreateCellStyle(worksheet, dRow, 1, dRow, worksheet.Dimension.End.Column, false, false, ExcelHelper.ColorGray, ExcelHelper.ColorBlack, 0, "");
                        }
                    }

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMDriver_Excel_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMDriverExcel> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMDriverExcel>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMDriverImport(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMDriverExcel> FLMDriver_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOFLMDriverExcel> result = new List<DTOFLMDriverExcel>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMDriverData driverData = new DTOFLMDriverData();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        driverData = sv.FLMDriver_Data();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string Code, FirstName, LastName, IsAssistant, Note, RegNo, TelNo, CardNo, FeeBase, DateIn, DateOut, DrivingLicenceNumber, DrivingLicenceCode;
                            if (worksheet != null)
                            {
                                row = 2;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMDriverExcel obj = new DTOFLMDriverExcel();
                                    obj.ExcelRow = row;
                                    #region mã tài xế

                                    col = 2;
                                    Code = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(Code))
                                    {
                                        lstError.Add("[Mã tài xế] không được trống");
                                    }
                                    else
                                    {
                                        if (result.Count(c => c.DriverCode == Code) > 0)
                                        {
                                            lstError.Add("Mã tài xế [" + Code + "] đã sử dụng");
                                        }
                                        else
                                        {
                                            var checkCode = driverData.ListDriver.FirstOrDefault(c => c.EmployeeCode == Code);
                                            if (checkCode != null)
                                            {
                                                obj.ID = checkCode.ID;
                                                obj.DriverID = checkCode.DriverID;
                                                obj.DriverCode = checkCode.EmployeeCode;
                                            }
                                            else
                                            {
                                                obj.ID = 0;
                                                obj.DriverID = 0;
                                                obj.DriverCode = Code;
                                            }
                                        }
                                    }
                                    #endregion

                                    col++;
                                    LastName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(LastName))
                                        lstError.Add("[Họ] không được trống");
                                    else obj.LastName = LastName;

                                    col++;
                                    FirstName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(FirstName))
                                        lstError.Add("[Tên] không được trống");
                                    else obj.FirstName = FirstName;

                                    col++;
                                    IsAssistant = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(IsAssistant))
                                        lstError.Add("[Lái/Phụ xe] không được trống");
                                    else
                                    {
                                        if (IsAssistant == "Lái xe")
                                            obj.IsAssistant = false;
                                        else if (IsAssistant == "Phụ xe")
                                            obj.IsAssistant = true;
                                        else
                                            lstError.Add("Loại lái/phụ xe [" + IsAssistant + "] không đúng");
                                    }

                                    col++;
                                    Note = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.Note = Note;

                                    col++;
                                    RegNo = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RegNo = RegNo;

                                    col++;
                                    TelNo = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(TelNo))
                                        obj.Cellphone = string.Empty;
                                    else obj.Cellphone = TelNo;

                                    col++;
                                    CardNo = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(CardNo))
                                        obj.CardNumber = string.Empty;
                                    else obj.CardNumber = CardNo;

                                    col++;
                                    DrivingLicenceCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    DrivingLicenceNumber = ExcelHelper.GetValue(worksheet, row, col);

                                    //Check
                                    if (!string.IsNullOrEmpty(DrivingLicenceCode) && string.IsNullOrEmpty(DrivingLicenceNumber))
                                    {
                                        lstError.Add("[Số bằng lái] không được trống");
                                    }
                                    if (!string.IsNullOrEmpty(DrivingLicenceNumber) && string.IsNullOrEmpty(DrivingLicenceCode))
                                    {
                                        lstError.Add("[Loại bằng lái] không được trống");
                                    }

                                    obj.ListDriverLicence = new List<DTOCATDriverLicence>();
                                    if (!string.IsNullOrEmpty(DrivingLicenceNumber) && !string.IsNullOrEmpty(DrivingLicenceCode))
                                    {
                                        var drivingLicence = driverData.ListDrivingLicence.FirstOrDefault(c => c.Code == DrivingLicenceCode);
                                        DTOCATDriverLicence licence = new DTOCATDriverLicence();
                                        if (drivingLicence != null)
                                        {
                                            licence.DrivingLicenceCode = drivingLicence.Code;
                                            licence.DrivingLicenceID = drivingLicence.ID;

                                            var driverLicence = driverData.ListDriverLicence.FirstOrDefault(c => c.DrivingLicenceID == drivingLicence.ID && c.DriverID == obj.DriverID);
                                            if (driverLicence != null)
                                            {
                                                licence.ID = driverLicence.ID;
                                            }
                                            else
                                            {
                                                licence.ID = 0;
                                            }

                                            licence.DrivingLicenceNumber = DrivingLicenceNumber;
                                            obj.ListDriverLicence.Add(licence);
                                        }
                                        else
                                        {
                                            lstError.Add("Loại bằng lái [" + DrivingLicenceCode + "] không tồn tại");
                                        }
                                    }

                                    col++;
                                    FeeBase = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(FeeBase))
                                        lstError.Add("[Lương cơ bàn] không được trống");
                                    else
                                    {
                                        try
                                        {
                                            obj.FeeBase = Convert.ToDecimal(FeeBase);
                                        }
                                        catch
                                        {
                                            lstError.Add("Lương cơ bản [" + FeeBase + "] không đúng định dạng");
                                        }
                                    }

                                    col++;

                                    string daysOff = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(daysOff))
                                    {
                                        obj.DaysAllowOff = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.DaysAllowOff = Convert.ToDouble(daysOff);
                                        }
                                        catch
                                        {
                                            lstError.Add("Ngày nghỉ phép [" + daysOff + "]không chính xác");
                                        }
                                    }

                                    obj.IsUse = true;

                                    col++;
                                    DateIn = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(DateIn))
                                        obj.DateStart = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.DateStart = ExcelHelper.ValueToDate(DateIn);
                                            obj.IsUse = true;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DateStart = Convert.ToDateTime(DateIn);
                                                obj.IsUse = true;
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày vào làm [" + DateIn + "] không không đúng định dạng");
                                            }
                                        }
                                    }

                                    col++;
                                    DateOut = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(DateOut))
                                        obj.DateStart = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.DateEnd = ExcelHelper.ValueToDate(DateOut);
                                            obj.IsUse = false;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.DateEnd = Convert.ToDateTime(DateOut);
                                                obj.IsUse = false;
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày thôi việc [" + DateOut + "] không không đúng định dạng");
                                            }
                                        }
                                    }
                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMDriver_DrivingLicence_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int driverId = (int)dynParam.driverId;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_DrivingLicence_List(request, driverId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriver_DrivingLicence_Save(dynamic dynParam)
        {
            try
            {
                DTOCATDriverLicence item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATDriverLicence>(dynParam.item.ToString());
                int driverId = (int)dynParam.driverId;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_DrivingLicence_Save(item, driverId);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMDriverScheduleData FLMDriver_Schedule_Data(dynamic dynParam)
        {
            try
            {
                int driverId = (int)dynParam.driverId;
                int month = (int)dynParam.month;
                int year = (int)dynParam.year;
                DTOFLMDriverScheduleData result = new DTOFLMDriverScheduleData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_Schedule_Data(month, year, driverId);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATDriverLicence FLMDriver_DrivingLicence_GetDetail(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOCATDriverLicence);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_DrivingLicence_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriver_DrivingLicence_Delete(dynamic dynParam)
        {
            try
            {
                DTOCATDriverLicence item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATDriverLicence>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_DrivingLicence_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMDriver_FLMScheduleFeeDefault_List(dynamic dynParam)
        {
            try
            {
                int driverID = (int)dynParam.driverID;
                string request = dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_FLMScheduleFeeDefault_List(request, driverID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMScheduleFeeDefault FLMDriver_FLMScheduleFeeDefault_Get(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                DTOFLMScheduleFeeDefault result = new DTOFLMScheduleFeeDefault();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_FLMScheduleFeeDefault_Get(ID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriver_FLMScheduleFeeDefault_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMScheduleFeeDefault item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMScheduleFeeDefault>(dynParam.item.ToString());
                int driverID = (int)dynParam.driverID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_FLMScheduleFeeDefault_Save(item, driverID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriver_FLMScheduleFeeDefault_Delete(dynamic dynParam)
        {
            try
            {
                int item = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriver_FLMScheduleFeeDefault_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region excel mới
        [HttpPost]
        public SYSExcel FLMDriver_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriver_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMDriver_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMDriver_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMDriver_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMDriver_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMDriver_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMDriver_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region FLM_VehiclePlan

        [HttpPost]
        public void FLMVehiclePlan_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMVehiclePlan item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMVehiclePlan>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMVehiclePlan_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMVehiclePlan_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMVehiclePlan_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMVehiclePlan FLMVehiclePlan_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                DTOFLMVehiclePlan res = new DTOFLMVehiclePlan();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    res = sv.FLMVehiclePlan_Get(id);
                });
                return res;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMVehiclePlanData FLMVehiclePlan_Data(dynamic dynParam)
        {
            try
            {
                DateTime dateFrom = Convert.ToDateTime(dynParam.dateFrom.ToString());
                DateTime dateTo = Convert.ToDateTime(dynParam.dateTo.ToString());
                List<int> lstAssetID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstAssetID.ToString());

                dateFrom = dateFrom.Date;
                dateTo = dateTo.AddDays(1).Date;
                var result = new DTOFLMVehiclePlanData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMVehiclePlan_Data(lstAssetID, dateFrom, dateTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMVehiclePlan_VehicleList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMVehiclePlan_VehicleList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMVehiclePlan_DriverList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMVehiclePlan_DriverList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region FLMMaintenance
        [HttpPost]
        public DTOFLMMaintenanceSchedulerData FLMMaintenance_Data(dynamic dynParam)
        {
            try
            {
                List<int> lstAssetID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstAssetID.ToString());
                DateTime dateFrom = Convert.ToDateTime(dynParam.dateFrom.ToString());
                DateTime dateTo = Convert.ToDateTime(dynParam.dateTo.ToString());

                dateFrom = dateFrom.Date;
                dateTo = dateTo.AddDays(1).Date;
                var result = new DTOFLMMaintenanceSchedulerData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaintenance_Data(lstAssetID, dateFrom, dateTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOFLMActivity FLMMaintenance_VehicleTimeGet(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMActivity();
                int actID = Convert.ToInt32(dynParam.actID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaintenance_VehicleTimeGet(actID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMMaintenance_VehicleTimeSave(dynamic dynParam)
        {
            try
            {
                DTOFLMActivity item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMActivity>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaintenance_VehicleTimeSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMMaintenance_VehicleTimeDelete(dynamic dynParam)
        {
            try
            {
                int actID = Convert.ToInt32(dynParam.actID.ToString());

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaintenance_VehicleTimeDelete(actID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMMaintenance_AssetList()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaintenance_AssetList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMMaintenance_LocationList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaintenance_LocationList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMMaintenance_CostList()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaintenance_CostList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region Common

        public DTOResult AllSupplier_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.AllSupplier_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult MaterialAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.MaterialAll_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult VehicleAutoComplete_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.VehicleAutoComplete_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult AllVehicle_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.VehicleAutoComplete_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult Material_Read(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.MaterialBySupplierID_List(id);
                });
                DTOResult final = new DTOResult();
                var res = result.Data.Cast<DTOFLMMaterialPrice>().Where(c => c.IsFuel == true);
                final.Data = res;
                final.Total = res.Count();
                return final;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMTransferReceipt
        public DTOResult FLMTransferReceipt_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                DateTime dtFrom = Convert.ToDateTime(dynParam.dtFrom.ToString());
                DateTime dtTo = Convert.ToDateTime(dynParam.dtTo.ToString());
                dtFrom = dtFrom.Date;
                dtTo = dtTo.Date.AddDays(1);
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_List(request, dtFrom, dtTo);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMTransferReceipt_GetEQMList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_GetEQMList(request);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMEquipmentHistory FLMTransferReceipt_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOFLMEquipmentHistory result = default(DTOFLMEquipmentHistory);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_Get(id);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMTransferReceiptLocation FLMTransferReceipt_GetLocation()
        {
            try
            {

                var result = default(DTOFLMTransferReceiptLocation);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_GetEQMLocation();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMEquipmentHistory FLMTransferReceipt_GetEQMHistory(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = new DTOFLMEquipmentHistory();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_GetEQMHistory(id);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMTransferReceipt_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMEquipmentHistory item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMEquipmentHistory>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMTransferReceipt_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMTransferReceipt_StockList()
        {

            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_StockList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMTransferReceipt_EQMByStock(dynamic dynParam)
        {

            try
            {
                string request = dynParam.request.ToString();
                int stockID = (int)dynParam.stockID;
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_EQMByStock(request, stockID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOEquipment FLMTransferReceipt_EQMGet(dynamic d)
        {
            try
            {
                int id = d.id;
                var result = new DTOEquipment();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMTransferReceipt_EQMGet(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMVehicle_List()
        {

            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMVehicle_List();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMTransferReceipt_EQMSave(dynamic dynParam)
        {
            try
            {
                DTOEquipment item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOEquipment>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMTransferReceipt_EQMSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public string FLMTransferReceipt_Excel_Export()
        {
            try
            {
                List<DTOFLMDriverExcel> result = new List<DTOFLMDriverExcel>();
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverExport();
                });

                string file = "/" + FolderUpload.Export + "ExportFLMTransferReceipt_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Part .No"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên thiết bị"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Năm sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Nhà sản xuất"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Thông số kỹ thuật"; worksheet.Column(col).Width = 25;
                    col++; worksheet.Cells[row, col].Value = "Giá trị ban đầu"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị hiện tại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Giá trị còn lại"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "T/g k.hao (tháng)"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "T/g bắt đầu tính KH"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "T/g b.hành (tháng)"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Ngày kết thúc BH"; worksheet.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");


                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOEquipmentImport> FLMTransferReceipt_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOEquipmentImport> result = new List<DTOEquipmentImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    List<DTOEquipment> lstEquipment = new List<DTOEquipment>();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        lstEquipment = sv.FLMTransferReceipt_EQMData();
                    });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string PartNo, PartName, YearOfProduction, Manufactor, Specification, BaseValue, CurrentValue, RemainValue, DepreciationPeriod, DepreciationStart, WarrantyPeriod, WarrantyEnd;
                            if (worksheet != null)
                            {
                                row = 2;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    col = 2;
                                    PartNo = ExcelHelper.GetValue(worksheet, row, col);

                                    col++;
                                    PartName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(PartNo) && string.IsNullOrEmpty(PartName))
                                    {
                                        break;
                                    }
                                    List<string> lstError = new List<string>();
                                    DTOEquipmentImport obj = new DTOEquipmentImport();
                                    obj.ExcelRow = row;

                                    #region Mã thiết bị
                                    if (string.IsNullOrEmpty(PartNo))
                                    {
                                        lstError.Add("[Part .No] không được trống");
                                    }
                                    else
                                    {
                                        if (result.Count(c => c.PartNo == PartNo) > 0)
                                        {
                                            lstError.Add("Part .No [" + PartNo + "] đã sử dụng");
                                        }
                                        else
                                        {
                                            var checkCode = lstEquipment.FirstOrDefault(c => c.PartNo == PartNo);
                                            if (checkCode != null)
                                            {
                                                obj.PartID = 0;
                                                obj.PartNo = checkCode.PartNo;
                                            }
                                            else
                                            {
                                                obj.PartID = 0;
                                                obj.PartNo = PartNo;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Tên thiết bị
                                    if (string.IsNullOrEmpty(PartName))
                                        lstError.Add("[Tên thiết bị] không được trống");
                                    else obj.PartName = PartName;
                                    #endregion

                                    col++;
                                    YearOfProduction = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(YearOfProduction))
                                        obj.YearOfProduction = "";
                                    else
                                    {
                                        try
                                        {
                                            int year = Convert.ToInt32(YearOfProduction);
                                            obj.YearOfProduction = YearOfProduction;
                                        }
                                        catch
                                        {
                                            lstError.Add("Năm sản xuất [" + YearOfProduction + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    Manufactor = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.Manufactor = Manufactor;

                                    col++;
                                    Specification = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.Specification = Specification;

                                    col++;
                                    BaseValue = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(BaseValue))
                                        obj.BaseValue = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.BaseValue = Convert.ToDecimal(BaseValue);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị ban đầu [" + BaseValue + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    CurrentValue = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(CurrentValue))
                                        obj.CurrentValue = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.CurrentValue = Convert.ToDecimal(CurrentValue);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị hiện tại [" + CurrentValue + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    RemainValue = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(RemainValue))
                                        obj.RemainValue = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.RemainValue = Convert.ToDecimal(RemainValue);
                                        }
                                        catch
                                        {
                                            lstError.Add("Giá trị còn lại [" + RemainValue + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    DepreciationPeriod = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(DepreciationPeriod))
                                        obj.DepreciationPeriod = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.DepreciationPeriod = Convert.ToInt32(DepreciationPeriod);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g k.hao (tháng) [" + DepreciationPeriod + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    DepreciationStart = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(DepreciationStart))
                                        obj.DepreciationStart = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.DepreciationStart = Convert.ToDateTime(DepreciationStart);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g bắt đầu tính KH [" + DepreciationStart + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    WarrantyPeriod = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(WarrantyPeriod))
                                        obj.WarrantyPeriod = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.WarrantyPeriod = Convert.ToInt32(WarrantyPeriod);
                                        }
                                        catch
                                        {
                                            lstError.Add("T/g b.hành (tháng) [" + WarrantyPeriod + "] không đúng định dạng");
                                        }
                                    }

                                    col++;
                                    WarrantyEnd = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(WarrantyEnd))
                                        obj.WarrantyEnd = null;
                                    else
                                    {
                                        try
                                        {
                                            obj.WarrantyEnd = Convert.ToDateTime(DepreciationStart);
                                        }
                                        catch
                                        {
                                            lstError.Add("Ngày kết thúc BH [" + WarrantyEnd + "] không đúng định dạng");
                                        }
                                    }

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMTransferReceipt_Excel_Save(dynamic dynParam)
        {
            try
            {
                int stockID = (int)dynParam.stockID;
                List<DTOEquipmentImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOEquipmentImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMTransferReceipt_EQMImport(lst, stockID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMDisposal
        public DTOResult FLMDisposal_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDisposal_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMDisposal_EQMByVehicle_List(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDisposal_EQMByVehicle_List(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMDisposal_Vehicle_List()
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDisposal_Vehicle_List();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMDisposal_EQM_List()
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDisposal_EQM_List();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMDisposal FLMDisposal_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOFLMDisposal result = new DTOFLMDisposal();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDisposal_Get(id);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMDisposal_Save(dynamic dynParam)
        {
            try
            {
                DTOFLMDisposal item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMDisposal>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDisposal_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMDriverTimeSheet
        [HttpPost]
        public List<DTOFLMVehicle> FLMDriverTimeSheet_VehicleList()
        {
            try
            {
                var result = new List<DTOFLMVehicle>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverTimeSheet_VehicleList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMAssetTimeSheet> FLMDriverTimeSheet_VehicleTimeList(dynamic dynParam)
        {
            try
            {
                var result = new List<DTOFLMAssetTimeSheet>();
                DateTime dateFrom = (DateTime)dynParam.dateFrom;
                DateTime dateTo = (DateTime)dynParam.dateTo;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverTimeSheet_VehicleTimeList(dateFrom, dateTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMDriverTimeSheet FLMDriverTimeSheet_VehicleTimeGet(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMDriverTimeSheet();
                int timeID = (int)dynParam.timeID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverTimeSheet_VehicleTimeGet(timeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMDriverTimeSheet_DriverSave(dynamic dynParam)
        {
            try
            {
                int timeID = (int)dynParam.timeID;
                int driverID = (int)dynParam.driverID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriverTimeSheet_DriverSave(timeID, driverID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMDriverTimeSheet_DriverDelete(dynamic dynParam)
        {
            try
            {
                int timeDriverID = (int)dynParam.timeDriverID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriverTimeSheet_DriverDelete(timeDriverID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOFLMDriver> FLMDriverTimeSheet_DriverList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMDriver> result = new List<DTOFLMDriver>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMDriverTimeSheet_DriverList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMDriverTimeSheet_ChangeType(dynamic dynParam)
        {
            try
            {
                int timeID = (int)dynParam.timeID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriverTimeSheet_ChangeType(timeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region work order
        public DTOResult FLMReceipt_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                DateTime dtFrom = Convert.ToDateTime(dynParam.dtFrom.ToString()).AddDays(-1);
                DateTime dtTo = Convert.ToDateTime(dynParam.dtTo.ToString()).AddDays(1);

                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_List(request, dtFrom, dtTo);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMReceipt_ApprovedList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_ApprovedList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMReceipt_UnApprovedList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_UnApprovedList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMReceipt_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOReceipFuel FLMReceipt_FuelGet(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                var result = default(DTOReceipFuel);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_FuelGet(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOReceipFuel FLMReceipt_FuelRequestGet(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                int VehicleID = (int)dynParam.VehicleID;
                var result = default(DTOReceipFuel);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_FuelRequestGet(ID, VehicleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<double> FLMReceipt_QuantityPerKMGet(dynamic dynParam)
        {
            try
            {
                int MaterialID = (int)dynParam.MaterialID;
                int VehicleID = (int)dynParam.VehicleID;
                List<double> result = new List<double> { };
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_QuantityPerKMGet(MaterialID, VehicleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMReceipt_FuelSave(dynamic dynParam)
        {
            try
            {
                DTOReceipFuel item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOReceipFuel>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_FuelSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOReceipTransfer FLMReceipt_TranfersGet(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                var result = default(DTOReceipTransfer);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_TranfersGet(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMReceipt_TranfersSave(dynamic dynParam)
        {
            try
            {
                DTOReceipTransfer item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOReceipTransfer>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_TranfersSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOEquipment> FLMReceipt_TranfersEQMByStock(dynamic dynParam)
        {
            try
            {
                int stockID = (int)dynParam.stockID;
                List<DTOEquipment> result = new List<DTOEquipment>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_TranfersEQMByStock(stockID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOEquipment> FLMReceipt_TranfersEQMByVehicle(dynamic dynParam)
        {
            try
            {
                int vehicleID = (int)dynParam.vehicleID;
                List<DTOEquipment> result = new List<DTOEquipment>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_TranfersEQMByVehicle(vehicleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOReceiptDisposal FLMReceipt_DisposalGet(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                var result = default(DTOReceiptDisposal);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_DisposalGet(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMReceipt_DisposalSave(dynamic dynParam)
        {
            try
            {
                DTOReceiptDisposal item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOReceiptDisposal>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_DisposalSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOReceiptDisposalEquipment> FLMReceipt_DisposalEQMList()
        {
            try
            {
                List<DTOReceiptDisposalEquipment> result = new List<DTOReceiptDisposalEquipment>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_DisposalEQMList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOReceiptDisposalVehicle> FLMReceipt_DisposalVehicleList()
        {
            try
            {
                List<DTOReceiptDisposalVehicle> result = new List<DTOReceiptDisposalVehicle>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_DisposalVehicleList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOReceiptDisposalEquipment> FLMReceipt_DisposalEQMByVehicle(dynamic dynParam)
        {
            try
            {
                int vehicleID = (int)dynParam.vehicleID;
                List<DTOReceiptDisposalEquipment> result = new List<DTOReceiptDisposalEquipment>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_DisposalEQMByVehicle(vehicleID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOReceiptRepairLarge FLMReceipt_RepairLargeGet(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                var result = default(DTOReceiptRepairLarge);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairLargeGet(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMReceipt_RepairLargeDeleteFixCost(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_RepairLargeDeleteFixCost(receiptID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMReceipt_RepairLargeSaveFixCost(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                List<DTOFLMFixedCost> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMFixedCost>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMReceipt_RepairLargeSaveFixCost(lst, receiptID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMFixedCost> FLMReceipt_RepairLargeListFixCost(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                var result = default(List<DTOFLMFixedCost>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairLargeListFixCost(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMFixedCost> FLMReceipt_RepairLargeGenerateFixCost(dynamic dynParam)
        {
            try
            {
                int receiptID = (int)dynParam.receiptID;
                var result = default(List<DTOFLMFixedCost>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairLargeGenerateFixCost(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMReceipt_RepairLargeSave(dynamic dynParam)
        {
            try
            {
                int result = -1;
                DTOReceiptRepairLarge item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOReceiptRepairLarge>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairLargeSave(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMReceipt_RepairChangeToLarge(dynamic dynParam)
        {
            try
            {
                int result = -1;
                int receiptID = (int)dynParam.receiptID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairChangeToLarge(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMReceipt_RepairChangeToSmall(dynamic dynParam)
        {
            try
            {
                int result = -1;
                int receiptID = (int)dynParam.receiptID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_RepairChangeToSmall(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOReceiptImportEQM FLMReceipt_ImportEQM_Get(dynamic dynParam)
        {
            try
            {
                int receiptID = dynParam.ReceiptID;
                var result = default(DTOReceiptImportEQM);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_ImportEQM_Get(receiptID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public int FLMReceipt_ImportEQM_Save(dynamic dynParam)
        {
            try
            {
                int result = -1;
                DTOReceiptImportEQM item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOReceiptImportEQM>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_ImportEQM_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMReceipt_ImportEQM_StockList()
        {
            try
            {

                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_ImportEQM_StockList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMReceipt_ImportEQM_VehicleList()
        {
            try
            {

                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_ImportEQM_VehicleList();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOReceiptEquiment FLMReceipt_ImportEQM_GetNewEQM()
        {
            try
            {

                DTOReceiptEquiment result = new DTOReceiptEquiment();
                result.ID = 0;
                result.GroupOfEquipmentID = -1;
                result.Quantity = 1;

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMReceipt_ImportEQM_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                DateTime dtFrom = Convert.ToDateTime(dynParam.dtFrom.ToString());
                DateTime dtTo = Convert.ToDateTime(dynParam.dtTo.ToString());

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMReceipt_ImportEQM_ExcelInit(functionid, functionkey,isreload, dtFrom, dtTo);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMReceipt_ImportEQM_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;

                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMReceipt_ImportEQM_ExcelChange(id, row, cells,lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMReceipt_ImportEQM_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;

                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMReceipt_ImportEQM_ExcelImport(id, lst[0].Rows,lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMReceipt_ImportEQM_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMReceipt_ImportEQM_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region FLMPHTDI
        public DTOResult FLMPHTDIMaster_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                DateTime dtfrom = (DateTime)dynParam.dtFrom;
                DateTime dtto = (DateTime)dynParam.dtTo;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTDIMaster_List(request, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMPHTDIMaster_Save(dynamic dynParam)
        {
            try
            {
                int res = 0;
                DTOFLMMasterPHT item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMasterPHT>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    res = sv.FLMPHTDIMaster_Save(item);
                });
                return res;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOFLMMasterPHT_Import_Data FLMPHTDIMaster_Import_Data(dynamic dynParam)
        {
            try
            {
                DTOFLMMasterPHT_Import_Data result = new DTOFLMMasterPHT_Import_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTDIMaster_Import_Data();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<DTOFLMMasterPHT_Station> FLMPHTDIMaster_StationList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Station> result = new List<DTOFLMMasterPHT_Station>();
                int masterID = (int)dynParam.masterID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTDIMaster_StationList(masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMPHTDIMaster_StationNotInList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                int masterID = (int)dynParam.masterID;
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTDIMaster_StationNotInList(request, masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTDIMaster_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMPHTDIMaster_StationSaveList(dynamic dynParam)
        {
            try
            {
                int masterID = (int)dynParam.masterID;
                List<DTOFLMMasterPHT_Station> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Station>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_StationSaveList(lst, masterID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMPHTDIMaster_StationDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_StationDeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<DTOFLMMasterPHT_Trouble> FLMPHTDIMaster_TroubleList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Trouble> result = new List<DTOFLMMasterPHT_Trouble>();
                int masterID = (int)dynParam.masterID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTDIMaster_TroubleList(masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTDIMaster_TroubleSaveList(dynamic dynParam)
        {
            try
            {
                int masterID = (int)dynParam.masterID;
                List<DTOFLMMasterPHT_Trouble> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Trouble>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_TroubleSaveList(lst, masterID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMPHTDIMaster_TroubleDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_TroubleDeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region FLMPHTco
        public DTOResult FLMPHTCOMaster_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                DateTime dtfrom = (DateTime)dynParam.dtFrom;
                DateTime dtto = (DateTime)dynParam.dtTo;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTCOMaster_List(request, dtfrom, dtto);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOFLMMasterPHT_Import_Data FLMPHTCOMaster_Import_Data(dynamic dynParam)
        {
            try
            {
                DTOFLMMasterPHT_Import_Data result = new DTOFLMMasterPHT_Import_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTCOMaster_Import_Data();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMPHTCOMaster_StationNotInList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                int masterID = (int)dynParam.masterID;
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTCOMaster_StationNotInList(request, masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTCOMaster_StationSaveList(dynamic dynParam)
        {
            try
            {
                int masterID = (int)dynParam.masterID;
                List<DTOFLMMasterPHT_Station> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Station>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_StationSaveList(lst, masterID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTCOMaster_TroubleSaveList(dynamic dynParam)
        {
            try
            {
                int masterID = (int)dynParam.masterID;
                List<DTOFLMMasterPHT_Trouble> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Trouble>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_TroubleSaveList(lst, masterID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTCOMaster_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTCOMaster_StationDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_StationDeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMPHTCOMaster_TroubleDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_TroubleDeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public int FLMPHTCOMaster_Save(dynamic dynParam)
        {
            try
            {
                int res = 0;
                DTOFLMMasterPHT item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMasterPHT>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    res = sv.FLMPHTCOMaster_Save(item);
                });
                return res;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<DTOFLMMasterPHT_Station> FLMPHTCOMaster_StationList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Station> result = new List<DTOFLMMasterPHT_Station>();
                int masterID = (int)dynParam.masterID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTCOMaster_StationList(masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public List<DTOFLMMasterPHT_Trouble> FLMPHTCOMaster_TroubleList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Trouble> result = new List<DTOFLMMasterPHT_Trouble>();
                int masterID = (int)dynParam.masterID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPHTCOMaster_TroubleList(masterID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Excel FLMPHT DI CO

        public string FLMPHTDI_Export(dynamic dynParam)
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportFLMPHTDI_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);

                var data = new DTOFLMMasterPHT_Export();
                var result = new List<DTOFLMMasterPHT_Export_Data>();
                List<DTOFLMMasterPHT_Export_Trouble> lstTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();

                //Data Import
                DTOFLMMasterPHT_Import_Data dataImport = new DTOFLMMasterPHT_Import_Data();
                List<DTOFLMMasterPHT_Import_Common> listDriverImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstTroubleImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstVehicleImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstStationImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstCustomerImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstGroupOfLocationImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstCon = new List<DTOFLMMasterPHT_Import_Common>();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMPHTDIMaster_Export(dtfrom, dtto);
                    dataImport = sv.FLMPHTDIMaster_Import_Data();
                });

                if (dataImport != null)
                {
                    listDriverImport = dataImport.lstDriver;
                    lstTroubleImport = dataImport.lstGroupOfTrouble;
                    lstVehicleImport = dataImport.lstVehicle;
                    lstStationImport = dataImport.lstStation;
                    lstCustomerImport = dataImport.lstCustomer;
                    lstGroupOfLocationImport = dataImport.lstGroupOfLocation;
                    lstCon = dataImport.lstContainer;
                }

                result = data.ListMaster;
                lstTrouble = data.ListTrouble;

                var maxStation = 5;
                var maxTrouble = 0;
                if (lstTrouble != null)
                {
                    maxTrouble = lstTrouble.Count();
                }

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Thông tin chung");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe";
                    col++; worksheet.Cells[row, col].Value = "Từ ngày";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Đến ngày";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã lái xe 1";
                    col++; worksheet.Cells[row, col].Value = "Lái xe 1";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 1";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 1";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 2";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 2";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 3";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 3";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 4";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 4";
                    col++; worksheet.Cells[row, col].Value = "Chuyến";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Kênh";
                    col++; worksheet.Cells[row, col].Value = "Container";
                    col++; worksheet.Cells[row, col].Value = "Kết hợp";
                    col++; worksheet.Cells[row, col].Value = "Đi tỉnh";
                    col++; worksheet.Cells[row, col].Value = "Tính bốc xếp";
                    col++; worksheet.Cells[row, col].Value = "Quá tải";
                    col++; worksheet.Cells[row, col].Value = "Ôm hàng";
                    for (int i = 1; i <= col; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, 1, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    var colBak = col;
                    col++; worksheet.Cells[row, col].Value = "KM";
                    colBak = col;
                    worksheet.Cells[row + 1, col].Value = "Bắt đầu";
                    col++; worksheet.Cells[row + 1, col].Value = "Kết thúc";
                    ExcelHelper.CreateCellStyle(worksheet, 1, colBak, 1, col, true, true, ExcelHelper.ColorOrange, ExcelHelper.ColorBlack, 0, "");
                    ExcelHelper.CreateCellStyle(worksheet, 2, colBak, 2, col, false, false, ExcelHelper.ColorOrange, ExcelHelper.ColorBlack, 0, "");

                    for (int i = 0; i < maxStation; i++)
                    {
                        col++; worksheet.Cells[row, col].Value = "Trạm " + (i + 1);
                        worksheet.Cells[row + 1, col].Value = "Trạm";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                        col++; worksheet.Cells[row + 1, col].Value = "Tiền";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");

                        ExcelHelper.CreateCellStyle(worksheet, 1, col - 1, 1, col, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }

                    for (int i = 0; i < maxTrouble; i++)
                    {
                        var trouble = lstTrouble[i];
                        col++; worksheet.Cells[row, col].Value = trouble.GroupOfTroubleName;
                        worksheet.Cells[row + 1, col].Value = "Ghi chú";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                        col++; worksheet.Cells[row + 1, col].Value = "Tiền";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");

                        ExcelHelper.CreateCellStyle(worksheet, 1, col - 1, 1, col, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }

                    col++; worksheet.Cells[row, col].Value = "Ghi chú";
                    for (int i = col; i <= col; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, 1, i, 2, i, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }
                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    row = 3; col = 1;
                    if (result != null && result.Count > 0)
                    {
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt; worksheet.Column(col).Width = 5;
                            col++; worksheet.Cells[row, col].Value = item.VehicleCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.DateConfig; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.ETD; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            if (item.DriverID1 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode1; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName1; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID2 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode2; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName2; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID3 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode3; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName3; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID4 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode4; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName4; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID5 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode5; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName5; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            col++; worksheet.Cells[row, col].Value = item.SortOrder; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.CustomerCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.TypeOfLocationCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.PHTPackingCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExTotalJoin; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExTotalDayOut; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.PHTLoading.HasValue ? (item.PHTLoading.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExIsOverWeight.HasValue ? (item.ExIsOverWeight.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExIsOverNight.HasValue ? (item.ExIsOverNight.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            colBak = col;
                            col++; worksheet.Cells[row, col].Value = item.KMStart; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.KMEnd; worksheet.Column(col).Width = 20;

                            colBak = col;
                            for (int i = 0; i < item.ListStation.Count; i++)
                            {
                                var station = item.ListStation[i];
                                col++; worksheet.Cells[row, col].Value = station.LocationCode; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = station.Price; worksheet.Column(col).Width = 20;
                                ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                if (i == 4)
                                    break;
                            }
                            if (maxStation > 0)
                            {
                                col = colBak + maxStation * 2;
                            }

                            colBak = col;
                            for (int i = 0; i < maxTrouble; i++)
                            {
                                col += 2;
                                var trouble = lstTrouble[i];
                                foreach (var objTrouble in item.ListTrouble)
                                {
                                    if (trouble.GroupOfTroubleCode == objTrouble.GroupOfTroubleCode)
                                    {
                                        worksheet.Cells[row, col - 1].Value = objTrouble.Note; worksheet.Column(col - 1).Width = 20;
                                        worksheet.Cells[row, col].Value = objTrouble.Price; worksheet.Column(col).Width = 20;
                                        ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                    }
                                }
                            }
                            if (maxTrouble > 0)
                            {
                                col = colBak + maxTrouble * 2;
                            }
                            col++; worksheet.Cells[row, col].Value = item.Note; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region List Driver
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách tài xế");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet1.Cells[row, col].Value = "STT"; worksheet1.Column(col).Width = 5;
                    col++; worksheet1.Cells[row, col].Value = "Mã tài xế"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Tài xế"; worksheet1.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet1.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (listDriverImport != null)
                    {
                        row = 2;
                        foreach (var driverImport in listDriverImport)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = driverImport.Code;
                            col++; worksheet1.Cells[row, col].Value = driverImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Vehicle
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách xe");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet2.Cells[row, col].Value = "STT"; worksheet2.Column(col).Width = 5;
                    col++; worksheet2.Cells[row, col].Value = "Số xe"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Xe"; worksheet2.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet2.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstVehicleImport != null)
                    {
                        row = 2;
                        foreach (var vehicleImport in lstVehicleImport)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = vehicleImport.Code;
                            col++; worksheet2.Cells[row, col].Value = vehicleImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Customer
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets.Add("Danh sách khách hàng");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet3.Cells[row, col].Value = "STT"; worksheet3.Column(col).Width = 5;
                    col++; worksheet3.Cells[row, col].Value = "Mã khách hàng"; worksheet3.Column(col).Width = 20;
                    col++; worksheet3.Cells[row, col].Value = "Khách hàng"; worksheet3.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet3, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet3.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet3.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstCustomerImport != null)
                    {
                        row = 2;
                        foreach (var cusImport in lstCustomerImport)
                        {
                            col = 1;
                            worksheet3.Cells[row, col].Value = stt;
                            col++; worksheet3.Cells[row, col].Value = cusImport.Code;
                            col++; worksheet3.Cells[row, col].Value = cusImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet3.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet3.Dimension.End.Column; j++)
                        {
                            worksheet3.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List GroupOfLocation
                    ExcelWorksheet worksheet4 = package.Workbook.Worksheets.Add("Danh sách kênh");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet4.Cells[row, col].Value = "STT"; worksheet4.Column(col).Width = 5;
                    col++; worksheet4.Cells[row, col].Value = "Mã kênh"; worksheet4.Column(col).Width = 20;
                    col++; worksheet4.Cells[row, col].Value = "Kênh"; worksheet4.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet4, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet4.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet4.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstGroupOfLocationImport != null)
                    {
                        row = 2;
                        foreach (var golImport in lstGroupOfLocationImport)
                        {
                            col = 1;
                            worksheet4.Cells[row, col].Value = stt;
                            col++; worksheet4.Cells[row, col].Value = golImport.Code;
                            col++; worksheet4.Cells[row, col].Value = golImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet4.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet4.Dimension.End.Column; j++)
                        {
                            worksheet4.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Station
                    ExcelWorksheet worksheet5 = package.Workbook.Worksheets.Add("Danh sách Trạm");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet5.Cells[row, col].Value = "STT"; worksheet5.Column(col).Width = 5;
                    col++; worksheet5.Cells[row, col].Value = "Mã trạm"; worksheet5.Column(col).Width = 20;
                    col++; worksheet5.Cells[row, col].Value = "Trạm"; worksheet5.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet5, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet5.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet5.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstStationImport != null)
                    {
                        row = 2;
                        foreach (var stationImport in lstStationImport)
                        {
                            col = 1;
                            worksheet5.Cells[row, col].Value = stt;
                            col++; worksheet5.Cells[row, col].Value = stationImport.Code;
                            col++; worksheet5.Cells[row, col].Value = stationImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet5.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet5.Dimension.End.Column; j++)
                        {
                            worksheet5.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Trouble
                    ExcelWorksheet worksheet6 = package.Workbook.Worksheets.Add("Danh sách Phụ phí");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet6.Cells[row, col].Value = "STT"; worksheet6.Column(col).Width = 5;
                    col++; worksheet6.Cells[row, col].Value = "Mã phụ phí"; worksheet6.Column(col).Width = 20;
                    col++; worksheet6.Cells[row, col].Value = "Phụ phí"; worksheet6.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet6, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet6.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet6.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstTroubleImport != null)
                    {
                        row = 2;
                        foreach (var troubleImport in lstTroubleImport)
                        {
                            col = 1;
                            worksheet6.Cells[row, col].Value = stt;
                            col++; worksheet6.Cells[row, col].Value = troubleImport.Code;
                            col++; worksheet6.Cells[row, col].Value = troubleImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet6.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet6.Dimension.End.Column; j++)
                        {
                            worksheet6.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Cont
                    ExcelWorksheet worksheet7 = package.Workbook.Worksheets.Add("Danh sách Packing");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet7.Cells[row, col].Value = "STT"; worksheet7.Column(col).Width = 5;
                    col++; worksheet7.Cells[row, col].Value = "Mã Container"; worksheet7.Column(col).Width = 20;
                    col++; worksheet7.Cells[row, col].Value = "Container"; worksheet7.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet7, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet7.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet7.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstCon != null)
                    {
                        row = 2;
                        foreach (var conImport in lstCon)
                        {
                            col = 1;
                            worksheet7.Cells[row, col].Value = stt;
                            col++; worksheet7.Cells[row, col].Value = conImport.Code;
                            col++; worksheet7.Cells[row, col].Value = conImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet6.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet6.Dimension.End.Column; j++)
                        {
                            worksheet6.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMMasterPHT_Import> FLMPHTDI_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOFLMMasterPHT_Import> result = new List<DTOFLMMasterPHT_Import>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMMasterPHT_Import_Data data = new DTOFLMMasterPHT_Import_Data();
                    List<DTOFLMMasterPHT_Import_Common> listDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstTrouble = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstVehicle = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstStation = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstCustomer = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstGroupOfLocation = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstCon = new List<DTOFLMMasterPHT_Import_Common>();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMPHTDIMaster_Import_Data();
                    });

                    if (data != null)
                    {
                        listDriver = data.lstDriver;
                        lstTrouble = data.lstGroupOfTrouble;
                        lstVehicle = data.lstVehicle;
                        lstStation = data.lstStation;
                        lstCustomer = data.lstCustomer;
                        lstGroupOfLocation = data.lstGroupOfLocation;
                        lstCon = data.lstContainer;
                    }

                    var maxStation = 5;
                    var maxTrouble = 0;
                    if (lstTrouble != null)
                    {
                        maxTrouble = lstTrouble.Count();
                    }

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string VehicleNoStr, DateConfigStr, SortOrderStr;

                            if (worksheet != null)
                            {
                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMMasterPHT_Import obj = new DTOFLMMasterPHT_Import();
                                    obj.ExcelRow = row;
                                    col = 2;
                                    VehicleNoStr = ExcelHelper.GetValue(worksheet, row, col);
                                    col++; DateConfigStr = ExcelHelper.GetValue(worksheet, row, col);
                                    SortOrderStr = ExcelHelper.GetValue(worksheet, row, 15);//Col chuyến

                                    DateTime DateConfig = new DateTime();
                                    int SortOrder = -1;

                                    if (string.IsNullOrEmpty(VehicleNoStr) && string.IsNullOrEmpty(DateConfigStr))
                                    {
                                        break;
                                    }

                                    #region Check Xe, Ngày, Chuyến

                                    if (string.IsNullOrEmpty(VehicleNoStr) || string.IsNullOrEmpty(DateConfigStr) || string.IsNullOrEmpty(SortOrderStr))
                                    {
                                        lstError.Add("[Xe][Từ ngày][Chuyến] không được trống");
                                    }
                                    else
                                    {
                                        try
                                        {
                                            DateConfig = ExcelHelper.ValueToDate(DateConfigStr);
                                            DateConfig = DateConfig.Date;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                DateConfig = Convert.ToDateTime(DateConfigStr);
                                                DateConfig = DateConfig.Date;
                                            }
                                            catch
                                            {
                                                lstError.Add("Từ ngày [" + DateConfigStr + "] không chính xác");
                                            }

                                        }

                                        try
                                        {
                                            SortOrder = Convert.ToInt32(SortOrderStr);
                                        }
                                        catch
                                        {
                                            lstError.Add("Chuyến [" + SortOrderStr + "] không chính xác");
                                        }

                                        if (DateConfig != null && SortOrder >= 0)
                                        {
                                            obj.VehicleCode = VehicleNoStr;
                                            if (result.Count(c => c.VehicleCode == VehicleNoStr && (c.DateConfig != null && c.DateConfig == DateConfig)
                                                && (c.SortOrder != null && c.SortOrder == SortOrder)) > 0)
                                            {
                                                lstError.Add("Xe [" + VehicleNoStr + "], Từ ngày [" + DateConfig.ToShortDateString() + "], Chuyến Từ ngày [" + SortOrderStr + "], đã có trong file");
                                            }
                                            else
                                            {
                                                var vehicle = lstVehicle.FirstOrDefault(c => c.Code == VehicleNoStr);
                                                if (vehicle == null)
                                                {
                                                    lstError.Add("Xe [" + VehicleNoStr + "] không tồn tại trong hệ thống");
                                                }
                                                else
                                                {
                                                    obj.VehicleCode = VehicleNoStr;
                                                    obj.VehicleID = vehicle.ID;
                                                    obj.DateConfig = DateConfig;
                                                    obj.SortOrder = SortOrder;
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Ngày kết thúc
                                    col++; var ETD = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ETD))
                                    {
                                        obj.ETD = null;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ETD = ExcelHelper.ValueToDate(ETD);
                                            obj.ETD = obj.ETD.Value.Date;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.ETD = Convert.ToDateTime(ETD);
                                                obj.ETD = obj.ETD.Value.Date;
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày đến [" + ETD + "] không chính xác");
                                            }

                                        }
                                    }
                                    #endregion

                                    #region Tài xế
                                    string DriverCode;
                                    col = 5;
                                    DTOFLMMasterPHT_Import_Common driver = new DTOFLMMasterPHT_Import_Common();
                                    //Tài xế 1
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                        lstError.Add("[Mã lái xe 1] không được trống");
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode1 = driver.Code;
                                            obj.DriverID1 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã lái xe 1 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 2
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode2 = driver.Code;
                                            obj.DriverID2 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 1 [" + DriverCode + "] không tồn tại");
                                        }
                                    }
                                    //Tài xế 3
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode3 = driver.Code;
                                            obj.DriverID3 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 2 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 4
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode4 = driver.Code;
                                            obj.DriverID4 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 3 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 5
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode5 = driver.Code;
                                            obj.DriverID5 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 4 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    #endregion

                                    #region Khách hàng
                                    col++;
                                    col++; var CustomerCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common customer = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(CustomerCode))
                                    {
                                        lstError.Add("[Mã khách hàng] không được trống");
                                    }
                                    else
                                    {
                                        customer = lstCustomer.FirstOrDefault(c => c.Code == CustomerCode);
                                        if (customer != null)
                                        {
                                            obj.CustomerCode = customer.Code;
                                            obj.CustomerID = customer.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Khách hàng [" + CustomerCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Kênh
                                    col++; var TypeOfLocationCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common type = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(TypeOfLocationCode))
                                    {
                                        lstError.Add("[Kênh] không được trống");
                                    }
                                    else
                                    {
                                        type = lstGroupOfLocation.FirstOrDefault(c => c.Code == TypeOfLocationCode);
                                        if (type != null)
                                        {
                                            obj.TypeOfLocationName = type.Name;
                                            obj.TypeOfLocationID = type.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Kênh [" + TypeOfLocationCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Container
                                    col++; var PHTPackingCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common packing = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(PHTPackingCode))
                                    {
                                    }
                                    else
                                    {
                                        packing = lstCon.FirstOrDefault(c => c.Code == PHTPackingCode);
                                        if (type != null)
                                        {
                                            obj.PHTPackingCode = packing.Name;
                                            obj.PHTPackingID = packing.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Packing [" + PHTPackingCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Kết hợp
                                    col++;
                                    var ExTotalJoin = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalJoin))
                                    {
                                        obj.ExTotalJoin = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ExTotalJoin = Convert.ToDouble(ExTotalJoin);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kết hợp [" + ExTotalJoin + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Đi tỉnh
                                    col++;
                                    var ExTotalDayOut = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalDayOut))
                                    {
                                        obj.ExTotalDayOut = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ExTotalDayOut = Convert.ToDouble(ExTotalDayOut);
                                        }
                                        catch
                                        {
                                            lstError.Add("Đi tỉnh [" + ExTotalDayOut + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Tính bốc xếp
                                    col++;
                                    var PHTLoading = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(PHTLoading))
                                    {
                                        obj.PHTLoading = false;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "y")
                                    {
                                        obj.PHTLoading = true;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "x")
                                    {
                                        obj.PHTLoading = true;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "n")
                                    {
                                        obj.PHTLoading = false;
                                    }
                                    #endregion

                                    #region Quá tải
                                    col++;
                                    var ExIsOverWeight = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalJoin))
                                    {
                                        obj.ExIsOverWeight = false;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "y")
                                    {
                                        obj.ExIsOverWeight = true;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "x")
                                    {
                                        obj.ExIsOverWeight = true;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "n")
                                    {
                                        obj.ExIsOverWeight = false;
                                    }
                                    #endregion

                                    #region Ôm hàng
                                    col++;
                                    var ExIsOverNight = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExIsOverNight))
                                    {
                                        obj.ExIsOverNight = false;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "y")
                                    {
                                        obj.ExIsOverNight = true;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "x")
                                    {
                                        obj.ExIsOverNight = true;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "n")
                                    {
                                        obj.ExIsOverNight = false;
                                    }
                                    #endregion

                                    #region KM
                                    col++;
                                    var KMStart = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(KMStart))
                                    {
                                        obj.KMStart = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.KMStart = Convert.ToDouble(KMStart);
                                        }
                                        catch
                                        {
                                            lstError.Add("KMStart [" + KMStart + "] không chính xác");
                                        }
                                    }

                                    col++;
                                    var KMEnd = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(KMEnd))
                                    {
                                        obj.KMEnd = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.KMEnd = Convert.ToDouble(KMEnd);
                                        }
                                        catch
                                        {
                                            lstError.Add("KMEnd [" + KMEnd + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Station

                                    string StationCode, StationPrice;
                                    obj.ListStation = new List<DTOFLMMasterPHT_Export_Station>();
                                    for (int i = 0; i < maxStation; i++)
                                    {
                                        col++; StationCode = ExcelHelper.GetValue(worksheet, row, col);
                                        col++; StationPrice = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(StationCode))
                                        {
                                            var station = lstStation.FirstOrDefault(c => c.Code == StationCode);
                                            DTOFLMMasterPHT_Export_Station stationImport = new DTOFLMMasterPHT_Export_Station();
                                            if (station != null)
                                            {
                                                if (string.IsNullOrEmpty(StationPrice))
                                                    lstError.Add("[Tiền] Trạm [" + StationCode + "] không được trống");
                                                else
                                                {
                                                    stationImport.LocationCode = station.Code;
                                                    stationImport.LocationID = station.ID;
                                                    try
                                                    {
                                                        stationImport.Price = Convert.ToDecimal(StationPrice);
                                                        obj.ListStation.Add(stationImport);
                                                    }
                                                    catch
                                                    {
                                                        lstError.Add("Tiền [" + StationPrice + "] Trạm [" + StationCode + "] không đúng định dạng");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                lstError.Add("Mã trạm [" + StationCode + "] không tồn tại trong hệ thống");
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Trouble
                                    string TroubleName, TroubleCode, TroublePrice, TroubleNote;
                                    obj.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                                    for (int i = 0; i < maxTrouble; i++)
                                    {
                                        TroubleName = lstTrouble[i].Name;
                                        TroubleCode = lstTrouble[i].Code;
                                        col++; TroubleNote = ExcelHelper.GetValue(worksheet, row, col);
                                        col++; TroublePrice = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(TroublePrice))
                                        {
                                            var trouble = lstTrouble.FirstOrDefault(c => c.Code == TroubleCode);
                                            DTOFLMMasterPHT_Export_Trouble troubleImport = new DTOFLMMasterPHT_Export_Trouble();
                                            if (trouble != null)
                                            {

                                                troubleImport.Note = TroubleNote;
                                                troubleImport.GroupOfTrobleID = trouble.ID;
                                                troubleImport.GroupOfTroubleCode = trouble.Code;
                                                troubleImport.GroupOfTroubleName = trouble.Name;

                                                try
                                                {
                                                    troubleImport.Price = Convert.ToDecimal(TroublePrice);
                                                    obj.ListTrouble.Add(troubleImport);
                                                }
                                                catch
                                                {
                                                    lstError.Add("Tiền [" + TroublePrice + "] chi phí [" + TroubleCode + "] không đúng định dạng");
                                                }
                                            }
                                            else
                                            {
                                                lstError.Add("Chi phí [" + TroubleCode + "] không tồn tại trong hệ thống");
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Note
                                    string Input;
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.Note = Input;
                                    #endregion

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMPHTDI_Excel_Import(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Import>>(dynParam.lst.ToString());

                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMPHTDIMaster_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMPHTCO_Export(dynamic dynParam)
        {
            try
            {
                string file = "/" + FolderUpload.Export + "ExportFLMPHTCO_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                DateTime dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                DateTime dtto = Convert.ToDateTime(dynParam.dtto.ToString());
                dtfrom = dtfrom.Date;
                dtto = dtto.Date.AddDays(1);

                var data = new DTOFLMMasterPHT_Export();
                var result = new List<DTOFLMMasterPHT_Export_Data>();
                List<DTOFLMMasterPHT_Export_Trouble> lstTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();

                //Data Import
                DTOFLMMasterPHT_Import_Data dataImport = new DTOFLMMasterPHT_Import_Data();
                List<DTOFLMMasterPHT_Import_Common> listDriverImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstTroubleImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstVehicleImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstStationImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstCustomerImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstGroupOfLocationImport = new List<DTOFLMMasterPHT_Import_Common>();
                List<DTOFLMMasterPHT_Import_Common> lstCon = new List<DTOFLMMasterPHT_Import_Common>();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMPHTCOMaster_Export(dtfrom, dtto);
                    dataImport = sv.FLMPHTCOMaster_Import_Data();
                });

                if (dataImport != null)
                {
                    listDriverImport = dataImport.lstDriver;
                    lstTroubleImport = dataImport.lstGroupOfTrouble;
                    lstVehicleImport = dataImport.lstVehicle;
                    lstStationImport = dataImport.lstStation;
                    lstCustomerImport = dataImport.lstCustomer;
                    lstGroupOfLocationImport = dataImport.lstGroupOfLocation;
                    lstCon = dataImport.lstContainer;
                }

                result = data.ListMaster;
                lstTrouble = data.ListTrouble;

                var maxStation = 5;
                var maxTrouble = 0;
                if (lstTrouble != null)
                {
                    maxTrouble = lstTrouble.Count();
                }

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Xe";
                    col++; worksheet.Cells[row, col].Value = "Từ ngày";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Đến ngày";
                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                    col++; worksheet.Cells[row, col].Value = "Mã lái xe 1";
                    col++; worksheet.Cells[row, col].Value = "Lái xe 1";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 1";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 1";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 2";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 2";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 3";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 3";
                    col++; worksheet.Cells[row, col].Value = "Mã phụ lái 4";
                    col++; worksheet.Cells[row, col].Value = "Phụ lái 4";
                    col++; worksheet.Cells[row, col].Value = "Chuyến";
                    col++; worksheet.Cells[row, col].Value = "Khách hàng";
                    col++; worksheet.Cells[row, col].Value = "Kênh";
                    col++; worksheet.Cells[row, col].Value = "Container";
                    col++; worksheet.Cells[row, col].Value = "Kết hợp";
                    col++; worksheet.Cells[row, col].Value = "Đi tỉnh";
                    col++; worksheet.Cells[row, col].Value = "Tính bốc xếp";
                    col++; worksheet.Cells[row, col].Value = "Quá tải";
                    col++; worksheet.Cells[row, col].Value = "Ôm hàng";
                    for (int i = 1; i <= col; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, 1, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    var colBak = col;
                    col++; worksheet.Cells[row, col].Value = "KM";
                    colBak = col;
                    worksheet.Cells[row + 1, col].Value = "Bắt đầu";
                    col++; worksheet.Cells[row + 1, col].Value = "Kết thúc";
                    ExcelHelper.CreateCellStyle(worksheet, 1, colBak, 1, col, true, true, ExcelHelper.ColorOrange, ExcelHelper.ColorBlack, 0, "");
                    ExcelHelper.CreateCellStyle(worksheet, 2, colBak, 2, col, false, false, ExcelHelper.ColorOrange, ExcelHelper.ColorBlack, 0, "");

                    for (int i = 0; i < maxStation; i++)
                    {
                        col++; worksheet.Cells[row, col].Value = "Trạm " + (i + 1);
                        worksheet.Cells[row + 1, col].Value = "Trạm";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                        col++; worksheet.Cells[row + 1, col].Value = "Tiền";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");

                        ExcelHelper.CreateCellStyle(worksheet, 1, col - 1, 1, col, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }

                    for (int i = 0; i < maxTrouble; i++)
                    {
                        var trouble = lstTrouble[i];
                        col++; worksheet.Cells[row, col].Value = trouble.GroupOfTroubleName;
                        worksheet.Cells[row + 1, col].Value = "Ghi chú";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                        col++; worksheet.Cells[row + 1, col].Value = "Tiền";
                        ExcelHelper.CreateCellStyle(worksheet, 2, col, 2, col, false, false, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");

                        ExcelHelper.CreateCellStyle(worksheet, 1, col - 1, 1, col, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }

                    col++; worksheet.Cells[row, col].Value = "Ghi chú";
                    for (int i = col; i <= col; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, 1, i, 2, i, true, true, ExcelHelper.ColorLightGreen, ExcelHelper.ColorBlack, 0, "");
                    }
                    worksheet.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    row = 3; col = 1;
                    if (result != null && result.Count > 0)
                    {
                        foreach (var item in result)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt; worksheet.Column(col).Width = 5;
                            col++; worksheet.Cells[row, col].Value = item.VehicleCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.DateConfig; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            col++; worksheet.Cells[row, col].Value = item.ETD; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatDDMMYYYY);
                            if (item.DriverID1 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode1; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName1; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID2 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode2; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName2; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID3 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode3; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName3; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID4 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode4; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName4; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            if (item.DriverID5 > 0)
                            {
                                col++; worksheet.Cells[row, col].Value = item.DriverCode5; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = item.DriverName5; worksheet.Column(col).Width = 20;
                            }
                            else
                            {
                                col += 2;
                            }
                            col++; worksheet.Cells[row, col].Value = item.SortOrder; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.CustomerCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.TypeOfLocationCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.PHTPackingCode; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExTotalJoin; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExTotalDayOut; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.PHTLoading.HasValue ? (item.PHTLoading.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExIsOverWeight.HasValue ? (item.ExIsOverWeight.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.ExIsOverNight.HasValue ? (item.ExIsOverNight.Value ? "X" : "") : ""; worksheet.Column(col).Width = 20;
                            colBak = col;
                            col++; worksheet.Cells[row, col].Value = item.KMStart; worksheet.Column(col).Width = 20;
                            col++; worksheet.Cells[row, col].Value = item.KMEnd; worksheet.Column(col).Width = 20;

                            colBak = col;
                            for (int i = 0; i < item.ListStation.Count; i++)
                            {
                                var station = item.ListStation[i];
                                col++; worksheet.Cells[row, col].Value = station.LocationCode; worksheet.Column(col).Width = 20;
                                col++; worksheet.Cells[row, col].Value = station.Price; worksheet.Column(col).Width = 20;
                                ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                if (i == 4)
                                    break;
                            }
                            if (maxStation > 0)
                            {
                                col = colBak + maxStation * 2;
                            }

                            colBak = col;
                            for (int i = 0; i < maxTrouble; i++)
                            {
                                col += 2;
                                var trouble = lstTrouble[i];
                                foreach (var objTrouble in item.ListTrouble)
                                {
                                    if (trouble.GroupOfTroubleCode == objTrouble.GroupOfTroubleCode)
                                    {
                                        worksheet.Cells[row, col - 1].Value = objTrouble.Note; worksheet.Column(col - 1).Width = 20;
                                        worksheet.Cells[row, col].Value = objTrouble.Price; worksheet.Column(col).Width = 20;
                                        ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                    }
                                }
                            }
                            if (maxTrouble > 0)
                            {
                                col = colBak + maxTrouble * 2;
                            }
                            col++; worksheet.Cells[row, col].Value = item.Note; worksheet.Column(col).Width = 20;
                            ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region List Driver
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách tài xế");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet1.Cells[row, col].Value = "STT"; worksheet1.Column(col).Width = 5;
                    col++; worksheet1.Cells[row, col].Value = "Mã tài xế"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Tài xế"; worksheet1.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet1.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (listDriverImport != null)
                    {
                        row = 2;
                        foreach (var driverImport in listDriverImport)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = driverImport.Code;
                            col++; worksheet1.Cells[row, col].Value = driverImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Vehicle
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách xe");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet2.Cells[row, col].Value = "STT"; worksheet2.Column(col).Width = 5;
                    col++; worksheet2.Cells[row, col].Value = "Số xe"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Xe"; worksheet2.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet2.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstVehicleImport != null)
                    {
                        row = 2;
                        foreach (var vehicleImport in lstVehicleImport)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = vehicleImport.Code;
                            col++; worksheet2.Cells[row, col].Value = vehicleImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Customer
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets.Add("Danh sách khách hàng");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet3.Cells[row, col].Value = "STT"; worksheet3.Column(col).Width = 5;
                    col++; worksheet3.Cells[row, col].Value = "Mã khách hàng"; worksheet3.Column(col).Width = 20;
                    col++; worksheet3.Cells[row, col].Value = "Khách hàng"; worksheet3.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet3, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet3.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet3.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstCustomerImport != null)
                    {
                        row = 2;
                        foreach (var cusImport in lstCustomerImport)
                        {
                            col = 1;
                            worksheet3.Cells[row, col].Value = stt;
                            col++; worksheet3.Cells[row, col].Value = cusImport.Code;
                            col++; worksheet3.Cells[row, col].Value = cusImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet3.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet3.Dimension.End.Column; j++)
                        {
                            worksheet3.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List GroupOfLocation
                    ExcelWorksheet worksheet4 = package.Workbook.Worksheets.Add("Danh sách kênh");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet4.Cells[row, col].Value = "STT"; worksheet4.Column(col).Width = 5;
                    col++; worksheet4.Cells[row, col].Value = "Mã kênh"; worksheet4.Column(col).Width = 20;
                    col++; worksheet4.Cells[row, col].Value = "Kênh"; worksheet4.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet4, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet4.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet4.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstGroupOfLocationImport != null)
                    {
                        row = 2;
                        foreach (var golImport in lstGroupOfLocationImport)
                        {
                            col = 1;
                            worksheet4.Cells[row, col].Value = stt;
                            col++; worksheet4.Cells[row, col].Value = golImport.Code;
                            col++; worksheet4.Cells[row, col].Value = golImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet4.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet4.Dimension.End.Column; j++)
                        {
                            worksheet4.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Station
                    ExcelWorksheet worksheet5 = package.Workbook.Worksheets.Add("Danh sách Trạm");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet5.Cells[row, col].Value = "STT"; worksheet5.Column(col).Width = 5;
                    col++; worksheet5.Cells[row, col].Value = "Mã trạm"; worksheet5.Column(col).Width = 20;
                    col++; worksheet5.Cells[row, col].Value = "Trạm"; worksheet5.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet5, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet5.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet5.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstStationImport != null)
                    {
                        row = 2;
                        foreach (var stationImport in lstStationImport)
                        {
                            col = 1;
                            worksheet5.Cells[row, col].Value = stt;
                            col++; worksheet5.Cells[row, col].Value = stationImport.Code;
                            col++; worksheet5.Cells[row, col].Value = stationImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet5.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet5.Dimension.End.Column; j++)
                        {
                            worksheet5.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Trouble
                    ExcelWorksheet worksheet6 = package.Workbook.Worksheets.Add("Danh sách Phụ phí");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet6.Cells[row, col].Value = "STT"; worksheet6.Column(col).Width = 5;
                    col++; worksheet6.Cells[row, col].Value = "Mã phụ phí"; worksheet6.Column(col).Width = 20;
                    col++; worksheet6.Cells[row, col].Value = "Phụ phí"; worksheet6.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet6, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet6.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet6.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstTroubleImport != null)
                    {
                        row = 2;
                        foreach (var troubleImport in lstTroubleImport)
                        {
                            col = 1;
                            worksheet6.Cells[row, col].Value = stt;
                            col++; worksheet6.Cells[row, col].Value = troubleImport.Code;
                            col++; worksheet6.Cells[row, col].Value = troubleImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet6.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet6.Dimension.End.Column; j++)
                        {
                            worksheet6.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion

                    #region List Cont
                    ExcelWorksheet worksheet7 = package.Workbook.Worksheets.Add("Danh sách Packing");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet7.Cells[row, col].Value = "STT"; worksheet7.Column(col).Width = 5;
                    col++; worksheet7.Cells[row, col].Value = "Mã Container"; worksheet7.Column(col).Width = 20;
                    col++; worksheet7.Cells[row, col].Value = "Container"; worksheet7.Column(col).Width = 20;

                    ExcelHelper.CreateCellStyle(worksheet7, 1, 1, 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorBlack, 0, "");
                    worksheet7.Cells[1, 1, 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet7.Cells[1, 1, 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region Body
                    if (lstCon != null)
                    {
                        row = 2;
                        foreach (var conImport in lstCon)
                        {
                            col = 1;
                            worksheet7.Cells[row, col].Value = stt;
                            col++; worksheet7.Cells[row, col].Value = conImport.Code;
                            col++; worksheet7.Cells[row, col].Value = conImport.Name;
                            row++; stt++;
                        }
                    }
                    for (int i = 1; i <= worksheet6.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet6.Dimension.End.Column; j++)
                        {
                            worksheet6.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMMasterPHT_Import> FLMPHTCO_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOFLMMasterPHT_Import> result = new List<DTOFLMMasterPHT_Import>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMMasterPHT_Import_Data data = new DTOFLMMasterPHT_Import_Data();
                    List<DTOFLMMasterPHT_Import_Common> listDriver = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstTrouble = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstVehicle = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstStation = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstCustomer = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstGroupOfLocation = new List<DTOFLMMasterPHT_Import_Common>();
                    List<DTOFLMMasterPHT_Import_Common> lstCon = new List<DTOFLMMasterPHT_Import_Common>();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMPHTCOMaster_Import_Data();
                    });

                    if (data != null)
                    {
                        listDriver = data.lstDriver;
                        lstTrouble = data.lstGroupOfTrouble;
                        lstVehicle = data.lstVehicle;
                        lstStation = data.lstStation;
                        lstCustomer = data.lstCustomer;
                        lstGroupOfLocation = data.lstGroupOfLocation;
                        lstCon = data.lstContainer;
                    }

                    var maxStation = 5;
                    var maxTrouble = 0;
                    if (lstTrouble != null)
                    {
                        maxTrouble = lstTrouble.Count();
                    }

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 2, row;
                            string VehicleNoStr, DateConfigStr, SortOrderStr;

                            if (worksheet != null)
                            {
                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOFLMMasterPHT_Import obj = new DTOFLMMasterPHT_Import();
                                    obj.ExcelRow = row;
                                    col = 2;
                                    VehicleNoStr = ExcelHelper.GetValue(worksheet, row, col);
                                    col++; DateConfigStr = ExcelHelper.GetValue(worksheet, row, col);
                                    SortOrderStr = ExcelHelper.GetValue(worksheet, row, 15);//Col chuyến

                                    DateTime DateConfig = new DateTime();
                                    int SortOrder = -1;

                                    if (string.IsNullOrEmpty(VehicleNoStr) && string.IsNullOrEmpty(DateConfigStr))
                                    {
                                        break;
                                    }

                                    #region Check Xe, Ngày, Chuyến

                                    if (string.IsNullOrEmpty(VehicleNoStr) || string.IsNullOrEmpty(DateConfigStr) || string.IsNullOrEmpty(SortOrderStr))
                                    {
                                        lstError.Add("[Xe][Từ ngày][Chuyến] không được trống");
                                    }
                                    else
                                    {
                                        try
                                        {
                                            DateConfig = ExcelHelper.ValueToDate(DateConfigStr);
                                            DateConfig = DateConfig.Date;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                DateConfig = Convert.ToDateTime(DateConfigStr);
                                                DateConfig = DateConfig.Date;
                                            }
                                            catch
                                            {
                                                lstError.Add("Từ ngày [" + DateConfigStr + "] không chính xác");
                                            }

                                        }

                                        try
                                        {
                                            SortOrder = Convert.ToInt32(SortOrderStr);
                                        }
                                        catch
                                        {
                                            lstError.Add("Chuyến [" + SortOrderStr + "] không chính xác");
                                        }

                                        if (DateConfig != null && SortOrder >= 0)
                                        {
                                            obj.VehicleCode = VehicleNoStr;
                                            if (result.Count(c => c.VehicleCode == VehicleNoStr && (c.DateConfig != null && c.DateConfig == DateConfig)
                                                && (c.SortOrder != null && c.SortOrder == SortOrder)) > 0)
                                            {
                                                lstError.Add("Xe [" + VehicleNoStr + "], Từ ngày [" + DateConfig.ToShortDateString() + "], Chuyến Từ ngày [" + SortOrderStr + "], đã có trong file");
                                            }
                                            else
                                            {
                                                var vehicle = lstVehicle.FirstOrDefault(c => c.Code == VehicleNoStr);
                                                if (vehicle == null)
                                                {
                                                    lstError.Add("Xe [" + VehicleNoStr + "] không tồn tại trong hệ thống");
                                                }
                                                else
                                                {
                                                    obj.VehicleCode = VehicleNoStr;
                                                    obj.VehicleID = vehicle.ID;
                                                    obj.DateConfig = DateConfig;
                                                    obj.SortOrder = SortOrder;
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Ngày kết thúc
                                    col++; var ETD = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ETD))
                                    {
                                        obj.ETD = null;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ETD = ExcelHelper.ValueToDate(ETD);
                                            obj.ETD = obj.ETD.Value.Date;
                                        }
                                        catch
                                        {
                                            try
                                            {
                                                obj.ETD = Convert.ToDateTime(ETD);
                                                obj.ETD = obj.ETD.Value.Date;
                                            }
                                            catch
                                            {
                                                lstError.Add("Ngày đến [" + ETD + "] không chính xác");
                                            }

                                        }
                                    }
                                    #endregion

                                    #region Tài xế
                                    string DriverCode;
                                    col = 5;
                                    DTOFLMMasterPHT_Import_Common driver = new DTOFLMMasterPHT_Import_Common();
                                    //Tài xế 1
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                        lstError.Add("[Mã lái xe 1] không được trống");
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode1 = driver.Code;
                                            obj.DriverID1 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã lái xe 1 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 2
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode2 = driver.Code;
                                            obj.DriverID2 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 1 [" + DriverCode + "] không tồn tại");
                                        }
                                    }
                                    //Tài xế 3
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode3 = driver.Code;
                                            obj.DriverID3 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 2 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 4
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode4 = driver.Code;
                                            obj.DriverID4 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 3 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    //Tài xế 5
                                    col++;
                                    DriverCode = ExcelHelper.GetValue(worksheet, row, col);
                                    col++;
                                    if (string.IsNullOrEmpty(DriverCode))
                                    {
                                    }
                                    else
                                    {
                                        driver = listDriver.FirstOrDefault(c => c.Code == DriverCode);
                                        if (driver != null)
                                        {
                                            obj.DriverCode5 = driver.Code;
                                            obj.DriverID5 = driver.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Mã phụ xe 4 [" + DriverCode + "] không tồn tại");
                                        }
                                    }

                                    #endregion

                                    #region Khách hàng
                                    col++;
                                    col++; var CustomerCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common customer = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(CustomerCode))
                                    {
                                        lstError.Add("[Mã khách hàng] không được trống");
                                    }
                                    else
                                    {
                                        customer = lstCustomer.FirstOrDefault(c => c.Code == CustomerCode);
                                        if (customer != null)
                                        {
                                            obj.CustomerCode = customer.Code;
                                            obj.CustomerID = customer.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Khách hàng [" + CustomerCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Kênh
                                    col++; var TypeOfLocationCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common type = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(TypeOfLocationCode))
                                    {
                                        lstError.Add("[Kênh] không được trống");
                                    }
                                    else
                                    {
                                        type = lstGroupOfLocation.FirstOrDefault(c => c.Code == TypeOfLocationCode);
                                        if (type != null)
                                        {
                                            obj.TypeOfLocationName = type.Name;
                                            obj.TypeOfLocationID = type.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Kênh [" + TypeOfLocationCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Container
                                    col++; var PHTPackingCode = ExcelHelper.GetValue(worksheet, row, col);
                                    DTOFLMMasterPHT_Import_Common packing = new DTOFLMMasterPHT_Import_Common();
                                    if (string.IsNullOrEmpty(PHTPackingCode))
                                    {
                                    }
                                    else
                                    {
                                        packing = lstCon.FirstOrDefault(c => c.Code == PHTPackingCode);
                                        if (packing != null)
                                        {
                                            obj.PHTPackingCode = packing.Name;
                                            obj.PHTPackingID = packing.ID;
                                        }
                                        else
                                        {
                                            lstError.Add("Packing [" + PHTPackingCode + "] không tồn tại");
                                        }
                                    }
                                    #endregion

                                    #region Kết hợp
                                    col++;
                                    var ExTotalJoin = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalJoin))
                                    {
                                        obj.ExTotalJoin = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ExTotalJoin = Convert.ToDouble(ExTotalJoin);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kết hợp [" + ExTotalJoin + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Đi tỉnh
                                    col++;
                                    var ExTotalDayOut = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalDayOut))
                                    {
                                        obj.ExTotalDayOut = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.ExTotalDayOut = Convert.ToDouble(ExTotalDayOut);
                                        }
                                        catch
                                        {
                                            lstError.Add("Đi tỉnh [" + ExTotalDayOut + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Tính bốc xếp
                                    col++;
                                    var PHTLoading = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(PHTLoading))
                                    {
                                        obj.PHTLoading = false;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "y")
                                    {
                                        obj.PHTLoading = true;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "x")
                                    {
                                        obj.PHTLoading = true;
                                    }
                                    else if (PHTLoading.ToLower().Trim() == "n")
                                    {
                                        obj.PHTLoading = false;
                                    }
                                    #endregion

                                    #region Quá tải
                                    col++;
                                    var ExIsOverWeight = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExTotalJoin))
                                    {
                                        obj.ExIsOverWeight = false;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "y")
                                    {
                                        obj.ExIsOverWeight = true;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "x")
                                    {
                                        obj.ExIsOverWeight = true;
                                    }
                                    else if (ExIsOverWeight.ToLower().Trim() == "n")
                                    {
                                        obj.ExIsOverWeight = false;
                                    }
                                    #endregion

                                    #region Ôm hàng
                                    col++;
                                    var ExIsOverNight = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(ExIsOverNight))
                                    {
                                        obj.ExIsOverNight = false;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "y")
                                    {
                                        obj.ExIsOverNight = true;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "x")
                                    {
                                        obj.ExIsOverNight = true;
                                    }
                                    else if (ExIsOverNight.ToLower().Trim() == "n")
                                    {
                                        obj.ExIsOverNight = false;
                                    }
                                    #endregion

                                    #region KM
                                    col++;
                                    var KMStart = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(KMStart))
                                    {
                                        obj.KMStart = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.KMStart = Convert.ToDouble(KMStart);
                                        }
                                        catch
                                        {
                                            lstError.Add("KMStart [" + KMStart + "] không chính xác");
                                        }
                                    }

                                    col++;
                                    var KMEnd = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(KMEnd))
                                    {
                                        obj.KMEnd = 0;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            obj.KMEnd = Convert.ToDouble(KMEnd);
                                        }
                                        catch
                                        {
                                            lstError.Add("KMEnd [" + KMEnd + "] không chính xác");
                                        }
                                    }
                                    #endregion

                                    #region Station

                                    string StationCode, StationPrice;
                                    obj.ListStation = new List<DTOFLMMasterPHT_Export_Station>();
                                    for (int i = 0; i < maxStation; i++)
                                    {
                                        col++; StationCode = ExcelHelper.GetValue(worksheet, row, col);
                                        col++; StationPrice = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(StationCode))
                                        {
                                            var station = lstStation.FirstOrDefault(c => c.Code == StationCode);
                                            DTOFLMMasterPHT_Export_Station stationImport = new DTOFLMMasterPHT_Export_Station();
                                            if (station != null)
                                            {
                                                if (string.IsNullOrEmpty(StationPrice))
                                                    lstError.Add("[Tiền] Trạm [" + StationCode + "] không được trống");
                                                else
                                                {
                                                    stationImport.LocationCode = station.Code;
                                                    stationImport.LocationID = station.ID;
                                                    try
                                                    {
                                                        stationImport.Price = Convert.ToDecimal(StationPrice);
                                                        obj.ListStation.Add(stationImport);
                                                    }
                                                    catch
                                                    {
                                                        lstError.Add("Tiền [" + StationPrice + "] Trạm [" + StationCode + "] không đúng định dạng");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                lstError.Add("Mã trạm [" + StationCode + "] không tồn tại trong hệ thống");
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Trouble
                                    string TroubleName, TroubleCode, TroublePrice, TroubleNote;
                                    obj.ListTrouble = new List<DTOFLMMasterPHT_Export_Trouble>();
                                    for (int i = 0; i < maxTrouble; i++)
                                    {
                                        TroubleName = lstTrouble[i].Name;
                                        TroubleCode = lstTrouble[i].Code;
                                        col++; TroubleNote = ExcelHelper.GetValue(worksheet, row, col);
                                        col++; TroublePrice = ExcelHelper.GetValue(worksheet, row, col);
                                        if (!string.IsNullOrEmpty(TroublePrice))
                                        {
                                            var trouble = lstTrouble.FirstOrDefault(c => c.Code == TroubleCode);
                                            DTOFLMMasterPHT_Export_Trouble troubleImport = new DTOFLMMasterPHT_Export_Trouble();
                                            if (trouble != null)
                                            {

                                                troubleImport.Note = TroubleNote;
                                                troubleImport.GroupOfTrobleID = trouble.ID;
                                                troubleImport.GroupOfTroubleCode = trouble.Code;
                                                troubleImport.GroupOfTroubleName = trouble.Name;

                                                try
                                                {
                                                    troubleImport.Price = Convert.ToDecimal(TroublePrice);
                                                    obj.ListTrouble.Add(troubleImport);
                                                }
                                                catch
                                                {
                                                    lstError.Add("Tiền [" + TroublePrice + "] chi phí [" + TroubleCode + "] không đúng định dạng");
                                                }
                                            }
                                            else
                                            {
                                                lstError.Add("Chi phí [" + TroubleCode + "] không tồn tại trong hệ thống");
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Note
                                    string Input;
                                    col++; Input = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.Note = Input;
                                    #endregion

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                    {
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError);
                                    }
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMPHTCO_Excel_Import(dynamic dynParam)
        {
            try
            {
                List<DTOFLMMasterPHT_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMMasterPHT_Import>>(dynParam.lst.ToString());

                ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                {
                    sv.FLMPHTCOMaster_Import(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLM setting

        [HttpPost]
        public DTOFLMContract_Data FLMContract_Data(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                DTOFLMContract_Data result = new DTOFLMContract_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Data(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMContract_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();

                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATContract FLMContract_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                var result = default(DTOCATContract);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMContract_Save(dynamic dynParam)
        {
            try
            {
                DTOCATContract item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContract>(dynParam.item.ToString());
                int result = 0;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public DTOResult FLMContract_DriverFee_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractID = (int)dynParam.contractID;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATDriverFee FLMContract_DriverFee_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOCATDriverFee);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int FLMContract_DriverFee_Save(dynamic dynParam)
        {
            try
            {
                DTOCATDriverFee item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATDriverFee>(dynParam.item.ToString());
                int contractID = (int)dynParam.contractID;
                int result = 0;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Save(item, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #region group location
        [HttpPost]
        public DTOResult FLMContract_DriverFee_GroupLocation_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_GroupLocation_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_GroupLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_GroupLocation_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_GroupLocation_SaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_GroupLocation_SaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_GroupLocation_GroupNotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_GroupLocation_GroupNotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  location
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Location_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Location_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Location_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Location_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCATDriverFeeLocation FLMContract_DriverFee_Location_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOCATDriverFeeLocation result = new DTOCATDriverFeeLocation();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Location_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Location_Save(dynamic dynParam)
        {
            try
            {
                DTOCATDriverFeeLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATDriverFeeLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Location_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Location_LocationNotInSaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Location_LocationNotInSaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Location_LocationNotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Location_LocationNotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  route
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Route_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Route_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Route_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Route_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Route_SaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Route_SaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Route_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Route_RouteNotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  parnet route
        [HttpPost]
        public DTOResult FLMContract_DriverFee_ParentRoute_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_ParentRoute_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_ParentRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_ParentRoute_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_ParentRoute_SaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_ParentRoute_SaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_ParentRoute_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_ParentRoute_RouteNotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region customer
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Customer_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Customer_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Customer_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Customer_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_Customer_SaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_Customer_SaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_Customer_GroupNotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_Customer_GroupNotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  gop
        [HttpPost]
        public DTOResult FLMContract_DriverFee_GroupProduct_List(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_GroupProduct_List(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_GroupProduct_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_GroupProduct_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCATDriverFeeGroupProduct FLMContract_DriverFee_GroupProduct_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOCATDriverFeeGroupProduct result = new DTOCATDriverFeeGroupProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_GroupProduct_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_GroupProduct_Save(dynamic dynParam)
        {
            try
            {
                DTOCATDriverFeeGroupProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATDriverFeeGroupProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_GroupProduct_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_DriverFee_GroupProduct_NotInSaveList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_DriverFee_GroupProduct_NotInSaveList(lst, driverFeeID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_DriverFee_GroupProduct_NotInList(dynamic dynParam)
        {
            try
            {
                int driverFeeID = (int)dynParam.driverFeeID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_DriverFee_GroupProduct_NotInList(request, driverFeeID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #endregion

        #region khấu hao cua xe(new)
        public List<DTOFLMFixedCost> FLMFixedCost_ByAssetList(dynamic dynParam)
        {
            try
            {
                int assetID = (int)dynParam.assetID;
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMFixedCost_ByAssetList(assetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<DTOFLMFixedCost> FLMFixedCost_Generate(dynamic dynParam)
        {
            try
            {
                int assetID = (int)dynParam.assetID;
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMFixedCost_Generate(assetID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMFixedCost_Save(dynamic dynParam)
        {
            try
            {
                List<DTOFLMFixedCost> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMFixedCost>>(dynParam.lst.ToString());
                int assetID = (int)dynParam.assetID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMFixedCost_Save(lst, assetID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        #endregion

        #region tính khấu hao
        public DTOResult FLMFixedCost_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int month = (int)dynParam.month;
                int year = (int)dynParam.year;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMFixedCost_List(request, month, year);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMFixedCost_SaveList(dynamic dynParam)
        {
            try
            {
                int month = (int)dynParam.month;
                int year = (int)dynParam.year;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMFixedCost_SaveList(lst, month, year);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMFixedCost_DeleteList(dynamic dynParam)
        {
            try
            {
                int month = (int)dynParam.month;
                int year = (int)dynParam.year;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMFixedCost_DeleteList(lst, month, year);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<DTOFLMFixedCost> FLMFixedCost_ReceiptList(dynamic dynParam)
        {
            try
            {
                int month = (int)dynParam.month;
                int year = (int)dynParam.year;
                int assetID = (int)dynParam.assetID;
                List<DTOFLMFixedCost> result = new List<DTOFLMFixedCost>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMFixedCost_ReceiptList(assetID, month, year);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region Bảng lương tài xế
        [HttpPost]
        public List<DTOCATDriverFee_Import> FLMDriverFee_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOCATDriverFee_Import> result = new List<DTOCATDriverFee_Import>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOCATDriverFee_Import_Data data = new DTOCATDriverFee_Import_Data();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        data = sv.FLMDriverFee_Import_Data();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            #region Lấy danh sách loại phí, loại con
                            int col = 8, row = 3;
                            col++; string ScheduleFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string OverWeightFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string TotalJoinFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string TonLoadingFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string CBMLoadingFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string TonLoadingFeeNoMainCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string CBMLoadingFeeNoMainCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string TotalDayOutFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string TotalDayOutMoreFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string OverNightFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string OtherExFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            row = 2; col++; string ConFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            row = 3; string Con20FeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string Con40FeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string ConFeeDoubleCode = ExcelHelper.GetValue(worksheet, row, col);
                            row = 2; col++; string ConExFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            row = 3; string Con20ExFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string Con40ExFeeCode = ExcelHelper.GetValue(worksheet, row, col);
                            col++; string ConExFeeDoubleCode = ExcelHelper.GetValue(worksheet, row, col);

                            int ScheduleFeeID, OverWeightFeeID, TotalJoinFeeID, TonLoadingFeeID, TonLoadingFeeNoMainID, CBMLoadingFeeID, CBMLoadingFeeNoMainID, TotalDayOutFeeID,
                                TotalDayOutMoreFeeID, OverNightFeeID, OtherExFeeID, ConFeeID, Con20FeeID, Con40FeeID, ConFeeDoubleID, ConExFeeID,
                                Con20ExFeeID, Con40ExFeeID, ConExFeeDoubleID;

                            ScheduleFeeID = OverWeightFeeID = TotalJoinFeeID = TonLoadingFeeID = CBMLoadingFeeID = TonLoadingFeeNoMainID = CBMLoadingFeeNoMainID = TotalDayOutFeeID =
                                TotalDayOutMoreFeeID = OverNightFeeID = OtherExFeeID = ConFeeID = Con20FeeID = Con40FeeID = ConFeeDoubleID = ConExFeeID =
                                Con20ExFeeID = Con40ExFeeID = ConExFeeDoubleID = 0;

                            if (!string.IsNullOrEmpty(ScheduleFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == ScheduleFeeCode);
                                if (checkFee != null)
                                    ScheduleFeeID = checkFee.ID;
                                else
                                    ScheduleFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(OverWeightFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == OverWeightFeeCode);
                                if (checkFee != null)
                                    OverWeightFeeID = checkFee.ID;
                                else
                                    OverWeightFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(TotalJoinFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == TotalJoinFeeCode);
                                if (checkFee != null)
                                    TotalJoinFeeID = checkFee.ID;
                                else
                                    TotalJoinFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(TonLoadingFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == TonLoadingFeeCode);
                                if (checkFee != null)
                                    TonLoadingFeeID = checkFee.ID;
                                else
                                    TonLoadingFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(CBMLoadingFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == CBMLoadingFeeCode);
                                if (checkFee != null)
                                    CBMLoadingFeeID = checkFee.ID;
                                else
                                    CBMLoadingFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(TonLoadingFeeNoMainCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == TonLoadingFeeNoMainCode);
                                if (checkFee != null)
                                    TonLoadingFeeNoMainID = checkFee.ID;
                                else
                                    TonLoadingFeeNoMainID = -1;
                            }

                            if (!string.IsNullOrEmpty(CBMLoadingFeeNoMainCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == CBMLoadingFeeNoMainCode);
                                if (checkFee != null)
                                    CBMLoadingFeeNoMainID = checkFee.ID;
                                else
                                    CBMLoadingFeeNoMainID = -1;
                            }

                            if (!string.IsNullOrEmpty(TotalDayOutFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == TotalDayOutFeeCode);
                                if (checkFee != null)
                                    TotalDayOutFeeID = checkFee.ID;
                                else
                                    TotalDayOutFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(TotalDayOutMoreFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == TotalDayOutMoreFeeCode);
                                if (checkFee != null)
                                    TotalDayOutMoreFeeID = checkFee.ID;
                                else
                                    TotalDayOutMoreFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(OverNightFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == OverNightFeeCode);
                                if (checkFee != null)
                                    OverNightFeeID = checkFee.ID;
                                else
                                    OverNightFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(OtherExFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == OtherExFeeCode);
                                if (checkFee != null)
                                    OtherExFeeID = checkFee.ID;
                                else
                                    OtherExFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(ConFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == ConFeeCode);
                                if (checkFee != null)
                                    ConFeeID = checkFee.ID;
                                else
                                    ConFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(ConExFeeCode))
                            {
                                var checkFee = data.lstTypeOfDriverFee.FirstOrDefault(c => c.Code == ConExFeeCode);
                                if (checkFee != null)
                                    ConExFeeID = checkFee.ID;
                                else
                                    ConExFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(Con20FeeCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == Con20FeeCode);
                                if (checkFee != null)
                                    Con20FeeID = checkFee.ID;
                                else
                                    Con20FeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(Con40FeeCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == Con40FeeCode);
                                if (checkFee != null)
                                    Con40FeeID = checkFee.ID;
                                else
                                    Con40FeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(ConFeeDoubleCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == ConFeeDoubleCode);
                                if (checkFee != null)
                                    ConFeeDoubleID = checkFee.ID;
                                else
                                    ConFeeDoubleID = -1;
                            }

                            if (!string.IsNullOrEmpty(Con20ExFeeCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == Con20ExFeeCode);
                                if (checkFee != null)
                                    Con20ExFeeID = checkFee.ID;
                                else
                                    Con20ExFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(Con40ExFeeCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == Con40ExFeeCode);
                                if (checkFee != null)
                                    Con40ExFeeID = checkFee.ID;
                                else
                                    Con40ExFeeID = -1;
                            }

                            if (!string.IsNullOrEmpty(ConExFeeDoubleCode))
                            {
                                var checkFee = data.lstContainer.FirstOrDefault(c => c.Code == ConExFeeDoubleCode);
                                if (checkFee != null)
                                    ConExFeeDoubleID = checkFee.ID;
                                else
                                    ConExFeeDoubleID = -1;
                            }
                            #endregion

                            if (worksheet != null)
                            {
                                row = 4;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOCATDriverFee_Import obj = new DTOCATDriverFee_Import();
                                    obj.ExcelRow = row;
                                    col = 2;

                                    #region Các loại phí
                                    obj.ScheduleFeeID = ScheduleFeeID;
                                    obj.OverWeightFeeID = OverWeightFeeID;
                                    obj.TotalJoinFeeID = TotalJoinFeeID;
                                    obj.TonLoadingFeeID = TonLoadingFeeID;
                                    obj.CBMLoadingFeeID = CBMLoadingFeeID;
                                    obj.TotalDayOutFeeID = TotalDayOutFeeID;
                                    obj.TotalDayOutMoreFeeID = TotalDayOutMoreFeeID;
                                    obj.OverNightFeeID = OverNightFeeID;
                                    obj.OtherExFeeID = OtherExFeeID;
                                    obj.ConFeeID = ConFeeID;
                                    obj.ConExFeeID = ConExFeeID;
                                    obj.Con20FeeID = Con20FeeID;
                                    obj.Con40FeeID = Con40FeeID;
                                    obj.Con20ExFeeID = Con20ExFeeID;
                                    obj.Con40ExFeeID = Con40ExFeeID;
                                    obj.ConFeeDoubleID = ConFeeDoubleID;
                                    obj.ConExFeeDoubleID = ConExFeeDoubleID;

                                    obj.Con20FeeCode = Con20FeeCode;
                                    obj.Con40FeeCode = Con40FeeCode;
                                    obj.ConFeeDoubleCode = ConFeeDoubleCode;
                                    obj.Con20ExFeeCode = Con20ExFeeCode;
                                    obj.Con40ExFeeCode = Con40ExFeeCode;
                                    obj.ConExFeeDoubleCode = ConExFeeDoubleCode;

                                    if (obj.ScheduleFeeID == -1)
                                        lstError.Add("Mã Lương chuyến [" + ScheduleFeeCode + "] không tồn tại");
                                    if (obj.OverWeightFeeID == -1)
                                        lstError.Add("Mã Quá tải [" + OverWeightFeeCode + "] không tồn tại");
                                    if (obj.TotalJoinFeeID == -1)
                                        lstError.Add("Mã Kết hợp [" + TotalJoinFeeCode + "] không tồn tại");
                                    if (obj.TonLoadingFeeID == -1)
                                        lstError.Add("Mã Bốc xếp tấn [" + TonLoadingFeeCode + "] không tồn tại");
                                    if (obj.CBMLoadingFeeID == -1)
                                        lstError.Add("Mã Bốc xếp khối [" + CBMLoadingFeeCode + "] không tồn tại");
                                    if (obj.TotalDayOutFeeID == -1)
                                        lstError.Add("Mã Đi tỉnh 1 ngày [" + TotalDayOutFeeCode + "] không tồn tại");
                                    if (obj.TotalDayOutMoreFeeID == -1)
                                        lstError.Add("Mã Đi tỉnh > 1 ngày [" + TotalDayOutMoreFeeCode + "] không tồn tại");
                                    if (obj.OverNightFeeID == -1)
                                        lstError.Add("Mã Ôm hàng [" + OverNightFeeCode + "] không tồn tại");
                                    if (obj.OtherExFeeID == -1)
                                        lstError.Add("Mã Không phụ [" + OtherExFeeCode + "] không tồn tại");
                                    if (obj.ConFeeID == -1)
                                        lstError.Add("Mã container [" + ConFeeCode + "] không tồn tại");
                                    if (obj.ConExFeeID == -1)
                                        lstError.Add("Mã container [" + ConExFeeCode + "] không tồn tại");
                                    if (obj.Con20FeeID == -1)
                                        lstError.Add("Mã container [" + Con20FeeCode + "] không tồn tại");
                                    if (obj.Con40FeeID == -1)
                                        lstError.Add("Mã container [" + Con40FeeCode + "] không tồn tại");
                                    if (obj.Con20ExFeeID == -1)
                                        lstError.Add("Mã container [" + Con20ExFeeCode + "] không tồn tại");
                                    if (obj.Con40ExFeeID == -1)
                                        lstError.Add("Mã container [" + Con40ExFeeCode + "] không tồn tại");
                                    if (obj.ConFeeDoubleID == -1)
                                        lstError.Add("Mã container [" + ConFeeDoubleCode + "] không tồn tại");
                                    if (obj.ConExFeeDoubleID == -1)
                                        lstError.Add("Mã container [" + ConExFeeDoubleCode + "] không tồn tại");
                                    #endregion

                                    #region Mã loại tài xế
                                    obj.TypeOfDriverCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.TypeOfDriverName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.TypeOfDriverCode))
                                        lstError.Add("[Mã loại tài xế] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstTypeOfDriver.FirstOrDefault(c => c.Code == obj.TypeOfDriverCode);
                                        if (checkCode != null)
                                        {
                                            obj.TypeOfDriverID = checkCode.ID;
                                            obj.TypeOfDriverName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã loại tài xế] không tồn tại");
                                    }
                                    #endregion

                                    #region Mã khách hàng
                                    col++;
                                    obj.CustomerCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.CustomerName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.CustomerCode))
                                        lstError.Add("[Mã khách hàng] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstCustomer.FirstOrDefault(c => c.Code == obj.CustomerCode);
                                        if (checkCode != null)
                                        {
                                            obj.CustomerID = checkCode.ID;
                                            obj.CustomerName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã khách hàng] không tồn tại");
                                    }
                                    #endregion

                                    #region Mã loại điểm
                                    col++;
                                    obj.GroupOfLocationCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.GroupOfLocationName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.GroupOfLocationCode))
                                        lstError.Add("[Mã loại điểm] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstGroupOfLocation.FirstOrDefault(c => c.Code == obj.GroupOfLocationCode);
                                        if (checkCode != null)
                                        {
                                            obj.GroupOfLocationID = checkCode.ID;
                                            obj.GroupOfLocationName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã loại điểm] không tồn tại");
                                    }
                                    #endregion

                                    #region Chuyến
                                    col++;
                                    string sort = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(sort))
                                            obj.Sort = Convert.ToInt32(sort);

                                        if (obj.Sort <= 0)
                                            lstError.Add("[Chuyến] phải lớn hơn 0");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Chuyến] phải là số");
                                    }
                                    #endregion

                                    #region Lương chuyến
                                    col++;
                                    string ScheduleFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ScheduleFee))
                                            obj.ScheduleFee = Convert.ToDecimal(ScheduleFee);
                                        if (obj.ScheduleFee < 0)
                                            lstError.Add("[Lương chuyến] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương chuyến] phải là số");
                                    }
                                    #endregion

                                    #region Quá tải
                                    col++;
                                    string OverWeightFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(OverWeightFee))
                                            obj.OverWeightFee = Convert.ToDecimal(OverWeightFee);
                                        if (obj.OverWeightFee < 0)
                                            lstError.Add("[Quá tải] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Quá tải] phải là số");
                                    }
                                    #endregion

                                    #region Kết hợp
                                    col++;
                                    string TotalJoinFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TotalJoinFee))
                                            obj.TotalJoinFee = Convert.ToDecimal(TotalJoinFee);
                                        if (obj.TotalJoinFee < 0)
                                            lstError.Add("[Kết hợp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Kết hợp] phải là số");
                                    }
                                    #endregion

                                    #region Bốc xếp tấn
                                    col++;
                                    string TonLoadingFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TonLoadingFee))
                                            obj.TonLoadingFee = Convert.ToDecimal(TonLoadingFee);
                                        if (obj.TonLoadingFee < 0)
                                            lstError.Add("[Bốc xếp tấn] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp tấn] phải là số");
                                    }
                                    #endregion

                                    #region Bốc xếp khối
                                    col++;
                                    string CBMLoadingFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(CBMLoadingFee))
                                            obj.CBMLoadingFee = Convert.ToDecimal(CBMLoadingFee);
                                        if (obj.CBMLoadingFee < 0)
                                            lstError.Add("[Bốc xếp khối] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp khối] phải là số");
                                    }
                                    #endregion

                                    #region Bốc xếp tấn ko tài xế
                                    col++;
                                    string TonLoadingFeeNoMain = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TonLoadingFeeNoMain))
                                            obj.TonLoadingFeeNoMain = Convert.ToDecimal(TonLoadingFeeNoMain);
                                        if (obj.TonLoadingFeeNoMain < 0)
                                            lstError.Add("[Bốc xếp tấn ko tài xế] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp tấn ko tài xế] phải là số");
                                    }
                                    #endregion

                                    #region Bốc xếp khối ko tài xế
                                    col++;
                                    string CBMLoadingFeeNoMain = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(CBMLoadingFeeNoMain))
                                            obj.CBMLoadingFeeNoMain = Convert.ToDecimal(CBMLoadingFeeNoMain);
                                        if (obj.CBMLoadingFeeNoMain < 0)
                                            lstError.Add("[Bốc xếp khối ko tài xế] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp khối ko tài xế] phải là số");
                                    }
                                    #endregion

                                    #region Đi tỉnh 1 ngày
                                    col++;
                                    string TotalDayOutFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TotalDayOutFee))
                                            obj.TotalDayOutFee = Convert.ToDecimal(TotalDayOutFee);
                                        if (obj.TotalDayOutFee < 0)
                                            lstError.Add("[Đi tỉnh 1 ngày] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Đi tỉnh 1 ngày] phải là số");
                                    }
                                    #endregion

                                    #region Đi tỉnh > 1 ngày
                                    col++;
                                    string TotalDayOutMoreFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TotalDayOutMoreFee))
                                            obj.TotalDayOutMoreFee = Convert.ToDecimal(TotalDayOutMoreFee);
                                        if (obj.TotalDayOutMoreFee < 0)
                                            lstError.Add("[Đi tỉnh > 1 ngày] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Đi tỉnh > 1 ngày] phải là số");
                                    }
                                    #endregion

                                    #region Ôm hàng
                                    col++;
                                    string OverNightFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(OverNightFee))
                                            obj.OverNightFee = Convert.ToDecimal(OverNightFee);
                                        if (obj.OverNightFee < 0)
                                            lstError.Add("[Ôm hàng] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Ôm hàng] phải là số");
                                    }
                                    #endregion

                                    #region Không phụ
                                    col++;
                                    string OtherExFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(OtherExFee))
                                            obj.OtherExFee = Convert.ToDecimal(OtherExFee);
                                        if (obj.OtherExFee < 0)
                                            lstError.Add("[Không phụ] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Không phụ] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - 20
                                    col++;
                                    string Con20Fee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con20Fee))
                                            obj.Con20Fee = Convert.ToDecimal(Con20Fee);
                                        if (obj.Con20Fee < 0)
                                            lstError.Add("[Lương SP - 20] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - 20] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - 40
                                    col++;
                                    string Con40Fee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con40Fee))
                                            obj.Con40Fee = Convert.ToDecimal(Con40Fee);
                                        if (obj.Con40Fee < 0)
                                            lstError.Add("[Lương SP - 40] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - 40] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - Kẹp
                                    col++;
                                    string ConFeeDouble = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ConFeeDouble))
                                            obj.ConFeeDouble = Convert.ToDecimal(ConFeeDouble);
                                        if (obj.ConFeeDouble < 0)
                                            lstError.Add("[Lương SP - Kẹp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - Kẹp] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - 20
                                    col++;
                                    string Con20ExFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con20ExFee))
                                            obj.Con20ExFee = Convert.ToDecimal(Con20ExFee);
                                        if (obj.Con20ExFee < 0)
                                            lstError.Add("[Phụ thu - 20] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - 20] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - 40
                                    col++;
                                    string Con40ExFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con40ExFee))
                                            obj.Con40ExFee = Convert.ToDecimal(Con40ExFee);
                                        if (obj.Con40ExFee < 0)
                                            lstError.Add("[Phụ thu - 40] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - 40] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - Kẹp
                                    col++;
                                    string ConExFeeDouble = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ConExFeeDouble))
                                            obj.ConExFeeDouble = Convert.ToDecimal(ConExFeeDouble);
                                        if (obj.ConExFeeDouble < 0)
                                            lstError.Add("[Phụ thu - Kẹp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - Kẹp] phải là số");
                                    }
                                    #endregion

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError.Distinct().ToList());
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriverFee_Import(dynamic dynParam)
        {
            try
            {
                List<DTOCATDriverFee_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATDriverFee_Import>>(dynParam.lst.ToString());
                int contractID = Convert.ToInt32(dynParam.contractID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriverFee_Import(contractID, lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMDriverFee_Export(dynamic dynParam)
        {
            try
            {
                int contractID = Convert.ToInt32(dynParam.contractID.ToString());
                var data = new DTOCATDriverFee_Export_Data();
                var dataImport = new DTOCATDriverFee_Import_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMDriverFee_Export(contractID);
                    dataImport = sv.FLMDriverFee_Import_Data();
                });

                var newfile = "/" + FolderUpload.Export + "BangGiaTaiXe" + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(newfile)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(newfile));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(newfile));

                using (var package = new ExcelPackage(exportfile))
                {
                    int col = 1; int row = 1; int stt = 1;

                    #region Lương tài xế
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Lương tài xế");

                    worksheet.Cells[row, col].Value = "Bảng giá tài xế";
                    worksheet.Cells[row, col].Style.Font.Bold = true;
                    worksheet.Cells[row, col].Style.Font.Size = 14;
                    row = 2;
                    col = 1; worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 10;
                    col++; worksheet.Cells[row, col].Value = "Mã loại tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã k.hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Loại"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Chuyến"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Lương chuyến"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Quá tải"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Kết hợp"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Bốc xếp tấn"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Bốc xếp khối"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Bốc xếp tấn ko tài xế"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Bốc xếp khối ko tài xế"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Đi tỉnh 1 ngày"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Đi tỉnh > 1 ngày"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Ôm hàng"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Không phụ"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[1, col].Value = "Lương SP"; worksheet.Column(col).Width = 13;
                    col = col + 3; worksheet.Cells[1, col].Value = "Phụ cấp"; worksheet.Column(col).Width = 13;

                    // Merge
                    for (col = 1; col <= 8; col++)
                        worksheet.Cells[row, col, row + 1, col].Merge = true;

                    // Lương sản phẩm
                    row = 2;
                    col = 20;
                    var itemColProduct = data.lstTypeOfDriverFee.FirstOrDefault(c => c.ExcelColumn == col);
                    if (itemColProduct != null)
                        worksheet.Cells[row, col].Value = itemColProduct.ExcelColumnCode;

                    // Phụ cấp
                    col++;
                    var itemColEx = data.lstTypeOfDriverFee.FirstOrDefault(c => c.ExcelColumn == col);
                    if (itemColEx != null)
                        worksheet.Cells[row, col].Value = itemColEx.ExcelColumnCode;

                    // Các loại lương khác
                    row = 3;
                    col = 9;
                    for (col = 9; col <= 19; col++)
                    {
                        var itemCol = data.lstTypeOfDriverFee.FirstOrDefault(c => c.ExcelColumn == col);
                        if (itemCol != null)
                            worksheet.Cells[row, col].Value = itemCol.ExcelColumnCode;
                    }

                    // Container
                    worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "40DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "40DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;

                    stt = 1;
                    col = 1;
                    row = 4;
                    foreach (var item in data.lstData)
                    {
                        col = 1;
                        worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = item.TypeOfDriverCode;
                        col++; worksheet.Cells[row, col].Value = item.TypeOfDriverName;
                        col++; worksheet.Cells[row, col].Value = item.CustomerCode;
                        col++; worksheet.Cells[row, col].Value = item.CustomerName;
                        col++; worksheet.Cells[row, col].Value = item.GroupOfLocationCode;
                        col++; worksheet.Cells[row, col].Value = item.GroupOfLocationName;
                        col++; worksheet.Cells[row, col].Value = item.Sort;

                        for (col = 9; col <= 25; col++)
                        {
                            worksheet.Cells[row, col].Value = 0;
                            var value = item.lstValue.FirstOrDefault(c => c.ExcelColumn == col);
                            if (value != null)
                                worksheet.Cells[row, col].Value = value.ExcelValue;
                        }
                        row++;
                        stt++;
                    }

                    foreach (var cus in dataImport.lstCustomer)
                    {
                        var hasCus = false;
                        foreach (var item in data.lstData)
                        {
                            if (item.CustomerID == cus.ID)
                            {
                                hasCus = true;
                            }
                        }
                        if (!hasCus)
                        {
                            var gol = dataImport.lstGroupOfLocation.FirstOrDefault();
                            var type = dataImport.lstTypeOfDriver.FirstOrDefault();
                            if (gol != null && type != null)
                            {
                                var i = 1;

                                col = 1; worksheet.Cells[row, col].Value = stt;
                                col++; worksheet.Cells[row, col].Value = type.Code;
                                col++; worksheet.Cells[row, col].Value = type.Name;
                                col++; worksheet.Cells[row, col].Value = cus.Code;
                                col++; worksheet.Cells[row, col].Value = cus.Name;
                                col++; worksheet.Cells[row, col].Value = gol.Code;
                                col++; worksheet.Cells[row, col].Value = gol.Name;
                                col++; worksheet.Cells[row, col].Value = i;

                                for (col = 9; col <= 25; col++)
                                {
                                    worksheet.Cells[row, col].Value = 0;
                                }
                                row++;
                                stt++;
                            }
                        }
                    }
                    #endregion

                    #region Loại tài xế
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Loại tài xế");
                    row = 1; stt = 1;
                    col = 1; worksheet1.Cells[row, col].Value = "STT"; worksheet1.Column(col).Width = 10;
                    col++; worksheet1.Cells[row, col].Value = "Mã loại tài xế"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Loại tài xế"; worksheet1.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstTypeOfDriver)
                    {
                        col = 1; worksheet1.Cells[row, col].Value = stt;
                        col++; worksheet1.Cells[row, col].Value = item.Code;
                        col++; worksheet1.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Khách hàng
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Khách hàng");
                    row = 1; stt = 1;
                    col = 1; worksheet2.Cells[row, col].Value = "STT"; worksheet2.Column(col).Width = 10;
                    col++; worksheet2.Cells[row, col].Value = "Mã khách hàng"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Khách hàng"; worksheet2.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstCustomer)
                    {
                        col = 1; worksheet2.Cells[row, col].Value = stt;
                        col++; worksheet2.Cells[row, col].Value = item.Code;
                        col++; worksheet2.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại điểm
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets.Add("Loại điểm");
                    row = 1; stt = 1;
                    col = 1; worksheet3.Cells[row, col].Value = "STT"; worksheet3.Column(col).Width = 10;
                    col++; worksheet3.Cells[row, col].Value = "Mã loại điểm"; worksheet3.Column(col).Width = 20;
                    col++; worksheet3.Cells[row, col].Value = "Loại điểm"; worksheet3.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstGroupOfLocation)
                    {
                        col = 1; worksheet3.Cells[row, col].Value = stt;
                        col++; worksheet3.Cells[row, col].Value = item.Code;
                        col++; worksheet3.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại lương
                    ExcelWorksheet worksheet4 = package.Workbook.Worksheets.Add("Loại lương");
                    row = 1; stt = 1;
                    col = 1; worksheet4.Cells[row, col].Value = "STT"; worksheet4.Column(col).Width = 10;
                    col++; worksheet4.Cells[row, col].Value = "Mã loại lương"; worksheet4.Column(col).Width = 20;
                    col++; worksheet4.Cells[row, col].Value = "Loại lương"; worksheet4.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstTypeOfDriverFee)
                    {
                        col = 1; worksheet4.Cells[row, col].Value = stt;
                        col++; worksheet4.Cells[row, col].Value = item.Code;
                        col++; worksheet4.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại container
                    ExcelWorksheet worksheet5 = package.Workbook.Worksheets.Add("Loại container");
                    row = 1; stt = 1;
                    col = 1; worksheet5.Cells[row, col].Value = "STT"; worksheet5.Column(col).Width = 10;
                    col++; worksheet5.Cells[row, col].Value = "Mã loại container"; worksheet5.Column(col).Width = 20;
                    col++; worksheet5.Cells[row, col].Value = "Loại container"; worksheet5.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstContainer)
                    {
                        col = 1; worksheet5.Cells[row, col].Value = stt;
                        col++; worksheet5.Cells[row, col].Value = item.Code;
                        col++; worksheet5.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOCATDriverFeeTemp_Import> FLMDriverFeeTemp_Excel_Check(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                List<DTOCATDriverFeeTemp_Import> result = new List<DTOCATDriverFeeTemp_Import>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOCATDriverFee_Import_Data data = new DTOCATDriverFee_Import_Data();

                    ServiceFactory.SVFleetManage((IServices.ISVFleetManage sv) =>
                    {
                        data = sv.FLMDriverFee_Import_Data();
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            if (worksheet != null)
                            {
                                int row = 4;
                                int col = 1;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOCATDriverFeeTemp_Import obj = new DTOCATDriverFeeTemp_Import();
                                    obj.ExcelRow = row;
                                    col = 2;

                                    #region Mã loại tài xế
                                    obj.TypeOfDriverCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.TypeOfDriverName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.TypeOfDriverCode))
                                        lstError.Add("[Mã loại tài xế] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstTypeOfDriver.FirstOrDefault(c => c.Code == obj.TypeOfDriverCode);
                                        if (checkCode != null)
                                        {
                                            obj.TypeOfDriverID = checkCode.ID;
                                            obj.TypeOfDriverName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã loại tài xế] không tồn tại");
                                    }
                                    #endregion

                                    #region Mã khách hàng
                                    col++;
                                    obj.CustomerCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.CustomerName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.CustomerCode))
                                        lstError.Add("[Mã khách hàng] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstCustomer.FirstOrDefault(c => c.Code == obj.CustomerCode);
                                        if (checkCode != null)
                                        {
                                            obj.CustomerID = checkCode.ID;
                                            obj.CustomerName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã khách hàng] không tồn tại");
                                    }
                                    #endregion

                                    #region Mã loại điểm
                                    col++;
                                    obj.GroupOfLocationCode = ExcelHelper.GetValue(worksheet, row, col); col++;
                                    obj.GroupOfLocationName = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(obj.GroupOfLocationCode))
                                        lstError.Add("[Mã loại điểm] không được trống");
                                    else
                                    {
                                        var checkCode = data.lstGroupOfLocation.FirstOrDefault(c => c.Code == obj.GroupOfLocationCode);
                                        if (checkCode != null)
                                        {
                                            obj.GroupOfLocationID = checkCode.ID;
                                            obj.GroupOfLocationName = checkCode.Name;
                                        }
                                        else
                                            lstError.Add("[Mã loại điểm] không tồn tại");
                                    }
                                    #endregion

                                    #region Lương chuyến
                                    col++;
                                    string ScheduleFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ScheduleFee))
                                            obj.CostSchedule = Convert.ToDecimal(ScheduleFee);
                                        if (obj.CostSchedule < 0)
                                            lstError.Add("[Lương chuyến] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp] phải là số");
                                    }
                                    #endregion

                                    #region Bốc xếp
                                    col++;
                                    string LoadingFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(LoadingFee))
                                            obj.CostLoading = Convert.ToDecimal(LoadingFee);
                                        if (obj.CostLoading < 0)
                                            lstError.Add("[Bốc xếp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Bốc xếp] phải là số");
                                    }
                                    #endregion

                                    #region Quá tải
                                    col++;
                                    string OverWeightFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(OverWeightFee))
                                            obj.CostOverWeight = Convert.ToDecimal(OverWeightFee);
                                        if (obj.CostOverWeight < 0)
                                            lstError.Add("[Quá tải] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Quá tải] phải là số");
                                    }
                                    #endregion

                                    #region Kết hợp
                                    col++;
                                    string TotalJoinFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TotalJoinFee))
                                            obj.CostTotalJoin = Convert.ToDecimal(TotalJoinFee);
                                        if (obj.CostTotalJoin < 0)
                                            lstError.Add("[Kết hợp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Kết hợp] phải là số");
                                    }
                                    #endregion

                                    #region Đi tỉnh
                                    col++;
                                    string TotalDayOutFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(TotalDayOutFee))
                                            obj.CostDayOut = Convert.ToDecimal(TotalDayOutFee);
                                        if (obj.CostDayOut < 0)
                                            lstError.Add("[Đi tỉnh] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Đi tỉnh] phải là số");
                                    }
                                    #endregion

                                    #region Ôm hàng
                                    col++;
                                    string OverNightFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(OverNightFee))
                                            obj.CostOverNight = Convert.ToDecimal(OverNightFee);
                                        if (obj.CostOverNight < 0)
                                            lstError.Add("[Ôm hàng] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Ôm hàng] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - 20
                                    col++;
                                    string Con20Fee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con20Fee))
                                            obj.CostMain20DC = Convert.ToDecimal(Con20Fee);
                                        if (obj.CostMain20DC < 0)
                                            lstError.Add("[Lương SP - 20] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - 20] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - 40
                                    col++;
                                    string Con40Fee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con40Fee))
                                            obj.CostMain40DC = Convert.ToDecimal(Con40Fee);
                                        if (obj.CostMain40DC < 0)
                                            lstError.Add("[Lương SP - 40] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - 40] phải là số");
                                    }
                                    #endregion

                                    #region Lương SP - Kẹp
                                    col++;
                                    string ConFeeDouble = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ConFeeDouble))
                                            obj.CostMainDouble = Convert.ToDecimal(ConFeeDouble);
                                        if (obj.CostMainDouble < 0)
                                            lstError.Add("[Lương SP - Kẹp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Lương SP - Kẹp] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - 20
                                    col++;
                                    string Con20ExFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con20ExFee))
                                            obj.CostEx20DC = Convert.ToDecimal(Con20ExFee);
                                        if (obj.CostEx20DC < 0)
                                            lstError.Add("[Phụ thu - 20] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - 20] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - 40
                                    col++;
                                    string Con40ExFee = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(Con40ExFee))
                                            obj.CostEx40DC = Convert.ToDecimal(Con40ExFee);
                                        if (obj.CostEx40DC < 0)
                                            lstError.Add("[Phụ thu - 40] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - 40] phải là số");
                                    }
                                    #endregion

                                    #region Phụ thu - Kẹp
                                    col++;
                                    string ConExFeeDouble = ExcelHelper.GetValue(worksheet, row, col);
                                    try
                                    {
                                        if (!string.IsNullOrEmpty(ConExFeeDouble))
                                            obj.CostExDouble = Convert.ToDecimal(ConExFeeDouble);
                                        if (obj.CostExDouble < 0)
                                            lstError.Add("[Phụ thu - Kẹp] ko được âm");
                                    }
                                    catch
                                    {
                                        lstError.Add("[Phụ thu - Kẹp] phải là số");
                                    }
                                    #endregion

                                    obj.ExcelSuccess = true; obj.ExcelError = string.Empty;
                                    if (lstError.Count > 0)
                                        obj.ExcelSuccess = false; obj.ExcelError = string.Join(" ,", lstError.Distinct().ToList());
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMDriverFeeTemp_Import(dynamic dynParam)
        {
            try
            {
                List<DTOCATDriverFeeTemp_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATDriverFeeTemp_Import>>(dynParam.lst.ToString());
                int contractID = Convert.ToInt32(dynParam.contractID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMDriverFeeTemp_Import(contractID, lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMDriverFeeTemp_Export(dynamic dynParam)
        {
            try
            {
                int contractID = Convert.ToInt32(dynParam.contractID.ToString());
                var data = new List<DTOCATDriverFeeTemp_Export>();
                var dataImport = new DTOCATDriverFee_Import_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMDriverFeeTemp_Export(contractID);
                    dataImport = sv.FLMDriverFee_Import_Data();
                });

                var newfile = "/" + FolderUpload.Export + "BangGiaTaiXe" + "_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(newfile)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(newfile));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(newfile));

                using (var package = new ExcelPackage(exportfile))
                {
                    int col = 1; int row = 1; int stt = 1;

                    #region Lương tài xế
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Lương tài xế");

                    worksheet.Cells[row, col].Value = "Bảng giá tài xế";
                    worksheet.Cells[row, col].Style.Font.Bold = true;
                    worksheet.Cells[row, col].Style.Font.Size = 14;
                    row = 2;
                    col = 1; worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 10;
                    col++; worksheet.Cells[row, col].Value = "Mã loại tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Loại tài xế"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã k.hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Khách hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Mã loại"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Loại"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Lương chuyến"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Bốc xếp"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Quá tải"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Kết hợp"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Đi tỉnh"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Ôm hàng"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Lương SP"; worksheet.Column(col).Width = 13;
                    col = col + 3; worksheet.Cells[row, col].Value = "Phụ cấp"; worksheet.Column(col).Width = 13;

                    // Merge
                    for (col = 1; col <= 13; col++)
                        worksheet.Cells[row, col, row + 1, col].Merge = true;

                    row = 3;
                    // Container
                    worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "40DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Kep"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "20DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "40DC"; worksheet.Column(col).Width = 13;
                    col++; worksheet.Cells[row, col].Value = "Kep"; worksheet.Column(col).Width = 13;

                    stt = 1;
                    col = 1;
                    row = 4;
                    foreach (var item in data)
                    {
                        col = 1;
                        worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = item.TypeOfDriverCode;
                        col++; worksheet.Cells[row, col].Value = item.TypeOfDriverName;
                        col++; worksheet.Cells[row, col].Value = item.CustomerCode;
                        col++; worksheet.Cells[row, col].Value = item.CustomerName;
                        col++; worksheet.Cells[row, col].Value = item.GroupOfLocationCode;
                        col++; worksheet.Cells[row, col].Value = item.GroupOfLocationName;
                        col++; worksheet.Cells[row, col].Value = item.CostSchedule;
                        col++; worksheet.Cells[row, col].Value = item.CostLoading;
                        col++; worksheet.Cells[row, col].Value = item.CostOverWeight;
                        col++; worksheet.Cells[row, col].Value = item.CostTotalJoin;
                        col++; worksheet.Cells[row, col].Value = item.CostDayOut;
                        col++; worksheet.Cells[row, col].Value = item.CostOverNight;
                        col++; worksheet.Cells[row, col].Value = item.CostMain20DC;
                        col++; worksheet.Cells[row, col].Value = item.CostMain40DC;
                        col++; worksheet.Cells[row, col].Value = item.CostMainDouble;
                        col++; worksheet.Cells[row, col].Value = item.CostEx20DC;
                        col++; worksheet.Cells[row, col].Value = item.CostEx40DC;
                        col++; worksheet.Cells[row, col].Value = item.CostExDouble;

                        row++;
                        stt++;
                    }

                    foreach (var cus in dataImport.lstCustomer)
                    {
                        var hasCus = false;
                        foreach (var item in data)
                        {
                            if (item.CustomerID == cus.ID)
                            {
                                hasCus = true;
                            }
                        }
                        if (!hasCus)
                        {
                            var gol = dataImport.lstGroupOfLocation.FirstOrDefault();
                            var type = dataImport.lstTypeOfDriver.FirstOrDefault();
                            if (gol != null && type != null)
                            {
                                var i = 1;

                                col = 1; worksheet.Cells[row, col].Value = stt;
                                col++; worksheet.Cells[row, col].Value = type.Code;
                                col++; worksheet.Cells[row, col].Value = type.Name;
                                col++; worksheet.Cells[row, col].Value = cus.Code;
                                col++; worksheet.Cells[row, col].Value = cus.Name;
                                col++; worksheet.Cells[row, col].Value = gol.Code;
                                col++; worksheet.Cells[row, col].Value = gol.Name;

                                for (col = 8; col <= 18; col++)
                                {
                                    worksheet.Cells[row, col].Value = 0;
                                }
                                row++;
                                stt++;
                            }
                        }
                    }
                    #endregion

                    #region Loại tài xế
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Loại tài xế");
                    row = 1; stt = 1;
                    col = 1; worksheet1.Cells[row, col].Value = "STT"; worksheet1.Column(col).Width = 10;
                    col++; worksheet1.Cells[row, col].Value = "Mã loại tài xế"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Loại tài xế"; worksheet1.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstTypeOfDriver)
                    {
                        col = 1; worksheet1.Cells[row, col].Value = stt;
                        col++; worksheet1.Cells[row, col].Value = item.Code;
                        col++; worksheet1.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Khách hàng
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Khách hàng");
                    row = 1; stt = 1;
                    col = 1; worksheet2.Cells[row, col].Value = "STT"; worksheet2.Column(col).Width = 10;
                    col++; worksheet2.Cells[row, col].Value = "Mã khách hàng"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Khách hàng"; worksheet2.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstCustomer)
                    {
                        col = 1; worksheet2.Cells[row, col].Value = stt;
                        col++; worksheet2.Cells[row, col].Value = item.Code;
                        col++; worksheet2.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại điểm
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets.Add("Loại điểm");
                    row = 1; stt = 1;
                    col = 1; worksheet3.Cells[row, col].Value = "STT"; worksheet3.Column(col).Width = 10;
                    col++; worksheet3.Cells[row, col].Value = "Mã loại điểm"; worksheet3.Column(col).Width = 20;
                    col++; worksheet3.Cells[row, col].Value = "Loại điểm"; worksheet3.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstGroupOfLocation)
                    {
                        col = 1; worksheet3.Cells[row, col].Value = stt;
                        col++; worksheet3.Cells[row, col].Value = item.Code;
                        col++; worksheet3.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại lương
                    ExcelWorksheet worksheet4 = package.Workbook.Worksheets.Add("Loại lương");
                    row = 1; stt = 1;
                    col = 1; worksheet4.Cells[row, col].Value = "STT"; worksheet4.Column(col).Width = 10;
                    col++; worksheet4.Cells[row, col].Value = "Mã loại lương"; worksheet4.Column(col).Width = 20;
                    col++; worksheet4.Cells[row, col].Value = "Loại lương"; worksheet4.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstTypeOfDriverFee)
                    {
                        col = 1; worksheet4.Cells[row, col].Value = stt;
                        col++; worksheet4.Cells[row, col].Value = item.Code;
                        col++; worksheet4.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    #region Loại container
                    ExcelWorksheet worksheet5 = package.Workbook.Worksheets.Add("Loại container");
                    row = 1; stt = 1;
                    col = 1; worksheet5.Cells[row, col].Value = "STT"; worksheet5.Column(col).Width = 10;
                    col++; worksheet5.Cells[row, col].Value = "Mã loại container"; worksheet5.Column(col).Width = 20;
                    col++; worksheet5.Cells[row, col].Value = "Loại container"; worksheet5.Column(col).Width = 20;

                    row = 2;
                    foreach (var item in dataImport.lstContainer)
                    {
                        col = 1; worksheet5.Cells[row, col].Value = stt;
                        col++; worksheet5.Cells[row, col].Value = item.Code;
                        col++; worksheet5.Cells[row, col].Value = item.Name;
                        stt++;
                        row++;
                    }
                    #endregion

                    package.Save();
                }
                return newfile;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region Routing

        [HttpPost]
        public DTOResult FLMContract_Routing_List(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Routing_List(contractID, request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_Routing_CATNotIn_List(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Routing_CATNotIn_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Routing_CATNotIn_Save(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOCATRouting> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATRouting>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Routing_CATNotIn_Save(data, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_Routing_NotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractID = (int)dynParam.contractID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Routing_NotIn_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Routing_NotIn_Delete(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                int contractID = (int)dynParam.contractID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Routing_NotIn_Delete(ID, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Routing_Save(dynamic dynParam)
        {
            try
            {
                DTOCATContractRouting item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContractRouting>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Routing_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Routing_Insert(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOCATRouting> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATRouting>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Routing_Insert(data, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Routing_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Routing_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMContract_Routing_Export(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOFLMContractRouting_Import> resBody = new List<DTOFLMContractRouting_Import>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      resBody = sv.FLMContract_Routing_Export(contractID);
                  });

                var lstContractRoutingType = new List<SYSVar>();
                ServiceFactory.SVCategory((ISVCategory sv) =>
                {
                    lstContractRoutingType = sv.ALL_SysVar(SYSVarType.ContractRoutingType).Data.Cast<SYSVar>().ToList(); ;
                });

                string file = "/Uploads/temp/" + "CungDuong" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage pk = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = pk.Workbook.Worksheets.Add("Sheet1");
                    int col = 0, row = 1;

                    #region Header
                    col++; worksheet.Cells[row, col].Value = "Thứ tự"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Mã hệ thống"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Tên hệ thống"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 25;
                    col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 35;
                    col++; worksheet.Cells[row, col].Value = "Zone"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Leadtime"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Phụ lục hợp đồng"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Mã loại cung đường"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Loại cung đường"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Theo khu vực"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Khu vực đi"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Khu vực đến"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Điểm đi"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Điểm đến"; worksheet.Column(col).Width = 15;

                    worksheet.Cells[1, 1, row, col].Style.Font.Bold = true;
                    worksheet.Cells[1, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.Font.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    worksheet.Cells[1, 1, row, col].Style.Fill.BackgroundColor.SetColor(Color.Green);

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Color.SetColor(Color.White);

                    #endregion

                    #region Body
                    int stt = 0;
                    foreach (DTOFLMContractRouting_Import item in resBody)
                    {
                        row++; col = 0; stt++;
                        col++; worksheet.Cells[row, col].Value = item.SortOrder;
                        col++; worksheet.Cells[row, col].Value = item.CATRoutingCode;
                        col++; worksheet.Cells[row, col].Value = item.CATRoutingName;
                        col++; worksheet.Cells[row, col].Value = item.ContractRoutingCode;
                        col++; worksheet.Cells[row, col].Value = item.ContractRoutingName;
                        col++; worksheet.Cells[row, col].Value = item.Zone;
                        col++; worksheet.Cells[row, col].Value = item.LeadTime;

                        col++; worksheet.Cells[row, col].Value = item.ContractTermCode;
                        col++; worksheet.Cells[row, col].Value = item.ContractRoutingTypeCode;
                        col++; worksheet.Cells[row, col].Value = item.ContractRoutingType;
                        col++; worksheet.Cells[row, col].Value = item.IsArea ? "x" : string.Empty;
                        col++; worksheet.Cells[row, col].Value = item.AreaFromCode;
                        col++; worksheet.Cells[row, col].Value = item.AreaToCode;
                        col++; worksheet.Cells[row, col].Value = item.LocationFromCode;
                        col++; worksheet.Cells[row, col].Value = item.LocationToCode;
                    }
                    #endregion

                    ExcelWorksheet worksheet1 = pk.Workbook.Worksheets.Add("Danh sách loại CĐ");
                    col = 0; row = 1;

                    #region Header
                    col++; worksheet1.Cells[row, col].Value = "Thứ tự"; worksheet1.Column(col).Width = 15;
                    col++; worksheet1.Cells[row, col].Value = "Mã loại cung đường"; worksheet1.Column(col).Width = 15;
                    col++; worksheet1.Cells[row, col].Value = "Loại cung đường"; worksheet1.Column(col).Width = 15;
                    for (int i = 1; i <= col; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet1, 1, i, 1, i, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }
                    #endregion

                    #region Body
                    stt = 0;
                    foreach (SYSVar item in lstContractRoutingType)
                    {
                        row++; col = 0; stt++;
                        col++; worksheet1.Cells[row, col].Value = stt;
                        col++; worksheet1.Cells[row, col].Value = item.Code;
                        col++; worksheet1.Cells[row, col].Value = item.ValueOfVar;
                    }
                    #endregion
                    pk.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOFLMContractRouting_Import> FLMContract_Routing_Excel_Check(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                int customerID = (int)dynParam.customerID;
                string file = "/" + dynParam.file.ToString();

                List<DTOFLMContractRouting_Import> result = new List<DTOFLMContractRouting_Import>();
                DTOFLMContractRoutingData resRouting = new DTOFLMContractRoutingData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      resRouting = sv.FLMContract_RoutingByCus_List(customerID, contractID);
                  });

                var lstContractRoutingType = new List<SYSVar>();
                ServiceFactory.SVCategory((ISVCategory sv) =>
                {
                    lstContractRoutingType = sv.ALL_SysVar(SYSVarType.ContractRoutingType).Data.Cast<SYSVar>().ToList(); ;
                });

                using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath(file), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    using (var package = new ExcelPackage(fs))
                    {
                        ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                        if (worksheet != null)
                        {

                            int row = 1;
                            for (row = 2; row <= worksheet.Dimension.End.Row; row++)
                            {
                                DTOFLMContractRouting_Import obj = new DTOFLMContractRouting_Import();
                                List<string> lstError = new List<string>();
                                int col = 0;
                                obj.ExcelSuccess = true;
                                obj.ExcelRow = row;
                                col++; string strSortOrder = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strCatCode = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strCatName = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strConCode = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strConName = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strZone = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strLeadtime = ExcelHelper.GetValue(worksheet, row, col);

                                col++; string strContractTerm = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strContractRoutingTypeCode = ExcelHelper.GetValue(worksheet, row, col);
                                col++;
                                col++; string strIsArea = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strAreaFrom = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strAreaTo = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strLocationFrom = ExcelHelper.GetValue(worksheet, row, col);
                                col++; string strLocationTo = ExcelHelper.GetValue(worksheet, row, col);

                                if (string.IsNullOrEmpty(strCatCode) && string.IsNullOrEmpty(strCatName))
                                    break;

                                //kiem tra cat routing
                                obj.CATRoutingCode = strCatCode;
                                obj.CATRoutingName = strCatName;
                                obj.ContractRoutingCode = strConCode;
                                obj.ContractRoutingName = strConName;

                                if (!string.IsNullOrEmpty(strCatCode))
                                {
                                    var checkCAT = resRouting.ListCATRouting.FirstOrDefault(c => c.Code == strCatCode);
                                    if (checkCAT != null)
                                    {
                                        obj.CATRoutingID = checkCAT.ID;
                                        var checkOnFile = result.FirstOrDefault(c => c.CATRoutingCode == strCatCode);
                                        if (checkOnFile != null) lstError.Add("Mã hệ thống bị trùng trên file");
                                    }
                                    else
                                    {
                                        obj.CATRoutingID = 0;
                                        var checkOnFile = result.FirstOrDefault(c => c.CATRoutingCode == strCatCode);
                                        if (checkOnFile != null) lstError.Add("Mã hệ thống bị trùng trên file");
                                    }

                                    var checkCUS = resRouting.ListCUSRouting.FirstOrDefault(c => c.RoutingID == obj.CATRoutingID);
                                    if (checkCUS != null)
                                        obj.CUSRoutingID = checkCUS.ID;
                                    else
                                        obj.CUSRoutingID = 0;

                                    if (!string.IsNullOrEmpty(strConCode))
                                    {
                                        //kiem tra ma trong hop dong
                                        var checkContract = resRouting.ListContractRouting.FirstOrDefault(c => c.Code == strConCode);
                                        if (checkContract == null)
                                        {
                                            obj.ContractRoutingID = 0;
                                            //kiem tra tren file
                                            var checkfile = result.FirstOrDefault(c => c.ContractRoutingCode == strConCode);
                                            if (checkfile != null)
                                                lstError.Add("Mã cung đường [" + strConCode + "]bị trùng trên file");
                                            if (resRouting.ListContractRouting.Count(c => c.RoutingID == obj.CATRoutingID && c.Code != strConCode) > 0)
                                                lstError.Add("Mã cung đường hệ thống [" + strCatCode + "] đã sử dụng trong hợp đồng");
                                        }
                                        else
                                        {
                                            if (checkContract.RoutingID != checkCAT.ID)
                                                lstError.Add("Mã cung đường [" + strConCode + "] đã sử dụng trong hợp đồng");
                                            else
                                            {
                                                obj.ContractRoutingID = checkContract.ID;
                                                var checkfile = result.FirstOrDefault(c => c.ContractRoutingCode == strConCode);
                                                if (checkfile != null)
                                                    lstError.Add("Mã cung đường [" + strConCode + "]bị trùng trên file");
                                            }
                                        }
                                    }
                                    else lstError.Add("Mã cung đường không được trống.");
                                }
                                else lstError.Add("Mã hệ thống không được trống.");

                                if (string.IsNullOrEmpty(strZone))
                                    obj.Zone = null;
                                else
                                {
                                    try { obj.Zone = Convert.ToDouble(strZone); }
                                    catch { lstError.Add("Zone[" + strZone + "] không chính xác"); }
                                }
                                if (string.IsNullOrEmpty(strLeadtime))
                                    obj.LeadTime = null;
                                else
                                {
                                    try { obj.LeadTime = Convert.ToDouble(strLeadtime); }
                                    catch { lstError.Add("LeadTime[" + strLeadtime + "] không chính xác"); }
                                }

                                if (string.IsNullOrEmpty(strSortOrder))
                                {
                                    obj.SortOrder = 0;
                                }
                                else
                                {
                                    try { obj.SortOrder = Convert.ToInt32(strSortOrder); }
                                    catch { lstError.Add("Thứ tự[" + strSortOrder + "] không chính xác"); }
                                }
                                //check phụ lục hợp đồng
                                if (string.IsNullOrEmpty(strContractTerm))
                                {
                                    obj.ContractTermID = -1;
                                }
                                else
                                {
                                    var checkTerm = resRouting.ListContractTerm.FirstOrDefault(c => c.Code == strContractTerm);
                                    if (checkTerm != null)
                                        obj.ContractTermID = checkTerm.ID;
                                    else
                                        lstError.Add("Phụ lục[" + strContractTerm + "] không tồn tại");
                                }

                                //check loai cung đường
                                if (string.IsNullOrEmpty(strContractRoutingTypeCode))
                                {
                                    lstError.Add("Mã loại cung đường [" + strContractRoutingTypeCode + "] không được trống");
                                }
                                else
                                {
                                    var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == strContractRoutingTypeCode);
                                    if (checkType != null)
                                        obj.ContractRoutingTypeID = checkType.ID;
                                    else
                                        lstError.Add("Mã loại cung đường [" + strContractRoutingTypeCode + "] không tồn tại");
                                }

                                //theo khu vực/ điểm
                                if (string.IsNullOrEmpty(strIsArea))
                                    obj.IsArea = false;
                                else
                                    obj.IsArea = true;

                                //check khu vuc
                                if (obj.IsArea)
                                {
                                    if (!string.IsNullOrEmpty(strAreaFrom))
                                    {
                                        var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == strAreaFrom);
                                        if (checkArea != null)
                                            obj.AreaFromID = checkArea.ID;
                                        else lstError.Add("Khu vực đi" + strAreaFrom + " không tại trong hệ thống");
                                    }
                                    else lstError.Add("Khu vực đi không được trống");

                                    if (!string.IsNullOrEmpty(strAreaTo))
                                    {
                                        var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == strAreaTo);
                                        if (checkArea != null)
                                            obj.AreaToID = checkArea.ID;
                                        else lstError.Add("Khu vực đến" + strAreaFrom + " không tại trong hệ thống");
                                    }
                                    else lstError.Add("Khu vực đến không được trống");

                                    obj.LocationFromID = obj.LocationToID = -1;
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(strLocationFrom))
                                    {
                                        var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == strLocationFrom);
                                        if (checkLo != null)
                                            obj.LocationFromID = checkLo.ID;
                                        else lstError.Add("Điểm đi" + strLocationFrom + " không tại trong hệ thống");
                                    }
                                    else lstError.Add("Điểm đi không được trống");

                                    if (!string.IsNullOrEmpty(strLocationTo))
                                    {
                                        var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == strLocationTo);
                                        if (checkLo != null)
                                            obj.LocationToID = checkLo.ID;
                                        else lstError.Add("Điểm đến" + strLocationTo + " không tại trong hệ thống");
                                    }
                                    else lstError.Add("Điểm đến không được trống");

                                    obj.AreaFromID = obj.AreaToID = -1;
                                }

                                obj.ExcelSuccess = lstError.Count() > 0 ? false : true;
                                obj.ExcelError = string.Join(" ,", lstError);
                                result.Add(obj);
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Routing_Import(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOFLMContractRouting_Import> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMContractRouting_Import>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Routing_Import(data, contractID);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_KPI_Save(dynamic dynParam)
        {
            try
            {
                List<DTOContractKPITime> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOContractKPITime>>(dynParam.data.ToString());
                int routingID = (int)dynParam.routingID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_KPI_Save(data, routingID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DateTime? FLMContract_KPI_Check_Expression(dynamic dynParam)
        {
            try
            {
                string expression = dynParam.Expression.ToString();
                KPIKPITime item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPIKPITime>(dynParam.item.ToString());
                List<DTOContractKPITime> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOContractKPITime>>(dynParam.lst.ToString());
                double leadTime = (double)dynParam.leadTime;
                double zone = (double)dynParam.zone;
                DateTime? result = null;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPI_Check_Expression(expression, item, zone, leadTime, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool? FLMContract_KPI_Check_Hit(dynamic dynParam)
        {
            try
            {
                string expression = dynParam.Expression.ToString();
                string field = dynParam.Field.ToString();
                KPIKPITime item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPIKPITime>(dynParam.item.ToString());
                List<DTOContractKPITime> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOContractKPITime>>(dynParam.lst.ToString());
                double leadTime = (double)dynParam.leadTime;
                double zone = (double)dynParam.zone;
                bool? result = null;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPI_Check_Hit(expression, field, item, zone, leadTime, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_KPI_Routing_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractID = (int)dynParam.contractID;
                int routingID = (int)dynParam.routingID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPI_Routing_List(request, contractID, routingID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_KPI_Routing_Apply(dynamic dynParam)
        {
            try
            {
                List<DTOCATContractRouting> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATContractRouting>>(dynParam.data.ToString());
                int routingID = (int)dynParam.routingID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_KPI_Routing_Apply(data, routingID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOContractTerm> FLMContract_Routing_ContractTermList(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOContractTerm> result = new List<DTOContractTerm>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Routing_ContractTermList(contractID);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region tao routing moi
        [HttpPost]
        public DTOResult FLMContract_NewRouting_LocationList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_LocationList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATRouting FLMContract_NewRouting_Get(dynamic dynParam)
        {
            try
            {
                DTOCATRouting result = new DTOCATRouting();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_Get(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_NewRouting_AreaList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public CATRoutingArea FLMContract_NewRouting_AreaGet(dynamic dynParam)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaGet(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_NewRouting_AreaDetailList(dynamic dynParam)
        {
            try
            {
                DTOResult result = new DTOResult();
                string request = dynParam.request.ToString();
                int areaID = (int)dynParam.areaID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaDetailList(request, areaID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMContract_NewRouting_Save(dynamic dynParam)
        {
            try
            {
                int result = 0;
                int contractID = (int)dynParam.contractID;
                DTOCATRouting item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATRouting>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_Save(item, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATRoutingAreaDetail FLMContract_NewRouting_AreaDetailGet(dynamic dynParam)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaDetailGet(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMContract_NewRouting_AreaSave(dynamic dynParam)
        {
            try
            {
                CATRoutingArea item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATRoutingArea>(dynParam.item.ToString());
                int result = 0;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaSave(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMContract_NewRouting_AreaDetailSave(dynamic dynParam)
        {
            try
            {
                DTOCATRoutingAreaDetail item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATRoutingAreaDetail>(dynParam.item.ToString());
                int areaID = (int)dynParam.areaID;
                int result = 0;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaDetailSave(item, areaID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_NewRouting_AreaDelete(dynamic dynParam)
        {
            try
            {
                CATRoutingArea item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATRoutingArea>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaDelete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_NewRouting_AreaDetailDelete(dynamic dynParam)
        {
            try
            {
                DTOCATRoutingAreaDetail item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATRoutingAreaDetail>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaDetailDelete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public void FLMContract_NewRouting_AreaRefresh(dynamic dynParam)
        {
            try
            {
                CATRoutingArea item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATRoutingArea>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaRefresh(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_NewRouting_AreaLocation_List(dynamic dynParam)
        {
            try
            {
                int areaID = (int)dynParam.areaID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaLocation_List(request, areaID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_NewRouting_AreaLocationNotIn_List(dynamic dynParam)
        {
            try
            {
                int areaID = (int)dynParam.areaID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_NewRouting_AreaLocationNotIn_List(request, areaID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_NewRouting_AreaLocationNotIn_Save(dynamic dynParam)
        {
            try
            {
                int areaID = (int)dynParam.areaID;
                List<int> lstID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaLocationNotIn_Save(areaID, lstID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_NewRouting_AreaLocation_Delete(dynamic dynParam)
        {
            try
            {
                List<int> lstID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstID.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaLocation_Delete(lstID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_NewRouting_AreaLocation_Copy(dynamic dynParam)
        {
            try
            {
                int areaID = (int)dynParam.areaID;
                List<int> lstID = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstID.ToString());

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_NewRouting_AreaLocation_Copy(areaID, lstID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Excel
        ////[HttpPost]
        ////public string FLMContract_Routing_Export(dynamic dynParam)
        ////{
        ////    try
        ////    {
        ////        int contractID = (int)dynParam.contractID;
        ////        List<DTOFLMContractRouting_Import> resBody = new List<DTOFLMContractRouting_Import>();
        ////        ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        ////        {
        ////            resBody = sv.FLMContract_Routing_Export(contractID);
        ////        });

        ////        var lstContractRoutingType = new List<SYSVar>();
        ////        ServiceFactory.SVCategory((ISVCategory sv) =>
        ////        {
        ////            lstContractRoutingType = sv.ALL_SysVar(SYSVarType.ContractRoutingType).Data.Cast<SYSVar>().ToList(); ;
        ////        });

        ////        string file = "/Uploads/temp/" + "CungDuong" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

        ////        if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
        ////            System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
        ////        FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
        ////        using (ExcelPackage pk = new ExcelPackage(exportfile))
        ////        {
        ////            ExcelWorksheet worksheet = pk.Workbook.Worksheets.Add("Sheet1");
        ////            int col = 0, row = 1;

        ////            #region Header
        ////            col++; worksheet.Cells[row, col].Value = "Thứ tự"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Mã hệ thống"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Tên hệ thống"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 25;
        ////            col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 35;
        ////            col++; worksheet.Cells[row, col].Value = "Zone"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Leadtime"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Phụ lục hợp đồng"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Mã loại cung đường"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Loại cung đường"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Theo khu vực"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Khu vực đi"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Khu vực đến"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Điểm đi"; worksheet.Column(col).Width = 15;
        ////            col++; worksheet.Cells[row, col].Value = "Điểm đến"; worksheet.Column(col).Width = 15;

        ////            worksheet.Cells[1, 1, row, col].Style.Font.Bold = true;
        ////            worksheet.Cells[1, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        ////            worksheet.Cells[1, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        ////            worksheet.Cells[1, 1, row, col].Style.Font.Color.SetColor(Color.White);
        ////            worksheet.Cells[1, 1, row, col].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
        ////            worksheet.Cells[1, 1, row, col].Style.Fill.BackgroundColor.SetColor(Color.Green);

        ////            worksheet.Cells[1, 1, row, col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Right.Style = ExcelBorderStyle.Thin;

        ////            worksheet.Cells[1, 1, row, col].Style.Border.Top.Color.SetColor(Color.White);
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Color.SetColor(Color.White);
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Left.Color.SetColor(Color.White);
        ////            worksheet.Cells[1, 1, row, col].Style.Border.Right.Color.SetColor(Color.White);

        ////            #endregion

        ////            #region Body
        ////            int stt = 0;
        ////            foreach (DTOFLMContractRouting_Import item in resBody)
        ////            {
        ////                row++; col = 0; stt++;
        ////                col++; worksheet.Cells[row, col].Value = item.SortOrder;
        ////                col++; worksheet.Cells[row, col].Value = item.CATRoutingCode;
        ////                col++; worksheet.Cells[row, col].Value = item.CATRoutingName;
        ////                col++; worksheet.Cells[row, col].Value = item.ContractRoutingCode;
        ////                col++; worksheet.Cells[row, col].Value = item.ContractRoutingName;
        ////                col++; worksheet.Cells[row, col].Value = item.Zone;
        ////                col++; worksheet.Cells[row, col].Value = item.LeadTime;

        ////                col++; worksheet.Cells[row, col].Value = item.ContractTermCode;
        ////                col++; worksheet.Cells[row, col].Value = item.ContractRoutingTypeCode;
        ////                col++; worksheet.Cells[row, col].Value = item.ContractRoutingType;
        ////                col++; worksheet.Cells[row, col].Value = item.IsArea ? "x" : string.Empty;
        ////                col++; worksheet.Cells[row, col].Value = item.AreaFromCode;
        ////                col++; worksheet.Cells[row, col].Value = item.AreaToCode;
        ////                col++; worksheet.Cells[row, col].Value = item.LocationFromCode;
        ////                col++; worksheet.Cells[row, col].Value = item.LocationToCode;
        ////            }
        ////            #endregion

        ////            ExcelWorksheet worksheet1 = pk.Workbook.Worksheets.Add("Danh sách loại CĐ");
        ////            col = 0; row = 1;

        ////            #region Header
        ////            col++; worksheet1.Cells[row, col].Value = "Thứ tự"; worksheet1.Column(col).Width = 15;
        ////            col++; worksheet1.Cells[row, col].Value = "Mã loại cung đường"; worksheet1.Column(col).Width = 15;
        ////            col++; worksheet1.Cells[row, col].Value = "Loại cung đường"; worksheet1.Column(col).Width = 15;
        ////            for (int i = 1; i <= col; i++)
        ////            {
        ////                ExcelHelper.CreateCellStyle(worksheet1, 1, i, 1, i, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
        ////            }
        ////            #endregion

        ////            #region Body
        ////            stt = 0;
        ////            foreach (SYSVar item in lstContractRoutingType)
        ////            {
        ////                row++; col = 0; stt++;
        ////                col++; worksheet1.Cells[row, col].Value = stt;
        ////                col++; worksheet1.Cells[row, col].Value = item.Code;
        ////                col++; worksheet1.Cells[row, col].Value = item.ValueOfVar;
        ////            }
        ////            #endregion
        ////            pk.Save();
        ////        }
        ////        return file;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        throw ex;
        ////    }
        ////}

        //[HttpPost]
        //public List<DTOFLMContractRouting_Import> FLMContract_Routing_Excel_Check(dynamic dynParam)
        //{
        //    try
        //    {
        //        int contractID = (int)dynParam.contractID;
        //        int customerID = (int)dynParam.customerID;
        //        string file = "/" + dynParam.file.ToString();

        //        List<DTOFLMContractRouting_Import> result = new List<DTOFLMContractRouting_Import>();
        //        DTOFLMContractRoutingData resRouting = new DTOFLMContractRoutingData();
        //        ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            resRouting = sv.FLMContract_RoutingByCus_List(customerID, contractID);
        //        });

        //        var lstContractRoutingType = new List<SYSVar>();
        //        ServiceFactory.SVCategory((ISVCategory sv) =>
        //        {
        //            lstContractRoutingType = sv.ALL_SysVar(SYSVarType.ContractRoutingType).Data.Cast<SYSVar>().ToList(); ;
        //        });

        //        using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath(file), System.IO.FileMode.Open, System.IO.FileAccess.Read))
        //        {
        //            using (var package = new ExcelPackage(fs))
        //            {
        //                ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
        //                if (worksheet != null)
        //                {

        //                    int row = 1;
        //                    for (row = 2; row <= worksheet.Dimension.End.Row; row++)
        //                    {
        //                        DTOFLMContractRouting_Import obj = new DTOFLMContractRouting_Import();
        //                        List<string> lstError = new List<string>();
        //                        int col = 0;
        //                        obj.ExcelSuccess = true;
        //                        obj.ExcelRow = row;
        //                        col++; string strSortOrder = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strCatCode = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strCatName = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strConCode = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strConName = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strZone = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strLeadtime = ExcelHelper.GetValue(worksheet, row, col);

        //                        col++; string strContractTerm = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strContractRoutingTypeCode = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++;
        //                        col++; string strIsArea = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strAreaFrom = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strAreaTo = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strLocationFrom = ExcelHelper.GetValue(worksheet, row, col);
        //                        col++; string strLocationTo = ExcelHelper.GetValue(worksheet, row, col);

        //                        if (string.IsNullOrEmpty(strCatCode) && string.IsNullOrEmpty(strCatName))
        //                            break;

        //                        //kiem tra cat routing
        //                        obj.CATRoutingCode = strCatCode;
        //                        obj.CATRoutingName = strCatName;
        //                        obj.ContractRoutingCode = strConCode;
        //                        obj.ContractRoutingName = strConName;

        //                        if (!string.IsNullOrEmpty(strCatCode))
        //                        {
        //                            var checkCAT = resRouting.ListCATRouting.FirstOrDefault(c => c.Code == strCatCode);
        //                            if (checkCAT != null)
        //                            {
        //                                obj.CATRoutingID = checkCAT.ID;
        //                                var checkOnFile = result.FirstOrDefault(c => c.CATRoutingCode == strCatCode);
        //                                if (checkOnFile != null) lstError.Add("Mã hệ thống bị trùng trên file");
        //                            }
        //                            else
        //                            {
        //                                obj.CATRoutingID = 0;
        //                                var checkOnFile = result.FirstOrDefault(c => c.CATRoutingCode == strCatCode);
        //                                if (checkOnFile != null) lstError.Add("Mã hệ thống bị trùng trên file");
        //                            }

        //                            var checkCUS = resRouting.ListCUSRouting.FirstOrDefault(c => c.RoutingID == obj.CATRoutingID);
        //                            if (checkCUS != null)
        //                                obj.CUSRoutingID = checkCUS.ID;
        //                            else
        //                                obj.CUSRoutingID = 0;

        //                            if (!string.IsNullOrEmpty(strConCode))
        //                            {
        //                                //kiem tra ma trong hop dong
        //                                var checkContract = resRouting.ListContractRouting.FirstOrDefault(c => c.Code == strConCode);
        //                                if (checkContract == null)
        //                                {
        //                                    obj.ContractRoutingID = 0;
        //                                    //kiem tra tren file
        //                                    var checkfile = result.FirstOrDefault(c => c.ContractRoutingCode == strConCode);
        //                                    if (checkfile != null)
        //                                        lstError.Add("Mã cung đường [" + strConCode + "]bị trùng trên file");
        //                                }
        //                                else
        //                                {
        //                                    if (checkContract.RoutingID != checkCAT.ID)
        //                                        lstError.Add("Mã cung đường [" + strConCode + "] đã sử dụng trong hợp đồng");
        //                                    else
        //                                    {
        //                                        obj.ContractRoutingID = checkContract.ID;
        //                                        var checkfile = result.FirstOrDefault(c => c.ContractRoutingCode == strConCode);
        //                                        if (checkfile != null)
        //                                            lstError.Add("Mã cung đường [" + strConCode + "]bị trùng trên file");
        //                                    }
        //                                }
        //                            }
        //                            else lstError.Add("Mã cung đường không được trống.");
        //                        }
        //                        else lstError.Add("Mã hệ thống không được trống.");

        //                        if (string.IsNullOrEmpty(strZone))
        //                            obj.Zone = null;
        //                        else
        //                        {
        //                            try { obj.Zone = Convert.ToDouble(strZone); }
        //                            catch { lstError.Add("Zone[" + strZone + "] không chính xác"); }
        //                        }
        //                        if (string.IsNullOrEmpty(strLeadtime))
        //                            obj.LeadTime = null;
        //                        else
        //                        {
        //                            try { obj.LeadTime = Convert.ToDouble(strLeadtime); }
        //                            catch { lstError.Add("LeadTime[" + strLeadtime + "] không chính xác"); }
        //                        }

        //                        if (string.IsNullOrEmpty(strSortOrder))
        //                        {
        //                            obj.SortOrder = 0;
        //                        }
        //                        else
        //                        {
        //                            try { obj.SortOrder = Convert.ToInt32(strSortOrder); }
        //                            catch { lstError.Add("Thứ tự[" + strSortOrder + "] không chính xác"); }
        //                        }
        //                        //check phụ lục hợp đồng
        //                        if (string.IsNullOrEmpty(strContractTerm))
        //                        {
        //                            obj.ContractTermID = -1;
        //                        }
        //                        else
        //                        {
        //                            var checkTerm = resRouting.ListContractTerm.FirstOrDefault(c => c.Code == strContractTerm);
        //                            if (checkTerm != null)
        //                                obj.ContractTermID = checkTerm.ID;
        //                            else
        //                                lstError.Add("Phụ lục[" + strContractTerm + "] không tồn tại");
        //                        }

        //                        //check loai cung đường
        //                        if (string.IsNullOrEmpty(strContractRoutingTypeCode))
        //                        {
        //                            lstError.Add("Mã loại cung đường [" + strContractRoutingTypeCode + "] không được trống");
        //                        }
        //                        else
        //                        {
        //                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == strContractRoutingTypeCode);
        //                            if (checkType != null)
        //                                obj.ContractRoutingTypeID = checkType.ID;
        //                            else
        //                                lstError.Add("Mã loại cung đường [" + strContractRoutingTypeCode + "] không tồn tại");
        //                        }

        //                        //theo khu vực/ điểm
        //                        if (string.IsNullOrEmpty(strIsArea))
        //                            obj.IsArea = false;
        //                        else
        //                            obj.IsArea = true;

        //                        //check khu vuc
        //                        if (obj.IsArea)
        //                        {
        //                            if (!string.IsNullOrEmpty(strAreaFrom))
        //                            {
        //                                var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == strAreaFrom);
        //                                if (checkArea != null)
        //                                    obj.AreaFromID = checkArea.ID;
        //                                else lstError.Add("Khu vực đi" + strAreaFrom + " không tại trong hệ thống");
        //                            }
        //                            else lstError.Add("Khu vực đi không được trống");

        //                            if (!string.IsNullOrEmpty(strAreaTo))
        //                            {
        //                                var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == strAreaTo);
        //                                if (checkArea != null)
        //                                    obj.AreaToID = checkArea.ID;
        //                                else lstError.Add("Khu vực đến" + strAreaFrom + " không tại trong hệ thống");
        //                            }
        //                            else lstError.Add("Khu vực đến không được trống");

        //                            obj.LocationFromID = obj.LocationToID = -1;
        //                        }
        //                        else
        //                        {
        //                            if (!string.IsNullOrEmpty(strLocationFrom))
        //                            {
        //                                var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == strLocationFrom);
        //                                if (checkLo != null)
        //                                    obj.LocationFromID = checkLo.ID;
        //                                else lstError.Add("Điểm đi" + strLocationFrom + " không tại trong hệ thống");
        //                            }
        //                            else lstError.Add("Điểm đi không được trống");

        //                            if (!string.IsNullOrEmpty(strLocationTo))
        //                            {
        //                                var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == strLocationTo);
        //                                if (checkLo != null)
        //                                    obj.LocationToID = checkLo.ID;
        //                                else lstError.Add("Điểm đến" + strLocationTo + " không tại trong hệ thống");
        //                            }
        //                            else lstError.Add("Điểm đến không được trống");

        //                            obj.AreaFromID = obj.AreaToID = -1;
        //                        }

        //                        obj.ExcelSuccess = lstError.Count() > 0 ? false : true;
        //                        obj.ExcelError = string.Join(" ,", lstError);
        //                        result.Add(obj);
        //                    }
        //                }
        //            }
        //        }
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        //[HttpPost]
        //public void FLMContract_Routing_Import(dynamic dynParam)
        //{
        //    try
        //    {
        //        int contractID = (int)dynParam.contractID;
        //        List<DTOFLMContractRouting_Import> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMContractRouting_Import>>(dynParam.data.ToString());
        //        ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            sv.FLMContract_Routing_Import(data, contractID);
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        #endregion

        [HttpPost]
        public SYSExcel FLMContract_Routing_ExcelOnline_Init(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var contractID = (int)dynParam.contractID;
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Routing_ExcelOnline_Init(contractID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMContract_Routing_ExcelOnline_Change(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var contractID = (int)dynParam.contractID;
                var customerID = (int)dynParam.customerID;
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_Routing_ExcelOnline_Change(contractID, customerID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMContract_Routing_ExcelOnline_Import(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var contractID = (int)dynParam.contractID;
                var customerID = (int)dynParam.customerID;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_Routing_ExcelOnline_Import(contractID, customerID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMContract_Routing_ExcelOnline_Approve(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var contractID = (int)dynParam.contractID;

                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_Routing_ExcelOnline_Approve(id, contractID);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMContract Setting

        [HttpPost]
        public void FLMContractSetting_Save(dynamic dynParam)
        {
            try
            {
                string setting = dynParam.setting.ToString();
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContractSetting_Save(setting, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Setting_TypeOfSGroupProductChangeSave(dynamic dynParam)
        {
            try
            {
                int typeID = (int)dynParam.typeID;
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Setting_TypeOfSGroupProductChangeSave(typeID, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Setting_TypeOfRunLevelSave(dynamic dynParam)
        {
            try
            {
                int typeID = (int)dynParam.typeID;
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_TypeOfRunLevelSave(typeID, contractID);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_Setting_GOVList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_GOVList(request, contractID);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<CATGroupOfVehicle> FLMContract_Setting_Level_GOVList(dynamic dynParam)
        {
            try
            {
                var result = default(List<CATGroupOfVehicle>);
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_Level_GOVList(contractID);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATContractGroupVehicle FLMContract_Setting_GOVGet(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOCATContractGroupVehicle);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_GOVGet(id);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Setting_GOVSave(dynamic dynParam)
        {
            try
            {
                DTOCATContractGroupVehicle item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContractGroupVehicle>(dynParam.item.ToString());

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_GOVSave(item);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Setting_GOVDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_GOVDeleteList(lst, contractID);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_Setting_GOVNotInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_GOVNotInList(request, contractID);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Setting_GOVNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_GOVNotInSave(lst, contractID);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_Setting_LevelList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_LevelList(request, contractID);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCATContractLevel FLMContract_Setting_LevelGet(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOCATContractLevel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      result = sv.FLMContract_Setting_LevelGet(id);
                  });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Setting_LevelSave(dynamic dynParam)
        {
            try
            {
                DTOCATContractLevel item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContractLevel>(dynParam.item.ToString());
                int contractID = (int)dynParam.contractID;
                int typeMode = (int)dynParam.typeMode;
                if (typeMode == 2)
                {
                    item.Ton = null;
                    item.CBM = null;
                    item.Quantity = null;
                }
                else if (typeMode == 3)
                {
                    item.GroupOfVehicleID = null;
                    item.DateStart = null;
                    item.DateEnd = null;
                }
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_LevelSave(item, contractID);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Setting_LevelDeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                  {
                      sv.FLMContract_Setting_LevelDeleteList(lst);
                  });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region CODefault

        [HttpPost]
        public DTOResult FLMContract_CODefault_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractID = (int)dynParam.contractID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_CODefault_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_CODefault_NotInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractID = (int)dynParam.contractID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_CODefault_NotInList(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_CODefault_NotIn_SaveList(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOCATPacking> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATPacking>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_CODefault_NotIn_SaveList(data, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_CODefault_Delete(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_CODefault_Delete(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_CODefault_Update(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                List<DTOCATContractCODefault> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATContractCODefault>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_CODefault_Update(data, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region Contract term(phụ lục hợp đồng)
        [HttpPost]
        public DTOResult FLMContract_ContractTerm_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractID = (int)dynParam.contractID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOContractTerm FLMContract_ContractTerm_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                int contractID = (int)dynParam.contractID;
                var result = default(DTOContractTerm);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_Get(id, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMContract_ContractTerm_Save(dynamic dynParam)
        {
            try
            {
                DTOContractTerm item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOContractTerm>(dynParam.item.ToString());
                int contractID = (int)dynParam.contractID;
                int result = -1;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_Save(item, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_ContractTerm_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMContract_ContractTerm_Price_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractTermID = (int)dynParam.contractTermID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_Price_List(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_ContractTerm_Open(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_Open(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_ContractTerm_Close(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_Close(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMTerm_Change_RemoveWarning(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMTerm_Change_RemoveWarning(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region KPI Term
        [HttpPost]
        public DTOResult FLMContract_ContractTerm_KPITime_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractTermID = (int)dynParam.contractTermID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_KPITime_List(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_ContractTerm_KPITime_SaveExpr(dynamic dynParam)
        {
            try
            {
                DTOContractTerm_KPITime item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOContractTerm_KPITime>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_KPITime_SaveExpr(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_ContractTerm_KPITime_NotInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractTermID = (int)dynParam.contractTermID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_KPITime_NotInList(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_ContractTerm_KPITime_SaveNotInList(dynamic dynParam)
        {
            try
            {
                List<DTOContractTerm_TypeOfKPI> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOContractTerm_TypeOfKPI>>(dynParam.lst.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_KPITime_SaveNotInList(lst, contractTermID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_ContractTerm_KPIQuantity_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractTermID = (int)dynParam.contractTermID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_KPIQuantity_List(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_ContractTerm_KPIQuantity_SaveExpr(dynamic dynParam)
        {
            try
            {
                DTOContractTerm_KPIQuantity item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOContractTerm_KPIQuantity>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_KPIQuantity_SaveExpr(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMContract_ContractTerm_KPIQuantity_NotInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int contractTermID = (int)dynParam.contractTermID;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_ContractTerm_KPIQuantity_NotInList(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_ContractTerm_KPIQuantity_SaveNotInList(dynamic dynParam)
        {
            try
            {
                List<DTOContractTerm_TypeOfKPI> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOContractTerm_TypeOfKPI>>(dynParam.lst.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_ContractTerm_KPIQuantity_SaveNotInList(lst, contractTermID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DateTime? FLMContract_KPITime_Check_Expression(dynamic dynParam)
        {
            try
            {
                KPITimeDate item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPITimeDate>(dynParam.item.ToString());
                List<KPITimeDate> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<KPITimeDate>>(dynParam.lst.ToString());
                DateTime? result = null;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPITime_Check_Expression(item, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool? FLMContract_KPITime_Check_Hit(dynamic dynParam)
        {
            try
            {
                KPITimeDate item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPITimeDate>(dynParam.item.ToString());
                List<KPITimeDate> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<KPITimeDate>>(dynParam.lst.ToString());
                bool? result = null;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPITime_Check_Hit(item, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<KPIQuantityDate> FLMContract_KPIQuantity_Get(dynamic dynParam)
        {
            try
            {
                List<KPIQuantityDate> result = new List<KPIQuantityDate>(); ;
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPIQuantity_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public KPIQuantityDate FLMContract_KPIQuantity_Check_Expression(dynamic dynParam)
        {
            try
            {
                KPIQuantityDate item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPIQuantityDate>(dynParam.item.ToString());
                List<KPIQuantityDate> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<KPIQuantityDate>>(dynParam.lst.ToString());
                KPIQuantityDate result = new KPIQuantityDate(); ;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPIQuantity_Check_Expression(item, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool? FLMContract_KPIQuantity_Check_Hit(dynamic dynParam)
        {
            try
            {
                KPIQuantityDate item = Newtonsoft.Json.JsonConvert.DeserializeObject<KPIQuantityDate>(dynParam.item.ToString());
                List<KPIQuantityDate> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<KPIQuantityDate>>(dynParam.lst.ToString());
                bool? result = null;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_KPIQuantity_Check_Hit(item, lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Common

        [HttpPost]
        public DTOResult FLMContract_Price_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int contractTermID = (int)dynParam.contractTermID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Price_List(request, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOPrice FLMContract_Price_Get(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(DTOPrice);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Price_Get(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMContract_Price_Save(dynamic dynParam)
        {
            try
            {
                DTOPrice item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPrice>(dynParam.item.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    item.ID = sv.FLMContract_Price_Save(item, contractTermID);
                });
                return item.ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_Price_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Price_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOFLMPrice_Data FLMContract_Price_Data(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                DTOFLMPrice_Data result = new DTOFLMPrice_Data();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_Price_Data(contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMContract_Price_Copy(dynamic dynParam)
        {
            try
            {
                List<DTOFLMPrice_ItemCopy> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMPrice_ItemCopy>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_Price_Copy(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region price_DI
        #region old
        [HttpPost]
        public List<DTOPriceGroupVehicle> FLMPrice_DI_GroupVehicle_GetData(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(List<DTOPriceGroupVehicle>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_GroupVehicle_GetData(priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_GroupVehicle_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceGroupVehicle> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceGroupVehicle>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_GroupVehicle_SaveList(data, priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public string FLMPrice_DI_GroupVehicle_ExcelExport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                DTOPriceGroupVehicleData data = new DTOPriceGroupVehicleData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     data = sv.FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);
                 });

                string result = "/" + FolderUpload.Export + "Bảng giá FTL_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(result)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(result));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(result));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                    int col = 1, row = 1, stt = 1;

                    #region header
                    if (isFrame)
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                        for (int i = 1; i <= col; i++)
                            ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        foreach (var level in data.ListGOV)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                            worksheet.Cells[row + 1, col].Value = "Giá từ";
                            col++; worksheet.Cells[row + 1, col].Value = "Đến giá";
                            ExcelHelper.CreateCellStyle(worksheet, row, col - 1, row, col, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                            ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 1, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        }
                        worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    else
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                        foreach (var level in data.ListGOV)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }

                    #endregion

                    #region data

                    if (isFrame)
                    {
                        col = 1;
                        row = 3;
                        foreach (var route in data.ListRoute)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListGOV)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.PriceMin;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                    worksheet.Cells[row, col + 1].Value = check.PriceMax;
                                    ExcelHelper.CreateFormat(worksheet, row, col + 1, ExcelHelper.FormatMoney);
                                }
                                col++;
                            }
                            row++;
                            stt++;
                        }
                    }
                    else
                    {
                        col = 1;
                        row = 2;
                        foreach (var route in data.ListRoute)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListGOV)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.Price;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    package.Save();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOPriceGroupVehicleImport> FLMPrice_DI_GroupVehicle_ExcelCheck(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                List<DTOPriceGroupVehicleImport> result = new List<DTOPriceGroupVehicleImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOPriceGroupVehicleData data = new DTOPriceGroupVehicleData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                     {
                         data = sv.FLMPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);
                     });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 4, row = 1;
                            string levelCode = "", Input = "";
                            Dictionary<int, int> dictColLevel = new Dictionary<int, int>();
                            Dictionary<int, string> dictColLevelCode = new Dictionary<int, string>();
                            if (worksheet != null)
                            {
                                if (isFrame)
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListGOV.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Loại xe [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 2;
                                    }

                                    row = 3;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceGroupVehicleImport obj = new DTOPriceGroupVehicleImport();
                                        obj.ListDetail = new List<DTOPriceGroupVehicleExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string priceMin = ExcelHelper.GetValue(worksheet, row, pCol);
                                                string priceMax = ExcelHelper.GetValue(worksheet, row, pCol + 1);


                                                if (!string.IsNullOrEmpty(priceMin) || !string.IsNullOrEmpty(priceMax))
                                                {
                                                    DTOPriceGroupVehicleExcel objDetail = new DTOPriceGroupVehicleExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.RouteID = obj.RouteID;
                                                    objDetail.GroupOfVehicleID = pLevel;
                                                    objDetail.Price = 0;
                                                    if (string.IsNullOrEmpty(priceMin)) objDetail.PriceMin = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMin = Convert.ToDecimal(priceMin);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    if (string.IsNullOrEmpty(priceMax)) objDetail.PriceMax = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMax = Convert.ToDecimal(priceMax);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                                else
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListGOV.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Loại xe [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 1;
                                    }

                                    row = 2;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceGroupVehicleImport obj = new DTOPriceGroupVehicleImport();
                                        obj.ListDetail = new List<DTOPriceGroupVehicleExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string price = ExcelHelper.GetValue(worksheet, row, pCol);


                                                if (!string.IsNullOrEmpty(price))
                                                {
                                                    DTOPriceGroupVehicleExcel objDetail = new DTOPriceGroupVehicleExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.RouteID = obj.RouteID;
                                                    objDetail.GroupOfVehicleID = pLevel;
                                                    objDetail.PriceMax = null;
                                                    objDetail.PriceMin = null;
                                                    try
                                                    {
                                                        objDetail.Price = Convert.ToDecimal(price);
                                                    }
                                                    catch
                                                    {
                                                        objDetail.IsSuccess = false;
                                                        lstError.Add("Giá của loại[" + pLevelCode + "] không chính xác");
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_GroupVehicle_ExcelImport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceGroupVehicleImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceGroupVehicleImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_GroupVehicle_ExcelImport(lst, priceID);
                 });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_GroupVehicle_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;

                var result = default(SYSExcel);

                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_GroupVehicle_ExcelInit(isFrame, priceID, contractTermID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMPrice_DI_GroupVehicle_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupVehicle_ExcelChange(isFrame, priceID, contractTermID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_GroupVehicle_ExcelOnImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupVehicle_ExcelOnImport(isFrame, priceID, contractTermID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMPrice_DI_GroupVehicle_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                var isFrame = (bool)dynParam.isFrame;
                var result = false;
                if (id > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupVehicle_ExcelApprove(isFrame, priceID, contractTermID, id);
                    });

                    //if (result != null && !string.IsNullOrEmpty(result.Data))
                    //{
                    //    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                    //}
                    //else
                    //{
                    //    result = new SYSExcel();
                    //    result.Worksheets = new List<Worksheet>();
                    //}
                    //result.Data = "";
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion
        #region new
        [HttpPost]
        public List<DTOPriceGVLevelGroupVehicle> FLMPrice_DI_PriceGVLevel_DetailData(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.id;
                List<DTOPriceGVLevelGroupVehicle> result = new List<DTOPriceGVLevelGroupVehicle>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_DI_PriceGVLevel_DetailData(priceID);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceGVLevel_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceGVLevelGroupVehicle> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceGVLevelGroupVehicle>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_PriceGVLevel_Save(lst, priceID);
               });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public string FLMPrice_DI_PriceGVLevel_ExcelExport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                DTOPriceGVLevelData data = new DTOPriceGVLevelData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   data = sv.FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);
               });

                string result = "/" + FolderUpload.Export + "Bảng giá FTL_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(result)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(result));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(result));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                    int col = 1, row = 1, stt = 1;

                    #region header
                    if (isFrame)
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                        for (int i = 1; i <= col; i++)
                            ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        foreach (var level in data.ListLevel)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                            worksheet.Cells[row + 1, col].Value = "Giá từ";
                            col++; worksheet.Cells[row + 1, col].Value = "Đến giá";
                            ExcelHelper.CreateCellStyle(worksheet, row, col - 2, row, col, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                            ExcelHelper.CreateCellStyle(worksheet, row + 2, col - 2, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        }
                        worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    else
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                        foreach (var level in data.ListLevel)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }

                    #endregion

                    #region data

                    if (isFrame)
                    {
                        col = 1;
                        row = 3;
                        foreach (var route in data.ListRoute)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListLevel)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.PriceMin;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                    worksheet.Cells[row, col + 1].Value = check.PriceMax;
                                    ExcelHelper.CreateFormat(worksheet, row, col + 1, ExcelHelper.FormatMoney);
                                }
                                col += 2;
                            }
                            row++;
                            stt++;
                        }
                    }
                    else
                    {
                        col = 1;
                        row = 2;
                        foreach (var route in data.ListRoute)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListLevel)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.Price;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    package.Save();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOPriceGVLevelImport> FLMPrice_DI_PriceGVLevel_ExcelCheck(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                List<DTOPriceGVLevelImport> result = new List<DTOPriceGVLevelImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOPriceGVLevelData data = new DTOPriceGVLevelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                   {
                       data = sv.FLMPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);
                   });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 4, row = 1;
                            string levelCode = "", Input = "";
                            Dictionary<int, int> dictColLevel = new Dictionary<int, int>();
                            Dictionary<int, string> dictColLevelCode = new Dictionary<int, string>();
                            if (worksheet != null)
                            {
                                if (isFrame)
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListLevel.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Bậc giá [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 2;
                                    }

                                    row = 3;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceGVLevelImport obj = new DTOPriceGVLevelImport();
                                        obj.ListDetail = new List<DTOPriceGVLevelGroupVehicleExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string priceMin = ExcelHelper.GetValue(worksheet, row, pCol);
                                                string priceMax = ExcelHelper.GetValue(worksheet, row, pCol + 1);


                                                if (!string.IsNullOrEmpty(priceMin) || !string.IsNullOrEmpty(priceMax))
                                                {
                                                    DTOPriceGVLevelGroupVehicleExcel objDetail = new DTOPriceGVLevelGroupVehicleExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.RouteID = obj.RouteID;
                                                    objDetail.LevelID = pLevel;
                                                    objDetail.Price = 0;
                                                    if (string.IsNullOrEmpty(priceMin)) objDetail.PriceMin = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMin = Convert.ToDecimal(priceMin);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của bậc [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    if (string.IsNullOrEmpty(priceMax)) objDetail.PriceMax = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMax = Convert.ToDecimal(priceMax);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của bậc [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                                else
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListLevel.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Bậc giá [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 1;
                                    }

                                    row = 2;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceGVLevelImport obj = new DTOPriceGVLevelImport();
                                        obj.ListDetail = new List<DTOPriceGVLevelGroupVehicleExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string price = ExcelHelper.GetValue(worksheet, row, pCol);


                                                if (!string.IsNullOrEmpty(price))
                                                {
                                                    DTOPriceGVLevelGroupVehicleExcel objDetail = new DTOPriceGVLevelGroupVehicleExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.RouteID = obj.RouteID;
                                                    objDetail.LevelID = pLevel;
                                                    objDetail.PriceMax = null;
                                                    objDetail.PriceMin = null;
                                                    try
                                                    {
                                                        objDetail.Price = Convert.ToDecimal(price);
                                                    }
                                                    catch
                                                    {
                                                        objDetail.IsSuccess = false;
                                                        lstError.Add("Giá của bậc[" + pLevelCode + "] không chính xác");
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceGVLevel_ExcelImport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceGVLevelImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceGVLevelImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_PriceGVLevel_ExcelImport(lst, priceID);
               });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_PriceGVLevel_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceGVLevel_ExcelInit(isFrame, priceID, contractTermID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMPrice_DI_PriceGVLevel_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceGVLevel_ExcelChange(isFrame, priceID, contractTermID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_PriceGVLevel_ExcelOnImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceGVLevel_ExcelOnImport(isFrame, priceID, contractTermID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMPrice_DI_PriceGVLevel_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                var isFrame = (bool)dynParam.isFrame;
                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceGVLevel_ExcelApprove(isFrame, priceID, contractTermID, id);
                    });

                    //if (result != null && !string.IsNullOrEmpty(result.Data))
                    //{
                    //    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                    //}
                    //else
                    //{
                    //    result = new SYSExcel();
                    //    result.Worksheets = new List<Worksheet>();
                    //}
                    //result.Data = "";
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        //[HttpPost]
        //public DTOResult FLMPrice_DI_GroupVehicle_GOVList(dynamic dynParam)
        //{
        //    try
        //    {
        //        int priceID = (int)dynParam.priceID;
        //        string request = dynParam.request.ToString();
        //        var result = default(DTOResult);
        //         ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            result = sv.FLMPrice_DI_GroupVehicle_GOVList(request, priceID);
        //        });
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        //[HttpPost]
        //public void FLMPrice_DI_GroupVehicle_GOVDelete(dynamic dynParam)
        //{
        //    try
        //    {
        //        List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
        //        int priceID = (int)dynParam.priceID;
        //         ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            sv.FLMPrice_DI_GroupVehicle_GOVDelete(lst, priceID);
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        //[HttpPost]
        //public DTOResult FLMPrice_DI_GroupVehicle_GOVNotInList(dynamic dynParam)
        //{
        //    try
        //    {
        //        int priceID = (int)dynParam.priceID;
        //        string request = dynParam.request.ToString();
        //        var result = default(DTOResult);
        //         ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            result = sv.FLMPrice_DI_GroupVehicle_GOVNotInList(request, priceID);
        //        });
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        //[HttpPost]
        //public void FLMPrice_DI_GroupVehicle_GOVNotInSave(dynamic dynParam)
        //{
        //    try
        //    {
        //        int priceID = (int)dynParam.priceID;
        //        List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
        //         ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            sv.FLMPrice_DI_GroupVehicle_GOVNotInSave(lst, priceID);
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}
        #endregion
        #endregion

        #endregion

        #region FLMContract Price CO
        [HttpPost]
        public DTOFLMPriceCO_Data FLMContract_PriceCO_Data(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                var result = default(DTOFLMPriceCO_Data);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_PriceCO_Data(contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceCOContainerData FLMPrice_CO_COContainer_Data(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(DTOPriceCOContainerData);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_COContainer_Data(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_COContainer_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceCOContainer> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceCOContainer>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_COContainer_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMPrice_CO_COContainer_ContainerList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = (string)dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_COContainer_ContainerList(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_CO_COContainer_ContainerNotInSave(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_COContainer_ContainerNotInSave(lst, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMPrice_CO_COContainer_ContainerNotInList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = (string)dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_COContainer_ContainerNotInList(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_CO_COContainer_ContainerDelete(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_COContainer_ContainerDelete(lst, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMPrice_CO_GroupContainer_ExcelExport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                DTOPriceCOContainerExcelData data = new DTOPriceCOContainerExcelData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);
                });

                string result = "/" + FolderUpload.Export + "Bảng giá FCL_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(result)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(result));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(result));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                    int col = 1, row = 1, stt = 1;

                    #region header
                    if (isFrame)
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 50;
                        for (int i = 1; i <= col; i++)
                            ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        foreach (var level in data.ListPacking)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                            worksheet.Cells[row + 1, col].Value = "Giá từ";
                            col++; worksheet.Cells[row + 1, col].Value = "Đến giá";
                            ExcelHelper.CreateCellStyle(worksheet, row, col - 1, row, col, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                            ExcelHelper.CreateCellStyle(worksheet, row + 1, col - 1, row + 1, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        }
                        worksheet.Cells[row, 1, row + 1, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row + 1, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }
                    else
                    {
                        worksheet.Cells[row, col].Value = "STT";
                        col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                        col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 50;
                        foreach (var level in data.ListPacking)
                        {
                            col++; worksheet.Cells[row, col].Value = level.Code;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row, 1, row, col, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    }

                    #endregion

                    #region data

                    if (isFrame)
                    {
                        col = 1;
                        row = 3;
                        foreach (var route in data.ListRouting)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListPacking)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.PriceMin;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                    worksheet.Cells[row, col + 1].Value = check.PriceMax;
                                    ExcelHelper.CreateFormat(worksheet, row, col + 1, ExcelHelper.FormatMoney);
                                }
                                col++;
                            }
                            row++;
                            stt++;
                        }
                    }
                    else
                    {
                        col = 1;
                        row = 2;
                        foreach (var route in data.ListRouting)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = route.Code;
                            col++; worksheet.Cells[row, col].Value = route.RoutingName;
                            foreach (var level in data.ListPacking)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                if (check != null)
                                {
                                    worksheet.Cells[row, col].Value = check.Price;
                                    ExcelHelper.CreateFormat(worksheet, row, col, ExcelHelper.FormatMoney);
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    package.Save();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOPriceCOContainerImport> FLMPrice_CO_GroupContainer_ExcelCheck(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                bool isFrame = (bool)dynParam.isFrame;
                List<DTOPriceCOContainerImport> result = new List<DTOPriceCOContainerImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOPriceCOContainerExcelData data = new DTOPriceCOContainerExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMPrice_CO_COContainer_ExcelData(priceID, contractTermID);
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 4, row = 1;
                            string levelCode = "", Input = "";
                            Dictionary<int, int> dictColLevel = new Dictionary<int, int>();
                            Dictionary<int, string> dictColLevelCode = new Dictionary<int, string>();
                            if (worksheet != null)
                            {
                                if (isFrame)
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListPacking.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Container [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 2;
                                    }

                                    row = 3;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceCOContainerImport obj = new DTOPriceCOContainerImport();
                                        obj.ListDetail = new List<DTOPriceCOContainerDetail>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRouting.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string priceMin = ExcelHelper.GetValue(worksheet, row, pCol);
                                                string priceMax = ExcelHelper.GetValue(worksheet, row, pCol + 1);


                                                if (!string.IsNullOrEmpty(priceMin) || !string.IsNullOrEmpty(priceMax))
                                                {
                                                    DTOPriceCOContainerDetail objDetail = new DTOPriceCOContainerDetail();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.ContractRoutingID = obj.RouteID;
                                                    objDetail.PackingID = pLevel;
                                                    objDetail.Price = 0;
                                                    if (string.IsNullOrEmpty(priceMin)) objDetail.PriceMin = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMin = Convert.ToDecimal(priceMin);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    if (string.IsNullOrEmpty(priceMax)) objDetail.PriceMax = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMax = Convert.ToDecimal(priceMax);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                                else
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListPacking.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Container [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 1;
                                    }

                                    row = 2;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceCOContainerImport obj = new DTOPriceCOContainerImport();
                                        obj.ListDetail = new List<DTOPriceCOContainerDetail>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRouting.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string price = ExcelHelper.GetValue(worksheet, row, pCol);


                                                if (!string.IsNullOrEmpty(price))
                                                {
                                                    DTOPriceCOContainerDetail objDetail = new DTOPriceCOContainerDetail();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.ContractRoutingID = obj.RouteID;
                                                    objDetail.PackingID = pLevel;
                                                    objDetail.PriceMax = null;
                                                    objDetail.PriceMin = null;
                                                    try
                                                    {
                                                        objDetail.Price = Convert.ToDecimal(price);
                                                    }
                                                    catch
                                                    {
                                                        objDetail.IsSuccess = false;
                                                        lstError.Add("Giá của loại[" + pLevelCode + "] không chính xác");
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_CO_GroupContainer_ExcelImport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceCOContainerImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceCOContainerImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_COContainer_ExcelImport(lst, priceID);
                });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_CO_GroupContainer_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;

                var result = default(SYSExcel);

                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_GroupContainer_ExcelInit(isFrame, priceID, contractTermID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMPrice_CO_GroupContainer_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_CO_GroupContainer_ExcelChange(isFrame, priceID, contractTermID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_CO_GroupContainer_ExcelOnImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var contractTermID = (int)dynParam.contractTermID;
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_CO_GroupContainer_ExcelOnImport(isFrame, priceID, contractTermID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMPrice_CO_GroupContainer_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                var isFrame = (bool)dynParam.isFrame;
                var result = false;
                if (id > 0)
                {
                     ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_CO_GroupContainer_ExcelApprove(isFrame, priceID, contractTermID, id);
                    });

                    //if (result != null && !string.IsNullOrEmpty(result.Data))
                    //{
                    //    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                    //}
                    //else
                    //{
                    //    result = new SYSExcel();
                    //    result.Worksheets = new List<Worksheet>();
                    //}
                    //result.Data = "";
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region PriceServiceCO

        [HttpPost]
        public DTOResult FLMPrice_CO_Service_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_Service_List(request, priceID);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_CO_ServicePacking_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_ServicePacking_List(request, priceID);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATPriceCOService FLMPrice_CO_Service_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = new DTOCATPriceCOService();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_Service_Get(id);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATPriceCOService FLMPrice_CO_ServicePacking_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = new DTOCATPriceCOService();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_ServicePacking_Get(id);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMPrice_CO_Service_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                DTOCATPriceCOService item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATPriceCOService>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   item.ID = sv.FLMPrice_CO_Service_Save(item, priceID);
               });
                return item.ID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_CO_Service_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_CO_Service_Delete(id);
               });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_CO_CATService_List()
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_CATService_List();
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_CO_CATServicePacking_List()
        {
            try
            {
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_CO_CATServicePacking_List();
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_CO_CATCODefault_List(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                var result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_CATCODefault_List(contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region price Ex new

        #region info
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIEx FLMPrice_DI_Ex_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOPriceDIEx);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMPrice_DI_Ex_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int result = 0;
                DTOPriceDIEx item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIEx>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Save(item, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_Ex_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region group location
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_GroupLocation_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_GroupLocation_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_GroupLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_GroupLocation_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_GroupLocation_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_GroupLocation_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_GroupLocation_GroupNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_GroupLocation_GroupNotInList(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region GOP
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_GroupProduct_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_GroupProduct_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_GroupProduct_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_GroupProduct_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_GroupProduct_Save(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                DTOPriceDIExGroupProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIExGroupProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_GroupProduct_Save(item, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIExGroupProduct FLMPrice_DI_Ex_GroupProduct_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                int cusID = (int)dynParam.cusID;
                DTOPriceDIExGroupProduct result = new DTOPriceDIExGroupProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_GroupProduct_Get(id, cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_GroupProduct_GOPList(dynamic dynParam)
        {
            try
            {
                int cusID = (int)dynParam.cusID;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_GroupProduct_GOPList(cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  location
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Location_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Location_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Location_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Location_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIExLocation FLMPrice_DI_Ex_Location_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOPriceDIExLocation result = new DTOPriceDIExLocation();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Location_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Location_Save(dynamic dynParam)
        {
            try
            {
                DTOPriceDIExLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIExLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Location_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Location_LocationNotInSaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Location_LocationNotInSaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Location_LocationNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int customerID = (int)dynParam.customerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Location_LocationNotInList(request, priceExID, customerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  route
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Route_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Route_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Route_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Route_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Route_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Route_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Route_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Route_RouteNotInList(request, priceExID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  parnet route
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_ParentRoute_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_ParentRoute_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_ParentRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_ParentRoute_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_ParentRoute_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_ParentRoute_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_ParentRoute_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_ParentRoute_RouteNotInList(request, priceExID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  partner
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Partner_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Partner_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Partner_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Partner_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Partner_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Partner_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Partner_PartnerNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Partner_PartnerNotInList(request, priceExID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  province
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Province_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Province_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Province_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Province_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_Ex_Province_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Ex_Province_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_Ex_Province_NotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_Ex_Province_NotInList(request, priceExID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region price Ex CO new

        #region info
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceCOEx FLMPrice_CO_Ex_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                var result = default(DTOPriceCOEx);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMPrice_CO_Ex_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int result = 0;
                DTOPriceCOEx item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceCOEx>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Save(item, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_CO_Ex_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #region  location
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Location_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Location_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Location_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Location_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceCOExLocation FLMPrice_CO_Ex_Location_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOPriceCOExLocation result = new DTOPriceCOExLocation();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Location_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Location_Save(dynamic dynParam)
        {
            try
            {
                DTOPriceCOExLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceCOExLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Location_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Location_LocationNotInSaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Location_LocationNotInSaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Location_LocationNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int customerID = (int)dynParam.customerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Location_LocationNotInList(request, priceExID, customerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  route
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Route_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Route_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Route_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Route_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Route_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Route_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Route_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Route_RouteNotInList(request, priceExID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  parnet route
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_ParentRoute_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_ParentRoute_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_ParentRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_ParentRoute_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_ParentRoute_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_ParentRoute_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_ParentRoute_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_ParentRoute_RouteNotInList(request, priceExID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  partner
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Partner_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Partner_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Partner_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Partner_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_CO_Ex_Partner_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_CO_Ex_Partner_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_CO_Ex_Partner_PartnerNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_CO_Ex_Partner_PartnerNotInList(request, priceExID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Price level
        [HttpPost]
        public List<DTOPriceDILevelGroupProduct> FLMPrice_DI_PriceLevel_DetailData(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceDILevelGroupProduct> result = new List<DTOPriceDILevelGroupProduct>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceLevel_DetailData(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceLevel_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceDILevelGroupProduct> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDILevelGroupProduct>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceLevel_Save(lst, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMPrice_DI_PriceLevel_ExcelExport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                DTOPriceDILevelData data = new DTOPriceDILevelData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    data = sv.FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                });

                string result = "/" + FolderUpload.Export + "Bảng giá bậc thang_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";
                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(result)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(result));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(result));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                    int col = 1, row = 1, stt = 1;

                    #region header

                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 20;
                    for (int i = 1; i <= col; i++)
                        ExcelHelper.CreateCellStyle(worksheet, row, i, row + 1, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    int colProduct = 0;
                    foreach (var level in data.ListLevel)
                    {
                        col++; worksheet.Cells[row, col].Value = level.Code;
                        colProduct = col;
                        foreach (var pro in data.ListGroupProduct)
                        {
                            worksheet.Cells[row + 1, colProduct].Value = pro.Code;
                            colProduct++;
                        }
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, colProduct - 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, colProduct - 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col = col + data.ListGroupProduct.Count - 1;
                    }

                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    foreach (var route in data.ListRoute)
                    {
                        col = 1;
                        worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = route.Code;
                        col++; worksheet.Cells[row, col].Value = route.RoutingName;
                        foreach (var level in data.ListLevel)
                        {
                            foreach (var pro in data.ListGroupProduct)
                            {
                                col++;
                                var check = data.ListDetail.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID && c.GroupProductID == pro.ID).FirstOrDefault();
                                if (check != null)
                                    worksheet.Cells[row, col].Value = check.Price;
                            }
                        }
                        row++;
                        stt++;
                    }
                    #endregion

                    package.Save();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOPriceDILevelImport> FLMPrice_DI_PriceLevel_ExcelCheck(dynamic dynParam)
        {
            try
            {
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int priceID = (int)dynParam.priceID;
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceDILevelImport> result = new List<DTOPriceDILevelImport>();

                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOPriceDILevelData data = new DTOPriceDILevelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    });

                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);

                            int col = 4, row = 1;
                            string levelCode = "", proCode = "", Input = "";
                            Dictionary<int, int> dictColLevel = new Dictionary<int, int>();
                            Dictionary<int, string> dictColLevelCode = new Dictionary<int, string>();
                            Dictionary<int, int> dictColPro = new Dictionary<int, int>();
                            Dictionary<int, string> dictColProCode = new Dictionary<int, string>();
                            if (worksheet != null)
                            {
                                int preLevelID = 0;
                                string preLevelCode = "";
                                while (col <= worksheet.Dimension.End.Column)
                                {
                                    levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                    if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                    if (!string.IsNullOrEmpty(levelCode))
                                    {
                                        var checkLeveCode = data.ListLevel.FirstOrDefault(c => c.Code == levelCode);
                                        if (checkLeveCode == null) throw new Exception("Bậc giá [" + levelCode + "] không tồn tại");
                                        else { preLevelID = checkLeveCode.ID; preLevelCode = checkLeveCode.Code; }
                                    }

                                    proCode = ExcelHelper.GetValue(worksheet, row + 1, col);
                                    var checkProCode = data.ListGroupProduct.FirstOrDefault(c => c.Code == proCode);
                                    if (checkProCode == null) throw new Exception("Mã sản phẩm [" + proCode + "] không tồn tại");
                                    else
                                    {
                                        dictColLevel.Add(col, preLevelID);
                                        dictColLevelCode.Add(col, preLevelCode);
                                        dictColPro.Add(col, checkProCode.ID);
                                        dictColProCode.Add(col, checkProCode.Code);
                                    }
                                    col++;
                                }

                                row = 3;
                                while (row <= worksheet.Dimension.End.Row)
                                {
                                    List<string> lstError = new List<string>();
                                    DTOPriceDILevelImport obj = new DTOPriceDILevelImport();
                                    obj.ListDetail = new List<DTOPriceDILevelGroupProductExcel>();
                                    obj.ExcelRow = row;
                                    obj.ExcelSuccess = true;
                                    obj.ExcelError = string.Empty;
                                    col = 2;

                                    Input = ExcelHelper.GetValue(worksheet, row, col);
                                    var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                    if (checkRoute == null)
                                    {
                                        lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                        obj.ExcelSuccess = false;
                                    }
                                    else
                                    {
                                        obj.RouteID = checkRoute.ID;
                                        obj.RouteCode = checkRoute.Code;
                                        obj.RouteName = checkRoute.RoutingName;
                                    }

                                    if (dictColPro.Keys.Count > 0)
                                    {
                                        foreach (var word in dictColPro)
                                        {
                                            int pCol = word.Key;
                                            int proID = word.Value;
                                            int pLevel = 0;
                                            string pProCode = "", pLevelCode = "";

                                            dictColLevel.TryGetValue(pCol, out  pLevel);
                                            dictColLevelCode.TryGetValue(pCol, out  pLevelCode);
                                            dictColProCode.TryGetValue(pCol, out  pProCode);

                                            Input = ExcelHelper.GetValue(worksheet, row, pCol);

                                            if (!string.IsNullOrEmpty(Input))
                                            {
                                                DTOPriceDILevelGroupProductExcel objDetail = new DTOPriceDILevelGroupProductExcel();
                                                objDetail.IsSuccess = true;
                                                objDetail.RouteID = obj.RouteID;
                                                objDetail.LevelID = pLevel;
                                                objDetail.GroupProductID = proID;
                                                try
                                                {
                                                    objDetail.Price = Convert.ToDecimal(Input);
                                                }
                                                catch
                                                {
                                                    objDetail.IsSuccess = false;
                                                    lstError.Add("Giá của bậc [" + pLevelCode + "]-sản phẩm [" + pProCode + "] không chính xác");
                                                }
                                                obj.ListDetail.Add(objDetail);
                                            }
                                        }
                                    }

                                    if (lstError.Count > 0)
                                        obj.ExcelError = string.Join(" ,", lstError);
                                    result.Add(obj);
                                    row++;
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceLevel_ExcelImport(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceDILevelImport> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDILevelImport>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceLevel_ExcelImport(lst, priceID);
                });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_PriceLevel_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceLevel_ExcelInit(priceID, contractTermID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMPrice_DI_PriceLevel_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceLevel_ExcelChange(priceID, contractTermID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_PriceLevel_OnExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceLevel_OnExcelImport(priceID, contractTermID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMPrice_DI_PriceLevel_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var priceID = (int)dynParam.priceID;
                var contractTermID = (int)dynParam.contractTermID;
                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_PriceLevel_ExcelApprove(priceID, contractTermID, id);
                    });

                    //if (result != null && !string.IsNullOrEmpty(result.Data))
                    //{
                    //    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                    //}
                    //else
                    //{
                    //    result = new SYSExcel();
                    //    result.Worksheets = new List<Worksheet>();
                    //}
                    //result.Data = "";
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region Location
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadLocation_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadLocation_List(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_LoadLocation_LocationNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadLocation_LocationNotIn_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadLocation_LocationNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadLocation_LocationNotIn_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadLocation_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadLocation_SaveList(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_LoadLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadLocation_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMPrice_DI_LoadLocation_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadLocation_Export(contractTermID, priceID);
                    data = sv.FLMContract_Price_ExcelData(contractTermID);
                });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_LoadLocation_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 30;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 5; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.LocationCode;
                            col++; worksheet.Cells[row, col].Value = itemData.LocationName;
                            col++; worksheet.Cells[row, col].Value = itemData.Address;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region location
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách địa điểm");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet1.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã địa điểm"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Địa điểm"; worksheet1.Column(col).Width = 30;
                    col++; worksheet1.Cells[row, col].Value = "Địa chỉ"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 4, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListLocation != null && data.ListLocation.Count > 0)
                    {
                        foreach (var itemData in data.ListLocation)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.CATLocationCode;
                            col++; worksheet1.Cells[row, col].Value = itemData.LocationName;
                            col++; worksheet1.Cells[row, col].Value = itemData.Address;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_LoadLocation_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMContract_Price_ExcelData(contractTermID);
                    });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 5; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã địa điểm.";
                                    }
                                    else
                                    {
                                        obj.LocationCode = str;
                                        var objLocation = data.ListLocation.FirstOrDefault(c => c.CATLocationCode.Trim().ToLower() == str.Trim().ToLower());
                                        if (objLocation != null)
                                        {
                                            obj.LocationID = objLocation.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.LocationID == obj.LocationID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng địa điểm.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Địa điểm không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.LocationName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            if (!string.IsNullOrEmpty(str))
                                            {
                                                try
                                                {
                                                    o.Price = Convert.ToDecimal(str);
                                                }
                                                catch
                                                {
                                                    obj.ExcelSuccess = false;
                                                    strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadLocation_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadLocation_Import(lst, priceID);
                });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region route
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadRoute_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_DI_LoadRoute_List(priceID);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_LoadRoute_RouteNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_DI_LoadRoute_RouteNotIn_List(request, priceID);
               });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadRoute_RouteNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_LoadRoute_RouteNotIn_SaveList(data, priceID);
               });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadRoute_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_LoadRoute_SaveList(data);
               });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_LoadRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_LoadRoute_DeleteList(priceID);
               });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMPrice_DI_LoadRoute_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   result = sv.FLMPrice_DI_LoadRoute_Export(contractTermID, priceID);
                   data = sv.FLMContract_Price_ExcelData(contractTermID);
               });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_LoadRoute_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 4; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.RoutingCode;
                            col++; worksheet.Cells[row, col].Value = itemData.RoutingName;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region route
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách cung đường");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã cung đường"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Cung đường"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListRouting != null && data.ListRouting.Count > 0)
                    {
                        foreach (var itemData in data.ListRouting)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.CATCode;
                            col++; worksheet1.Cells[row, col].Value = itemData.RoutingName;
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_LoadRoute_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                   {
                       data = sv.FLMContract_Price_ExcelData(contractTermID);
                   });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 4; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã cung đường.";
                                    }
                                    else
                                    {
                                        obj.RoutingCode = str;
                                        var objRoute = data.ListRouting.FirstOrDefault(c => c.CATCode.Trim().ToLower() == str.Trim().ToLower());
                                        if (objRoute != null)
                                        {
                                            obj.RoutingID = objRoute.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.RoutingID == obj.RoutingID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng cung đường.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Cung đường không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RoutingName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            if (!string.IsNullOrEmpty(str))
                                            {
                                                try
                                                {
                                                    o.Price = Convert.ToDecimal(str);
                                                }
                                                catch
                                                {
                                                    obj.ExcelSuccess = false;
                                                    strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadRoute_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
               {
                   sv.FLMPrice_DI_LoadRoute_Import(lst, priceID);
               });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region TypeOfpartner
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_LoadPartner_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadPartner_List(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_LoadPartner_PartnerNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadPartner_PartnerNotIn_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadPartner_PartnerNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_PartnerNotIn_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadPartner_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_SaveList(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_LoadPartner_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMPrice_DI_LoadPartner_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadPartner_Export(contractTermID, priceID);
                    data = sv.FLMContract_Price_ExcelData(contractTermID);
                });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_LoadPartner_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã loại địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại địa điểm"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 4; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.GroupOfLocationCode;
                            col++; worksheet.Cells[row, col].Value = itemData.GroupOfLocationName;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #region partner
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách loại địa điểm");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet1.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã loại địa điểm"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Tên loại địa điểm"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListGroupOfLocation != null && data.ListGroupOfLocation.Count > 0)
                    {
                        foreach (var itemData in data.ListGroupOfLocation)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.Code;
                            col++; worksheet1.Cells[row, col].Value = itemData.GroupName;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_LoadPartner_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMContract_Price_ExcelData(contractTermID);
                    });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 4; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã loại điểm.";
                                    }
                                    else
                                    {
                                        obj.GroupOfLocationCode = str;
                                        var objGOL = data.ListGroupOfLocation.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGOL != null)
                                        {
                                            obj.GroupOfLocationID = objGOL.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.GroupOfLocationID == obj.GroupOfLocationID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng loại điểm.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Loại điểm không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.GroupOfLocationName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            if (!string.IsNullOrEmpty(str))
                                            {
                                                try
                                                {
                                                    o.Price = Convert.ToDecimal(str);
                                                }
                                                catch
                                                {
                                                    obj.ExcelSuccess = false;
                                                    strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadPartner_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_Import(lst, priceID);
                });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region partner
        [HttpPost]
        public List<DTOPriceDILoadPartner> FLMPrice_DI_LoadPartner_Partner_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceDILoadPartner>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadPartner_Partner_List(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_Partner_PartnerNotIn_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_LoadPartner_Partner_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceDILoadPartner> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDILoadPartner>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_Partner_SaveList(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_LoadPartner_Partner_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_LoadPartner_Partner_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region moq new

        #region info
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCATPriceDIMOQ FLMPrice_DI_PriceMOQ_Get(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(DTOCATPriceDIMOQ);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Get(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMPrice_DI_PriceMOQ_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int result = 0;
                DTOCATPriceDIMOQ item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATPriceDIMOQ>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Save(item, priceID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region group location
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_GroupLocation_List(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_GroupLocation_List(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_GroupLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_GroupLocation_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_GroupLocation_SaveList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_GroupLocation_SaveList(lst, priceMOQID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_GroupLocation_GroupNotInList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_GroupLocation_GroupNotInList(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region GOP
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_GroupProduct_List(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_GroupProduct_List(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_GroupProduct_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_GroupProduct_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_GroupProduct_Save(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                DTOPriceDIMOQGroupProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQGroupProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_GroupProduct_Save(item, priceMOQID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIMOQGroupProduct FLMPrice_DI_PriceMOQ_GroupProduct_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                int cusID = (int)dynParam.cusID;
                DTOPriceDIMOQGroupProduct result = new DTOPriceDIMOQGroupProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_GroupProduct_Get(id, cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_GroupProduct_GOPList(dynamic dynParam)
        {
            try
            {
                int cusID = (int)dynParam.cusID;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_GroupProduct_GOPList(cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  location
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Location_List(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Location_List(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Location_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Location_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIMOQLocation FLMPrice_DI_PriceMOQ_Location_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOPriceDIMOQLocation result = new DTOPriceDIMOQLocation();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Location_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Location_Save(dynamic dynParam)
        {
            try
            {
                DTOPriceDIMOQLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Location_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Location_LocationNotInSaveList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Location_LocationNotInSaveList(lst, priceMOQID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Location_LocationNotInList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                int customerID = (int)dynParam.customerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Location_LocationNotInList(request, priceMOQID, customerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  route
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Route_List(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Route_List(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Route_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Route_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Route_SaveList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Route_SaveList(lst, priceMOQID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Route_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Route_RouteNotInList(request, priceMOQID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  parnet route
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_ParentRoute_List(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_ParentRoute_List(request, priceMOQID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_ParentRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_ParentRoute_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_ParentRoute_SaveList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_ParentRoute_SaveList(lst, priceMOQID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_ParentRoute_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int priceMOQID = (int)dynParam.priceMOQID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_ParentRoute_RouteNotInList(request, priceMOQID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  partner
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Partner_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Partner_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Partner_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Partner_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Partner_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Partner_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Partner_PartnerNotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Partner_PartnerNotInList(request, priceExID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  province
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Province_List(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Province_List(request, priceExID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Province_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Province_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQ_Province_SaveList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQ_Province_SaveList(lst, priceExID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQ_Province_NotInList(dynamic dynParam)
        {
            try
            {
                int priceExID = (int)dynParam.priceExID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQ_Province_NotInList(request, priceExID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region unload new

        #region common
        [HttpPost]
        public void FLMPrice_DI_UnLoad_Delete(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoad_Delete(ID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_UnLoad_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoad_DeleteList(data);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Location
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadLocation_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadLocation_List(priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_UnLoadLocation_LocationNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadLocation_LocationNotIn_List(request, priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadLocation_LocationNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadLocation_LocationNotIn_SaveList(data, priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadLocation_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadLocation_SaveList(data);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_UnLoadLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadLocation_DeleteList(priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string FLMPrice_DI_UnLoadLocation_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadLocation_Export(contractTermID, priceID);
                     data = sv.FLMContract_Price_ExcelData(contractTermID);
                 });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_UnLoadLocation_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa điểm"; worksheet.Column(col).Width = 30;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 5; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.LocationCode;
                            col++; worksheet.Cells[row, col].Value = itemData.LocationName;
                            col++; worksheet.Cells[row, col].Value = itemData.Address;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region location
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách địa điểm");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet1.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã địa điểm"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Địa điểm"; worksheet1.Column(col).Width = 30;
                    col++; worksheet1.Cells[row, col].Value = "Địa chỉ"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 4, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListLocation != null && data.ListLocation.Count > 0)
                    {
                        foreach (var itemData in data.ListLocation)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.CATLocationCode;
                            col++; worksheet1.Cells[row, col].Value = itemData.LocationName;
                            col++; worksheet1.Cells[row, col].Value = itemData.Address;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_UnLoadLocation_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                     {
                         data = sv.FLMContract_Price_ExcelData(contractTermID);
                     });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 5; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã địa điểm.";
                                    }
                                    else
                                    {
                                        obj.LocationCode = str;
                                        var objLocation = data.ListLocation.FirstOrDefault(c => c.CATLocationCode.Trim().ToLower() == str.Trim().ToLower());
                                        if (objLocation != null)
                                        {
                                            obj.LocationID = objLocation.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.LocationID == obj.LocationID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng địa điểm.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Địa điểm không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.LocationName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            if (!string.IsNullOrEmpty(str))
                                            {
                                                try
                                                {
                                                    o.Price = Convert.ToDecimal(str);
                                                }
                                                catch
                                                {
                                                    obj.ExcelSuccess = false;
                                                    strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadLocation_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadLocation_Import(lst, priceID);
                 });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region route
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadRoute_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadRoute_List(priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_UnLoadRoute_RouteNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadRoute_RouteNotIn_List(request, priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadRoute_RouteNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadRoute_RouteNotIn_SaveList(data, priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadRoute_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadRoute_SaveList(data);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_UnLoadRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadRoute_DeleteList(priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMPrice_DI_UnLoadRoute_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadRoute_Export(contractTermID, priceID);
                     data = sv.FLMContract_Price_ExcelData(contractTermID);
                 });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_UnLoadRoute_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Cung đường"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 4; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.RoutingCode;
                            col++; worksheet.Cells[row, col].Value = itemData.RoutingName;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region route
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách cung đường");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã cung đường"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Cung đường"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListRouting != null && data.ListRouting.Count > 0)
                    {
                        foreach (var itemData in data.ListRouting)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.CATCode;
                            col++; worksheet1.Cells[row, col].Value = itemData.RoutingName;
                            row++;
                            stt++;
                        }
                    }
                    #endregion
                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_UnLoadRoute_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                     {
                         data = sv.FLMContract_Price_ExcelData(contractTermID);
                     });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 4; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã cung đường.";
                                    }
                                    else
                                    {
                                        obj.RoutingCode = str;
                                        var objRoute = data.ListRouting.FirstOrDefault(c => c.CATCode.Trim().ToLower() == str.Trim().ToLower());
                                        if (objRoute != null)
                                        {
                                            obj.RoutingID = objRoute.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.RoutingID == obj.RoutingID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng cung đường.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Cung đường không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.RoutingName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            if (!string.IsNullOrEmpty(str))
                                            {
                                                try
                                                {
                                                    o.Price = Convert.ToDecimal(str);
                                                }
                                                catch
                                                {
                                                    obj.ExcelSuccess = false;
                                                    strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadRoute_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadRoute_Import(lst, priceID);
                 });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region TypeOfpartner
        [HttpPost]
        public List<DTOPriceTruckDILoad> FLMPrice_DI_UnLoadPartner_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceTruckDILoad>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadPartner_List(priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_UnLoadPartner_PartnerNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadPartner_PartnerNotIn_List(request, priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_PartnerNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadPartner_PartnerNotIn_SaveList(data, priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceTruckDILoad> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadPartner_SaveList(data);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadPartner_DeleteList(priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public string FLMPrice_DI_UnLoadPartner_ExcelExport(dynamic dynParam)
        {
            try
            {
                int contractTermID = (int)dynParam.contractTermID;
                int priceID = (int)dynParam.priceID;
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_UnLoadPartner_Export(contractTermID, priceID);
                     data = sv.FLMContract_Price_ExcelData(contractTermID);
                 });

                string file = "/" + FolderUpload.Export + "ExportFLMPrice_UnloadPartner_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo exportfile = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage package = new ExcelPackage(exportfile))
                {
                    // Sheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");

                    int col = 1, row = 1, stt = 1;
                    #region header
                    worksheet.Cells[row, col].Value = "STT";
                    col++; worksheet.Cells[row, col].Value = "Mã loại địa điểm"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên loại địa điểm"; worksheet.Column(col).Width = 30;

                    for (int i = 1; i < 4; i++)
                    {
                        ExcelHelper.CreateCellStyle(worksheet, row, i, 2, i, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    }

                    foreach (var itemGroup in result.ListGroupProduct)
                    {
                        col++; worksheet.Cells[row, col].Value = itemGroup.Code; worksheet.Column(col).Width = 40;
                        worksheet.Cells[row + 1, col].Value = "Đơn vị tính"; worksheet.Column(col).Width = 20;
                        worksheet.Cells[row + 1, col + 1].Value = "Giá"; worksheet.Column(col).Width = 20;
                        ExcelHelper.CreateCellStyle(worksheet, row, col, row, col + 1, true, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        ExcelHelper.CreateCellStyle(worksheet, row + 1, col, row + 1, col + 1, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                        col++;
                    }
                    worksheet.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region data
                    col = 1;
                    row = 3;
                    if (result.ListData.Count > 0)
                    {
                        foreach (var itemData in result.ListData)
                        {
                            col = 1;
                            worksheet.Cells[row, col].Value = stt;
                            col++; worksheet.Cells[row, col].Value = itemData.GroupOfLocationCode;
                            col++; worksheet.Cells[row, col].Value = itemData.GroupOfLocationName;
                            foreach (var itemGroup in result.ListGroupProduct)
                            {
                                var flag = 0;
                                foreach (var itemTruck in itemData.ListPriceTruckLoadingDetail)
                                {
                                    if (itemGroup.ID == itemTruck.GroupOfProductID)
                                    {
                                        flag = 1;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.PriceOfGOPCode;
                                        col++; worksheet.Cells[row, col].Value = itemTruck.Price;
                                    }
                                }
                                if (flag == 0)
                                {
                                    col++; worksheet.Cells[row, col].Value = "";
                                    col++; worksheet.Cells[row, col].Value = 0;
                                }
                            }
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet.Dimension.End.Column; j++)
                        {
                            worksheet.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }

                    #region partner
                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("Danh sách loại địa điểm");

                    col = 1; row = 1; stt = 1;
                    #region header
                    worksheet1.Cells[row, col].Value = "STT";
                    col++; worksheet1.Cells[row, col].Value = "Mã loại địa điểm"; worksheet1.Column(col).Width = 20;
                    col++; worksheet1.Cells[row, col].Value = "Tên loại địa điểm"; worksheet1.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet1, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");
                    worksheet1.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet1.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListGroupOfLocation != null && data.ListGroupOfLocation.Count > 0)
                    {
                        foreach (var itemData in data.ListGroupOfLocation)
                        {
                            col = 1;
                            worksheet1.Cells[row, col].Value = stt;
                            col++; worksheet1.Cells[row, col].Value = itemData.Code;
                            col++; worksheet1.Cells[row, col].Value = itemData.GroupName;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet1.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet1.Dimension.End.Column; j++)
                        {
                            worksheet1.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion

                    #region priceOfGOP
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets.Add("Danh sách đơn vị tính");

                    col = 1; row = 1; stt = 1;

                    #region header
                    worksheet2.Cells[row, col].Value = "STT";
                    col++; worksheet2.Cells[row, col].Value = "Mã đơn vị"; worksheet2.Column(col).Width = 20;
                    col++; worksheet2.Cells[row, col].Value = "Đơn vị"; worksheet2.Column(col).Width = 30;

                    ExcelHelper.CreateCellStyle(worksheet2, 1, 1, 1, 3, false, true, ExcelHelper.ColorGreen, ExcelHelper.ColorWhite, 0, "");

                    worksheet2.Cells[row, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet2.Cells[row, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    #endregion

                    #region body
                    col = 1;
                    row = 2;
                    if (data.ListPriceOfGOP != null && data.ListPriceOfGOP.Count > 0)
                    {
                        foreach (var itemData in data.ListPriceOfGOP)
                        {
                            col = 1;
                            worksheet2.Cells[row, col].Value = stt;
                            col++; worksheet2.Cells[row, col].Value = itemData.Code;
                            col++; worksheet2.Cells[row, col].Value = itemData.ValueOfVar;
                            row++;
                            stt++;
                        }
                    }
                    #endregion

                    for (int i = 1; i <= worksheet2.Dimension.End.Row; i++)
                    {
                        for (int j = 1; j <= worksheet2.Dimension.End.Column; j++)
                        {
                            worksheet2.Cells[i, j].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                        }
                    }
                    #endregion
                    package.Save();
                }
                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        public List<DTOPriceTruckDILoad_Import> FLMPrice_DI_UnLoadPartner_ExcelCheck(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                CATFile file = Newtonsoft.Json.JsonConvert.DeserializeObject<CATFile>(dynParam.file.ToString());
                int contractTermID = (int)dynParam.contractTermID;
                List<DTOPriceTruckDILoad_Import> sData = new List<DTOPriceTruckDILoad_Import>();
                if (file != null && !string.IsNullOrEmpty(file.FilePath))
                {
                    DTOFLMPrice_ExcelData data = new DTOFLMPrice_ExcelData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                     {
                         data = sv.FLMContract_Price_ExcelData(contractTermID);
                     });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file.FilePath), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                var totalCol = worksheet.Dimension.End.Column;
                                var totalRow = worksheet.Dimension.End.Row;

                                int row = 1;

                                Dictionary<int, int> dicGop = new Dictionary<int, int>();

                                for (int col = 4; col <= totalCol; col++)
                                {
                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (!string.IsNullOrEmpty(str))
                                    {
                                        var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGop != null)
                                        {
                                            if (!dicGop.ContainsKey(objGop.ID))
                                            {
                                                dicGop.Add(objGop.ID, col);
                                            }
                                            else
                                            {
                                                throw new Exception("Nhóm sản phẩm " + objGop.Code + " trùng.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Nhóm sản phẩm " + str + " không tồn tại.");
                                        }
                                        col++;
                                    }
                                }
                                for (row = 3; row <= totalRow; row++)
                                {
                                    int col = 1; col++;

                                    DTOPriceTruckDILoad_Import obj = new DTOPriceTruckDILoad_Import();
                                    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                                    obj.ExcelSuccess = true;
                                    obj.ExcelRow = row;

                                    var str = ExcelHelper.GetValue(worksheet, row, col);
                                    if (string.IsNullOrEmpty(str))
                                    {
                                        obj.ExcelSuccess = false;
                                        obj.ExcelError = "Thiếu mã loại điểm.";
                                    }
                                    else
                                    {
                                        obj.GroupOfLocationCode = str;
                                        var objGOL = data.ListGroupOfLocation.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        if (objGOL != null)
                                        {
                                            obj.GroupOfLocationID = objGOL.ID;
                                            var objCheck = sData.FirstOrDefault(c => c.GroupOfLocationID == obj.GroupOfLocationID);
                                            if (objCheck != null)
                                            {
                                                obj.ExcelSuccess = false;
                                                obj.ExcelError = "Trùng loại điểm.";
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            obj.ExcelError = "Loại điểm không tồn tại.";
                                        }
                                    }

                                    col++; str = ExcelHelper.GetValue(worksheet, row, col);
                                    obj.GroupOfLocationName = str;

                                    var strErrorGop = "Sai đơn vị tính:";
                                    var strErrorPrice = "Sai giá:";
                                    var isErrorGop = false;
                                    var isErrorPrice = false;
                                    foreach (var dict in dicGop)
                                    {
                                        col = dict.Value;
                                        str = ExcelHelper.GetValue(worksheet, row, col);
                                        SYSVar objPriceGop = null;
                                        if (!string.IsNullOrEmpty(str))
                                        {
                                            objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.Code.Trim().ToLower() == str.Trim().ToLower());
                                        }
                                        else
                                        {
                                            //trống
                                            var priceOfGOPID = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == dict.Key).PriceOfGOPID;
                                            if (priceOfGOPID != null)
                                                objPriceGop = data.ListPriceOfGOP.FirstOrDefault(c => c.ID == priceOfGOPID);
                                        }
                                        if (objPriceGop != null)
                                        {
                                            DTOPriceTruckDILoadDetail o = new DTOPriceTruckDILoadDetail();
                                            obj.ListPriceTruckLoadingDetail.Add(o);
                                            o.GroupOfProductID = dict.Key;
                                            o.PriceOfGOPID = objPriceGop.ID;
                                            o.Price = 0;

                                            col++;
                                            str = ExcelHelper.GetValue(worksheet, row, col);
                                            try
                                            {
                                                o.Price = Convert.ToDecimal(str);
                                            }
                                            catch
                                            {
                                                obj.ExcelSuccess = false;
                                                strErrorPrice += " [" + row + "-" + col + "]"; isErrorPrice = true;
                                            }
                                        }
                                        else
                                        {
                                            obj.ExcelSuccess = false;
                                            strErrorGop += " [" + row + "-" + col + "]"; isErrorGop = true;
                                        }
                                    }
                                    if (obj.ExcelSuccess == false)
                                    {
                                        if (isErrorGop)
                                            obj.ExcelError += strErrorGop;
                                        if (isErrorPrice)
                                            obj.ExcelError += strErrorPrice;
                                    }
                                    sData.Add(obj);
                                }
                            }
                        }
                    }
                }

                return sData;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceTruckDILoad_Import> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceTruckDILoad_Import>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_UnLoadPartner_Import(lst, priceID);
                 });

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region partner
        [HttpPost]
        public void FLMPrice_DI_Load_Delete(dynamic dynParam)
        {
            try
            {
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_Load_Delete(ID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOPriceDILoadPartner> FLMPrice_DI_UnLoadPartner_Partner_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = new List<DTOPriceDILoadPartner>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_UnLoadPartner_Partner_List(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int priceID = (int)dynParam.priceID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_Partner_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceDILoadPartner> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDILoadPartner>>(dynParam.data.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_UnLoadPartner_Partner_SaveList(data);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_UnLoadPartner_Partner_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_UnLoadPartner_Partner_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region MOQ
        #region info
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQUnLoad_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_PriceMOQUnLoad_List(request, priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIMOQLoad FLMPrice_DI_PriceMOQUnLoad_Get(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(DTOPriceDIMOQLoad);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_PriceMOQUnLoad_Get(priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMPrice_DI_PriceMOQUnLoad_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int result = 0;
                DTOPriceDIMOQLoad item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQLoad>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     result = sv.FLMPrice_DI_PriceMOQUnLoad_Save(item, priceID);
                 });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_PriceMOQUnLoad_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_PriceMOQUnLoad_Delete(id);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQUnLoad_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                 {
                     sv.FLMPrice_DI_PriceMOQUnLoad_DeleteList(priceID);
                 });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #endregion

        #region Area

        #endregion

        #endregion

        #region MOQ

        #region info
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_List(request, priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIMOQLoad FLMPrice_DI_PriceMOQLoad_Get(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(DTOPriceDIMOQLoad);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Get(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMPrice_DI_PriceMOQLoad_Save(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                int result = 0;
                DTOPriceDIMOQLoad item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQLoad>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Save(item, priceID);
                });
                return result;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Delete(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_DeleteList(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_DeleteList(priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region group location
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupLocation_List(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_GroupLocation_List(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_GroupLocation_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_GroupLocation_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_GroupLocation_SaveList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_GroupLocation_SaveList(lst, PriceMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupLocation_GroupNotInList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_GroupLocation_GroupNotInList(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region GOP
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupProduct_List(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_GroupProduct_List(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_GroupProduct_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_GroupProduct_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_GroupProduct_Save(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                DTOPriceDIMOQLoadGroupProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQLoadGroupProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_GroupProduct_Save(item, PriceMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOPriceDIMOQLoadGroupProduct FLMPrice_DI_PriceMOQLoad_GroupProduct_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                int cusID = (int)dynParam.cusID;
                DTOPriceDIMOQLoadGroupProduct result = new DTOPriceDIMOQLoadGroupProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_GroupProduct_Get(id, cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_GroupProduct_GOPList(dynamic dynParam)
        {
            try
            {
                int cusID = (int)dynParam.cusID;
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_GroupProduct_GOPList(cusID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  location
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Location_List(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Location_List(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Location_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Location_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Location_LocationNotInSaveList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Location_LocationNotInSaveList(lst, PriceMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Location_LocationNotInList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                int customerID = (int)dynParam.customerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Location_LocationNotInList(request, PriceMOQLoadID, customerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOPriceDIMOQLoadLocation FLMPrice_DI_PriceMOQLoad_Location_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                DTOPriceDIMOQLoadLocation result = new DTOPriceDIMOQLoadLocation();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Location_Get(id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Location_Save(dynamic dynParam)
        {
            try
            {
                DTOPriceDIMOQLoadLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOPriceDIMOQLoadLocation>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Location_Save(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  route
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Route_List(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Route_List(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Route_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Route_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Route_SaveList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Route_SaveList(lst, PriceMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Route_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Route_RouteNotInList(request, PriceMOQLoadID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  parnet route
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_ParentRoute_List(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_ParentRoute_List(request, PriceMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_ParentRoute_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_ParentRoute_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_ParentRoute_SaveList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_ParentRoute_SaveList(lst, PriceMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_ParentRoute_RouteNotInList(dynamic dynParam)
        {
            try
            {
                int PriceMOQLoadID = (int)dynParam.PriceMOQLoadID;
                int contractTermID = (int)dynParam.contractTermID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_ParentRoute_RouteNotInList(request, PriceMOQLoadID, contractTermID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region  province
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Province_List(dynamic dynParam)
        {
            try
            {
                int PriceDIMOQLoadID = (int)dynParam.PriceDIMOQLoadID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Province_List(request, PriceDIMOQLoadID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Province_DeleteList(dynamic dynParam)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Province_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMPrice_DI_PriceMOQLoad_Province_SaveList(dynamic dynParam)
        {
            try
            {
                int PriceDIMOQLoadID = (int)dynParam.PriceDIMOQLoadID;
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lst.ToString());
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_PriceMOQLoad_Province_SaveList(lst, PriceDIMOQLoadID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMPrice_DI_PriceMOQLoad_Province_NotInList(dynamic dynParam)
        {
            try
            {
                int PriceDIMOQLoadID = (int)dynParam.PriceDIMOQLoadID;
                int contractTermID = (int)dynParam.contractTermID;
                int CustomerID = (int)dynParam.CustomerID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_PriceMOQLoad_Province_NotInList(request, PriceDIMOQLoadID, contractTermID, CustomerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #endregion

        #region FLMSetting_Vendor
        [HttpPost]
        public DTOResult FLMSetting_Price_Copy(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Price_Copy(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSetting_PriceCopy_Save(dynamic dynParam)
        {
            try
            {
                int ContractID = (int)dynParam.ContractID;
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_PriceCopy_SaveList(ContractID, ID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMSetting_Vendor_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Vendor_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMSetting_VendorNotIn_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_VendorNotIn_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSetting_Vendor_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOCUSCompany> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCUSCompany>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Vendor_SaveList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMSetting_Vendor_DeleteList(dynamic dynParam)
        {
            try
            {
                DTOCUSCompany item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSCompany>(dynParam.item.ToString());
                var lst = new List<DTOCUSCompany>();
                lst.Add(item);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Vendor_DeleteList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region danh sách địa chỉ
        public DTOResult FLMSetting_Location_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMSetting_Location_SaveList(dynamic dynParam)
        {
            try
            {
                List<CATLocation> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<CATLocation>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Location_SaveList(lst);
                    AddressSearchHelper.AddListByCustomerID(Account.SYSCustomerID, sv.AddressSearch_ByCustomerList());
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMSetting_Location_Delete(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Location_Delete(id);
                    AddressSearchHelper.Delete(sv.AddressSearch_List(id));
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMSetting_Location_HasRun(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                //ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                //{
                //    result = sv.FLMSetting_Location_HasRun(request);
                //});
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMSetting_Location_NotInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_NotInList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public SYSExcel FLMSetting_Location_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public Row FLMSetting_Location_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = result = sv.FLMSetting_Location_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public SYSExcel FLMSetting_Location_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMSetting_Location_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public bool FLMSetting_Location_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;

                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMSetting_Location_ExcelApprove(id);
                        if (result)
                            AddressSearchHelper.AddListByCustomerID(Account.SYSCustomerID, sv.AddressSearch_ByCustomerList());
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMSetting_Location_RoutingContract_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int locationid = (int)dynParam.locationid;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_RoutingContract_List(request, locationid);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSetting_Location_RoutingContract_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> lstClear = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstClear.ToString());
                List<int> lstAdd = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstAdd.ToString());
                int locationid = (int)dynParam.locationid;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Location_RoutingContract_SaveList(lstClear, lstAdd, locationid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSetting_Location_RoutingContract_NewRoutingSave(dynamic dynParam)
        {
            try
            {
                DTOCUSPartnerNewRouting item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSPartnerNewRouting>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Location_RoutingContract_NewRoutingSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLMSetting_Location_RoutingContract_NewAreaSave(dynamic dynParam)
        {
            try
            {
                CATRoutingArea item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATRoutingArea>(dynParam.item.ToString());
                int locationid = (int)dynParam.locationid;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_Location_RoutingContract_NewAreaSave(item, locationid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMSetting_Location_RoutingContract_AreaList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_RoutingContract_AreaList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCUSPartnerNewRouting FLMSetting_Location_RoutingContract_NewRoutingGet(dynamic dynParam)
        {
            try
            {
                var result = default(DTOCUSPartnerNewRouting);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_RoutingContract_NewRoutingGet();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOCATContract> FLMSetting_Location_RoutingContract_ContractData(dynamic dynParam)
        {
            try
            {
                var result = default(List<DTOCATContract>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_Location_RoutingContract_ContractData();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region FLMAssetWarning
        [HttpPost]
        public List<DTOFLMAssetTypeWarning> Get_TypeWarning()
        {
            try
            {
                var result = default(List<DTOFLMAssetTypeWarning>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Get_TypeWarning();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMAsset_Warning_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int TypeWarningID = (int)dynParam.TypeWarningID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Warning_List(request, TypeWarningID);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMAsset_Warning_NoInList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                int TypeWarningID = (int)dynParam.TypeWarningID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAsset_Warning_NoInList(TypeWarningID, request);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMAsset_Warning_SaveNoInList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMAsset> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMAsset>>(dynParam.lst.ToString());
                int TypeWarningID = (int)dynParam.TypeWarningID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMAsset_Warning_SaveNoInList(lst, TypeWarningID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMAsset_Warning_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOFLMAssetWarning> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMAssetWarning>>(dynParam.lst.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMAsset_Warning_SaveList(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMAsset_Warning_Delete(dynamic dynParam)
        {
            try
            {
                DTOFLMAssetWarning item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMAssetWarning>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMAsset_Warning_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAssetWarning_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var TypeWarningID = (int)dynParam.TypeWarningID;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMAssetWarning_ExcelInit(TypeWarningID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMAssetWarning_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var TypeWarningID = (int)dynParam.TypeWarningID;

                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAssetWarning_ExcelChange(TypeWarningID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMAssetWarning_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var TypeWarningID = (int)dynParam.TypeWarningID;

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAssetWarning_ExcelImport(TypeWarningID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMAssetWarning_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var TypeWarningID = (int)dynParam.TypeWarningID;
                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMAssetWarning_ExcelApprove(TypeWarningID, id);
                    });
                   
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Group of Product
        [HttpPost]
        public DTOResult FLMSetting_GroupOfProductAll_Read(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                int gopID = d.gopID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_GroupOfProduct_List(request);
                });
                var lst = new List<DTOCUSGroupOfProduct>();
                FLMSetting_DropdownList_Read_Create(lst, result.Data.Cast<DTOCUSGroupOfProduct>(), null, 0);
                foreach (DTOCUSGroupOfProduct item in lst)
                {
                    if (item.ID == gopID)
                    {
                        lst.Remove(item);
                        break;
                    }
                }
                result.Data = lst;
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLMSetting_GroupOfProduct_Read(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_GroupOfProduct_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCUSGroupOfProduct FLMSetting_GroupOfProduct_Update(dynamic d)
        {
            try
            {
                DTOCUSGroupOfProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSGroupOfProduct>(d.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    item.ID = sv.FLMSetting_GroupOfProduct_Save(item);
                });
                return item;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMSetting_GroupOfProduct_Destroy(dynamic d)
        {
            try
            {
                DTOCUSGroupOfProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSGroupOfProduct>(d.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_GroupOfProduct_Delete(item);
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public CUSGroupOfProduct FLMSetting_GroupOfProduct_GetByCode(dynamic d)
        {
            try
            {
                string code = d.code;
                CUSGroupOfProduct result = new CUSGroupOfProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_GroupOfProduct_GetByCode(code);
                });
                return result;
            }
            catch
            {
                return null;
            }
        }

        [HttpPost]
        public bool FLMSetting_GroupOfProduct_ResetPrice(dynamic d)
        {
            try
            {
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_GroupOfProduct_ResetPrice();
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMSetting_GroupOfProductMapping_List(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                int groupOfProductID = d.groupOfProductID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_GroupOfProductMapping_List(request, groupOfProductID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOResult FLMSetting_GroupOfProductMappingNotIn_List(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                int groupOfProductID = d.groupOfProductID;
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMSetting_GroupOfProductMappingNotIn_List(request, groupOfProductID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMSetting_GroupOfProductMapping_SaveList(dynamic d)
        {
            try
            {
                List<DTOCUSGroupOfProductMapping> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCUSGroupOfProductMapping>>(d.lst.ToString());
                int groupOfProductID = d.groupOfProductID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_GroupOfProductMapping_SaveList(lst, groupOfProductID);
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool FLMSetting_GroupOfProductMapping_Delete(dynamic d)
        {
            try
            {
                DTOCUSGroupOfProductMapping item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSGroupOfProductMapping>(d.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMSetting_GroupOfProductMapping_Delete(item);
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void FLMSetting_DropdownList_Read_Create(List<DTOCUSGroupOfProduct> lstTarget, IEnumerable<DTOCUSGroupOfProduct> lstSource, int? parentid, int level)
        {
            foreach (var item in lstSource.Where(c => c.ParentID == parentid))
            {
                item.GroupName = new string('.', 3 * level) + item.GroupName;
                lstTarget.Add(item);
                FLMSetting_DropdownList_Read_Create(lstTarget, lstSource, item.ID, level + 1);
            }
        }

        #endregion

        #region GroupOfProduct
        [HttpPost]
        public DTOResult FLMContract_GroupOfProduct_List(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                string request = (string)dynParam.request.ToString();
                DTOResult result = new DTOResult();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_GroupOfProduct_List(request, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public DTOCATContractGroupOfProduct FLMContract_GroupOfProduct_Get(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                int id = (int)dynParam.id;
                DTOCATContractGroupOfProduct result = new DTOCATContractGroupOfProduct();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_GroupOfProduct_Get(id, contractID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_GroupOfProduct_Save(dynamic dynParam)
        {
            try
            {
                int contractID = (int)dynParam.contractID;
                DTOCATContractGroupOfProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContractGroupOfProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_GroupOfProduct_Save(item, contractID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMContract_GroupOfProduct_Delete(dynamic dynParam)
        {
            try
            {
                List<int> lstid = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstid.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMContract_GroupOfProduct_Delete(lstid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public double? FLMContract_GroupOfProduct_Check(dynamic dynParam)
        {
            try
            {
                double? result = null;
                DTOCATContractGroupOfProduct item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATContractGroupOfProduct>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_GroupOfProduct_Check(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMContract_GroupOfProduct_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                int contractID = (int)dynParam.contractID;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMContract_GroupOfProduct_ExcelInit(contractID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMContract_GroupOfProduct_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                int contractID = (int)dynParam.contractID;

                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_GroupOfProduct_ExcelChange(contractID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMContract_GroupOfProduct_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                int contractID = (int)dynParam.contractID;

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_GroupOfProduct_ExcelImport(contractID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMContract_GroupOfProduct_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;
                int contractID = (int)dynParam.contractID;

                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMContract_GroupOfProduct_ExcelApprove(contractID, id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region GroupProduct

        [HttpPost]
        public List<DTOPriceDIGroupOfProduct> FLMPrice_DI_GroupProduct_List(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                var result = default(List<DTOPriceDIGroupOfProduct>);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_GroupProduct_List(priceID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_GroupProduct_SaveList(dynamic dynParam)
        {
            try
            {
                List<DTOPriceDIGroupOfProduct> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDIGroupOfProduct>>(dynParam.data.ToString());
                int priceID = (int)dynParam.priceID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_GroupProduct_SaveList(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLMPrice_DI_GroupProduct_Export(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                DTOPriceDIGroupOfProductData resBody = new DTOPriceDIGroupOfProductData();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    resBody = sv.FLMPrice_DI_GroupProduct_Export(priceID);
                });
                string file = "/Uploads/temp/" + "BangGiaLTL_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo f = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage pk = new ExcelPackage(f))
                {
                    ExcelWorksheet worksheet = pk.Workbook.Worksheets.Add("Sheet1");
                    int col = 0, row = 1;

                    #region Header
                    col++; worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 5;
                    col++; worksheet.Cells[row, col].Value = "Mã cung đường"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Tên cung đường"; worksheet.Column(col).Width = 25;

                    foreach (CUSGroupOfProduct item in resBody.ListGOP)
                    {
                        col++; worksheet.Cells[row, col].Value = item.Code;
                        worksheet.Column(col).Width = 10;
                    }

                    worksheet.Cells[1, 1, row, col].Style.Font.Bold = true;
                    worksheet.Cells[1, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.Font.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    worksheet.Cells[1, 1, row, col].Style.Fill.BackgroundColor.SetColor(Color.Green);

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Color.SetColor(Color.White);

                    #endregion

                    #region Body
                    int stt = 0;
                    foreach (DTOCATRouting item in resBody.ListRoute)
                    {
                        row++; col = 0; stt++;
                        col++; worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = item.Code;
                        col++; worksheet.Cells[row, col].Value = item.RoutingName;

                        foreach (CUSGroupOfProduct o in resBody.ListGOP)
                        {
                            col++;
                            var e = resBody.ListDetail.Where(c => c.ContractRoutingID == item.ID && o.ID == c.GroupOfProductID).FirstOrDefault();
                            if (e != null)
                            {
                                worksheet.Cells[row, col].Value = e.Price;
                            }
                        }
                    }
                    #endregion

                    pk.Save();
                }

                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOPriceDIGroupOfProductImport> FLMPrice_DI_GroupProduct_Check(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                string file = dynParam.file.ToString();
                bool isFrame = (bool)dynParam.isFrame;
                List<DTOPriceDIGroupOfProductImport> result = new List<DTOPriceDIGroupOfProductImport>();
                if (!string.IsNullOrEmpty(file))
                {
                    DTOPriceDIGroupOfProductData data = new DTOPriceDIGroupOfProductData();
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        data = sv.FLMPrice_DI_GroupProduct_Export(priceID);
                    });
                    using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath("/" + file), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                    {
                        using (var package = new ExcelPackage(fs))
                        {
                            ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                            if (worksheet != null)
                            {
                                int col = 4, row = 1;
                                string levelCode = "", Input = "";
                                Dictionary<int, int> dictColLevel = new Dictionary<int, int>();
                                Dictionary<int, string> dictColLevelCode = new Dictionary<int, string>();
                                if (isFrame)
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListGOP.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Mã nhóm sản phẩm [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 2;
                                    }

                                    row = 3;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceDIGroupOfProductImport obj = new DTOPriceDIGroupOfProductImport();
                                        obj.ListDetail = new List<DTOPriceDIGroupOfProductExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string priceMin = ExcelHelper.GetValue(worksheet, row, pCol);
                                                string priceMax = ExcelHelper.GetValue(worksheet, row, pCol + 1);


                                                if (!string.IsNullOrEmpty(priceMin) || !string.IsNullOrEmpty(priceMax))
                                                {
                                                    DTOPriceDIGroupOfProductExcel objDetail = new DTOPriceDIGroupOfProductExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.ContractRoutingID = obj.RouteID;
                                                    objDetail.GroupOfProductID = pLevel;
                                                    objDetail.Price = 0;
                                                    if (string.IsNullOrEmpty(priceMin)) objDetail.PriceMin = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMin = Convert.ToDecimal(priceMin);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    if (string.IsNullOrEmpty(priceMax)) objDetail.PriceMax = null;
                                                    else
                                                    {
                                                        try
                                                        {
                                                            objDetail.PriceMax = Convert.ToDecimal(priceMax);
                                                        }
                                                        catch
                                                        {
                                                            objDetail.IsSuccess = false;
                                                            lstError.Add("Giá từ của loại [" + pLevelCode + "] không chính xác");
                                                        }
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                                else
                                {
                                    while (col <= worksheet.Dimension.End.Column)
                                    {
                                        levelCode = ExcelHelper.GetValue(worksheet, row, col);
                                        if (col == 4 && String.IsNullOrEmpty(levelCode)) break;
                                        if (!string.IsNullOrEmpty(levelCode))
                                        {
                                            var checkLeveCode = data.ListGOP.FirstOrDefault(c => c.Code == levelCode);
                                            if (checkLeveCode == null) throw new Exception("Mã nhóm hàng [" + levelCode + "] không tồn tại");
                                            else
                                            {
                                                dictColLevel.Add(col, checkLeveCode.ID);
                                                dictColLevelCode.Add(col, checkLeveCode.Code);
                                            }
                                        }
                                        else break;
                                        col += 1;
                                    }

                                    row = 2;
                                    while (row <= worksheet.Dimension.End.Row)
                                    {
                                        List<string> lstError = new List<string>();
                                        DTOPriceDIGroupOfProductImport obj = new DTOPriceDIGroupOfProductImport();
                                        obj.ListDetail = new List<DTOPriceDIGroupOfProductExcel>();
                                        obj.ExcelRow = row;
                                        obj.ExcelSuccess = true;
                                        obj.ExcelError = string.Empty;
                                        col = 2;
                                        string strSTT = ExcelHelper.GetValue(worksheet, row, 1);

                                        Input = ExcelHelper.GetValue(worksheet, row, col);
                                        //neu 2 cot dau rong thì thoat
                                        if (string.IsNullOrEmpty(strSTT) && string.IsNullOrEmpty(Input)) break;

                                        var checkRoute = data.ListRoute.FirstOrDefault(c => c.Code == Input);
                                        if (checkRoute == null)
                                        {
                                            lstError.Add("Mã cung đường [" + Input + "]không tồn tại");
                                            obj.ExcelSuccess = false;
                                        }
                                        else
                                        {
                                            obj.RouteID = checkRoute.ID;
                                            obj.RouteCode = checkRoute.Code;
                                            obj.RouteName = checkRoute.RoutingName;
                                        }

                                        if (dictColLevel.Keys.Count > 0)
                                        {
                                            foreach (var word in dictColLevel)
                                            {
                                                int pCol = word.Key;
                                                int pLevel = word.Value;
                                                string pLevelCode = "";
                                                dictColLevelCode.TryGetValue(pCol, out  pLevelCode);

                                                string price = ExcelHelper.GetValue(worksheet, row, pCol);


                                                if (!string.IsNullOrEmpty(price))
                                                {
                                                    DTOPriceDIGroupOfProductExcel objDetail = new DTOPriceDIGroupOfProductExcel();
                                                    objDetail.IsSuccess = true;
                                                    objDetail.ContractRoutingID = obj.RouteID;
                                                    objDetail.GroupOfProductID = pLevel;
                                                    objDetail.PriceMax = null;
                                                    objDetail.PriceMin = null;
                                                    try
                                                    {
                                                        objDetail.Price = Convert.ToDecimal(price);
                                                    }
                                                    catch
                                                    {
                                                        objDetail.IsSuccess = false;
                                                        lstError.Add("Giá của loại[" + pLevelCode + "] không chính xác");
                                                    }
                                                    obj.ListDetail.Add(objDetail);
                                                }

                                            }
                                        }

                                        if (lstError.Count > 0)
                                            obj.ExcelError = string.Join(" ,", lstError);
                                        result.Add(obj);
                                        row++;
                                    }
                                }
                            }
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMPrice_DI_GroupProduct_Import(dynamic dynParam)
        {
            try
            {
                int priceID = (int)dynParam.priceID;
                List<DTOPriceDIGroupOfProductImport> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPriceDIGroupOfProductImport>>(dynParam.data.ToString());

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMPrice_DI_GroupProduct_Import(data, priceID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_GroupProduct_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMPrice_DI_GroupProduct_ExcelInit(isFrame, priceID, functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMPrice_DI_GroupProduct_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var result = new Row();
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupProduct_ExcelChange(isFrame, priceID, id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMPrice_DI_GroupProduct_ExcelOnImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupProduct_ExcelOnImport(isFrame, priceID, id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMPrice_DI_GroupProduct_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var priceID = (int)dynParam.priceID;
                var isFrame = (bool)dynParam.isFrame;
                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMPrice_DI_GroupProduct_ExcelApprove(isFrame, priceID, id);
                    });

                    //if (result != null && !string.IsNullOrEmpty(result.Data))
                    //{
                    //    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                    //}
                    //else
                    //{
                    //    result = new SYSExcel();
                    //    result.Worksheets = new List<Worksheet>();
                    //}
                    //result.Data = "";
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion

        #region location
        public DTOResult Partner_List(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                int partnerType = d.partnerType;
                var result = default(DTOResult);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Partner_List(request, partnerType);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult PartnerNotIn_Read(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int typePartner = (int)dynParam.typePartner;
                var result = default(DTOResult);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerNotIn_List(request, typePartner);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //public DTOCUSPartnerAllCustom Partner_Get(dynamic d)
        //{
        //    try
        //    {
        //        int partnerID = d.partnerID;
        //        var result = default(DTOCUSPartnerAllCustom);
        //         ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
        //        {
        //            result = sv.Partner_GetByID(partnerID);
        //        });
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //}

        [HttpPost]
        public int Partner_Save(dynamic dynParam)
        {
            try
            {
                DTOCUSPartnerAllCustom item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSPartnerAllCustom>(dynParam.item.ToString());
                int typePartner = (int)dynParam.typePartner;
                if (typePartner != 1 && typePartner != 2 && typePartner != 3)
                    throw new Exception("Loại đối tác không đúng");

                int result = -1;
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Partner_Save(item, typePartner);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool Partner_SaveList(dynamic d)
        {
            try
            {
                List<DTOCUSPartnerAll> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCUSPartnerAll>>(d.lst.ToString());
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Partner_SaveList(lst);
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool Partner_Delete(dynamic dynParam)
        {
            try
            {
                int cuspartnerid = (int)dynParam.cuspartnerid;
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.Partner_Delete(cuspartnerid);
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult PartnerLocation_List(dynamic dynParam)
        {
            try
            {
                int partnerID = dynParam.partnerID;
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerLocation_List(request, partnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult PartnerLocation_NotInList(dynamic d)
        {
            try
            {
                string request = d.request.ToString();
                int partnerID = d.partnerID;
                var result = default(DTOResult);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerLocation_NotInList(request, partnerID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void PartnerLocation_SaveNotinList(dynamic d)
        {
            try
            {
                List<int> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(d.lst.ToString());
                int partnerID = d.partnerID;
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.PartnerLocation_SaveNotinList(lst, partnerID);
                });

                var lstAddress = new List<AddressSearchItem>();
                ServiceFactory.SVCategory((ISVCategory sv) =>
                {
                    lstAddress = sv.AddressSearch_List();
                });
                lstAddress = lstAddress.Where(c => c.Address != null && c.PartnerCode != null).ToList();
                AddressSearchHelper.Create(lstAddress);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOCUSPartnerLocation PartnerLocation_Get(dynamic dynParam)
        {
            try
            {
                int locationID = dynParam.locationID;
                var result = default(DTOCUSPartnerLocation);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerLocation_Get(locationID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void PartnerLocation_SaveList(dynamic d)
        {
            try
            {
                List<DTOCUSLocation> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCUSLocation>>(d.lst.ToString());
                int cuspartnerID = d.cuspartnerID;
                List<DTOCUSLocation> result = new List<DTOCUSLocation>();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerLocation_SaveList(lst, cuspartnerID);
                    foreach (var item in result)
                    {
                        switch (item.StatusAddressSearch)
                        {
                            default:
                                break;
                            case 1: AddressSearchHelper.Update(sv.AddressSearch_List(item.ID)); break;
                            case 2: AddressSearchHelper.Delete(new AddressSearchItem { CUSLocationID = item.ID }); break;
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int PartnerLocation_Save(dynamic dynParam)
        {
            try
            {
                DTOCUSPartnerLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSPartnerLocation>(dynParam.item.ToString());
                int cuspartnerID = dynParam.cuspartnerID;
                DTOCUSPartnerLocation result = default(DTOCUSPartnerLocation);
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.PartnerLocation_Save(item, cuspartnerID);

                    AddressSearchHelper.Update(sv.AddressSearch_List(result.ID));
                });
                return result.LocationID;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public bool PartnerLocation_Destroy(dynamic d)
        {
            try
            {
                DTOCUSLocation item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSLocation>(d.item.ToString());
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.PartnerLocation_Delete(item);
                    AddressSearchHelper.Delete(sv.AddressSearch_List(item.ID));
                });
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public string FLM_PartnerLocation_Export(dynamic dynParam)
        {
            try
            {

                bool isCarrier = dynParam.isCarrier;
                bool isSeaport = dynParam.isSeaport;
                bool isDistributor = dynParam.isDistributor;
                List<DTOPartnerLocation_Excel> resBody = new List<DTOPartnerLocation_Excel>();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    resBody = sv.PartnerLocation_Export(isCarrier, isSeaport, isDistributor);
                });
                string file = "/Uploads/temp/" + "DiaDiem_" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".xlsx";

                if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(file)))
                    System.IO.File.Delete(HttpContext.Current.Server.MapPath(file));
                FileInfo f = new FileInfo(HttpContext.Current.Server.MapPath(file));
                using (ExcelPackage pk = new ExcelPackage(f))
                {
                    ExcelWorksheet worksheet = pk.Workbook.Worksheets.Add("Sheet1");
                    int col = 0, row = 1;

                    #region Header
                    col++; worksheet.Cells[row, col].Value = "STT"; worksheet.Column(col).Width = 5;
                    col++; worksheet.Cells[row, col].Value = "Mã NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên NPP"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Loại NPP"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ NPP"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Mã địa chỉ giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Tên địa chỉ giao hàng"; worksheet.Column(col).Width = 20;
                    col++; worksheet.Cells[row, col].Value = "Địa chỉ giao hàng"; worksheet.Column(col).Width = 25;
                    col++; worksheet.Cells[row, col].Value = "Tỉnh thành"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Quận/Huyện"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Khu công nghiệp"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "SĐT"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Fax"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Email"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Kinh độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Vĩ độ"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Mã khu vực"; worksheet.Column(col).Width = 15;
                    col++; worksheet.Cells[row, col].Value = "Tên khu vực"; worksheet.Column(col).Width = 15;

                    worksheet.Cells[1, 1, row, col].Style.Font.Bold = true;
                    worksheet.Cells[1, 1, row, col].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    worksheet.Cells[1, 1, row, col].Style.Font.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    worksheet.Cells[1, 1, row, col].Style.Fill.BackgroundColor.SetColor(Color.Green);

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                    worksheet.Cells[1, 1, row, col].Style.Border.Top.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Bottom.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Left.Color.SetColor(Color.White);
                    worksheet.Cells[1, 1, row, col].Style.Border.Right.Color.SetColor(Color.White);

                    #endregion

                    #region Body
                    int stt = 0;
                    foreach (DTOPartnerLocation_Excel item in resBody)
                    {
                        row++; col = 0; stt++;
                        col++; worksheet.Cells[row, col].Value = stt;
                        col++; worksheet.Cells[row, col].Value = item.PartnerCode;
                        col++; worksheet.Cells[row, col].Value = item.PartnerName;
                        col++; worksheet.Cells[row, col].Value = item.PartnerGroupName;
                        col++; worksheet.Cells[row, col].Value = item.PartnerAddress;
                        col++; worksheet.Cells[row, col].Value = item.LocationCode;
                        col++; worksheet.Cells[row, col].Value = item.LocationName;
                        col++; worksheet.Cells[row, col].Value = item.LocationAddress;
                        col++; worksheet.Cells[row, col].Value = item.ProvinceName;
                        col++; worksheet.Cells[row, col].Value = item.DistrictName;
                        col++; worksheet.Cells[row, col].Value = item.Economiczone;
                        col++; worksheet.Cells[row, col].Value = item.TelNo;
                        col++; worksheet.Cells[row, col].Value = item.Fax;
                        col++; worksheet.Cells[row, col].Value = item.Email;
                        col++; worksheet.Cells[row, col].Value = item.Lng;
                        col++; worksheet.Cells[row, col].Value = item.Lat;
                        col++; worksheet.Cells[row, col].Value = item.RoutingAreaCode;
                        col++; worksheet.Cells[row, col].Value = item.RoutingAreaName;
                    }
                    #endregion

                    pk.Save();
                }

                return file;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public List<DTOPartnerImport> FLM_PartnerLocation_Check(dynamic dynParam)
        {
            try
            {
                bool isCarrier = dynParam.isCarrier;
                bool isSeaport = dynParam.isSeaport;
                bool isDistributor = dynParam.isDistributor;
                string file = "/" + dynParam.file.ToString();
                int iTypeOfPartner = 0;
                if (isCarrier)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerCarrier;
                else if (isSeaport)
                    iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerSeaPort;
                else iTypeOfPartner = -(int)SYSVarType.TypeOfPartnerDistributor;

                if (iTypeOfPartner == 0) throw new Exception("Loại đối tác không chính xác");

                List<DTOPartnerImport> result = new List<DTOPartnerImport>();
                DTOPartnerLocation_Check lstCheck = new DTOPartnerLocation_Check();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    lstCheck = sv.PartnerLocation_Check();
                });
                using (System.IO.FileStream fs = new System.IO.FileStream(HttpContext.Current.Server.MapPath(file), System.IO.FileMode.Open, System.IO.FileAccess.Read))
                {
                    using (var package = new ExcelPackage(fs))
                    {
                        ExcelWorksheet worksheet = ExcelHelper.GetWorksheetByIndex(package, 1);
                        if (worksheet != null)
                        {
                            string CusPartCode, CusPartName, GOP, CusPartAddress, CusLoCode, CusLoName, CusLoAddress, District, Province, EZone, TellNo, Fax, Email, Lat, Lng;
                            int row = 1, col = 1;
                            Dictionary<string, int> dicPartnerCode_Row = new Dictionary<string, int>();
                            for (row = 2; row <= worksheet.Dimension.End.Row; row++)
                            {
                                CusPartCode = ExcelHelper.GetValue(worksheet, row, 2);
                                CusPartName = ExcelHelper.GetValue(worksheet, row, 3);
                                GOP = ExcelHelper.GetValue(worksheet, row, 4);
                                CusPartAddress = ExcelHelper.GetValue(worksheet, row, 5);
                                CusLoCode = ExcelHelper.GetValue(worksheet, row, 6);
                                CusLoName = ExcelHelper.GetValue(worksheet, row, 7);
                                CusLoAddress = ExcelHelper.GetValue(worksheet, row, 8);
                                District = ExcelHelper.GetValue(worksheet, row, 10);
                                Province = ExcelHelper.GetValue(worksheet, row, 9);
                                EZone = ExcelHelper.GetValue(worksheet, row, 11);
                                TellNo = ExcelHelper.GetValue(worksheet, row, 12);
                                Fax = ExcelHelper.GetValue(worksheet, row, 13);
                                Email = ExcelHelper.GetValue(worksheet, row, 14);
                                Lat = ExcelHelper.GetValue(worksheet, row, 15);
                                Lng = ExcelHelper.GetValue(worksheet, row, 16);

                                if (string.IsNullOrEmpty(CusPartCode) && string.IsNullOrEmpty(CusPartName))
                                    break;

                                List<string> lstError = new List<string>();
                                List<string> lstErrorLo = new List<string>();
                                #region check partner

                                var objPartner = result.FirstOrDefault(c => c.CUSPartnerCode == CusPartCode);
                                if (objPartner == null)
                                {
                                    objPartner = new DTOPartnerImport();
                                    objPartner.CUSPartnerCode = CusPartCode;
                                    objPartner.CUSPartnerName = CusPartName;
                                    objPartner.CUSPartnerAddress = CusPartAddress;
                                    objPartner.ExcelRow = row;
                                    objPartner.ListLocation = new List<DTOCUSParterLocationImport>();
                                    objPartner.TellNo = TellNo;
                                    objPartner.Fax = Fax;
                                    objPartner.Email = Email;
                                    objPartner.ExcelSuccess = true;

                                    if (string.IsNullOrEmpty(CusPartCode))
                                        lstError.Add("Mã NPP không được trống");
                                    if (string.IsNullOrEmpty(CusPartName))
                                        lstError.Add("Tên NPP không được trống");

                                    var checkCUSPart = lstCheck.lstPartnerOfCustomer.FirstOrDefault(c => c.PartnerCode == CusPartCode);
                                    if (checkCUSPart == null)
                                    {
                                        objPartner.CUSPartnerID = -1;
                                        var checkCATPart = lstCheck.lstCatPartner.FirstOrDefault(c => c.Code == CusPartCode && c.TypeOfPartnerID == iTypeOfPartner);
                                        if (checkCATPart == null) objPartner.CATParterID = -1;
                                        else objPartner.CATParterID = checkCATPart.ID;
                                    }
                                    else
                                    {
                                        objPartner.CUSPartnerID = checkCUSPart.ID;
                                        objPartner.CATParterID = checkCUSPart.PartnerID;
                                    }

                                    if (string.IsNullOrEmpty(Province))
                                    {
                                        objPartner.CountryID = null; objPartner.ProvinceID = null;
                                    }
                                    else
                                    {
                                        var checkPro = lstCheck.lstProvince.FirstOrDefault(c => c.ProvinceName == Province);
                                        if (checkPro != null)
                                        {
                                            objPartner.CountryID = checkPro.CountryID;
                                            objPartner.ProvinceID = checkPro.ID;
                                        }
                                        else lstError.Add("Tỉnh thành [" + Province + "]không chính xác");
                                    }
                                    if (string.IsNullOrEmpty(District))
                                    {
                                        objPartner.ProvinceID = null;
                                    }
                                    else
                                    {
                                        var checkPro = lstCheck.lstDistrict.FirstOrDefault(c => c.DistrictName == District);
                                        if (checkPro != null)
                                        {
                                            if (objPartner.ProvinceID == null)
                                                lstError.Add("Phải chọn tỉnh thành trước");
                                            else objPartner.DistrictID = checkPro.ID;
                                        }
                                        else lstError.Add("Quận huyện [" + District + "]không chính xác");
                                    }

                                    if (!string.IsNullOrEmpty(GOP))
                                    {
                                        var checkGOP = lstCheck.lstGroupOfPartner.FirstOrDefault(c => c.Code == GOP);
                                        if (checkGOP == null)
                                            lstError.Add("Loại NPP[" + GOP + "] không tồn tại");
                                        else
                                        {
                                            objPartner.GroupOfPartnerID = checkGOP.ID;
                                        }
                                    }
                                    else
                                    {
                                        objPartner.GroupOfPartnerID = null;
                                    }

                                    objPartner.ExcelError = string.Join(", ", lstError);
                                    objPartner.ExcelSuccess = (lstError.Count == 0) ? true : false;
                                    result.Add(objPartner);
                                }



                                #endregion

                                #region check location
                                //rong code Location thi chi có NPP
                                if (string.IsNullOrEmpty(CusLoCode))
                                {
                                    DTOCUSParterLocationImport objLo = new DTOCUSParterLocationImport();
                                    objLo.CATLocationID = -1;
                                    objLo.CUSLocationID = -1;
                                    objLo.CUSLocationCode = string.Empty;
                                    objLo.ExcelRow = row;
                                    objLo.ExcelSuccess = false;
                                    objLo.ExcelError = string.Join(" ,", lstError);
                                    objPartner.ListLocation.Add(objLo);
                                }
                                else
                                {
                                    DTOCUSParterLocationImport objLo = new DTOCUSParterLocationImport();
                                    objLo.ExcelRow = row;
                                    var checkCUSLo = lstCheck.lstLocationOfCustomer.FirstOrDefault(c => c.Code == CusLoCode);
                                    if (checkCUSLo == null)
                                    {
                                        objLo.CUSLocationID = -1;
                                        var checkCATLo = lstCheck.lstCatLocation.FirstOrDefault(c => c.Code == CusLoCode);
                                        if (checkCATLo == null) objLo.CATLocationID = -1;
                                        else objLo.CATLocationID = checkCATLo.ID;
                                    }
                                    else
                                    {
                                        if (checkCUSLo.CusPartID == null)
                                        {
                                            lstError.Add("Mã địa chỉ giao hàng trùng với mã kho của khách hàng này");
                                        }
                                        else
                                        {
                                            if (checkCUSLo.CusPartID != objPartner.CUSPartnerID)
                                                objLo.CUSLocationID = checkCUSLo.ID;
                                            else objLo.CUSLocationID = checkCUSLo.ID;
                                            objLo.CATLocationID = checkCUSLo.LocationID;
                                        }
                                    }

                                    var checkOnFile = objPartner.ListLocation.FirstOrDefault(c => c.CUSLocationCode == CusLoCode);
                                    if (checkOnFile != null && !string.IsNullOrEmpty(objPartner.CUSPartnerCode))
                                        lstError.Add("Mã địa chỉ giao hàng [" + CusLoCode + "] bị trùng cho partner [" + objPartner.CUSPartnerCode + "]");

                                    objLo.CUSLocationCode = CusLoCode;
                                    objLo.CUSLocationName = CusLoName;
                                    objLo.CUSLocationAddress = CusLoAddress;
                                    objLo.EconomicZone = EZone;

                                    if (string.IsNullOrEmpty(Province))
                                        lstError.Add("Tỉnh thành không được trống");
                                    else
                                    {
                                        var checkPro = lstCheck.lstProvince.FirstOrDefault(c => c.ProvinceName == Province);
                                        if (checkPro != null)
                                        {
                                            objLo.CountryID = checkPro.CountryID;
                                            objLo.ProvinceID = checkPro.ID;
                                        }
                                        else lstError.Add("Tỉnh thành [" + Province + "]không chính xác");
                                    }
                                    if (string.IsNullOrEmpty(District))
                                        lstError.Add("Quận huyện không được trống");
                                    else
                                    {
                                        var checkPro = lstCheck.lstDistrict.FirstOrDefault(c => c.DistrictName == District);
                                        if (checkPro != null)
                                        {
                                            if (objLo.ProvinceID == null)
                                                lstError.Add("Phải chọn tỉnh thành trước");
                                            else objLo.DistrictID = checkPro.ID;
                                        }
                                        else lstError.Add("Quận huyện [" + District + "]không chính xác");
                                    }

                                    if (string.IsNullOrEmpty(Lat))
                                        objLo.Lat = null;
                                    else
                                    {
                                        try
                                        {
                                            objLo.Lat = Convert.ToDouble(Lat);
                                        }
                                        catch
                                        {
                                            lstError.Add("Kinh độ [" + Lat + "] không chính xác");
                                        }
                                    }
                                    if (string.IsNullOrEmpty(Lng))
                                        objLo.Lng = null;
                                    else
                                    {
                                        try
                                        {
                                            objLo.Lng = Convert.ToDouble(Lng);
                                        }
                                        catch
                                        {
                                            lstError.Add("Vĩ độ [" + Lng + "] không chính xác");
                                        }
                                    }
                                    objLo.ExcelSuccess = lstError.Count == 0;
                                    objLo.ExcelError = string.Join(" ,", lstError);
                                    objPartner.ListLocation.Add(objLo);
                                }
                                #endregion
                            }
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLM_PartnerLocation_Import(dynamic dynParam)
        {
            try
            {
                bool isCarrier = dynParam.isCarrier;
                bool isSeaport = dynParam.isSeaport;
                bool isDistributor = dynParam.isDistributor;
                List<DTOPartnerImport> data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOPartnerImport>>(dynParam.data.ToString());
                var addressdata = new List<AddressSearchItem>();
                 ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    addressdata = sv.PartnerLocation_Import(data, isCarrier, isSeaport, isDistributor);
                });
                foreach (var item in addressdata)
                {
                    AddressSearchHelper.Update(item);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOCUSPartnerLocationAll> FLM_Partner_List(dynamic dynParam)
        {
            try
            {
                List<int> lstPartner = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstPartner.ToString());
                List<int> lstLocation = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstLocation.ToString());
                bool isUseLocation = Convert.ToBoolean(dynParam.isUseLocation.ToString());

                List<DTOCUSPartnerLocationAll> result = new List<DTOCUSPartnerLocationAll>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_List(lstPartner, lstLocation, isUseLocation);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCUSPartnerAllCustom FLM_Partner_Get(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                int typepartnerid = (int)dynParam.typepartnerid;
                DTOCUSPartnerAllCustom result = new DTOCUSPartnerAllCustom();

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_Get(id, typepartnerid);
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLM_Partner_CUSLocationSaveCode(dynamic dynParam)
        {
            try
            {
                DTOCUSPartnerLocationAll item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSPartnerLocationAll>(dynParam.item.ToString());
                int result = -1;

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_CUSLocationSaveCode(item);
                    if (string.IsNullOrEmpty(item.CUSCode))
                    {
                        AddressSearchHelper.Delete(new AddressSearchItem { CUSLocationID = result });
                    }
                    else
                    {
                        AddressSearchHelper.Update(sv.AddressSearch_List(result));
                    }
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region excel mới
        [HttpPost]
        public SYSExcel FLM_Partner_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLM_Partner_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = result = sv.FLM_Partner_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLM_Partner_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLM_Partner_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLM_Partner_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;

                var result = false;
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLM_Partner_ExcelApprove(id);
                        if (result)
                            AddressSearchHelper.AddListByCustomerID(Account.SYSCustomerID, sv.AddressSearch_ByCustomerList());
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region filter by partner
        [HttpPost]
        public DTOResult FLM_Partner_FilterByPartner_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_FilterByPartner_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLM_Partner_FilterByLocation_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_FilterByLocation_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<int> FLM_Partner_FilterByPartner_GetNumOfCusLocation(dynamic dynParam)
        {
            try
            {
                List<int> result = new List<int>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_FilterByPartner_GetNumOfCusLocation();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region partner routing
        [HttpPost]
        public DTOResult FLM_Partner_RoutingContract_List(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                int locationid = (int)dynParam.locationid;
                var result = default(DTOResult);
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_RoutingContract_List(request, locationid);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLM_Partner_RoutingContract_SaveList(dynamic dynParam)
        {
            try
            {
                List<int> lstClear = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstClear.ToString());
                List<int> lstAdd = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(dynParam.lstAdd.ToString());
                int locationid = (int)dynParam.locationid;
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLM_Partner_RoutingContract_SaveList(lstClear, lstAdd, locationid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLM_Partner_RoutingContract_NewRoutingSave(dynamic dynParam)
        {
            try
            {
                DTOCUSPartnerNewRouting item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSPartnerNewRouting>(dynParam.item.ToString());
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLM_Partner_RoutingContract_NewRoutingSave(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public void FLM_Partner_RoutingContract_NewAreaSave(dynamic dynParam)
        {
            try
            {
                CATRoutingArea item = Newtonsoft.Json.JsonConvert.DeserializeObject<CATRoutingArea>(dynParam.item.ToString());
                int locationid = (int)dynParam.locationid;
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLM_Partner_RoutingContract_NewAreaSave(item, locationid);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOResult FLM_Partner_RoutingContract_AreaList(dynamic dynParam)
        {
            try
            {
                string request = dynParam.request.ToString();
                var result = default(DTOResult);
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_RoutingContract_AreaList(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public DTOCUSPartnerNewRouting FLM_Partner_RoutingContract_NewRoutingGet(dynamic dynParam)
        {
            try
            {
                var result = default(DTOCUSPartnerNewRouting);
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_RoutingContract_NewRoutingGet();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public List<DTOCATContract> FLM_Partner_RoutingContract_ContractData(dynamic dynParam)
        {
            try
            {
                var result = default(List<DTOCATContract>);
               ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLM_Partner_RoutingContract_ContractData();
                });

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #endregion

        #region Danh sách chuyến
        
        public DTOFLMOwner FLMOwner_MasterList(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMOwner();
                if (dynParam.dtfrom != null && dynParam.dtto != null)
                {
                    DateTime? dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                    DateTime? dtto = Convert.ToDateTime(dynParam.dtto.ToString());

                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMOwner_MasterList(dtfrom, dtto);
                    });
                    if (result.ListQuota != null)
                    {
                        var lsttest = result.ListQuota.Select(c => new { MaterialID = c.MaterialID, MaterialCode = c.MaterialCode, QuantityPerKM = c.QuantityPerKM }).Distinct().ToList();
                        result.ListKey = new List<DTOFLMOwner_Quota>();
                        foreach (var item in lsttest)
                        {
                            DTOFLMOwner_Quota group = new DTOFLMOwner_Quota();
                            group.MaterialID = item.MaterialID;
                            group.MaterialCode = item.MaterialCode;
                            group.QuantityPerKM = item.QuantityPerKM;
                            result.ListKey.Add(group);
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public DTOFLMOwner_Master FLMOwner_MasterDetailList(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMOwner_Master();
                if (dynParam.dtfrom != null && dynParam.dtto != null)
                {
                    int vehicleID = (int)dynParam.vehicleID;
                    DateTime? dtfrom = Convert.ToDateTime(dynParam.dtfrom.ToString());
                    DateTime? dtto = Convert.ToDateTime(dynParam.dtto.ToString());

                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMOwner_MasterDetailList(vehicleID, dtfrom, dtto);
                    });
                }
                    return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        
        public List<DTOFLMOwner_Receipt> FLMOwner_GenerateReceipt(dynamic dynParam)
        {
            try
            {
                List<DTOFLMOwner_Asset> lst = new List<DTOFLMOwner_Asset>();
                if (dynParam.lst != null)
                { 
                    lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMOwner_Asset>>(dynParam.lst.ToString()); 
                }

                List<DTOFLMOwner_Receipt> result = new List<DTOFLMOwner_Receipt>();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMOwner_GenerateReceipt(lst);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMOwner_AcceptReceipt(dynamic dynParam)
        {
            try
            {
                List<DTOFLMOwner_Receipt> lst = new List<DTOFLMOwner_Receipt>();
                if (dynParam.lst != null)
                {
                    lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMOwner_Receipt>>(dynParam.lst.ToString());
                }
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMOwner_AcceptReceipt(lst);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Bãi xe
        public DTOResult FLMStand_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOCATStand FLMStand_Get(dynamic dynParam)
        {
            try
            {
                var result = new DTOCATStand();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Get(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public int FLMStand_Save(dynamic dynParam)
        {
            try
            {
                int result = -1;
                DTOCATStand item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATStand>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMStand_Delete(dynamic dynParam)
        {
            try
            {
                DTOCATStand item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCATStand>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMStand_Location_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Location_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMStand_Truck_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Truck_List(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult Truck_NotInList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Truck_NotInList(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_TruckSave(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTruck> lstFLMTruck = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTruck>>(dynParam.lstFLMTruck.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_TruckSave(lstFLMTruck, standID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_Truck_Delete(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTruck> lstFLMTruck = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTruck>>(dynParam.lstFLMTruck.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_Truck_Delete(lstFLMTruck, standID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMStand_Tractor_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Tractor_List(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult Tractor_NotInList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Tractor_NotInList(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_TractorSave(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTractor> lstFLMTractor = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTractor>>(dynParam.lstFLMTractor.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_TractorSave(lstFLMTractor, standID);
                });
            }                                                                              
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_Tractor_Delete(dynamic dynParam)
        {
            try
            {
                List<DTOFLMTractor> lstFLMTractor = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMTractor>>(dynParam.lstFLMTractor.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_Tractor_Delete(lstFLMTractor, standID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMStand_Romooc_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_Romooc_List(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult Romooc_NotInList(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                string request = dynParam.request.ToString();
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.Romooc_NotInList(request, standID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_RomoocSave(dynamic dynParam)
        {
            try
            {
                List<DTOFLMRomooc> lstFLMRomooc = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMRomooc>>(dynParam.lstFLMRomooc.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_RomoocSave(lstFLMRomooc, standID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMStand_Romooc_Delete(dynamic dynParam)
        {
            try
            {
                List<DTOFLMRomooc> lstFLMRomooc = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOFLMRomooc>>(dynParam.lstFLMRomooc.ToString());
                int standID = (int)dynParam.standID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMStand_Romooc_Delete(lstFLMRomooc, standID);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMStand_ExcelInit(dynamic dynParam)
        {
            try
            {
                var functionid = (int)dynParam.functionid;
                var functionkey = dynParam.functionkey.ToString();
                var isreload = (bool)dynParam.isreload;

                var result = default(SYSExcel);

                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMStand_ExcelInit(functionid, functionkey, isreload);
                });
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                result.Data = "";
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public Row FLMStand_ExcelChange(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var row = (int)dynParam.row;
                List<Cell> cells = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Cell>>(dynParam.cells.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(Row);
                if (id > 0 && cells.Count > 0 && row > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMStand_ExcelChange(id, row, cells, lstMessageError);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public SYSExcel FLMStand_ExcelImport(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                List<Worksheet> lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(dynParam.worksheets.ToString());
                List<string> lstMessageError = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(dynParam.lstMessageError.ToString());

                var result = default(SYSExcel);
                if (id > 0 && lst.Count > 0 && lst[0].Rows.Count > 1)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMStand_ExcelImport(id, lst[0].Rows, lstMessageError);
                    });
                }
                if (result != null && !string.IsNullOrEmpty(result.Data))
                {
                    result.Worksheets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Worksheet>>(result.Data);
                }
                else
                {
                    result = new SYSExcel();
                    result.Worksheets = new List<Worksheet>();
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public bool FLMStand_ExcelApprove(dynamic dynParam)
        {
            try
            {
                var id = (long)dynParam.id;
                var result = false;
                
                if (id > 0)
                {
                    ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                    {
                        result = sv.FLMStand_ExcelApprove(id);
                    });
                }
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region Đối tượng nhiên liệu
        public DTOResult FLMMaterialAudit_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();
                
                string request = dynParam.request.ToString();
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_List(request);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOFLMMaterialAudit FLMMaterialAudit_Get(dynamic dynParam)
        {
            try
            {
                var result = new DTOFLMMaterialAudit();
                int ID = (int)dynParam.ID;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_Get(ID);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void FLMMaterialAudit_Generate(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaterialAudit_Generate(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMMaterialAudit_Close(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaterialAudit_Close(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void FLMMaterialAudit_Open(dynamic dynParam)
        {
            try
            {
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaterialAudit_Open(id);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        [HttpPost]
        public int FLMMaterialAudit_Save(dynamic dynParam)
        {
            try
            {
                int result = -1;
                DTOFLMMaterialAudit item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMaterialAudit>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_Save(item);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        public void FLMMaterialAudit_Delete(dynamic dynParam)
        {
            try
            {
                DTOFLMMaterialAudit item = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOFLMMaterialAudit>(dynParam.item.ToString());
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    sv.FLMMaterialAudit_Delete(item);
                });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult ALL_FLMMaterialAuditStatus()
        {
            try
            {
                var result = default(DTOResult);
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.ALL_FLMMaterialAuditStatus();
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DTOResult FLMMaterialAudit_DITOMaster_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();

                string request = dynParam.request.ToString();
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_DITOMaster_List(request, id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMMaterialAudit_COTOMaster_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();

                string request = dynParam.request.ToString();
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_COTOMaster_List(request, id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMMaterialAudit_Receipt_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();

                string request = dynParam.request.ToString();
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_Receipt_List(request, id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DTOResult FLMMaterialAudit_Result_List(dynamic dynParam)
        {
            try
            {
                var result = new DTOResult();

                string request = dynParam.request.ToString();
                int id = (int)dynParam.id;
                ServiceFactory.SVFleetManage((ISVFleetManage sv) =>
                {
                    result = sv.FLMMaterialAudit_Result_List(request, id);
                });
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}