using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;

namespace Business
{
    public class BLCategory : Base, IBase
    {
        #region ALL Data

        public DTOResult ALL_Country()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Country.Select(c => new CATCountry
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CountryName = c.CountryName
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_District()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_District.Select(c => new CATDistrict
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DistrictName = c.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Province.CountryID,
                        CountryName = c.CAT_Province.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Province()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Province.Select(c => new CATProvince
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CAT_Country.ID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Ward()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Ward.Select(c => new CATWard
                    {
                        ID = c.ID,
                        WardName = c.WardName,
                        DistrictID = c.DistrictID
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_SysVar(SYSVarType typeOfVar)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.TypeOfVar == (int)typeOfVar).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Customer()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CustomerInUser()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var obj = model.SYS_User.Where(c => c.UserName == Account.UserName).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (obj != null && !string.IsNullOrEmpty(obj.ListCustomerID))
                    {
                        var lstid = new List<int>();
                        foreach (var str in obj.ListCustomerID.Split(','))
                        {
                            try
                            {
                                lstid.Add(Convert.ToInt32(str));
                            }
                            catch { }
                        }
                        var query = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS && lstid.Contains(c.ID)).Select(c => new CUSCustomer
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CustomerName = c.CustomerName
                        }).ToList();
                        result.Data = query;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Vendor()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_VendorInUser()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_GroupOfVehicle()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        Ton = c.Ton
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Service()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATPacking(SYSVarType TypeOfVar)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Where(c => c.TypeOfPackageID == -(int)TypeOfVar).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        NoOfDelivery = c.NoOfDelivery
                    }).ToList();
                    result.Data = query as IEnumerable<CATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATPackingCO()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        NoOfDelivery = c.NoOfDelivery
                    }).ToList();
                    result.Data = query as IEnumerable<CATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATPackingGOP()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Where(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        NoOfDelivery = c.NoOfDelivery
                    }).ToList();
                    result.Data = query as IEnumerable<CATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_TroubleCostStatus()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.ID == -(int)SYSVarType.TroubleCostStatusOpen || c.ID == -(int)SYSVarType.TroubleCostStatusApproved || c.ID == -(int)SYSVarType.TroubleCostStatusReject).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.ValueOfVar,
                    }).ToList();
                    result.Data = query as IEnumerable<CATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATGroupOfRomooc()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfRomooc.Select(c => new CATGroupOfRomooc
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID
                    }).ToList();
                    result.Data = query as IEnumerable<CATGroupOfRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATGroupOfEquipment()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfEquipment.Select(c => new CATGroupOfEquipment
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID
                    }).ToList();
                    result.Data = query as IEnumerable<CATGroupOfEquipment>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult All_CATGroupOfPartner()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {

                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult ALL_CATGroupOfMaterial()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfMaterial.Select(c => new CATGroupOfMaterial
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        IsFuel = c.IsFuel
                    }).ToList();
                    result.Data = query as IEnumerable<CATGroupOfMaterial>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATGroupOfCost()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfCost.Select(c => new CATGroupOfCost
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<CATGroupOfCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_Material()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Material.Where(c => c.CAT_GroupOfMaterial.IsFuel).Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<FLMMaterial>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATTypeOfPriceDIEx()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATTypeOfPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATTypeOfPriceCOEx()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfPriceCOEx.Select(c => new DTOCATTypeOfPriceCOEx
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATTypeOfPriceCOEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATGroupOfLocation()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        Code = c.Code,
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_OPSTypeOfDITOGroupProductReturn()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_TypeOfDITOGroupProductReturn.Select(c => new DTOOPSTypeOfDITOGroupProductReturn
                    {
                        ID = c.ID,
                        TypeName = c.TypeName,
                        Code = c.Code,
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<DTOOPSTypeOfDITOGroupProductReturn>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATTypeOfDriverFee()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfDriverFee.Select(c => new DTOCATTypeOfDriverFee
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATTypeOfDriverFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATDrivingLicence()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DrivingLicence.Select(c => new DTOCATDrivingLicence
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DrivingLicenceName = c.DrivingLicenceName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATDrivingLicence>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATShift()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Shift.Select(c => new CATShift
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ShiftName = c.ShiftName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATShift>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_FLMTypeOfScheduleFee()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_TypeOfScheduleFee.Select(c => new DTOFLMTypeOfScheduleFee
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMTypeOfScheduleFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_SYSVarFLMTypeWarning()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.FLMTypeWarning).Select(c => new SYSVar
                    {

                        ID = c.ID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_SYSVarREPOwnerAsset()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfAsset).Select(c => new SYSVar
                    {

                        ID = c.ID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ALL_CATTransportMode()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TransportMode.Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.SYS_Var.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.Name,
                        TypeOfVar = c.TransportModeID,
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ALL_CATServiceOfOrder()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ServiceOfOrder.Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.SYS_Var.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.Name,
                        TypeOfVar = c.ServiceOfOrderID,
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATCountry
        public DTOResult CATCountry_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Country.Select(c => new CATCountry
                    {

                        ID = c.ID,
                        Code = c.Code,
                        CountryName = c.CountryName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATCountry>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATCountry_Save(CATCountry item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Country.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");

                    var obj = model.CAT_Country.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Country();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.CountryName = item.CountryName;
                    if (obj.ID < 1)
                        model.CAT_Country.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATCountry CATCountry_Get(int ID)
        {
            try
            {
                CATCountry result = new CATCountry { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Country.Where(c => c.ID == ID).Select(c => new CATCountry
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CountryName = c.CountryName
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATCountry_Delete(CATCountry item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Country.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Country.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATCountry_ExcelInit(int functionid, string functionkey)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_Country.Select(c => new CATCountry
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CountryName = c.CountryName
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.CountryName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<Row> CATCountry_ExcelChange(long id, int row, int col, string val)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Country.Select(c => new { c.ID, c.Code }).ToList();
                    List<Worksheet> lstWorksheet = HelperExcel.ChangeText(model, id, row, col, val);
                    var ws = lstWorksheet[0];
                    var result = new List<Row>();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow != null)
                    {
                        string dataCode = HelperExcel.GetString(checkRow, 1);
                        string dataName = HelperExcel.GetString(checkRow, 2);
                        if (string.IsNullOrEmpty(dataCode))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã");
                        else if (string.IsNullOrEmpty(dataName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (lstCode.Contains(dataCode))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                            }
                        }

                        result.Add(checkRow);
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                    HelperExcel.ClearData(result, colCheckChange);

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATCountry_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    failCurrent = 0;
                    var lstCode = new List<string>();
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var lstGetID = model.CAT_Country.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            if (string.IsNullOrEmpty(dataCode))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã");
                            else if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (lstCode.Where(c => c == dataCode).Count() > 1)
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATCountry_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_Country.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Country();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.CountryName = dataName;
                            if (obj.ID < 1)
                                model.CAT_Country.Add(obj);
                            model.SaveChanges();
                        }
                    }

                    var lst = model.CAT_Country.Select(c => new CATCountry
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CountryName = c.CountryName
                    }).ToList();
                    List<Worksheet> data = new List<Worksheet>();
                    var ws = new Worksheet();
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    ws.Rows = new List<Row>();
                    var cells = new List<Cell>();
                    cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Mã Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Tên quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                    ws.Selection = "A1:A1";
                    ws.ActiveCell = "A1:A1";
                    ws.MergedCells = new List<string>();
                    ws.Name = "Sheet1";
                    int stt = 1;
                    foreach (var item in lst)
                    {
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(stt));
                        cells.Add(HelperExcel.NewCell(item.Code));
                        cells.Add(HelperExcel.NewCell(item.CountryName));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt++;
                    }
                    data.Add(ws);
                    HelperExcel.SaveData(model, id, data);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATDistrict
        public DTOResult CATDistrict_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_District.Select(c => new CATDistrict
                    {

                        ID = c.ID,
                        Code = c.Code,
                        DistrictName = c.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Province.CountryID,
                        CountryName = c.CAT_Province.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATDistrict>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATDistrict_Save(CATDistrict item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_District.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_District();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.DistrictName = item.DistrictName;
                    obj.ProvinceID = item.ProvinceID;
                    obj.Lat = item.Lat;
                    obj.Lng = item.Lng;
                    if (obj.ID < 1)
                        model.CAT_District.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATDistrict CATDistrict_Get(int ID)
        {
            try
            {
                CATDistrict result = new CATDistrict { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_District.Where(c => c.ID == ID).Select(c => new CATDistrict
                        {
                            ID = c.ID,
                            Code = c.Code,
                            DistrictName = c.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Province.CountryID,
                            CountryName = c.CAT_Province.CAT_Country.CountryName,
                            Lat = c.Lat,
                            Lng = c.Lng
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID; else result.CountryID = 0;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID; else result.ProvinceID = 0;
                        result.Lat = result.Lng = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATDistrict_Delete(CATDistrict item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_District.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_District.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public SYSExcel CATDistrict_ExcelInit(int functionid, string functionkey)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_District.Select(c => new CATDistrict
                        {
                            ID = c.ID,
                            Code = c.Code,
                            DistrictName = c.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Province.CountryID,
                            CountryName = c.CAT_Province.CAT_Country.CountryName,
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tỉnh/Thành phố", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.DistrictName));
                            cells.Add(HelperExcel.NewCell(item.ProvinceName));
                            cells.Add(HelperExcel.NewCell(item.CountryName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<Row> CATDistrict_ExcelChange(long id, int row, int col, string val)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 5;
                    int colCheckNote = 6;
                    int colCheckID = 7;
                    int colProvinceID = 10;
                    int colCountryID = 11;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_District.Select(c => new { c.ID, c.Code }).ToList();
                    List<Worksheet> lstWorksheet = HelperExcel.ChangeText(model, id, row, col, val);
                    var ws = lstWorksheet[0];
                    var result = new List<Row>();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow != null)
                    {
                        string dataCode = HelperExcel.GetString(checkRow, 1);
                        string dataName = HelperExcel.GetString(checkRow, 2);

                        if (string.IsNullOrEmpty(dataCode))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã");
                        else if (string.IsNullOrEmpty(dataName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (lstCode.Contains(dataCode))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                            }
                        }

                        result.Add(checkRow);
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                    HelperExcel.ClearData(result, colCheckChange);

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATDistrict_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 5;
                    int colCheckNote = 6;
                    int colCheckID = 7;
                    int colProvinceID = 10;
                    int colCountryID = 11;
                    int failMax = 2;
                    int failCurrent = 0;

                    failCurrent = 0;
                    var lstCode = new List<string>();
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var lstGetID = model.CAT_District.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            if (string.IsNullOrEmpty(dataCode))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã");
                            else if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (lstCode.Where(c => c == dataCode).Count() > 1)
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATDistrict_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 5;
                    int ProvinceID = 13;
                    int CountryID = 12;
                    int colCheckNote = 6;
                    int colCheckID = 7;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataCountryID = HelperExcel.GetString(eRow, CountryID);
                            string dataProvinceID = HelperExcel.GetString(eRow, ProvinceID);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_District.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_District();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.DistrictName = dataName;
                            if (obj.ID < 1)
                                model.CAT_District.Add(obj);
                            model.SaveChanges();
                        }
                    }

                    var lst = model.CAT_District.Select(c => new CATDistrict
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DistrictName = c.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Province.CountryID,
                        CountryName = c.CAT_Province.CAT_Country.CountryName,
                    }).ToList();
                    List<Worksheet> data = new List<Worksheet>();
                    var ws = new Worksheet();
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    ws.Rows = new List<Row>();
                    var cells = new List<Cell>();
                    cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Mã Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Quận/Huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Tỉnh/Thành phố", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                    ws.Selection = "A1:A1";
                    ws.ActiveCell = "A1:A1";
                    ws.MergedCells = new List<string>();
                    ws.Name = "Sheet1";
                    int stt = 1;
                    foreach (var item in lst)
                    {
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(stt));
                        cells.Add(HelperExcel.NewCell(item.Code));
                        cells.Add(HelperExcel.NewCell(item.DistrictName));
                        cells.Add(HelperExcel.NewCell(item.ProvinceName));
                        cells.Add(HelperExcel.NewCell(item.CountryName));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt++;
                    }
                    data.Add(ws);
                    HelperExcel.SaveData(model, id, data);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATProvince
        public DTOResult CATProvince_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Province.Select(c => new CATProvince
                    {

                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATProvince_Save(CATProvince item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Province.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Province();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.ProvinceName = item.ProvinceName;
                    obj.Lat = item.Lat;
                    obj.Lng = item.Lng;
                    obj.CountryID = item.CountryID;
                    if (obj.ID < 1)
                        model.CAT_Province.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATProvince CATProvince_Get(int id)
        {
            try
            {
                CATProvince result = new CATProvince();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Province.Where(c => c.ID == id).Select(c => new CATProvince
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ProvinceName = c.ProvinceName,
                            CountryID = c.CAT_Country.ID,
                            CountryName = c.CAT_Country.CountryName,
                            Lat = c.Lat,
                            Lng = c.Lng
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID; else result.CountryID = 0;
                        result.Lat = result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATProvince_Delete(CATProvince item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Province.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Province.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public SYSExcel CATProvince_ExcelInit(int functionid, string functionkey)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_Province.Select(c => new CATProvince
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ProvinceName = c.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên tỉnh thành", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ProvinceName));
                            cells.Add(HelperExcel.NewCell(item.CountryName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<Row> CATProvince_ExcelChange(long id, int row, int col, string val)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 4;
                    int colCheckNote = 5;
                    int colCheckID = 6;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Province.Select(c => new { c.ID, c.Code }).ToList();
                    List<Worksheet> lstWorksheet = HelperExcel.ChangeText(model, id, row, col, val);
                    var ws = lstWorksheet[0];
                    var result = new List<Row>();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow != null)
                    {
                        string dataCode = HelperExcel.GetString(checkRow, 1);
                        string dataName = HelperExcel.GetString(checkRow, 2);
                        if (string.IsNullOrEmpty(dataCode))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã");
                        else if (string.IsNullOrEmpty(dataName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (lstCode.Contains(dataCode))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                            }
                        }

                        result.Add(checkRow);
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                    HelperExcel.ClearData(result, colCheckChange);

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATProvince_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 4;
                    int colCheckNote = 5;
                    int colCheckID = 6;
                    int failMax = 2;
                    int failCurrent = 0;

                    failCurrent = 0;
                    var lstCode = new List<string>();
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var lstGetID = model.CAT_Province.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            if (string.IsNullOrEmpty(dataCode))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã");
                            else if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (lstCode.Where(c => c == dataCode).Count() > 1)
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATProvince_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 4;
                    int CountryID = 7;
                    int colCheckNote = 5;
                    int colCheckID = 6;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataCountryID = HelperExcel.GetString(eRow, CountryID);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_Province.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Province();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.ProvinceName = dataName;
                            if (obj.ID < 1)
                                model.CAT_Province.Add(obj);
                            model.SaveChanges();
                        }
                    }

                    var lst = model.CAT_Province.Select(c => new CATProvince
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                    }).ToList();
                    List<Worksheet> data = new List<Worksheet>();
                    var ws = new Worksheet();
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    ws.Rows = new List<Row>();
                    var cells = new List<Cell>();
                    cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Tên tỉnh thành", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell(" Quốc gia", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                    ws.Selection = "A1:A1";
                    ws.ActiveCell = "A1:A1";
                    ws.MergedCells = new List<string>();
                    ws.Name = "Sheet1";
                    int stt = 1;
                    foreach (var item in lst)
                    {
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(stt));
                        cells.Add(HelperExcel.NewCell(item.Code));
                        cells.Add(HelperExcel.NewCell(item.ProvinceName));
                        cells.Add(HelperExcel.NewCell(item.CountryName));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt++;
                    }
                    data.Add(ws);
                    HelperExcel.SaveData(model, id, data);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Common
        /// <summary>
        /// Cập nhật cho tất cả RoutingArea liên quan
        /// </summary>
        /// <param name="model"></param>
        /// <param name="Account"></param>
        /// <param name="locationID"></param>
        private void Routing_Update(DataEntities model, AccountItem Account, int locationID)
        {
            HelperRouting.Routing_Update(model, Account, locationID);
        }
        #endregion

        #region SeaPort

        public DTOResult SeaPortCustom_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATSeaPortCustom> lstData = new List<DTOCATSeaPortCustom>();
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    lstData = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iSeaPort).Select(c => new DTOCATSeaPortCustom
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.DistrictID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        CountryID = c.CountryID,
                        CountryName = c.DistrictID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        IsPartner = true,
                        PartnerID = c.ID,
                        GroupOfPartnerName = string.Empty
                    }).ToList();
                    using (var helper = new CopyHelper())
                    {
                        foreach (var item in lstData)
                        {
                            item.lstPartnerLocation = new List<DTOCATPartnerLocation>();
                            var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == item.ID).Select(c => new DTOCATPartnerLocation
                                {
                                    ID = c.LocationID,
                                    Code = c.CAT_Location.Code,
                                    PartnerCode = c.PartnerCode,
                                    PartnerID = c.PartnerID,
                                    PartnerName = c.CAT_Location.Location,
                                    Address = c.CAT_Location.Address,
                                    WardID = c.CAT_Location.WardID,
                                    WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                                    DistrictID = c.CAT_Location.DistrictID,
                                    DistrictName = c.CAT_Location.CAT_District.DistrictName,
                                    ProvinceID = c.CAT_Location.ProvinceID,
                                    ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                                    CountryID = c.CAT_Location.CountryID,
                                    CountryName = c.CAT_Location.CAT_Country.CountryName,
                                    IsPartner = false,
                                    GroupOfPartnerName = string.Empty
                                }).ToList();
                            item.lstPartnerLocation.AddRange(lstLocation);
                        }
                    }
                    result.Total = lstData.Count;
                    result.Data = lstData as IEnumerable<DTOCATSeaPortCustom>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPartnerLocationResult SeaPortCustomer_List(List<int> lstCustomerID)
        {
            try
            {
                DTOPartnerLocationResult result = new DTOPartnerLocationResult();
                result.lstLocation = new List<DTOLocationResult>();
                result.lstPartner = new List<DTOPartnerResult>();
                if (lstCustomerID == null)
                    lstCustomerID = new List<int>();
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    var lstLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOLocationResult
                    {
                        CustomerID = c.CustomerID,
                        Code = c.Code,
                        PartnerID = c.CusPartID.Value,
                        LocationID = c.LocationID,
                        CATPartnerID = c.CUS_Partner.PartnerID
                    }).ToList();
                    result.lstLocation.AddRange(lstLocation);

                    var lstPartner = model.CUS_Partner.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOPartnerResult
                        {
                            ID = c.PartnerID,
                            Code = c.PartnerCode,
                            CustomerID = c.CustomerID
                        }).ToList();
                    result.lstPartner.AddRange(lstPartner);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CATPartner SeaPort_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    CATPartner result = new CATPartner();
                    if (id > 0)
                    {
                        result = model.CAT_Partner.Where(c => c.ID == id).Select(c => new CATPartner
                                   {
                                       ID = c.ID,
                                       Code = c.Code,
                                       PartnerName = c.PartnerName,
                                       Address = c.Address,
                                       WardID = c.WardID,
                                       WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                                       DistrictID = c.DistrictID,
                                       DistrictName = c.CAT_District.DistrictName,
                                       ProvinceID = c.ProvinceID,
                                       ProvinceName = c.CAT_Province.ProvinceName,
                                       CountryID = c.CountryID,
                                       CountryName = c.CAT_Country.CountryName,
                                       TelNo = c.TelNo,
                                       Fax = c.Fax,
                                       Email = c.Email,
                                       BillingName = c.BillingName,
                                       BillingAddress = c.BillingAddress,
                                       TaxCode = c.TaxCode,
                                       Note = c.Note
                                   }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int SeaPort_Save(CATPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    CAT_Partner partner = new CAT_Partner();
                    partner = HelperRouting.CATPartner_Save(model, Account, item, SYSVarType.TypeOfPartnerSeaPort);
                    int result = -1;
                    if (partner != null)
                        result = partner.ID;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SeaPortCustom_Save(DTOCATSeaPortCustom item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.IsPartner)
                    {
                        #region Partner
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUS_Partner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                    detail.Code = detail.Code.Trim();
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerCode == detail.Code && c.PartnerID != item.ID);
                                if (obj != null)
                                    throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusPartner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CUS_Partner();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.CustomerID = detail.CustomerID;
                                    obj.PartnerID = item.ID;
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.PartnerCode = detail.Code;
                                if (obj.ID < 1)
                                {
                                    if (!string.IsNullOrEmpty(detail.Code))
                                        model.CUS_Partner.Add(obj);
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(detail.Code))
                                        if (model.CUS_Location.Count(c => c.CusPartID == obj.ID) == 0)
                                            model.CUS_Partner.Remove(obj);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }
                    else
                    {
                        #region Location
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUSLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                {
                                    detail.Code = detail.Code.Trim();
                                    var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                    if (cusPart == null)
                                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, "");
                                    else
                                    {
                                        var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.Code == detail.Code && c.LocationID != item.ID);
                                        if (obj != null)
                                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                                    }
                                }
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                if (cusPart != null)
                                {
                                    var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.LocationID == item.ID && c.CusPartID == cusPart.ID);
                                    if (obj == null)
                                    {
                                        obj = new CUS_Location();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.CustomerID = detail.CustomerID;
                                        obj.LocationID = item.ID;
                                        obj.CusPartID = cusPart.ID;
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Code = detail.Code;
                                    if (obj.ID < 1)
                                    {
                                        if (!string.IsNullOrEmpty(detail.Code))
                                        {
                                            obj.LocationName = item.PartnerName;
                                            model.CUS_Location.Add(obj);
                                        }
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(detail.Code))
                                        {
                                            //if (model.ORD_DIOrder.Count(c => c.LocationID == obj.ID) == 0 && model.CAT_LocationAreaDetail.Count(c => c.LocationID == obj.ID) == 0)
                                            //    model.CUS_Location.Remove(obj);
                                        }
                                    }
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SeaPort_Delete(CATPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Distributor
        public DTOResult Customer_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int type1 = -(int)SYSVarType.TypeOfCustomerCUS;
                    int type2 = -(int)SYSVarType.TypeOfCustomerBOTH;
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == type1 || c.TypeOfCustomerID == type2) && c.ParentID == null && !c.IsSystem).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DistributorCustom_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATDistributorCustom> lstData = new List<DTOCATDistributorCustom>();
                using (var model = new DataEntities())
                {
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    lstData = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iDistributor).Select(c => new DTOCATDistributorCustom
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.DistrictID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        IsPartner = true,
                        GroupOfPartnerName = c.GroupOfPartnerID != null ? c.CAT_GroupOfPartner.GroupName : string.Empty,
                        PartnerID = c.ID,
                        GroupOfPartnerID = c.GroupOfPartnerID
                    }).ToList();
                    using (var helper = new CopyHelper())
                    {
                        foreach (var item in lstData)
                        {
                            item.lstPartnerLocation = new List<DTOCATPartnerLocation>();
                            var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == item.ID).Select(c => new DTOCATPartnerLocation
                            {
                                ID = c.LocationID,
                                Code = c.CAT_Location.Code,
                                PartnerCode = c.PartnerCode,
                                PartnerID = c.PartnerID,
                                PartnerName = c.CAT_Location.Location,
                                Address = c.CAT_Location.Address,
                                WardID = c.CAT_Location.WardID,
                                WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                                DistrictID = c.CAT_Location.DistrictID,
                                DistrictName = c.CAT_Location.CAT_District.DistrictName,
                                ProvinceID = c.CAT_Location.ProvinceID,
                                ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                                CountryID = c.CAT_Location.CountryID,
                                CountryName = c.CAT_Location.CAT_Country.CountryName,
                                IsPartner = false,
                                GroupOfPartnerName = string.Empty
                            }).ToList();
                            item.lstPartnerLocation.AddRange(lstLocation);
                        }
                    }
                    result.Total = lstData.Count;
                    result.Data = lstData as IEnumerable<DTOCATDistributorCustom>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPartnerLocationResult DistributorCustomer_List(List<int> lstCustomerID)
        {
            try
            {
                DTOPartnerLocationResult result = new DTOPartnerLocationResult();
                result.lstLocation = new List<DTOLocationResult>();
                result.lstPartner = new List<DTOPartnerResult>();
                if (lstCustomerID == null)
                    lstCustomerID = new List<int>();
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerDistributor;
                    var lstLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOLocationResult
                    {
                        CustomerID = c.CustomerID,
                        Code = c.Code,
                        PartnerID = c.CusPartID.Value,
                        LocationID = c.LocationID,
                        CATPartnerID = c.CUS_Partner.PartnerID
                    }).ToList();
                    result.lstLocation.AddRange(lstLocation);

                    var lstPartner = model.CUS_Partner.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOPartnerResult
                    {
                        ID = c.PartnerID,
                        Code = c.PartnerCode,
                        CustomerID = c.CustomerID
                    }).ToList();
                    result.lstPartner.AddRange(lstPartner);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATDistributor Distributor_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATDistributor result = new DTOCATDistributor();
                    if (id > 0)
                    {
                        result = model.CAT_Partner.Where(c => c.ID == id).Select(c => new DTOCATDistributor
                            {
                                ID = c.ID,
                                Code = c.Code,
                                PartnerName = c.PartnerName,
                                Address = c.Address,
                                WardID = c.WardID,
                                WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                                DistrictID = c.DistrictID,
                                DistrictName = c.CAT_District.DistrictName,
                                ProvinceID = c.ProvinceID,
                                ProvinceName = c.CAT_Province.ProvinceName,
                                CountryID = c.CountryID,
                                CountryName = c.CAT_Country.CountryName,
                                TelNo = c.TelNo,
                                Fax = c.Fax,
                                Email = c.Email,
                                BillingName = c.BillingName,
                                BillingAddress = c.BillingAddress,
                                TaxCode = c.TaxCode,
                                Note = c.Note,
                                GroupOfPartnerID = c.GroupOfPartnerID
                            }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        var objGOParter = model.CAT_GroupOfPartner.FirstOrDefault();
                        if (objGOParter != null) result.GroupOfPartnerID = objGOParter.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Distributor_Save(DTOCATDistributor item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;
                    if (model.CAT_Partner.Where(c => c.ID != item.ID && c.Code == item.Code).Count() > 0)
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString(), "Mã đã sử dụng!");
                    else
                    {
                        var objType = model.SYS_Var.Where(c => c.ID == iDistributor).Select(c => new { c.ID }).FirstOrDefault();
                        if (objType == null)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, DTOErrorMember.Code.ToString());
                        else
                        {
                            var obj = model.CAT_Partner.FirstOrDefault(c => c.ID == item.ID);
                            if (obj == null)
                            {
                                obj = new CAT_Partner();
                                obj.TypeOfPartnerID = objType.ID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = item.Code;
                            obj.PartnerName = item.PartnerName;
                            obj.Address = !string.IsNullOrEmpty(item.Address) ? item.Address : string.Empty;
                            obj.WardID = item.WardID;
                            obj.DistrictID = item.DistrictID;
                            obj.ProvinceID = item.ProvinceID;
                            obj.CountryID = item.CountryID;
                            obj.TelNo = item.TelNo;
                            obj.Fax = item.Fax;
                            obj.Email = item.Email;
                            obj.BillingName = item.BillingName;
                            obj.BillingAddress = item.BillingAddress;
                            obj.TaxCode = item.TaxCode;
                            obj.Note = item.Note;
                            obj.GroupOfPartnerID = item.GroupOfPartnerID;
                            if (obj.ID < 1)
                                model.CAT_Partner.Add(obj);
                            model.SaveChanges();
                            return obj.ID;
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DistributorCustom_Save(DTOCATDistributorCustom item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.IsPartner)
                    {
                        #region Partner
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUS_Partner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                    detail.Code = detail.Code.Trim();
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerCode == detail.Code && c.PartnerID != item.ID);
                                if (obj != null)
                                    throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusPartner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CUS_Partner();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.CustomerID = detail.CustomerID;
                                    obj.PartnerID = item.ID;
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.PartnerCode = detail.Code;
                                if (obj.ID < 1)
                                {
                                    if (!string.IsNullOrEmpty(detail.Code))
                                        model.CUS_Partner.Add(obj);
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(detail.Code))
                                        if (model.CUS_Location.Count(c => c.CusPartID == obj.ID) == 0)
                                            model.CUS_Partner.Remove(obj);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }
                    else
                    {
                        #region Location
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUSLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                {
                                    detail.Code = detail.Code.Trim();
                                    var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                    if (cusPart == null)
                                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, "");
                                    else
                                    {
                                        var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.Code == detail.Code && c.LocationID != item.ID);
                                        if (obj != null)
                                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                                    }
                                }
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                if (cusPart != null)
                                {
                                    var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.LocationID == item.ID && c.CusPartID == cusPart.ID);
                                    if (obj == null)
                                    {
                                        obj = new CUS_Location();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.CustomerID = detail.CustomerID;
                                        obj.LocationID = item.ID;
                                        obj.CusPartID = cusPart.ID;
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Code = detail.Code;
                                    if (obj.ID < 1)
                                    {
                                        if (!string.IsNullOrEmpty(detail.Code))
                                        {
                                            obj.LocationName = item.PartnerName;
                                            model.CUS_Location.Add(obj);
                                        }
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(detail.Code))
                                        {
                                            //if (model.ORD_DIOrder.Count(c => c.LocationID == obj.ID) == 0 && model.CAT_LocationAreaDetail.Count(c => c.LocationID == obj.ID) == 0)
                                            //    model.CUS_Location.Remove(obj);
                                        }
                                    }
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Distributor_Delete(DTOCATDistributor item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Partner.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        //if (model.CAT_PriceTruckLoading.Count(c => c.CUS_Partner.PartnerID == obj.ID) > 0)
                        //    throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild);
                        //if (model.CAT_PriceTruckLoadingSet.Count(c => c.CUS_Partner.PartnerID == obj.ID) > 0)
                        //    throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild);
                        foreach (var detail in model.CUS_Partner.Where(c => c.PartnerID == obj.ID))
                            model.CUS_Partner.Remove(detail);
                        foreach (var detail in model.CAT_PartnerLocation.Where(c => c.PartnerID == obj.ID))
                            model.CAT_PartnerLocation.Remove(detail);
                        model.CAT_Partner.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Carrier
        public DTOResult CarrierCustom_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATCarrierCustom> lstData = new List<DTOCATCarrierCustom>();
                using (var model = new DataEntities())
                {
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    lstData = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iCarrier).Select(c => new DTOCATCarrierCustom
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        IsPartner = true,
                        PartnerID = c.ID,
                        GroupOfPartnerName = string.Empty
                    }).ToList();
                    using (var helper = new CopyHelper())
                    {
                        foreach (var item in lstData)
                        {
                            item.lstPartnerLocation = new List<DTOCATPartnerLocation>();
                            var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == item.ID).Select(c => new DTOCATPartnerLocation
                            {
                                ID = c.LocationID,
                                Code = c.CAT_Location.Code,
                                PartnerCode = c.PartnerCode,
                                PartnerID = c.PartnerID,
                                PartnerName = c.CAT_Location.Location,
                                Address = c.CAT_Location.Address,
                                WardID = c.CAT_Location.WardID,
                                WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                                DistrictID = c.CAT_Location.DistrictID,
                                DistrictName = c.CAT_Location.CAT_District.DistrictName,
                                ProvinceID = c.CAT_Location.ProvinceID,
                                ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                                CountryID = c.CAT_Location.CountryID,
                                CountryName = c.CAT_Location.CAT_Country.CountryName,
                                IsPartner = false,
                                GroupOfPartnerName = string.Empty
                            }).ToList();
                            item.lstPartnerLocation.AddRange(lstLocation);
                        }
                    }
                    result.Total = lstData.Count;
                    result.Data = lstData as IEnumerable<DTOCATCarrierCustom>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPartnerLocationResult CarrierCustomer_List(List<int> lstCustomerID)
        {
            try
            {
                DTOPartnerLocationResult result = new DTOPartnerLocationResult();
                result.lstLocation = new List<DTOLocationResult>();
                result.lstPartner = new List<DTOPartnerResult>();
                if (lstCustomerID == null)
                    lstCustomerID = new List<int>();
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerCarrier;
                    var lstLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOLocationResult
                    {
                        CustomerID = c.CustomerID,
                        Code = c.Code,
                        PartnerID = c.CusPartID.Value,
                        LocationID = c.LocationID,
                        CATPartnerID = c.CUS_Partner.PartnerID
                    }).ToList();
                    result.lstLocation.AddRange(lstLocation);

                    var lstPartner = model.CUS_Partner.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOPartnerResult
                    {
                        ID = c.PartnerID,
                        Code = c.PartnerCode,
                        CustomerID = c.CustomerID
                    }).ToList();
                    result.lstPartner.AddRange(lstPartner);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATCarrier Carrier_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new DTOCATCarrier();
                    if (id > 0)
                    {
                        result = model.CAT_Partner.Where(c => c.ID == id).Select(c => new DTOCATCarrier
                       {
                           ID = c.ID,
                           Code = c.Code,
                           PartnerName = c.PartnerName,
                           Address = c.Address,
                           WardID = c.WardID,
                           WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                           DistrictID = c.DistrictID,
                           DistrictName = c.CAT_District.DistrictName,
                           ProvinceID = c.ProvinceID,
                           ProvinceName = c.CAT_Province.ProvinceName,
                           CountryID = c.CountryID,
                           CountryName = c.CAT_Country.CountryName,
                           TelNo = c.TelNo,
                           Fax = c.Fax,
                           Email = c.Email,
                           BillingName = c.BillingName,
                           BillingAddress = c.BillingAddress,
                           TaxCode = c.TaxCode,
                           Note = c.Note
                       }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.CountryID = -1;
                        result.ProvinceID = -1;
                        result.DistrictID = -1;
                        result.WardID = -1;
                        var objC = model.CAT_Country.FirstOrDefault();
                        if (objC != null) result.CountryID = objC.ID;
                        var objP = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objP != null) result.ProvinceID = objP.ID;
                        var objD = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objD != null) result.DistrictID = objD.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int Carrier_Save(CATPartner item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    CAT_Partner partner = new CAT_Partner();
                    partner = HelperRouting.CATPartner_Save(model, Account, item, SYSVarType.TypeOfPartnerCarrier);
                    return partner.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CarrierCustom_Save(DTOCATCarrierCustom item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.IsPartner)
                    {
                        #region Partner
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUS_Partner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                    detail.Code = detail.Code.Trim();
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerCode == detail.Code && c.PartnerID != item.ID);
                                if (obj != null)
                                    throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusPartner
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var obj = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CUS_Partner();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.CustomerID = detail.CustomerID;
                                    obj.PartnerID = item.ID;
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.PartnerCode = detail.Code;
                                if (obj.ID < 1)
                                {
                                    if (!string.IsNullOrEmpty(detail.Code))
                                        model.CUS_Partner.Add(obj);
                                }
                                else
                                {
                                    if (string.IsNullOrEmpty(detail.Code))
                                        if (model.CUS_Location.Count(c => c.CusPartID == obj.ID) == 0)
                                            model.CUS_Partner.Remove(obj);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }
                    else
                    {
                        #region Location
                        if (item.lstPartnerLocation != null && item.lstPartnerLocation.Count > 0)
                        {
                            #region Kiểm tra trùng CUSLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                if (!string.IsNullOrEmpty(detail.Code))
                                {
                                    detail.Code = detail.Code.Trim();
                                    var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                    if (cusPart == null)
                                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, "");
                                    else
                                    {
                                        var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.Code == detail.Code && c.LocationID != item.ID);
                                        if (obj != null)
                                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());
                                    }
                                }
                            }
                            #endregion

                            #region Thêm mới, cập nhật, xóa cho CusLocation
                            foreach (var detail in item.lstPartnerLocation)
                            {
                                var cusPart = model.CUS_Partner.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.PartnerID == item.PartnerID);
                                if (cusPart != null)
                                {
                                    var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == detail.CustomerID && c.LocationID == item.ID && c.CusPartID == cusPart.ID);
                                    if (obj == null)
                                    {
                                        obj = new CUS_Location();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.CustomerID = detail.CustomerID;
                                        obj.LocationID = item.ID;
                                        obj.CusPartID = cusPart.ID;
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Code = detail.Code;
                                    if (obj.ID < 1)
                                    {
                                        if (!string.IsNullOrEmpty(detail.Code))
                                        {
                                            obj.LocationName = item.PartnerName;
                                            model.CUS_Location.Add(obj);
                                        }
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(detail.Code))
                                        {
                                            //if (model.ORD_DIOrder.Count(c => c.LocationID == obj.ID) == 0 && model.CAT_LocationAreaDetail.Count(c => c.LocationID == obj.ID) == 0)
                                            //    model.CUS_Location.Remove(obj);
                                        }
                                    }
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                        #endregion
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Carrier_Delete(DTOCATCarrier item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Partner.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PartnerLocation.Where(c => c.PartnerID == obj.ID))
                        {
                            model.CAT_PartnerLocation.Remove(detail);
                        }
                        foreach (var detail in model.CUS_Partner.Where(c => c.PartnerID == obj.ID))
                        {
                            foreach (var location in model.CUS_Location.Where(c => c.CusPartID == detail.ID))
                            {
                                model.CUS_Location.Remove(location);
                            }
                            model.CUS_Partner.Remove(detail);
                        }
                        model.CAT_Partner.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region LocationInDistributor
        public DTOResult LocationInDistributor_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partnerid).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        LocationID = c.LocationID,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        WardID = c.CAT_Location.WardID,
                        WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATLocationInPartner LocationInDistributor_Save(DTOCATLocationInPartner item, int partnerid)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.LocationInPartner_Save(model, Account, item, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATLocationInPartner LocationInDistributor_Get(int id)
        {
            try
            {
                DTOCATLocationInPartner result = new DTOCATLocationInPartner();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PartnerLocation.Where(c => c.ID == id).Select(c => new DTOCATLocationInPartner
                            {
                                ID = c.ID,
                                PartnerCode = c.PartnerCode,
                                LocationID = c.LocationID,
                                Location = c.CAT_Location.Location,
                                Address = c.CAT_Location.Address,
                                WardID = c.CAT_Location.WardID,
                                WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                                DistrictID = c.CAT_Location.DistrictID,
                                DistrictName = c.CAT_Location.CAT_District.DistrictName,
                                ProvinceID = c.CAT_Location.ProvinceID,
                                ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                                CountryID = c.CAT_Location.CountryID,
                                CountryName = c.CAT_Location.CAT_Country.CountryName,
                                Lat = c.CAT_Location.Lat,
                                Lng = c.CAT_Location.Lng
                            }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.Lat = 0;
                        result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void LocationInDistributor_Delete(DTOCATLocationInPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationInPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult LocationNotInDistributor_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID > 1 && !string.IsNullOrEmpty(c.Code) && (c.CAT_PartnerLocation.Count() == 0 || !c.CAT_PartnerLocation.Any(d => d.PartnerID == partnerid))).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        LocationID = c.ID,
                        PartnerCode = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void LocationNotInDistributor_SaveList(List<DTOCATLocationInPartner> lst, int partnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationNotInPartner_Save(model, Account, lst, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region LocationInSeaport
        public DTOResult LocationInSeaport_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partnerid).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        LocationID = c.LocationID,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        WardID = c.CAT_Location.WardID,
                        WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATLocationInPartner LocationInSeaport_Save(DTOCATLocationInPartner item, int partnerid)
        {
            try
            {

                DTOCATLocationInPartner result = new DTOCATLocationInPartner();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.LocationInPartner_Save(model, Account, item, partnerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATLocationInPartner LocationInSeaport_Get(int id)
        {
            try
            {
                DTOCATLocationInPartner result = new DTOCATLocationInPartner();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PartnerLocation.Where(c => c.ID == id).Select(c => new DTOCATLocationInPartner
                        {
                            ID = c.ID,
                            PartnerCode = c.PartnerCode,
                            LocationID = c.LocationID,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                            WardID = c.CAT_Location.WardID,
                            WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                            DistrictID = c.CAT_Location.DistrictID,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Location.CountryID,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.Lat = 0;
                        result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void LocationInSeaport_Delete(DTOCATLocationInPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationInPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult LocationNotInSeaport_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID > 1 && !string.IsNullOrEmpty(c.Code) && (c.CAT_PartnerLocation.Count() == 0 || !c.CAT_PartnerLocation.Any(d => d.PartnerID == partnerid))).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        LocationID = c.ID,
                        PartnerCode = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void LocationNotInSeaport_SaveList(List<DTOCATLocationInPartner> lst, int partnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationNotInPartner_Save(model, Account, lst, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region LocationInCarrier
        public DTOResult LocationInCarrier_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partnerid).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        LocationID = c.LocationID,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        WardID = c.CAT_Location.WardID,
                        WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATLocationInPartner LocationInCarrier_Save(DTOCATLocationInPartner item, int partnerid)
        {
            try
            {
                DTOCATLocationInPartner result = new DTOCATLocationInPartner();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.LocationInPartner_Save(model, Account, item, partnerid);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void LocationInCarrier_Delete(DTOCATLocationInPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationInPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult LocationNotInCarrier_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID > 1 && !string.IsNullOrEmpty(c.Code) && (c.CAT_PartnerLocation.Count() == 0 || !c.CAT_PartnerLocation.Any(d => d.PartnerID == partnerid))).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        LocationID = c.ID,
                        PartnerCode = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void LocationNotInCarrier_SaveList(List<DTOCATLocationInPartner> lst, int partnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationNotInPartner_Save(model, Account, lst, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATStock
        public DTOResult FLMStock_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Stock.Select(c => new FLMStock
                    {
                        ID = c.ID,
                        Code = c.Code,
                        StockName = c.StockName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<FLMStock>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public FLMStock FLMStock_Get(int id)
        {
            try
            {
                FLMStock result = new FLMStock();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_Stock.Where(c => c.ID == id).Select(c => new FLMStock
                        {
                            ID = c.ID,
                            Code = c.Code,
                            StockName = c.StockName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMStock_Save(FLMStock item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_Stock.Where(c => c.ID != item.ID && c.Code == item.Code).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã [" + item.Code + "] đã sử dụng");
                    var obj = model.FLM_Stock.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Stock();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.StockName = item.StockName;
                    if (obj.ID < 1)
                        model.FLM_Stock.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void FLMStock_Delete(FLMStock item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Stock.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                        model.FLM_Stock.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMStock_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.FLM_Stock.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            StockName = c.StockName
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã kho ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên kho", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.StockName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMStock_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Stock.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMStock_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Stock.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMStock_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.FLM_Stock.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new FLM_Stock();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.StockName = dataName;
                            if (obj.ID < 1)
                                model.FLM_Stock.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATLocation
        public DTOResult Location_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID != 1).Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        EconomicZone = c.EconomicZone,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        Note1 = c.Note1,
                        Note = c.Note,
                        GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                        GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                        LoadTimeCO = c.LoadTimeCO,
                        LoadTimeDI = c.LoadTimeDI,
                        UnLoadTimeCO = c.UnLoadTimeCO,
                        UnLoadTimeDI = c.UnLoadTimeDI,
                        CreatedBy = c.CreatedBy,
                        CreatedDate = c.CreatedDate,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int Location_Save(CATLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    CAT_Location location = new CAT_Location();
                    location = HelperRouting.CATLocation_Save(model, Account, item, false);
                    if (location != null)
                    {
                        return location.ID;
                    }
                    return -1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATLocation Location_Get(int ID)
        {
            try
            {
                CATLocation result = new CATLocation { ID = 0, CountryID = 0, ProvinceID = 0, DistrictID = 0, Lat = 0, Lng = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Location.Where(c => c.ID == ID).Select(c => new CATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            WardID = c.WardID,
                            DistrictID = c.DistrictID,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                            EconomicZone = c.EconomicZone,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            Note = c.Note,
                            Note1 = c.Note1,
                            GroupOfLocationID = c.GroupOfLocationID > 0 ? c.GroupOfLocationID.Value : -1,
                            GroupOfLocationName = c.GroupOfLocationID > 0 ? c.CAT_GroupOfLocation.GroupName : string.Empty,
                            LoadTimeCO = c.LoadTimeCO,
                            LoadTimeDI = c.LoadTimeDI,
                            UnLoadTimeCO = c.UnLoadTimeCO,
                            UnLoadTimeDI = c.UnLoadTimeDI
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.GroupOfLocationID = 0;
                        var gol = model.CAT_GroupOfLocation.FirstOrDefault();
                        if (gol != null)
                            result.GroupOfLocationID = gol.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATLocationDetail Location_GetDetail(int ID)
        {
            try
            {
                DTOCATLocationDetail result = new DTOCATLocationDetail();
                result.ListCustomer = new List<DTOCATLocationCustomer>();
                result.ListPartner = new List<CATPartner>();
                using (var model = new DataEntities())
                {
                    var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == ID);
                    if (objLocation == null)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy điểm");
                    }

                    result.ListPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == ID).Select(c => new CATPartner
                    {
                        ID = c.ID,
                        Code = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                        Address = c.CAT_Partner.Address,
                        WardID = c.CAT_Partner.WardID,
                        WardName = (c.CAT_Partner.WardID != null) ? c.CAT_Partner.CAT_Ward.WardName : "",
                        DistrictID = c.CAT_Partner.DistrictID,
                        DistrictName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        ProvinceID = c.CAT_Partner.ProvinceID,
                        ProvinceName = c.CAT_Partner.DistrictID > 0 ? c.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        CountryID = c.CAT_Partner.CountryID,
                        CountryName = c.CAT_Partner.CountryID > 0 ? c.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID,
                        TypeOfPartnerName = c.CAT_Partner.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListCustomer = model.CUS_Location.Where(c => c.LocationID == ID).Select(c => new DTOCATLocationCustomer
                    {
                        ID = c.CUS_Customer.ID,
                        Code = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CUSLocationCode = c.Code,
                        CUSLocationName = c.LocationName,

                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.Code : string.Empty,
                        PartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        PartnerAddress = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.Address : string.Empty,
                        PartnerWardName = (c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.WardID != null) ? c.CUS_Partner.CAT_Partner.CAT_Ward.WardName : "",
                        PartnerDistrictName = (c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.DistrictID > 0) ? c.CUS_Partner.CAT_Partner.CAT_District.DistrictName : string.Empty,
                        PartnerProvinceName = (c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.DistrictID > 0) ? c.CUS_Partner.CAT_Partner.CAT_Province.ProvinceName : string.Empty,
                        PartnerCountryName = (c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.CountryID > 0) ? c.CUS_Partner.CAT_Partner.CAT_Country.CountryName : string.Empty,
                        TypeOfPartnerName = c.CusPartID > 0 ? c.CUS_Partner.CAT_Partner.SYS_Var.ValueOfVar : string.Empty
                    }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void Location_Delete(CATLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATLocation_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public AddressSearchItem CATAddressSearch_List(int id)
        {
            try
            {
                var result = new AddressSearchItem();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.ID == id).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATLocation> ExcelLocation_List()
        {
            try
            {
                List<CATLocation> result = new List<CATLocation>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Location.Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Location = c.Location,
                        Code = c.Code,
                        Address = c.Address,
                        CountryName = c.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_District.DistrictName,
                        EconomicZone = c.EconomicZone,
                        Note1 = c.Note1,
                        Note = c.Note,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Location_UpdateLatLng(List<CATLocation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Location.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ExcelLocation_Save(List<CATLocationImport> lstLocation)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATLocation_ExcelImport(model, Account, lstLocation);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATTransportMode
        public DTOResult TransportMode_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TransportMode.Select(c => new CATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.SYS_Var.ValueOfVar,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATTransportMode>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int TransportMode_Save(CATTransportMode item)
        {

            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TransportMode.FirstOrDefault(c => c.ID == item.ID);
                    if (model.CAT_TransportMode.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw new Exception("Mã tồn tại");
                    if (obj == null)
                    {
                        obj = new CAT_TransportMode();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_TransportMode.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.Name = item.Name;
                    obj.TransportModeID = item.TransportModeID;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATTransportMode TransportMode_Get(int ID)
        {
            try
            {
                CATTransportMode result = new CATTransportMode { ID = 0, TransportModeID = 0, Code = "", Name = "" };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_TransportMode.Where(c => c.ID == ID).Select(c => new CATTransportMode
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            TransportModeID = c.TransportModeID,
                            TransportModeName = c.SYS_Var.ValueOfVar,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.TransportModeID = -(int)SYSVarType.TransportModeFCL;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void TransportMode_Delete(int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TransportMode.FirstOrDefault(c => c.ID == ID);
                    if (obj != null)
                    {
                        model.CAT_TransportMode.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel TransportMode_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_TransportMode.Select(c => new CATTransportMode
                            {
                                ID = c.ID,
                                Code = c.Code,
                                Name = c.Name,
                                TransportModeID = c.TransportModeID,
                                TransportModeName = c.SYS_Var.ValueOfVar,
                                TransportModeCode = c.SYS_Var.Code,
                            }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại hình v.chuyển", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại hình v.chuyển", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.Name));
                            cells.Add(HelperExcel.NewCell(item.TransportModeCode));
                            cells.Add(HelperExcel.NewCell(item.TransportModeName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeTransport = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TransportMode).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        ws = lstWorkSheet[1];
                        ws.Rows.Clear();

                        arrColumnWidth = new double[3];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 3; i++)
                        {
                            arrColumnWidth[i] = 110;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại hình v.chuyển", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại hình v.chuyển", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeTransport)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row TransportMode_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_TransportMode.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeTransport = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TransportMode).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeTransport.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel TransportMode_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstTypeTransport = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TransportMode).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstGetID = model.CAT_TransportMode.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(eRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeTransport.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool TransportMode_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataTypeOfPacketID = HelperExcel.GetString(eRow, colCheckTypeOfPacking);

                            int getid = Convert.ToInt32(dataID);
                            int getTypeOfPacketID = Convert.ToInt32(dataTypeOfPacketID);

                            var obj = model.CAT_TransportMode.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_TransportMode();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.Name = dataName;
                            obj.TransportModeID = getTypeOfPacketID;
                            if (obj.ID < 1)
                                model.CAT_TransportMode.Add(obj);
                            model.SaveChanges();

                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATServiceOfOrder
        public DTOResult ServiceOfOrder_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        ServiceOfOrderName = c.SYS_Var.ValueOfVar,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATServiceOfOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ServiceOfOrder_Save(CATServiceOfOrder item)
        {

            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.ID == item.ID);
                    if (model.CAT_ServiceOfOrder.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw new Exception("Mã tồn tại");
                    if (obj == null)
                    {
                        obj = new CAT_ServiceOfOrder();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_ServiceOfOrder.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.Name = item.Name;
                    obj.ServiceOfOrderID = item.ServiceOfOrderID;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATServiceOfOrder ServiceOfOrder_Get(int ID)
        {
            try
            {
                CATServiceOfOrder result = new CATServiceOfOrder { ID = 0, ServiceOfOrderID = 0, Code = "", Name = "" };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_ServiceOfOrder.Where(c => c.ID == ID).Select(c => new CATServiceOfOrder
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            ServiceOfOrderID = c.ServiceOfOrderID,
                            ServiceOfOrderName = c.SYS_Var.ValueOfVar,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ServiceOfOrderID = -(int)SYSVarType.ServiceOfOrderExport;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void ServiceOfOrder_Delete(int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.ID == ID);
                    if (obj != null)
                    {
                        model.CAT_ServiceOfOrder.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel ServiceOfOrder_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            ServiceOfOrderID = c.ServiceOfOrderID,
                            ServiceOfOrderName = c.SYS_Var.ValueOfVar,
                            ServiceOfOrderCode = c.SYS_Var.Code,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.Name));
                            cells.Add(HelperExcel.NewCell(item.ServiceOfOrderCode));
                            cells.Add(HelperExcel.NewCell(item.ServiceOfOrderName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        ws = lstWorkSheet[1];
                        ws.Rows.Clear();

                        arrColumnWidth = new double[3];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 3; i++)
                        {
                            arrColumnWidth[i] = 110;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeService)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row ServiceOfOrder_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_ServiceOfOrder.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeService.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel ServiceOfOrder_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstTypeService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstGetID = model.CAT_ServiceOfOrder.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(eRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeService.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool ServiceOfOrder_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataTypeOfPacketID = HelperExcel.GetString(eRow, colCheckTypeOfPacking);

                            int getid = Convert.ToInt32(dataID);
                            int getTypeOfPacketID = Convert.ToInt32(dataTypeOfPacketID);

                            var obj = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_ServiceOfOrder();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.Name = dataName;
                            obj.ServiceOfOrderID = getTypeOfPacketID;
                            if (obj.ID < 1)
                                model.CAT_ServiceOfOrder.Add(obj);
                            model.SaveChanges();

                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATDriver
        public DTOResult Driver_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Driver.Select(c => new CATDriver
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LastName = c.LastName,
                        FirstName = c.FirstName,
                        CardNumber = c.CardNumber,
                        Birthday = c.Birthday,
                        Cellphone = c.Cellphone,
                        ListDrivingLicence = c.ListDrivingLicence,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int Driver_Save(CATDriver item)
        {

            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Driver.FirstOrDefault(c => c.ID == item.ID);
                    if (model.CAT_Driver.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw new Exception("Mã tồn tại");
                    if (obj == null)
                    {
                        obj = new CAT_Driver();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Driver.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.LastName = item.LastName;
                    obj.FirstName = item.FirstName;
                    obj.CardNumber = item.CardNumber;
                    obj.Birthday = item.Birthday;
                    obj.Cellphone = item.Cellphone;
                    obj.ListDrivingLicence = item.ListDrivingLicence;
                    obj.Note = item.Note;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATDriver Driver_Get(int ID)
        {
            try
            {
                CATDriver result = new CATDriver();
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Driver.Where(c => c.ID == ID).Select(c => new CATDriver
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LastName = c.LastName,
                            FirstName = c.FirstName,
                            CardNumber = c.CardNumber,
                            Birthday = c.Birthday,
                            Cellphone = c.Cellphone,
                            ListDrivingLicence = c.ListDrivingLicence,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void Driver_Delete(int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Driver.FirstOrDefault(c => c.ID == ID);
                    if (obj != null)
                    {
                        model.CAT_Driver.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public SYSExcel Driver_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Driver.Select(c => new CATDriver
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LastName = c.LastName,
                            FirstName = c.FirstName,
                            CardNumber = c.CardNumber,
                            Birthday = c.Birthday,
                            Cellphone = c.Cellphone,
                            ListDrivingLicence = c.ListDrivingLicence,
                            Note = c.Note
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Họ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("CMND", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ngày sinh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số điện thoại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Giấy phép lái xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ghi chú", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.LastName));
                            cells.Add(HelperExcel.NewCell(item.FirstName));
                            cells.Add(HelperExcel.NewCell(item.CardNumber));
                            if (item.Birthday.HasValue)
                                cells.Add(HelperExcel.NewCell(-1, item.Birthday.Value.ToString("dd/MM/yyyy"), HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            else
                                cells.Add(HelperExcel.NewCell(-1, string.Empty, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatDDMMYYYY));
                            cells.Add(HelperExcel.NewCell(item.Cellphone));
                            cells.Add(HelperExcel.NewCell(item.ListDrivingLicence));
                            cells.Add(HelperExcel.NewCell(item.Note));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row Driver_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Driver.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataBirthday = HelperExcel.GetString(checkRow, colData++);



                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCardNumber, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBirthday, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel Driver_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.CAT_Driver.Select(c => new { c.ID, c.Code, c.LastName }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataBirthday = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCardNumber, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false, 500);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBirthday, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, false);
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool Driver_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataLastName = HelperExcel.GetString(checkRow, colData++);
                            string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                            string dataCardNumber = HelperExcel.GetString(checkRow, colData++);
                            string dataBirthday = HelperExcel.GetString(checkRow, colData++);
                            string dataCellPhone = HelperExcel.GetString(checkRow, colData++);
                            string dataListDrivingLicence = HelperExcel.GetString(checkRow, colData++);
                            string dataNote = HelperExcel.GetString(checkRow, colData++);

                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.CAT_Driver.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Driver();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.LastName = dataLastName;
                            obj.FirstName = dataFirstName;
                            obj.Birthday = !string.IsNullOrEmpty(dataBirthday) ? HelperExcel.ValueToDate(dataBirthday) : null;
                            obj.CardNumber = dataCardNumber;
                            obj.Cellphone = dataCellPhone;
                            obj.ListDrivingLicence = dataListDrivingLicence;
                            obj.Note = dataNote;
                            if (obj.ID < 1)
                                model.CAT_Driver.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region DrivingLicence
        public DTOResult DrivingLicence_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DrivingLicence.Select(c => new CATDrivingLicence
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DrivingLicenceName = c.DrivingLicenceName,
                        Description = c.Description,
                        VehicleWeight = c.VehicleWeight != null ? c.VehicleWeight : 0,
                        TypeOfVehicleID = c.TypeOfVehicleID != null ? c.TypeOfVehicleID : -1,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATDrivingLicence>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATDrivingLicence DrivingLicence_Get(int id)
        {
            try
            {
                CATDrivingLicence result = new CATDrivingLicence();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_DrivingLicence.Where(c => c.ID == id).Select(c => new CATDrivingLicence
                        {
                            ID = c.ID,
                            Code = c.Code,
                            DrivingLicenceName = c.DrivingLicenceName,
                            Description = c.Description,
                            VehicleWeight = c.VehicleWeight != null ? c.VehicleWeight : 0,
                            TypeOfVehicleID = c.TypeOfVehicleID != null ? c.TypeOfVehicleID : -1,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfVehicleID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int DrivingLicence_Save(CATDrivingLicence item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_DrivingLicence.Count(c => c.Code == item.Code && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    var obj = model.CAT_DrivingLicence.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_DrivingLicence();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.DrivingLicenceName = item.DrivingLicenceName;
                    obj.Description = item.Description;
                    obj.VehicleWeight = item.VehicleWeight;
                    obj.TypeOfVehicleID = item.TypeOfVehicleID != -1 ? item.TypeOfVehicleID : null;
                    if (obj.ID < 1)
                        model.CAT_DrivingLicence.Add(obj);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void DrivingLicence_Delete(CATDrivingLicence item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_DriverLicence.Count(c => c.DrivingLicenceID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Loại bằng lái đang được sử dụng.");

                    var obj = model.CAT_DrivingLicence.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_DrivingLicence.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel DrivingLicence_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_DrivingLicence.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            DrivingLicenceName = c.DrivingLicenceName,
                            Description = c.Description,
                            VehicleWeight = c.VehicleWeight != null ? c.VehicleWeight : 0,
                            TypeOfVehicleID = c.TypeOfVehicleID != null ? c.TypeOfVehicleID : -1,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mô tả", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.DrivingLicenceName));
                            cells.Add(HelperExcel.NewCell(item.Description));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row DrivingLicence_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_DrivingLicence.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel DrivingLicence_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_DrivingLicence.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool DrivingLicence_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataDescription = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_DrivingLicence.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_DrivingLicence();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.DrivingLicenceName = dataName;
                            obj.Description = dataDescription;
                            if (obj.ID < 1)
                                model.CAT_DrivingLicence.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Service
        public DTOResult GroupOfService_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfService.Select(c => new CATGroupOfService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfService = c.GroupOfService
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult Cost_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Cost.Where(c => c.TypeOfCostID != -(int)SYSVarType.TypeOfCostHidden).Select(c => new CATCost
                    {
                        ID = c.ID,
                        GroupOfCostID = c.GroupOfCostID,
                        GroupName = c.CAT_GroupOfCost.GroupName,
                        Code = c.Code,
                        CostName = c.CostName,
                        AccountNo = c.AccountNo,
                        IsFixedCost = c.IsFixedCost,
                        IsHidden = c.IsHidden,
                        TypeOfCostID = c.TypeOfCostID
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult CostRevenue_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Cost.Where(c => !c.IsHidden).Select(c => new CATCost
                    {
                        ID = c.ID,
                        GroupOfCostID = c.GroupOfCostID,
                        GroupName = c.CAT_GroupOfCost.GroupName,
                        Code = c.Code,
                        CostName = c.CostName,
                        AccountNo = c.AccountNo,
                        IsFixedCost = c.IsFixedCost,
                        IsHidden = c.IsHidden,
                        TypeOfCostID = c.TypeOfCostID
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult Packing_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        NoOfDelivery = c.NoOfDelivery
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        #region CategoryFactory
        public List<CATVehicle> Customer_Vehicle(int? customerid)
        {
            try
            {
                var result = new List<CATVehicle>();
                using (var model = new DataEntities())
                {
                    if (customerid == null)
                    {
                        result = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new CATVehicle
                        {
                            ID = c.CAT_Vehicle.ID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID
                        }).ToList();
                    }
                    else
                    {
                        result = model.CUS_Vehicle.Where(c => c.CustomerID == customerid.Value).Select(c => new CATVehicle
                        {
                            ID = c.CAT_Vehicle.ID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATRomooc> Customer_Romooc(int? customerid)
        {
            try
            {
                var result = new List<CATRomooc>();
                using (var model = new DataEntities())
                {
                    if (customerid == null)
                    {
                        result = model.CUS_Romooc.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new CATRomooc
                        {
                            ID = c.CAT_Romooc.ID,
                            RegNo = c.CAT_Romooc.RegNo
                        }).ToList();
                    }
                    else
                    {
                        result = model.CUS_Romooc.Where(c => c.CustomerID == customerid.Value).Select(c => new CATRomooc
                        {
                            ID = c.CAT_Romooc.ID,
                            RegNo = c.CAT_Romooc.RegNo
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Container Packing
        public DTOResult CATPackingCO_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => (c.ID == -(int)SYSVarType.TypeOfPackingCO20 || c.ID == -(int)SYSVarType.TypeOfPackingCO20R || c.ID == -(int)SYSVarType.TypeOfPackingCO40 || c.ID == -(int)SYSVarType.TypeOfPackingCO40R || c.ID == -(int)SYSVarType.TypeOfPackingCO20F || c.ID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ContainerPacking_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R)).Select(c => new DTOCATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPacking ContainerPacking_Get(int id)
        {
            try
            {
                DTOCATPacking result = new DTOCATPacking();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Packing.Where(c => c.ID == id).Select(c => new DTOCATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName,
                            TypeOfPackageID = c.TypeOfPackageID,
                            TypeOfPackageName = c.SYS_Var.ValueOfVar
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.TypeOfPackageID = -(int)SYSVarType.TypeOfPackingCO20;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ContainerPacking_Save(DTOCATPacking item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var q = model.CAT_Packing.FirstOrDefault(c => c.ID == item.ID);
                    if (q == null)
                    {
                        q = new CAT_Packing();
                        q.CreatedBy = Account.UserName;
                        q.CreatedDate = DateTime.Now;
                        q.NoOfDelivery = 0;
                        model.CAT_Packing.Add(q);
                    }
                    else
                    {
                        q.ModifiedBy = Account.UserName;
                        q.ModifiedDate = DateTime.Now;
                    }

                    q.TypeOfPackageID = item.TypeOfPackageID;
                    q.Code = item.Code;
                    q.PackingName = item.PackingName;
                    model.SaveChanges();
                    return q.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ContainerPacking_Delete(DTOCATPacking item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var q = model.CAT_Packing.FirstOrDefault(c => c.ID == item.ID);
                    if (q != null)
                    {
                        model.CAT_Packing.Remove(q);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Thiết lập cung đường
        public DTOResult RoutingAll_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Routing.Where(c => c.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        ParentCode = c.ParentID > 0 ? c.CAT_Routing2.Code : "",
                        ParentName = c.ParentID > 0 ? c.CAT_Routing2.RoutingName : "",
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Routing_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Routing.Where(c => c.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                        IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                        IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATRouting Routing_Get(int ID)
        {
            try
            {
                DTOCATRouting result = new DTOCATRouting { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Routing.Where(c => c.ID == ID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            ParentID = c.ParentID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            EDistance = c.EDistance,
                            EHours = c.EHours,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            RoutingAreaFromID = c.RoutingAreaFromID,
                            RoutingAreaToID = c.RoutingAreaToID,
                            IsAreaLast = c.IsAreaLast,
                            IsUse = c.IsUse,
                            LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                            AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                            AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                            IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                            IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                            IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                            ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Routing_Save(DTOCATRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Routing.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    if ((item.RoutingAreaFromID > 0 && !(item.RoutingAreaToID > 0)) || (item.RoutingAreaToID > 0 && !(item.RoutingAreaFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo khu vực thiếu khu vực bắt đầu hoặc kết thúc");
                    if ((item.LocationFromID > 0 && !(item.LocationToID > 0)) || (item.LocationToID > 0 && !(item.LocationFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo điểm thiếu điểm bắt đầu hoặc kết thúc");

                    var obj = model.CAT_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsAreaLast = item.IsAreaLast;
                        model.CAT_Routing.Add(obj);
                    }
                    else
                    {
                        // Edit thì ko hiện IsAreaLast
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ParentID = item.ParentID;
                    obj.LocationFromID = item.LocationFromID;
                    obj.LocationToID = item.LocationToID;
                    obj.EDistance = item.EDistance;
                    obj.EHours = item.EHours;
                    obj.Code = item.Code;
                    obj.RoutingName = item.RoutingName;
                    obj.RoutingAreaFromID = item.RoutingAreaFromID;
                    obj.RoutingAreaToID = item.RoutingAreaToID;
                    obj.IsUse = item.IsUse;
                    obj.Note = item.Note;
                    obj.IsLocation = false;
                    if (obj.LocationFromID > 0)
                        obj.IsLocation = true;

                    model.SaveChanges();

                    //if (obj.RoutingAreaFromID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaFromID.Value);
                    //if (obj.RoutingAreaToID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaToID.Value);

                    //model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Routing_Delete(DTOCATRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objCATRouting = model.CAT_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (objCATRouting == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu cung đường");
                    var lstCUSRoutingID = model.CUS_Routing.Where(c => c.RoutingID == objCATRouting.ID).Select(c => c.ID).ToList();

                    //kiểm tra

                    if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID > 0 && lstCUSRoutingID.Contains(c.CUSRoutingID.Value)) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo đơn hàng, không thể xóa!");
                    if (model.ORD_Container.Count(c => c.CUSRoutingID > 0 && lstCUSRoutingID.Contains(c.CUSRoutingID.Value)) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo đơn hàng, không thể xóa!");

                    if (model.OPS_DITOMaster.Count(c => c.CATRoutingID > 0 && c.CATRoutingID == objCATRouting.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo chuyến, không thể xóa!");
                    if (model.OPS_DITOGroupProduct.Count(c => c.CATRoutingID > 0 && c.CATRoutingID == objCATRouting.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo chuyến, không thể xóa!");

                    if (model.OPS_COTOMaster.Count(c => c.RoutingID > 0 && c.RoutingID == objCATRouting.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo chuyến, không thể xóa!");
                    if (model.OPS_COTOContainer.Count(c => c.CATRoutingID > 0 && c.CATRoutingID == objCATRouting.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã được tạo chuyến, không thể xóa!");

                    //xóa CUS_Routing
                    foreach (var cusRoute in model.CUS_Routing.Where(c => c.RoutingID == objCATRouting.ID))
                    {
                        model.CUS_Routing.Remove(cusRoute);
                    }
                    //xóa CAT_ConstraintAllocation
                    foreach (var constraint in model.CAT_ConstraintAllocation.Where(c => c.RoutingID > 0 && c.RoutingID == objCATRouting.ID))
                    {
                        model.CAT_ConstraintAllocation.Remove(constraint);
                    }
                    //CAT_ContractRouting
                    foreach (var cRoute in model.CAT_ContractRouting.Where(c => c.RoutingID == objCATRouting.ID))
                    {
                        foreach (var kpi in model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_ContractKPITime.Remove(kpi);

                        foreach (var priceCO in model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_PriceCOContainer.Remove(priceCO);

                        foreach (var priceEx in model.CAT_PriceDIEx.Where(c => c.ContractRoutingID == cRoute.ID))
                        {
                            foreach (var priceGL in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceEx.ID))
                                model.CAT_PriceDIExGroupLocation.Remove(priceGL);
                            foreach (var priceGP in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceEx.ID))
                                model.CAT_PriceDIExGroupProduct.Remove(priceGP);
                            foreach (var priceR in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceEx.ID))
                                model.CAT_PriceDIExRouting.Remove(priceR);
                            model.CAT_PriceDIEx.Remove(priceEx);
                        }

                        foreach (var detail in model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_PriceDIGroupProduct.Remove(detail);

                        foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_PriceDILevelGroupProduct.Remove(detail);

                        foreach (var detail in model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_PriceGroupVehicle.Remove(detail);

                        foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractRoutingID == cRoute.ID))
                            model.CAT_PriceGVLevelGroupVehicle.Remove(detail);

                        model.CAT_ContractRouting.Remove(cRoute);
                    }

                    foreach (var driverFee in model.CAT_DriverFeeRouting.Where(c => c.RoutingID == objCATRouting.ID))
                        model.CAT_DriverFeeRouting.Remove(driverFee);

                    foreach (var priceLoad in model.CAT_PriceDILoad.Where(c => c.RoutingID == objCATRouting.ID))
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == priceLoad.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);
                        model.CAT_PriceDILoad.Remove(priceLoad);
                    }
                    //CAT_PriceDIMOQ
                    foreach (var priceEx in model.CAT_PriceDIMOQ.Where(c => c.ParentRoutingID == objCATRouting.ID))
                    {
                        foreach (var priceGL in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceEx.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(priceGL);
                        foreach (var priceGP in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == priceEx.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(priceGP);
                        foreach (var priceR in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceEx.ID))
                            model.CAT_PriceDIMOQRouting.Remove(priceR);
                        model.CAT_PriceDIMOQ.Remove(priceEx);
                    }
                    //CAT_PriceDIMOQLoad
                    foreach (var priceEx in model.CAT_PriceDIMOQLoad.Where(c => c.ParentRoutingID == objCATRouting.ID))
                    {
                        foreach (var priceGL in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceEx.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(priceGL);
                        foreach (var priceGP in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == priceEx.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(priceGP);
                        foreach (var priceR in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == priceEx.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(priceR);
                        model.CAT_PriceDIMOQLoad.Remove(priceEx);
                    }
                    //CAT_PriceRouting
                    foreach (var price in model.CAT_PriceRouting.Where(c => c.RoutingID == objCATRouting.ID))
                    {
                        foreach (var priceGL in model.CAT_PriceRoutingCost.Where(c => c.PriceRoutingID == price.ID))
                            model.CAT_PriceRoutingCost.Remove(priceGL);
                        model.CAT_PriceRouting.Remove(price);
                    }
                    //xóa CAT_ConstraintAllocation
                    foreach (var constraint in model.CAT_RoutingAttribute.Where(c => c.RoutingID > 0 && c.RoutingID == objCATRouting.ID))
                        model.CAT_RoutingAttribute.Remove(constraint);
                    //CAT_RoutingCost
                    foreach (var child in model.CAT_RoutingCost.Where(c => c.RoutingID == objCATRouting.ID))
                        model.CAT_RoutingCost.Remove(child);
                    //CAT_RoutingEstimate
                    foreach (var detail in model.CAT_RoutingEstimate.Where(c => c.RoutingID == objCATRouting.ID))
                        model.CAT_RoutingEstimate.Remove(detail);
                    //CAT_RoutingRequire
                    foreach (var detail in model.CAT_RoutingRequire.Where(c => c.RoutingID == objCATRouting.ID))
                        model.CAT_RoutingRequire.Remove(detail);


                    model.CAT_Routing.Remove(objCATRouting);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Cập nhật location cho tất cả routing
        /// </summary>
        /// <param name="lstRoutingID"></param>
        public void Routing_UpdateLocationForAllRouting()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    var lstRoutingArea = model.CAT_RoutingArea.Where(c => c.CAT_Routing.Count > 0 || c.CAT_Routing1.Count > 0);
                    foreach (var area in lstRoutingArea)
                    {
                        RoutingAreaLocation_Update(model, area.ID);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Cập nhật Routing đc chọn cho tất cả khách hàng
        /// </summary>
        /// <param name="lstRoutingID"></param>
        public void Routing_SaveAllCustomer(List<int> lstRoutingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    var lstCustomerID = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH);
                    foreach (var customer in lstCustomerID)
                    {
                        var lstExistID = model.CUS_Routing.Where(c => c.CustomerID == customer.ID && lstRoutingID.Contains(c.RoutingID)).Select(c => c.RoutingID).Distinct().ToList();
                        foreach (var routingID in lstRoutingID.Where(c => !lstExistID.Contains(c)))
                        {
                            CUS_Routing obj = new CUS_Routing();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.CustomerID = customer.ID;
                            obj.RoutingID = routingID;
                            model.CUS_Routing.Add(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingLocationNotIn_List(string request, int? fromID, int? toID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.ID != fromID && c.ID != toID).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingAreaNotIn_List(string request, int? areafromID, int? areatoID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //var query = model.CAT_RoutingArea.Where(c => c.ID != areafromID && c.ID != areatoID).Select(c => new CATRoutingArea
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    AreaName = c.AreaName
                    //}).ToDataSourceResult(CreateRequest(request));
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int RoutingArea_Save(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return HelperRouting.CATRoutingArea_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATRoutingArea RoutingArea_Get(int ID)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea { ID = 0, IsAuto = false };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingArea.Where(c => c.ID == ID).Select(c => new CATRoutingArea
                            {
                                ID = c.ID,
                                Code = c.Code,
                                AreaName = c.AreaName,
                                IsAuto = c.IsAuto
                            }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void RoutingArea_Delete(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.CAT_Routing.Count > 0 || obj.CAT_Routing1.Count > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập, không thể xóa!");

                        foreach (var temp in model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaDetail.Remove(temp);
                        foreach (var temp in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaLocation.Remove(temp);

                        model.CAT_RoutingArea.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingAreaDetail_List(int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaDetail
                    {
                        ID = c.ID,
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                        WardID = c.WardID,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATRoutingAreaDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingAreaDetail RoutingAreaDetail_Get(int ID)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingAreaDetail.Where(c => c.ID == ID).Select(c => new DTOCATRoutingAreaDetail
                                   {
                                       ID = c.ID,
                                       RoutingAreaID = c.RoutingAreaID,
                                       ProvinceID = c.ProvinceID,
                                       DistrictID = c.DistrictID,
                                       WardID = c.WardID,
                                       CountryID = c.CountryID,
                                       CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                                       ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                                       DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                                       WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                                   }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int RoutingAreaDetail_Save(DTOCATRoutingAreaDetail item, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.ProvinceID == null)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tỉnh thành!");

                    if (item.ProvinceID > 0 && item.DistrictID > 0)
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã có khu vực bao quát khu vực đã chọn"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == item.DistrictID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!");
                    }
                    if (item.ProvinceID > 0 && !(item.DistrictID > 0))
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID > 0 && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã tồn tại khu vực chi tiết, không thể thêm khu vực bao quát");
                    }


                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingAreaDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.RoutingAreaID = areaID;
                    obj.ProvinceID = item.ProvinceID > 0 ? item.ProvinceID : null;
                    obj.DistrictID = item.DistrictID > 0 ? item.DistrictID : null;
                    obj.WardID = item.WardID < 1 ? null : item.WardID;
                    obj.CountryID = item.CountryID;

                    if (obj.ID < 1)
                        model.CAT_RoutingAreaDetail.Add(obj);
                    model.SaveChanges();

                    if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == areaID || c.RoutingAreaToID == areaID) > 0)
                    {
                        RoutingAreaLocation_Update(model, areaID);
                        model.SaveChanges();
                    }

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void RoutingAreaDetail_Delete(DTOCATRoutingAreaDetail item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_RoutingAreaDetail.Remove(obj);
                        model.SaveChanges();
                        if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == obj.RoutingAreaID || c.RoutingAreaToID == obj.RoutingAreaID) > 0)
                        {
                            RoutingAreaLocation_Update(model, obj.RoutingAreaID);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void RoutingAreaDetail_Refresh(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    RoutingAreaLocation_Update(model, item.ID);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void RoutingAreaLocation_Update(DataEntities model, int areaID)
        {
            try
            {
                // Xóa area location cũ
                foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID && c.CAT_RoutingArea.CAT_RoutingAreaDetail.Count > 0))
                    model.CAT_RoutingAreaLocation.Remove(item);

                var lstWardID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.WardID.HasValue).Select(c => c.WardID.Value).Distinct().ToArray();
                var lstDistrictID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.DistrictID.HasValue && c.WardID == null).Select(c => c.DistrictID.Value).Distinct().ToArray();
                var lstProvinceID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.ProvinceID.HasValue && c.DistrictID == null && c.WardID == null).Select(c => c.ProvinceID.Value).Distinct().ToArray();

                var lstLocation = model.CAT_Location.Where(c => (c.WardID.HasValue && lstWardID.Contains(c.WardID.Value)) || lstDistrictID.Contains(c.DistrictID) || lstProvinceID.Contains(c.ProvinceID)).Select(c => c.ID).ToArray();
                foreach (var location in lstLocation)
                {
                    CAT_RoutingAreaLocation objLocation = new CAT_RoutingAreaLocation();
                    objLocation.CreatedBy = Account.UserName;
                    objLocation.CreatedDate = DateTime.Now;
                    objLocation.LocationID = location;
                    objLocation.RoutingAreaID = areaID;
                    model.CAT_RoutingAreaLocation.Add(objLocation);
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingCost_List(string request, int routingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingCost.Where(c => c.RoutingID == routingID).Select(c => new DTOCATRoutingCost
                    {
                        ID = c.ID,
                        CostID = c.CostID,
                        Cost = c.Cost,
                        Note = c.Note,
                        RoutingID = c.RoutingID,
                        CostName = c.CAT_Cost.CostName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingCost RoutingCost_Get(int ID)
        {
            try
            {
                DTOCATRoutingCost result = new DTOCATRoutingCost();
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingCost.Where(c => c.ID == ID).Select(c => new DTOCATRoutingCost
                            {
                                ID = c.ID,
                                CostID = c.CostID,
                                Cost = c.Cost,
                                Note = c.Note,
                                RoutingID = c.RoutingID,
                                CostName = c.CAT_Cost.CostName
                            }).FirstOrDefault();
                    }
                    else
                    {
                        var objCost = model.CAT_Cost.Where(c => c.TypeOfCostID != -(int)SYSVarType.TypeOfCostHidden).FirstOrDefault();
                        if (objCost != null) result.CostID = objCost.ID; else result.CostID = 0;
                        result.Cost = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int RoutingCost_Save(DTOCATRoutingCost item, int routingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_RoutingCost.Count(c => c.CostID == item.CostID && c.RoutingID == routingID && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Chi phí đã được thiết lập trước đó!");

                    var obj = model.CAT_RoutingCost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingCost();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RoutingID = routingID;
                        model.CAT_RoutingCost.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.CostID = item.CostID;
                    obj.Cost = item.Cost;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void RoutingCost_Delete(DTOCATRoutingCost item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingCost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_RoutingCost.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ExcelRoutingCost_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Routing.Where(c => c.RoutingAreaFromID > 0 && c.RoutingAreaToID > 0).Select(c => new DTOExcelRoute
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        ParentCode = c.ParentID > 0 ? c.CAT_Routing2.Code : "",
                        ParentName = c.ParentID > 0 ? c.CAT_Routing2.RoutingName : "",
                        Code = c.Code,
                        Name = c.RoutingName,
                        AreaFromCode = c.CAT_RoutingArea.Code,
                        AreaFromName = c.CAT_RoutingArea.AreaName,
                        AreaToCode = c.CAT_RoutingArea1.Code,
                        AreaToName = c.CAT_RoutingArea1.AreaName,
                        Note = c.Note
                    }).ToList();

                    foreach (DTOExcelRoute item in query)
                    {
                        item.ListCost = model.CAT_RoutingCost.Where(c => c.RoutingID == item.ID).Select(c => new DTOExcelRouteCost
                        {
                            ID = c.CostID,
                            GroupID = c.CAT_Cost.GroupOfCostID,
                            CostCode = c.CAT_Cost.Code,
                            GroupCode = c.CAT_Cost.CAT_GroupOfCost.Code,
                            Cost = c.Cost
                        }).ToList();
                    }
                    result.Data = query;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ExcelRoutingCost_HeaderList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingCost.Where(c => c.CAT_Routing.RoutingAreaFromID > 0 && c.CAT_Routing.RoutingAreaToID > 0).Select(c => new DTOExcelRouteCost
                    {
                        ID = c.CostID,
                        GroupID = c.CAT_Cost.GroupOfCostID,
                        CostCode = c.CAT_Cost.Code,
                        GroupCode = c.CAT_Cost.CAT_GroupOfCost.Code
                    }).Distinct().OrderBy(c => c.GroupID).ToList();
                    result.Data = query;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ExcelRoutingArea_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new DTOExcelRouteArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.AreaName,
                        ParentID = c.ParentID > 0 ? c.ParentID : -1
                    }).ToList();

                    foreach (DTOExcelRouteArea item in query)
                    {
                        item.ListArea = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == item.ID).Select(c => new DTOCATRoutingAreaDetail
                        {
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.ProvinceID > 0 ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictID = c.DistrictID,
                            DistrictName = c.DistrictID > 0 ? c.CAT_District.DistrictName : string.Empty
                        }).ToList();
                    }
                    result.Data = query;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATCost> ExcelCost_List()
        {
            try
            {
                List<DTOCATCost> result = new List<DTOCATCost>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Cost.Select(c => new DTOCATCost
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfCostID = c.GroupOfCostID,
                        GroupOfCostCode = c.CAT_GroupOfCost.Code
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATRoutingArea> ExcelArea_List()
        {
            try
            {
                List<CATRoutingArea> result = new List<CATRoutingArea>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ExcelRoutingCost_Save(List<DTOExcelRoute> lstRoute)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    foreach (var o in lstRoute.Where(c => c.ExcelSuccess == true))
                    {
                        var obj = model.CAT_Routing.FirstOrDefault(c => c.Code == o.Code);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        else
                        {
                            obj = new CAT_Routing();
                            obj.IsUse = true;
                            model.CAT_Routing.Add(obj);

                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                        }
                        if (o.ParentID > 0)
                            obj.ParentID = o.ParentID.Value;
                        else
                            obj.ParentID = null;
                        obj.Code = o.Code;
                        obj.RoutingName = o.Name;
                        obj.Note = o.Note;

                        var f = model.CAT_RoutingArea.FirstOrDefault(c => c.Code == o.AreaFromCode);
                        var t = model.CAT_RoutingArea.FirstOrDefault(c => c.Code == o.AreaToCode);
                        if (f == null || t == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực!");

                        obj.RoutingAreaFromID = f.ID;
                        obj.RoutingAreaToID = t.ID;

                        model.SaveChanges();

                        if (o.ListCost != null && o.ListCost.Count > 0)
                        {
                            foreach (var cost in o.ListCost)
                            {
                                var objCost = model.CAT_RoutingCost.FirstOrDefault(c => c.CostID == cost.ID && c.RoutingID == obj.ID);
                                if (objCost == null)
                                {
                                    objCost = new CAT_RoutingCost();

                                    objCost.RoutingID = obj.ID;
                                    objCost.CostID = cost.ID;

                                    objCost.CreatedBy = Account.UserName;
                                    objCost.CreatedDate = DateTime.Now;
                                    model.CAT_RoutingCost.Add(objCost);
                                }
                                else
                                {
                                    objCost.ModifiedBy = Account.UserName;
                                    objCost.ModifiedDate = DateTime.Now;
                                }
                                objCost.Cost = cost.Cost;
                            }
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ExcelArea_Save(List<DTOExcelRouteArea> lstArea)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    foreach (var o in lstArea.Where(c => c.ExcelSuccess == true))
                    {
                        var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.Code == o.Code);
                        if (obj == null)
                        {
                            obj = new CAT_RoutingArea();
                            obj.Code = o.Code;
                            obj.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(o.Code);
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            model.CAT_RoutingArea.Add(obj);
                        }
                        else
                        {
                            var lstDetail = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == obj.ID).ToList();
                            if (lstDetail != null && lstDetail.Count > 0)
                                model.CAT_RoutingAreaDetail.RemoveRange(lstDetail);
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }

                        obj.AreaName = o.Name;

                        if (!string.IsNullOrEmpty(o.ParentCode))
                        {
                            var objParent = model.CAT_RoutingArea.FirstOrDefault(c => c.Code == o.ParentCode);
                            if (objParent == null)
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực cha!");
                            obj.ParentID = objParent.ID;
                        }

                        model.SaveChanges();
                        if (o.ListArea != null && o.ListArea.Count > 0)
                        {
                            foreach (var area in o.ListArea.Distinct().ToList())
                            {
                                CAT_RoutingAreaDetail objDetail = new CAT_RoutingAreaDetail();
                                objDetail.RoutingAreaID = obj.ID;
                                objDetail.CountryID = 1;

                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;

                                var p = model.CAT_Province.FirstOrDefault(c => c.ProvinceName == area.ProvinceName);
                                int districtID = -1;
                                if (!string.IsNullOrEmpty(area.DistrictName))
                                {
                                    var d = model.CAT_District.FirstOrDefault(c => c.DistrictName == area.DistrictName);
                                    if (d != null)
                                        districtID = d.ID;
                                }
                                if (p != null)
                                    objDetail.ProvinceID = p.ID;
                                if (districtID > 0)
                                    objDetail.DistrictID = districtID;
                                model.CAT_RoutingAreaDetail.Add(objDetail);
                            }
                            model.SaveChanges();
                        }
                        ////Tam khoa
                        //RoutingAreaLocation_Update(model, obj.ID);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATProvince> ExcelProvince_List()
        {
            try
            {
                List<CATProvince> result = new List<CATProvince>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Province.Select(c => new CATProvince
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ProvinceName = c.ProvinceName,
                        CountryID = c.CountryID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CATDistrict> ExcelDistrict_List()
        {
            try
            {
                List<CATDistrict> result = new List<CATDistrict>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_District.Select(c => new CATDistrict
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DistrictName = c.DistrictName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<AddressSearchItem> AddressSearch_List()
        {
            try
            {
                var result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.Code != null).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOExcelRouteAreaLocation> ExcelRouteAreaLocation_List()
        {
            try
            {
                List<DTOExcelRouteAreaLocation> result = new List<DTOExcelRouteAreaLocation>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_RoutingAreaLocation.Select(c => new DTOExcelRouteAreaLocation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAdress = c.CAT_Location.Address,
                        AreaID = c.CAT_RoutingArea.ID,
                        AreaCode = c.CAT_RoutingArea.Code,
                        AreaName = c.CAT_RoutingArea.AreaName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        WardID = c.CAT_Location.WardID,
                        WardName = c.CAT_Location.WardID == null ? string.Empty : c.CAT_Location.CAT_Ward.WardName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATRoutingExcelData CATRouting_ExcelData()
        {
            try
            {
                DTOCATRoutingExcelData result = new DTOCATRoutingExcelData();
                result.ListRoute = new List<DTOCATRouting>();
                result.ListCustomer = new List<DTOCustomer>();
                result.ListContract = new List<DTOCATContract>();
                result.ListContractRouting = new List<DTOCATContractRouting>();
                using (var model = new DataEntities())
                {
                    result.ListRoute = model.CAT_Routing.Where(c => c.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                        IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                        IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note,
                    }).ToList();

                    result.ListCustomer = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                    }).ToList();

                    List<int> lstCus = new List<int>();
                    lstCus = result.ListCustomer.Select(c => c.ID).ToList();
                    result.ListContract = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID > 0 && lstCus.Contains(c.CustomerID.Value)).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                        }).ToList();

                    List<int> lstCon = new List<int>();
                    lstCon = result.ListContract.Select(c => c.ID).ToList();
                    result.ListContractRouting = model.CAT_ContractRouting.Where(c => lstCon.Contains(c.ContractID)).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        RoutingID = c.RoutingID,
                        Code = c.Code
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATRouting_AllCustomerList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var obj = model.SYS_User.Where(c => c.UserName == Account.UserName).Select(c => new { c.ListCustomerID }).FirstOrDefault();
                    if (obj != null && !string.IsNullOrEmpty(obj.ListCustomerID))
                    {
                        var lstid = new List<int>();
                        foreach (var str in obj.ListCustomerID.Split(','))
                        {
                            try
                            {
                                lstid.Add(Convert.ToInt32(str));
                            }
                            catch { }
                        }

                        var query = model.CUS_Customer.Where(c => !c.IsSystem && lstid.Contains(c.ID)).Select(c => new DTOCustomer
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CustomerName = c.CustomerName
                        }).ToList();
                        result.Data = query as IEnumerable<DTOCustomer>;
                        result.Total = query.Count;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATGroupOfCost, CATCost

        public DTOResult CATCost_GroupList(int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfCost.Where(c => c.ID != id).Select(c => new DTOCATGroupOfCost
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Data = query;
                    result.Total = query.Count;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Import Hãng tàu, Cảng biển, Nhà phân phối
        /// <summary>
        /// Ds nhà phân phối, hãng tàu, cảng biển
        /// </summary>
        /// <param name="TypeOfPartnerID"></param>
        /// <returns></returns>
        private DTOResult Partner_AllList(int TypeOfPartnerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Partner.Where(c => c.TypeOfPartnerID == TypeOfPartnerID).Select(c => new DTOCATPartnerItem
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.PartnerName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Danh sách địa điểm của NPP, hãng tàu, cảng biển
        /// </summary>
        /// <param name="TypeOfPartnerID"></param>
        /// <returns></returns>
        private DTOResult PartnerLocation_AllList(int TypeOfPartnerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == TypeOfPartnerID).Select(c => new DTOCATLocationItem
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Name = c.CAT_Location.Location,
                        PartnerCode = c.PartnerCode,
                        PartnerID = c.PartnerID
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Export ds Partner + location
        /// </summary>
        /// <param name="TypeOfPartnerID"></param>
        /// <returns></returns>
        private List<DTOCATPartnerImport> Partner_Export(DataEntities model, AccountItem Account, int TypeOfPartnerID)
        {
            try
            {
                List<DTOCATPartnerImport> result = new List<DTOCATPartnerImport>();

                var query = model.CAT_Partner.Where(c => c.TypeOfPartnerID == TypeOfPartnerID);
                foreach (var partner in query)
                {
                    DTOCATPartnerImport catPartner = new DTOCATPartnerImport();
                    catPartner.ID = partner.ID;
                    catPartner.Code = partner.Code;
                    catPartner.PartnerName = partner.PartnerName;
                    catPartner.CountryID = partner.CountryID;
                    catPartner.CountryName = partner.CountryID.HasValue ? partner.CAT_Country.CountryName : string.Empty;
                    catPartner.ProvinceID = partner.ProvinceID;
                    catPartner.ProvinceName = partner.ProvinceID.HasValue ? partner.CAT_Province.ProvinceName : string.Empty;
                    catPartner.DistrictID = partner.DistrictID;
                    catPartner.DistrictName = partner.DistrictID.HasValue ? partner.CAT_District.DistrictName : string.Empty;
                    catPartner.Address = partner.Address;
                    catPartner.GroupOfPartnerID = partner.GroupOfPartnerID;
                    catPartner.GroupOfPartnerCode = partner.GroupOfPartnerID.HasValue ? partner.CAT_GroupOfPartner.Code : string.Empty;
                    catPartner.TelNo = partner.TelNo;
                    catPartner.Fax = partner.Fax;
                    catPartner.Email = partner.Email;
                    result.Add(catPartner);
                    catPartner.lstLocation = new List<DTOCATLocationImport>();
                    var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.ID).Select(c => new DTOCATLocationImport
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        PartnerCode = c.PartnerCode,
                        LocationName = c.CAT_Location.Location,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        Address = c.CAT_Location.Address,
                        IsSuccess = true,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).Distinct().ToList();
                    catPartner.lstLocation.AddRange(lstLocation);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Distributor_AllList()
        {
            try
            {
                return Partner_AllList(-(int)SYSVarType.TypeOfPartnerDistributor);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Carrier_AllList()
        {
            try
            {
                return Partner_AllList(-(int)SYSVarType.TypeOfPartnerCarrier);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult SeaPort_AllList()
        {
            try
            {
                return Partner_AllList(-(int)SYSVarType.TypeOfPartnerSeaPort);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Station_AllList()
        {
            try
            {
                return Partner_AllList(-(int)SYSVarType.TypeOfPartnerStation);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DistributorLocation_AllList()
        {
            try
            {
                return PartnerLocation_AllList(-(int)SYSVarType.TypeOfPartnerDistributor);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CarrierLocation_AllList()
        {
            try
            {
                return PartnerLocation_AllList(-(int)SYSVarType.TypeOfPartnerCarrier);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult SeaPortLocation_AllList()
        {
            try
            {
                return PartnerLocation_AllList(-(int)SYSVarType.TypeOfPartnerSeaPort);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult StationLocation_AllList()
        {
            try
            {
                return PartnerLocation_AllList(-(int)SYSVarType.TypeOfPartnerStation);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfPartner_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName
                        }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Distributor_Import(List<DTOCATPartnerImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Import(model, Account, lst, -(int)SYSVarType.TypeOfPartnerDistributor);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Carrier_Import(List<DTOCATPartnerImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Import(model, Account, lst, -(int)SYSVarType.TypeOfPartnerCarrier);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SeaPort_Import(List<DTOCATPartnerImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Import(model, Account, lst, -(int)SYSVarType.TypeOfPartnerSeaPort);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Station_Import(List<DTOCATPartnerImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Import(model, Account, lst, -(int)SYSVarType.TypeOfPartnerStation);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATPartnerImport> Distributor_Export()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return Partner_Export(model, Account, -(int)SYSVarType.TypeOfPartnerDistributor);
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATPartnerImport> SeaPort_Export()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return Partner_Export(model, Account, -(int)SYSVarType.TypeOfPartnerSeaPort);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATPartnerImport> Station_Export()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return Partner_Export(model, Account, -(int)SYSVarType.TypeOfPartnerStation);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATPartnerImport> Carrier_Export()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return Partner_Export(model, Account, -(int)SYSVarType.TypeOfPartnerCarrier);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xuất danh sách Partner, Location vs Customer
        /// </summary>
        /// <returns></returns>
        private DTOCUSPartnerLocationExport PartnerLocation_Export(DataEntities model, AccountItem Account, int TypeOfPartnerID, List<int> lstCustomerID)
        {
            try
            {
                DTOCUSPartnerLocationExport result = new DTOCUSPartnerLocationExport();
                result.lstCustomer = new List<CUSCustomer>();
                result.lstPartner = new List<DTOCUSPartnerImport>();
                result.lstCusPartner = new List<DTOCustomerPartnerImport>();
                result.lstCusLocation = new List<DTOCustomerLocationImport>();
                if (lstCustomerID == null)
                    lstCustomerID = new List<int>();

                var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();
                result.lstCustomer.AddRange(lstCustomer);
                var lstPartner = model.CAT_Partner.Where(c => c.TypeOfPartnerID == TypeOfPartnerID).Select(c => new DTOCUSPartnerImport
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.PartnerName,
                        Address = c.Address,
                        GroupOfPartnerName = c.GroupOfPartnerID.HasValue ? c.CAT_GroupOfPartner.GroupName : c.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor ? "NPP" : c.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier ? "Hãng tàu" : c.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerSeaPort ? "Cảng biển" : string.Empty
                    }).ToList();
                foreach (var partner in lstPartner)
                {
                    partner.lstLocation = new List<DTOCUSLocationImport>();
                    var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == partner.ID).Select(c => new DTOCUSLocationImport
                        {
                            ID = c.LocationID,
                            Code = c.CAT_Location.Code,
                            Address = c.CAT_Location.Address,
                            Name = c.CAT_Location.Location,
                            PartnerCode = c.PartnerCode
                        }).ToList();
                    partner.lstLocation.AddRange(lstLocation);
                    result.lstPartner.Add(partner);
                }
                var lstCusPartner = model.CUS_Partner.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CAT_Partner.TypeOfPartnerID == TypeOfPartnerID).Select(c => new DTOCustomerPartnerImport
                    {
                        CustomerID = c.CustomerID,
                        PartnerID = c.PartnerID,
                        Code = c.PartnerCode,
                        IsSuccess = true,
                        IsDelete = c.ORD_Order.Count == 0 && c.ORD_GroupProduct.Count == 0
                    }).ToList();
                result.lstCusPartner.AddRange(lstCusPartner);
                var lstCusLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == TypeOfPartnerID).Select(c => new DTOCustomerLocationImport
                {
                    ID = c.ID,
                    CustomerID = c.CustomerID,
                    LocationID = c.LocationID,
                    Code = c.Code,
                    IsSuccess = true,
                    IsDelete = true,
                    PartnerID = c.CUS_Partner.PartnerID
                }).ToList();
                foreach (var item in lstCusLocation)
                {
                    if (model.ORD_Order.Count(c => c.LocationDepotID == item.ID || c.LocationDepotReturnID == item.ID || c.LocationFromID == item.ID || c.LocationToID == item.ID) > 0)
                        item.IsDelete = false;
                    else
                        if (model.ORD_Container.Count(c => c.LocationDepotID == item.ID || c.LocationDepotReturnID == item.ID || c.LocationFromID == item.ID || c.LocationToID == item.ID) > 0)
                            item.IsDelete = false;
                        else
                            if (model.ORD_ContainerPrice.Count(c => c.LocationFromID == item.ID || c.LocationToID == item.ID) > 0)
                                item.IsDelete = false;
                            else
                                if (model.ORD_GroupProduct.Count(c => c.LocationFromID == item.ID || c.LocationToID == item.ID) > 0)
                                    item.IsDelete = false;
                    var cuspart = result.lstCusPartner.FirstOrDefault(c => c.PartnerID == item.PartnerID);
                    if (cuspart != null && cuspart.IsDelete)
                        cuspart.IsDelete = item.IsDelete;
                }
                result.lstCusLocation.AddRange(lstCusLocation);
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocationExport PartnerLocation_Distributor_Export(List<int> lstCustomerID)
        {
            try
            {
                DTOCUSPartnerLocationExport result = new DTOCUSPartnerLocationExport();
                using (var model = new DataEntities())
                {
                    result = PartnerLocation_Export(model, Account, -(int)SYSVarType.TypeOfPartnerDistributor, lstCustomerID);
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocationExport PartnerLocation_Carrier_Export(List<int> lstCustomerID)
        {
            try
            {
                DTOCUSPartnerLocationExport result = new DTOCUSPartnerLocationExport();
                using (var model = new DataEntities())
                {
                    result = PartnerLocation_Export(model, Account, -(int)SYSVarType.TypeOfPartnerCarrier, lstCustomerID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocationExport PartnerLocation_SeaPort_Export(List<int> lstCustomerID)
        {
            try
            {
                DTOCUSPartnerLocationExport result = new DTOCUSPartnerLocationExport();
                using (var model = new DataEntities())
                {
                    result = PartnerLocation_Export(model, Account, -(int)SYSVarType.TypeOfPartnerSeaPort, lstCustomerID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPartnerLocationExport PartnerLocation_Station_Export(List<int> lstCustomerID)
        {
            try
            {
                DTOCUSPartnerLocationExport result = new DTOCUSPartnerLocationExport();
                using (var model = new DataEntities())
                {
                    result = PartnerLocation_Export(model, Account, -(int)SYSVarType.TypeOfPartnerStation, lstCustomerID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        public void DistributorLocation_Import(DTOCUSPartnerLocationImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.PartnerLocation_Import(model, Account, item, -(int)SYSVarType.TypeOfPartnerDistributor);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CarrierLocation_Import(DTOCUSPartnerLocationImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.PartnerLocation_Import(model, Account, item, -(int)SYSVarType.TypeOfPartnerCarrier);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SeaPortLocation_Import(DTOCUSPartnerLocationImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.PartnerLocation_Import(model, Account, item, -(int)SYSVarType.TypeOfPartnerSeaPort);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void StationLocation_Import(DTOCUSPartnerLocationImport item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.PartnerLocation_Import(model, Account, item, -(int)SYSVarType.TypeOfPartnerStation);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region CATConstraint

        public DTOResult CATConstraint_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Constraint.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOCATConstraint
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ConstraintName = c.ConstraintName,
                        IsApproved = c.IsApproved,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATConstraint>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATConstraint CATConstraint_Get(int id)
        {
            try
            {
                DTOCATConstraint result = new DTOCATConstraint();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Constraint.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == id).Select(c => new DTOCATConstraint
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ConstraintName = c.ConstraintName,
                            IsApproved = c.IsApproved,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CATConstraint_Save(DTOCATConstraint item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Constraint.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    else
                    {
                        obj = new CAT_Constraint();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.CAT_Constraint.Add(obj);
                    }
                    obj.Code = item.Code;
                    obj.ConstraintName = item.ConstraintName;
                    obj.IsApproved = item.IsApproved;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATConstraint_Delete(DTOCATConstraint item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Constraint.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        var lstAllocation = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == item.ID).ToList();
                        if (lstAllocation != null && lstAllocation.Count > 0)
                        {
                            model.CAT_ConstraintAllocation.RemoveRange(lstAllocation);
                        }
                        var lstAttribute = model.CAT_ConstraintAttribute.Where(c => c.ConstraintID == item.ID).ToList();
                        if (lstAttribute != null && lstAttribute.Count > 0)
                        {
                            model.CAT_ConstraintAttribute.RemoveRange(lstAttribute);
                        }
                        var lstRequire = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == item.ID).ToList();
                        if (lstRequire != null && lstRequire.Count > 0)
                        {
                            model.CAT_ConstraintRequire.RemoveRange(lstRequire);
                        }
                        model.CAT_Constraint.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATConstraint_UpdateConstraint(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (lst.Count > 0)
                    {
                        var ListAllocation = model.CAT_ConstraintAllocation.Where(c => lst.Contains(c.ConstraintID)).Select(c => new { c.ConstraintID, c.LocationID, c.RoutingID, c.VehicleID }).ToList();

                        //xóa
                        foreach (var route in model.CAT_RoutingRequire.Where(c => c.ConstraintID > 0 && lst.Contains(c.ConstraintID.Value)))
                            model.CAT_RoutingRequire.Remove(route);
                        foreach (var location in model.CAT_LocationRequire.Where(c => c.ConstraintID > 0 && lst.Contains(c.ConstraintID.Value)))
                            model.CAT_LocationRequire.Remove(location);
                        foreach (var asset in model.FLM_AssetRequire.Where(c => c.ConstraintID > 0 && lst.Contains(c.ConstraintID.Value)))
                            model.FLM_AssetRequire.Remove(asset);

                        //lay constrain require
                        var ListConstraintRequire = model.CAT_ConstraintRequire.Where(c => lst.Contains(c.ConstraintID)).ToList();
                        //them moi
                        foreach (var allocation in ListAllocation)
                        {
                            foreach (var ConstRequire in ListConstraintRequire.Where(c => c.ConstraintID == allocation.ConstraintID))
                            {
                                if (allocation.RoutingID > 0)
                                {
                                    CAT_RoutingRequire objR = new CAT_RoutingRequire();
                                    objR.CreatedBy = Account.UserName;
                                    objR.CreatedDate = DateTime.Now;
                                    objR.RoutingID = allocation.RoutingID.Value;
                                    objR.TimeFrom = ConstRequire.TimeFrom;
                                    objR.TimeTo = ConstRequire.TimeTo;
                                    objR.ConstraintID = ConstRequire.ConstraintID;
                                    objR.ConstraintRequireTypeID = ConstRequire.ConstraintRequireTypeID;
                                    objR.Weight = ConstRequire.Weight;
                                    objR.Width = ConstRequire.Width;
                                    objR.Length = ConstRequire.Length;
                                    objR.Height = ConstRequire.Height;
                                    model.CAT_RoutingRequire.Add(objR);
                                }
                                if (allocation.LocationID > 0)
                                {
                                    CAT_LocationRequire objL = new CAT_LocationRequire();
                                    objL.CreatedBy = Account.UserName;
                                    objL.CreatedDate = DateTime.Now;
                                    objL.LocationID = allocation.LocationID.Value;
                                    objL.TimeFrom = ConstRequire.TimeFrom;
                                    objL.TimeTo = ConstRequire.TimeTo;
                                    objL.ConstraintID = ConstRequire.ConstraintID;
                                    objL.ConstraintRequireTypeID = ConstRequire.ConstraintRequireTypeID;
                                    objL.Weight = ConstRequire.Weight;
                                    objL.Width = ConstRequire.Width;
                                    objL.Length = ConstRequire.Length;
                                    objL.Height = ConstRequire.Height;
                                    model.CAT_LocationRequire.Add(objL);
                                }
                                if (allocation.VehicleID > 0)
                                {
                                    FLM_AssetRequire objV = new FLM_AssetRequire();
                                    objV.CreatedBy = Account.UserName;
                                    objV.CreatedDate = DateTime.Now;
                                    objV.AssetID = allocation.VehicleID.Value;
                                    objV.TimeFrom = ConstRequire.TimeFrom;
                                    objV.TimeTo = ConstRequire.TimeTo;
                                    objV.ConstraintID = ConstRequire.ConstraintID;
                                    objV.ConstraintRequireTypeID = ConstRequire.ConstraintRequireTypeID;
                                    objV.Weight = ConstRequire.Weight;
                                    objV.Width = ConstRequire.Width;
                                    objV.Length = ConstRequire.Length;
                                    objV.Height = ConstRequire.Height;
                                    objV.KMFrom = ConstRequire.KMFrom;
                                    objV.KMTo = ConstRequire.KMTo;
                                    objV.KMScore = ConstRequire.KMScore;
                                    model.FLM_AssetRequire.Add(objV);
                                }
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_Route_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == ID && c.RoutingID.HasValue).Select(c => new DTOCATConstraintAllocation
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        LocationID = c.LocationID,
                        RoutingCode = c.RoutingID > 0 ? c.CAT_Routing.Code : string.Empty,
                        RoutingName = c.RoutingID > 0 ? c.CAT_Routing.RoutingName : string.Empty,
                        LocationCode = c.LocationID > 0 ? c.CAT_Location.Code : string.Empty,
                        LocationName = c.LocationID > 0 ? c.CAT_Location.Location : string.Empty,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATConstraintAllocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_RouteNotIn_Save(List<int> lstid, int cID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstid)
                    {
                        if (model.CAT_ConstraintAllocation.Where(c => c.RoutingID == item && c.ID == cID).Count() > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã tồn tại trong ràng buộc");
                        var obj = new CAT_ConstraintAllocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = cID;
                        obj.RoutingID = item;
                        obj.LocationID = null;
                        model.CAT_ConstraintAllocation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_Route_Delete(DTOCATConstraintAllocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintAllocation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_ConstraintAllocation.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATConstraint_RouteNotIn_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstid = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == ID && c.RoutingID.HasValue).Select(c => c.RoutingID.Value).ToList();
                    if (lstid == null) lstid = new List<int>();
                    var query = model.CAT_Routing.Where(c => c.Code != string.Empty && !lstid.Contains(c.ID) && c.IsUse).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_Location_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == ID && c.LocationID.HasValue).Select(c => new DTOCATConstraintAllocation
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        LocationID = c.LocationID,
                        RoutingCode = c.RoutingID > 0 ? c.CAT_Routing.Code : string.Empty,
                        RoutingName = c.RoutingID > 0 ? c.CAT_Routing.RoutingName : string.Empty,
                        LocationCode = c.LocationID > 0 ? c.CAT_Location.Code : string.Empty,
                        LocationName = c.LocationID > 0 ? c.CAT_Location.Location : string.Empty,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATConstraintAllocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_LocationNotIn_Save(List<int> lstid, int cID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstid)
                    {
                        if (model.CAT_ConstraintAllocation.Where(c => c.LocationID == item && c.ID == cID).Count() > 0)
                            throw FaultHelper.BusinessFault(null, null, "Địa điểm đã tồn tại trong ràng buộc");
                        var obj = new CAT_ConstraintAllocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = cID;
                        obj.LocationID = item;
                        obj.RoutingID = null;
                        model.CAT_ConstraintAllocation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_Location_Delete(DTOCATConstraintAllocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintAllocation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_ConstraintAllocation.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATConstraint_LocationNotIn_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstid = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == ID && c.LocationID.HasValue).Select(c => c.LocationID.Value).ToList();
                    if (lstid == null) lstid = new List<int>();
                    var query = model.CAT_Location.Where(c => c.Code != string.Empty && !lstid.Contains(c.ID)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Location = c.Location,
                        Code = c.Code,
                        Address = c.Address,
                        CountryName = c.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_District.DistrictName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_Vehicle_List(string request, int ID, SYSVarType typeAssetVehicle)
        {
            try
            {
                DTOResult result = new DTOResult();
                if (typeAssetVehicle != SYSVarType.TypeOfAssetTruck && typeAssetVehicle != SYSVarType.TypeOfAssetTractor)
                    throw FaultHelper.BusinessFault(null, null, "Loại xe không đúng");
                int type = -(int)typeAssetVehicle;
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == ID && c.VehicleID > 0 && c.FLM_Asset.TypeOfAssetID == type).Select(c => new DTOCATConstraintAllocation
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        LocationID = c.LocationID,
                        RoutingCode = c.RoutingID > 0 ? c.CAT_Routing.Code : string.Empty,
                        RoutingName = c.RoutingID > 0 ? c.CAT_Routing.RoutingName : string.Empty,
                        LocationCode = c.LocationID > 0 ? c.CAT_Location.Code : string.Empty,
                        LocationName = c.LocationID > 0 ? c.CAT_Location.Location : string.Empty,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATConstraintAllocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_VehicleNotIn_Save(List<int> lstid, int cID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstRegno = model.CAT_ConstraintAllocation.Where(c => c.ID == cID && lstid.Contains(c.VehicleID.Value) && c.VehicleID > 0).Select(c => c.FLM_Asset.CAT_Vehicle.RegNo).ToList();
                    if (lstRegno.Count > 0) throw FaultHelper.BusinessFault(null, null, "Số xe [" + string.Join(",", lstRegno) + "] đã tồn tại trong ràng buộc");
                    foreach (var item in lstid)
                    {
                        var obj = new CAT_ConstraintAllocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = cID;
                        obj.VehicleID = item;
                        obj.RoutingID = null;
                        obj.LocationID = null;
                        model.CAT_ConstraintAllocation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_Vehicle_Delete(DTOCATConstraintAllocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintAllocation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu CAT_ConstraintAllocation");
                    model.CAT_ConstraintAllocation.Remove(obj);
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATConstraint_VehicleNotIn_List(string request, int constraintID, SYSVarType typeAssetVehicle)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (typeAssetVehicle != SYSVarType.TypeOfAssetTruck && typeAssetVehicle != SYSVarType.TypeOfAssetTractor)
                        throw FaultHelper.BusinessFault(null, null, "Loại xe không đúng");

                    var lstid = model.CAT_ConstraintAllocation.Where(c => c.ConstraintID == constraintID && c.VehicleID > 0 && c.FLM_Asset.TypeOfAssetID == -(int)typeAssetVehicle).Select(c => c.VehicleID.Value).ToList();

                    var query = model.FLM_Asset.Where(c => c.TypeOfAssetID == -(int)typeAssetVehicle && !lstid.Contains(c.ID)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        GroupOfVehicleName = c.CAT_Vehicle.GroupOfVehicleID > 0 ? c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName : string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_OpenHour_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID && c.ConstraintRequireTypeID == -(int)SYSVarType.ConstraintRequireTypeOpenWeek).Select(c => new DTOCATConstraintRequire
                    {
                        ID = c.ID,
                        ConstraintID = c.ConstraintID,
                        TimeFrom = c.TimeFrom,
                        TimeTo = c.TimeTo,
                        Weight = c.Weight,
                        Width = c.Width,
                        Length = c.Length,
                        DateName = string.Empty,
                        ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                        ConstraintRequireTypeName = c.SYS_Var.ValueOfVar,
                        DateID = -1,
                    }).ToList();

                    foreach (var item in query)
                    {
                        item.DateID = (int)item.TimeFrom.Value.DayOfWeek;
                        switch (item.TimeFrom.Value.DayOfWeek)
                        {
                            case DayOfWeek.Friday: item.DateName = "Thứ Sáu";
                                break;
                            case DayOfWeek.Monday: item.DateName = "Thứ Hai";
                                break;
                            case DayOfWeek.Saturday: item.DateName = "Thứ Bảy";
                                break;
                            case DayOfWeek.Sunday: item.DateName = "Chủ nhật";
                                break;
                            case DayOfWeek.Thursday: item.DateName = "Thứ Năm";
                                break;
                            case DayOfWeek.Tuesday: item.DateName = "Thứ Ba";
                                break;
                            case DayOfWeek.Wednesday: item.DateName = "Thứ Tư";
                                break;
                            default: item.DateName = string.Empty;
                                break;
                        }
                    }
                    var resFinal = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = resFinal.Total;
                    result.Data = resFinal.Data as IEnumerable<DTOCATConstraintRequire>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATConstraintRequire CATConstraint_OpenHour_Get(int ID)
        {
            try
            {
                DTOCATConstraintRequire result = new DTOCATConstraintRequire();
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID).Select(c => new DTOCATConstraintRequire
                        {
                            ID = c.ID,
                            ConstraintID = c.ConstraintID,
                            TimeFrom = c.TimeFrom,
                            TimeTo = c.TimeTo,
                            Weight = c.Weight,
                            Width = c.Width,
                            Length = c.Length,
                            DateID = (int)c.TimeFrom.Value.DayOfWeek,
                            ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                            ConstraintRequireTypeName = c.SYS_Var.ValueOfVar
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateID = 0;//default Sunday
                        result.TimeFrom = DateTime.Now;
                        result.TimeTo = DateTime.Now.AddHours(1);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_OpenHour_Save(DTOCATConstraintRequire item, int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ConstraintRequire();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = ID;
                        model.CAT_ConstraintRequire.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    DateTime now = DateTime.Now;
                    int delta = 0;
                    delta = item.DateID - (int)now.DayOfWeek;

                    obj.TimeFrom = item.TimeFrom.Value.AddDays(delta);
                    obj.TimeTo = item.TimeTo.Value.AddDays(delta);
                    obj.ConstraintRequireTypeID = -(int)SYSVarType.ConstraintRequireTypeOpenWeek;
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_OpenHour_Delete(DTOCATConstraintRequire item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_ConstraintRequire.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_Weight_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID && c.ConstraintRequireTypeID == -(int)SYSVarType.ConstraintRequireTypeSizeWeek).Select(c => new DTOCATConstraintRequire
                    {
                        ID = c.ID,
                        ConstraintID = c.ConstraintID,
                        TimeFrom = c.TimeFrom,
                        TimeTo = c.TimeTo,
                        Weight = c.Weight,
                        Width = c.Width,
                        Length = c.Length,
                        DateName = string.Empty,
                        ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                        ConstraintRequireTypeName = c.SYS_Var.ValueOfVar,
                        DateID = -1,
                        IsOneContainer = c.IsOneContainer == true ? true : false,
                        NoOfDelivery = c.NoOfDelivery
                    }).ToList();

                    foreach (var item in query)
                    {
                        item.DateID = (int)item.TimeFrom.Value.DayOfWeek;
                        switch (item.TimeFrom.Value.DayOfWeek)
                        {
                            case DayOfWeek.Friday: item.DateName = "Thứ Sáu";
                                break;
                            case DayOfWeek.Monday: item.DateName = "Thứ Hai";
                                break;
                            case DayOfWeek.Saturday: item.DateName = "Thứ Bảy";
                                break;
                            case DayOfWeek.Sunday: item.DateName = "Chủ nhật";
                                break;
                            case DayOfWeek.Thursday: item.DateName = "Thứ Năm";
                                break;
                            case DayOfWeek.Tuesday: item.DateName = "Thứ Ba";
                                break;
                            case DayOfWeek.Wednesday: item.DateName = "Thứ Tư";
                                break;
                            default: item.DateName = string.Empty;
                                break;
                        }
                    }
                    var objRequest = CreateRequest(request);
                    //objRequest.Sorts.Add(new Kendo.Mvc.SortDescriptor { Member = "DateID", SortDirection = System.ComponentModel.ListSortDirection.Ascending });
                    var resFinal = query.ToDataSourceResult(objRequest);
                    result.Total = resFinal.Total;
                    result.Data = resFinal.Data as IEnumerable<DTOCATConstraintRequire>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATConstraintRequire CATConstraint_Weight_Get(int ID)
        {
            try
            {
                DTOCATConstraintRequire result = new DTOCATConstraintRequire();
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID).Select(c => new DTOCATConstraintRequire
                        {
                            ID = c.ID,
                            ConstraintID = c.ConstraintID,
                            TimeFrom = c.TimeFrom,
                            TimeTo = c.TimeTo,
                            Weight = c.Weight,
                            Width = c.Width,
                            Length = c.Length,
                            DateID = (int)c.TimeFrom.Value.DayOfWeek,
                            ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                            ConstraintRequireTypeName = c.SYS_Var.ValueOfVar,
                            IsOneContainer = c.IsOneContainer == true ? true : false,
                            NoOfDelivery = c.NoOfDelivery
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateID = 0;//default Sunday
                        result.TimeFrom = DateTime.Now;
                        result.TimeTo = DateTime.Now.AddHours(1);
                        result.Weight = 0;
                        result.IsOneContainer = false;
                        result.NoOfDelivery = null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_Weight_Save(DTOCATConstraintRequire item, int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ConstraintRequire();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = ID;
                        model.CAT_ConstraintRequire.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    DateTime now = DateTime.Now;
                    int delta = 0;
                    delta = item.DateID - (int)now.DayOfWeek;

                    obj.TimeFrom = item.TimeFrom.Value.AddDays(delta);
                    obj.TimeTo = item.TimeTo.Value.AddDays(delta);
                    obj.Weight = item.Weight;
                    obj.IsOneContainer = item.IsOneContainer;

                    obj.ConstraintRequireTypeID = -(int)SYSVarType.ConstraintRequireTypeSizeWeek;
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_Weight_Delete(DTOCATConstraintRequire item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_ConstraintRequire.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATConstraint_KM_List(string request, int ID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID && c.ConstraintRequireTypeID == -(int)SYSVarType.ConstraintRequireTypeKM).Select(c => new DTOCATConstraintRequire
                    {
                        ID = c.ID,
                        ConstraintID = c.ConstraintID,
                        TimeFrom = c.TimeFrom,
                        TimeTo = c.TimeTo,
                        Weight = c.Weight,
                        Width = c.Width,
                        Length = c.Length,
                        DateName = string.Empty,
                        ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                        ConstraintRequireTypeName = c.SYS_Var.ValueOfVar,
                        DateID = -1,
                        KMFrom = c.KMFrom,
                        KMScore = c.KMScore,
                        KMTo = c.KMTo
                    }).ToDataSourceResult(CreateRequest(request));


                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATConstraintRequire>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATConstraintRequire CATConstraint_KM_Get(int ID)
        {
            try
            {
                DTOCATConstraintRequire result = new DTOCATConstraintRequire();
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        var query = model.CAT_ConstraintRequire.Where(c => c.ConstraintID == ID).Select(c => new DTOCATConstraintRequire
                        {
                            ID = c.ID,
                            ConstraintID = c.ConstraintID,
                            TimeFrom = c.TimeFrom,
                            TimeTo = c.TimeTo,
                            Weight = c.Weight,
                            Width = c.Width,
                            Length = c.Length,
                            DateID = (int)c.TimeFrom.Value.DayOfWeek,
                            ConstraintRequireTypeID = c.ConstraintRequireTypeID,
                            ConstraintRequireTypeName = c.SYS_Var.ValueOfVar,
                            KMFrom = c.KMFrom,
                            KMScore = c.KMScore,
                            KMTo = c.KMTo
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DateID = 0;//default Sunday
                        result.TimeFrom = DateTime.Now;
                        result.TimeTo = DateTime.Now.AddHours(1);
                        result.Weight = 0;
                        result.KMFrom = 0;
                        result.KMScore = 0;
                        result.KMTo = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_KM_Save(DTOCATConstraintRequire item, int ID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ConstraintRequire();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ConstraintID = ID;
                        model.CAT_ConstraintRequire.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.KMFrom = item.KMFrom;
                    obj.KMScore = item.KMScore;
                    obj.KMTo = item.KMTo;

                    obj.ConstraintRequireTypeID = -(int)SYSVarType.ConstraintRequireTypeKM;
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATConstraint_KM_Delete(DTOCATConstraintRequire item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ConstraintRequire.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_ConstraintRequire.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATCurrency

        public DTOResult CATCurrency_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Currency.Select(c => new CATCurrency
                    {

                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATCurrency>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATCurrency_Save(CATCurrency item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Currency.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Currency();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.CurrencyName = item.CurrencyName;
                    if (obj.ID < 1)
                        model.CAT_Currency.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATCurrency CATCurrency_Get(int ID)
        {
            try
            {
                CATCurrency result = new CATCurrency { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Currency.Where(c => c.ID == ID).Select(c => new CATCurrency
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CurrencyName = c.CurrencyName
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATCurrency_Delete(CATCurrency item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Currency.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Currency.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<CATCurrency> CATCurrency_AllList()
        {
            try
            {
                List<CATCurrency> result = new List<CATCurrency>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Currency.Select(c => new CATCurrency
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATCurrency_ExcelInit(int functionid, string functionkey)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_Currency.Select(c => new CATCurrency
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CurrencyName = c.CurrencyName
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên tiền tệ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.CurrencyName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<Row> CATCurrency_ExcelChange(long id, int row, int col, string val)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Currency.Select(c => new { c.ID, c.Code }).ToList();
                    List<Worksheet> lstWorksheet = HelperExcel.ChangeText(model, id, row, col, val);
                    var ws = lstWorksheet[0];
                    var result = new List<Row>();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow != null)
                    {
                        string dataCode = HelperExcel.GetString(checkRow, 1);
                        string dataName = HelperExcel.GetString(checkRow, 2);
                        if (string.IsNullOrEmpty(dataCode))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã");
                        else if (string.IsNullOrEmpty(dataName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (lstCode.Contains(dataCode))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                            }
                        }

                        result.Add(checkRow);
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                    HelperExcel.ClearData(result, colCheckChange);

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATCurrency_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    failCurrent = 0;
                    var lstCode = new List<string>();
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            if (string.IsNullOrEmpty(dataCode))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã");
                            else if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (lstCode.Where(c => c == dataCode).Count() > 1)
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATCurrency_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_Currency.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Currency();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.CurrencyName = dataName;
                            if (obj.ID < 1)
                                model.CAT_Currency.Add(obj);
                            model.SaveChanges();
                        }
                    }

                    var lst = model.CAT_Currency.Select(c => new CATCurrency
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToList();
                    List<Worksheet> data = new List<Worksheet>();
                    var ws = new Worksheet();
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    ws.Rows = new List<Row>();
                    var cells = new List<Cell>();
                    cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                    ws.Selection = "A1:A1";
                    ws.ActiveCell = "A1:A1";
                    ws.MergedCells = new List<string>();
                    ws.Name = "Sheet1";
                    int stt = 1;
                    foreach (var item in lst)
                    {
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(stt));
                        cells.Add(HelperExcel.NewCell(item.Code));
                        cells.Add(HelperExcel.NewCell(item.CurrencyName));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt++;
                    }
                    data.Add(ws);
                    HelperExcel.SaveData(model, id, data);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATReason

        public DTOResult CATReason_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Reason.Select(c => new DTOCATReason
                    {

                        ID = c.ID,
                        ReasonName = c.ReasonName,
                        TypeOfReasonID = c.TypeOfReasonID,
                        TypeOfReasonName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATReason>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATReason_Save(DTOCATReason item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Reason.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Reason();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ReasonName = item.ReasonName;
                    obj.TypeOfReasonID = item.TypeOfReasonID;
                    if (obj.ID < 1)
                        model.CAT_Reason.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATReason CATReason_Get(int ID)
        {
            try
            {
                DTOCATReason result = new DTOCATReason { ID = 0, TypeOfReasonID = -(int)SYSVarType.TypeOfReasonTenderReject };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Reason.Where(c => c.ID == ID).Select(c => new DTOCATReason
                        {
                            ID = c.ID,
                            ReasonName = c.ReasonName,
                            TypeOfReasonID = c.TypeOfReasonID
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATReason_Delete(DTOCATReason item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.OPS_COTORate.Count(c => c.ReasonID == item.ID) > 0 || model.OPS_DITORate.Count(c => c.ReasonID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Lý do đã sử dụng! Không thể xóa!");

                    var obj = model.CAT_Reason.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Reason.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public SYSExcel CATReason_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Reason.Select(c => new
                        {
                            ID = c.ID,
                            ReasonName = c.ReasonName,
                            TypeOfReasonID = c.TypeOfReasonID,
                            TypeOfReasonCode = c.SYS_Var.Code,
                            TypeOfReasonName = c.SYS_Var.ValueOfVar
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.ReasonName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfReasonCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfReasonName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfReason = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfReason).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        ws = lstWorkSheet[1];
                        ws.Rows.Clear();

                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 110, 110 });

                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfReason)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATReason_ExcelChange(long id, int row, List<Cell> cells)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfReason = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Reason.Select(c => new { c.ID, c.ReasonName }).ToList();
                    var lstTypeOfPackage = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfReason).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataReasonName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfReason = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (string.IsNullOrEmpty(dataReasonName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (string.IsNullOrEmpty(dataTypeOfReason))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại");
                            else
                            {
                                var itemTypeOfReason = lstTypeOfPackage.Where(c => c.Code == dataTypeOfReason).FirstOrDefault();
                                if (itemTypeOfReason != null)
                                {
                                    var valid = "-1";
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeOfReason, itemTypeOfReason.ID.ToString());
                                }
                                else
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không tồn tại mã trong hệ thống");
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATReason_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfReason = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_Reason.Select(c => new { c.ID, c.ReasonName }).ToList();
                    var lstTypeOfPackage = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfReason).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Index < rowStart) continue;
                            if (eRow.Index >= rowEnd) break;

                            colData = 1;
                            string dataReasonName = HelperExcel.GetString(eRow, colData++);
                            string dataTypeReason = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);

                            if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (string.IsNullOrEmpty(dataTypeReason))
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã loại lý do");
                                else
                                {
                                    var itemTypeOfPacking = lstTypeOfPackage.Where(c => c.Code == dataTypeReason).FirstOrDefault();
                                    if (itemTypeOfPacking != null)
                                    {
                                        var valid = "-1";
                                        var objID = lstGetID.FirstOrDefault(c => c.ReasonName == dataReasonName);
                                        if (objID != null)
                                            valid = objID.ID.ToString();
                                        HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                    }
                                    else
                                        HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không tồn tại mã trong hệ thống");
                                }

                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATReason_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfReason = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataReasonName = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataCheckTypeOfReason = HelperExcel.GetString(eRow, colCheckTypeOfReason);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);
                            int getCheckTypeOfReason = Convert.ToInt32(dataCheckTypeOfReason);

                            var obj = model.CAT_Reason.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Reason();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.ReasonName = dataReasonName;
                            obj.TypeOfReasonID = getCheckTypeOfReason;
                            if (obj.ID < 1)
                                model.CAT_Reason.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region CATGroupOfVehicle
        public DTOResult CATGroupOfVehicle_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        Ton = c.Ton,
                        SortOrder = c.SortOrder
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATGroupOfVehicle CATGroupOfVehicle_Get(int id)
        {
            try
            {
                CATGroupOfVehicle result = new CATGroupOfVehicle();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfVehicle.Where(c => c.ID == id).Select(c => new CATGroupOfVehicle
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                            Code = c.Code,
                            Ton = c.Ton,
                            SortOrder = c.SortOrder
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.ParentID = null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfVehicle_Save(CATGroupOfVehicle item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfVehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfVehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.ParentID = item.ParentID;
                    obj.Code = item.Code;
                    obj.Ton = item.Ton;
                    obj.SortOrder = item.SortOrder;
                    if (obj.ID < 1)
                        model.CAT_GroupOfVehicle.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfVehicle_Delete(CATGroupOfVehicle item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfVehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        var lstContractCode = model.CAT_ContractGroupVehicle.Where(c => c.GroupOfVehicleID == item.ID).Select(c => c.CAT_Contract.DisplayName).Distinct().ToList();
                        if (lstContractCode.Count() > 0)
                            throw FaultHelper.BusinessFault(null, null, "Loại xe " + obj.GroupName + " đang được sử dụng trong hợp đồng " + string.Join(", ", lstContractCode));

                        model.CAT_GroupOfVehicle.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfVehicle_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfVehicle.Select(c => new
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            Code = c.Code,
                            Ton = c.Ton,
                            SortOrder = c.SortOrder
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại Xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Thứ tự", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            cells.Add(HelperExcel.NewCell(item.Ton));
                            cells.Add(HelperExcel.NewCell(item.SortOrder));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;

                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfVehicle_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;

                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfVehicle_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    failCurrent = 0;
                    var lstGetID = model.CAT_GroupOfVehicle.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfVehicle_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataweight = HelperExcel.GetString(eRow, colData++);
                            string dataSortOrder = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);

                            int getid = Convert.ToInt32(dataID);
                            int getTon = 0;
                            int getSortOrder = 0;
                            try
                            {
                                getTon = Convert.ToInt32(dataweight);
                            }
                            catch
                            {
                                return false;
                            }

                            try
                            {
                                getSortOrder = Convert.ToInt32(dataSortOrder);
                            }
                            catch
                            {
                                return false;
                            }

                            var obj = model.CAT_GroupOfVehicle.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            obj.SortOrder = getSortOrder;
                            obj.Ton = getTon;
                            if (obj.ID < 1)
                                model.CAT_GroupOfVehicle.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATGroupOfRomooc
        public DTOResult CATGroupOfRomooc_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfRomooc.Select(c => new CATGroupOfRomooc
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATGroupOfRomooc CATGroupOfRomooc_Get(int id)
        {
            try
            {
                CATGroupOfRomooc result = new CATGroupOfRomooc();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfRomooc.Where(c => c.ID == id).Select(c => new CATGroupOfRomooc
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.ParentID = null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATGroupOfRomooc_Save(CATGroupOfRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_GroupOfRomooc.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw new Exception("Mã tồn tại");
                    var obj = model.CAT_GroupOfRomooc.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfRomooc();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.Code = item.Code;
                    obj.ParentID = item.ParentID;
                    if (obj.ID < 1)
                        model.CAT_GroupOfRomooc.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfRomooc_Delete(CATGroupOfRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Romooc.Count(c => c.GroupOfRomoocID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Loại Romooc đang được sử dụng");
                    if (model.CAT_GroupOfRomooc.Count(c => c.ParentID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng xóa loại Romooc con trước");
                    if (model.CAT_GroupOfRomoocPacking.Count(c => c.GroupOfRomoocID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng xóa loại container trước");
                    var obj = model.CAT_GroupOfRomooc.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfRomooc.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfRomooc_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfRomooc.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID
                        }).ToList();

                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Romooc", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại Romooc", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfRomooc_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstDropGroup = CATGroupOfRomooc_List("").Data.Cast<CATGroupOfRomooc>().ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfRomooc_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    failCurrent = 0;
                    var lstDropGroup = CATGroupOfRomooc_List("").Data.Cast<CATGroupOfRomooc>().ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {

                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfRomooc_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_GroupOfRomooc.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfRomooc();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            obj.ParentID = null;
                            if (obj.ID < 1)
                                model.CAT_GroupOfRomooc.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATGroupOfRomoocPacking_NotInList(string request, int GroupOfRomoocID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var dataE = model.CAT_GroupOfRomoocPacking.Where(c => c.GroupOfRomoocID == GroupOfRomoocID).Select(c => c.TypeOfPackageID).ToList();
                    var query = model.SYS_Var.Where(c => (c.ID == -(int)SYSVarType.TypeOfPackingCO20 || c.ID == -(int)SYSVarType.TypeOfPackingCO20R || c.ID == -(int)SYSVarType.TypeOfPackingCO40 || c.ID == -(int)SYSVarType.TypeOfPackingCO40R || c.ID == -(int)SYSVarType.TypeOfPackingCO20F || c.ID == -(int)SYSVarType.TypeOfPackingCO40F) && !dataE.Contains(c.ID)).Select(c => new CATGroupOfRomoocPacking
                    {
                        ID = c.ID,
                        GroupOfRomoocID = GroupOfRomoocID,
                        TypeOfPackageID = c.ID,
                        Quantity = 0,
                        TypeOfPackageName = c.ValueOfVar,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfRomoocPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOResult CATGroupOfRomoocPacking_List(string request, int GroupOfRomoocID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfRomoocPacking.Where(c => c.GroupOfRomoocID == GroupOfRomoocID).Select(c => new CATGroupOfRomoocPacking
                    {
                        ID = c.ID,
                        GroupOfRomoocID = c.GroupOfRomoocID,
                        TypeOfPackageID = c.TypeOfPackageID,
                        Quantity = c.Quantity,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfRomoocPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATGroupOfRomoocPacking_Save(List<CATGroupOfRomoocPacking> lst, int GroupOfRomoocID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_GroupOfRomoocPacking.FirstOrDefault(c => c.GroupOfRomoocID == GroupOfRomoocID && c.TypeOfPackageID == item.TypeOfPackageID);
                        if (obj == null)
                        {
                            obj = new CAT_GroupOfRomoocPacking();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.TypeOfPackageID = item.TypeOfPackageID;
                        obj.GroupOfRomoocID = GroupOfRomoocID;
                        obj.Quantity = item.Quantity;
                        if (obj.ID < 1)
                            model.CAT_GroupOfRomoocPacking.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATGroupOfRomoocPacking_Delete(CATGroupOfRomoocPacking item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfRomoocPacking.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfRomoocPacking.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        #region CATGroupOfEquipment
        public DTOResult CATGroupOfEquipment_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfEquipment.Select(c => new CATGroupOfEquipment
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfEquipment>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATGroupOfEquipment CATGroupOfEquipment_Get(int id)
        {
            try
            {
                CATGroupOfEquipment result = new CATGroupOfEquipment();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfEquipment.Where(c => c.ID == id).Select(c => new CATGroupOfEquipment
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.ParentID = null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATGroupOfEquipment_Save(CATGroupOfEquipment item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfEquipment.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfEquipment();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.ParentID = item.ParentID;
                    if (obj.ID < 1)
                        model.CAT_GroupOfEquipment.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfEquipment_Delete(CATGroupOfEquipment item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfEquipment.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfEquipment.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfEquipment_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfEquipment.Select(c => new CATGroupOfEquipment
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại thiết bị", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.ParentID));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        }

                        var lstDropGroup = CATGroupOfEquipment_List("").Data.Cast<CATGroupOfEquipment>().ToList();
                        var ws1 = lstWorkSheet[1];
                        //ws1.Rows.Clear;
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 150, 150 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Thuộc nhóm", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstDropGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.ID));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfEquipment_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colparentID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstDropGroup = CATGroupOfEquipment_List("").Data.Cast<CATGroupOfEquipment>().ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;

                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag && string.IsNullOrEmpty(dataCode))
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        else
                        {
                            if (flag)
                            {
                                try
                                {
                                    int flag1 = 0;
                                    foreach (var item in lstDropGroup)
                                    {
                                        if (item.ID == int.Parse(dataCode))
                                        {
                                            var valid = "-1";
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colparentID, dataCode);
                                            flag1 = 1;
                                        }
                                    }
                                    if (flag1 == 0)
                                    {
                                        indexError++;
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    }
                                }
                                catch
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                }
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfEquipment_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colparentID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    failCurrent = 0;
                    var lstDropGroup = CATGroupOfEquipment_List("").Data.Cast<CATGroupOfEquipment>().ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;
                        colData = 1;

                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag && string.IsNullOrEmpty(dataCode))
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        else
                        {
                            if (flag)
                            {
                                try
                                {
                                    int flag1 = 0;
                                    foreach (var item in lstDropGroup)
                                    {
                                        if (item.ID == int.Parse(dataCode))
                                        {
                                            var valid = "-1";
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colparentID, dataCode);
                                            flag1 = 1;
                                        }
                                    }
                                    if (flag1 == 0)
                                    {
                                        indexError++;
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                    }
                                }
                                catch
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfEquipment_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colparentID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataparentID = HelperExcel.GetString(eRow, colparentID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_GroupOfEquipment.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfEquipment();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.GroupName = dataName;
                            if (dataparentID != null)
                            {
                                obj.ParentID = int.Parse(dataparentID);
                            }
                            else { obj.ParentID = null; }
                            if (obj.ID < 1)
                                model.CAT_GroupOfEquipment.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATGroupOfMaterial
        public DTOResult CATGroupOfMaterial_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfMaterial.Select(c => new CATGroupOfMaterial
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        IsFuel = c.IsFuel
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfMaterial>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATGroupOfMaterial CATGroupOfMaterial_Get(int id)
        {
            try
            {
                CATGroupOfMaterial result = new CATGroupOfMaterial();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfMaterial.Where(c => c.ID == id).Select(c => new CATGroupOfMaterial
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                            Code = c.Code,
                            IsFuel = c.IsFuel
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.ParentID = null;
                        result.IsFuel = false;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfMaterial_Save(CATGroupOfMaterial item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfMaterial.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfMaterial();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.ParentID = item.ParentID;
                    obj.Code = item.Code;
                    obj.IsFuel = item.IsFuel;
                    if (obj.ID < 1)
                        model.CAT_GroupOfMaterial.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfMaterial_Delete(CATGroupOfMaterial item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfMaterial.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfMaterial.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfMaterial_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfMaterial.Select(c => new CATGroupOfMaterial
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                            Code = c.Code,
                            IsFuel = c.IsFuel,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhiên liệu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            cells.Add(HelperExcel.NewCell(item.IsFuel ? "X" : ""));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfMaterial_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfMaterial.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataCATGroup = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {

                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfMaterial_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_GroupOfMaterial.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        if (flag)
                        {

                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfMaterial_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataIsFlue = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_GroupOfMaterial.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfMaterial();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            obj.IsFuel = dataIsFlue.ToUpper().Trim() == "X" ? true : false;
                            if (obj.ID < 1)
                                model.CAT_GroupOfMaterial.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATMaterial
        public DTOResult FLMMaterial_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<FLMMaterial>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public FLMMaterial FLMMaterial_Get(int id)
        {
            try
            {
                FLMMaterial result = new FLMMaterial();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_Material.Where(c => c.ID == id).Select(c => new FLMMaterial
                        {
                            ID = c.ID,
                            Code = c.Code,
                            MaterialName = c.MaterialName,
                            GroupOfMaterialID = c.GroupOfMaterialID,
                            GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.CAT_GroupOfMaterial.FirstOrDefault();
                        if (obj != null) result.GroupOfMaterialID = obj.ID; else result.GroupOfMaterialID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMMaterial_Save(FLMMaterial item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Material.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_Material();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MaterialName = item.MaterialName;
                    obj.Code = item.Code;
                    obj.GroupOfMaterialID = item.GroupOfMaterialID;
                    if (obj.ID < 1)
                        model.FLM_Material.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMMaterial_Delete(FLMMaterial item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Material.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_Material.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATMaterial_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.FLM_Material.Select(c => new FLMMaterial
                        {
                            ID = c.ID,
                            Code = c.Code,
                            MaterialName = c.MaterialName,
                            GroupOfMaterialID = c.GroupOfMaterialID,
                            GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName,
                            GroupOfMaterialCode = c.CAT_GroupOfMaterial.Code
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.MaterialName));
                            cells.Add(HelperExcel.NewCell(item.GroupOfMaterialCode));
                            cells.Add(HelperExcel.NewCell(item.GroupOfMaterialName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfGroup = ALL_CATGroupOfMaterial().Data.Cast<CATGroupOfMaterial>().Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                        var ws1 = lstWorkSheet[1];
                        //ws1.Rows.Clear;
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 150, 150 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm vật tư", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATMaterial_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCATGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstCATGroup = ALL_CATGroupOfMaterial().Data.Cast<CATGroupOfMaterial>().Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstGetID = model.FLM_Material.Select(c => new { c.ID, c.Code }).ToList();


                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataCATGroup = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCATGroup, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;

                        if (flag)
                        {
                            var obj = lstCATGroup.FirstOrDefault(c => c.Code == dataCATGroup);
                            if (obj != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATGroup, obj.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATMaterial_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCATGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstCATGroup = ALL_CATGroupOfMaterial().Data.Cast<CATGroupOfMaterial>().Select(c => new { c.ID, c.Code, c.GroupName }).ToList();
                    var lstGetID = model.FLM_Material.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {

                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataCATGroup = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCATGroup, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;

                        if (flag)
                        {
                            var obj = lstCATGroup.FirstOrDefault(c => c.Code == dataCATGroup);
                            if (obj != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCATGroup, obj.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATMaterial_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupTroubleID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataTypeID = HelperExcel.GetString(eRow, colCheckTOfGroupTroubleID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.FLM_Material.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new FLM_Material();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.MaterialName = dataName;
                            obj.GroupOfMaterialID = int.Parse(dataTypeID);
                            if (obj.ID < 1)
                                model.FLM_Material.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATRomooc
        public DTOResult CATRomooc_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Romooc.Where(c=>c.ID > 1).Select(c => new CATRomooc
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        IsOwn = c.IsOwn,
                        CurrentVendorID = c.CurrentVendorID,
                        NoOfDelivery = c.NoOfDelivery,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        //ContainerID = c.ContainerID,
                        RegCapacity = c.RegCapacity,
                        MaxWeight = c.MaxWeight,
                        BiddingID = c.BiddingID,
                        GroupOfRomoocID = c.GroupOfRomoocID
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATRomooc CATRomooc_Get(int id)
        {
            try
            {
                CATRomooc result = new CATRomooc();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Romooc.Where(c => c.ID == id).Select(c => new CATRomooc
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            IsOwn = c.IsOwn,
                            CurrentVendorID = c.CurrentVendorID,
                            NoOfDelivery = c.NoOfDelivery,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            //ContainerID = c.ContainerID,
                            RegCapacity = c.RegCapacity,
                            MaxWeight = c.MaxWeight,
                            BiddingID = c.BiddingID,
                            GroupOfRomoocID = c.GroupOfRomoocID
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.IsOwn = false;
                        result.Lat = result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATRomooc_Save(CATRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Romooc.Where(c => c.ID != item.ID && c.RegNo.ToLower().Trim() == item.RegNo.ToLower().Trim()).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số romooc[" + item.RegNo + "]đã tồn tại");
                    else
                    {
                        var obj = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_Romooc();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.RegNo = item.RegNo;
                        obj.IsOwn = item.IsOwn;
                        obj.CurrentVendorID = item.CurrentVendorID;
                        obj.NoOfDelivery = item.NoOfDelivery;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        //obj.ContainerID = item.ContainerID;
                        obj.RegCapacity = item.RegCapacity;
                        obj.MaxWeight = item.MaxWeight;
                        obj.BiddingID = item.BiddingID;
                        obj.GroupOfRomoocID = item.GroupOfRomoocID;
                        if (obj.ID < 1)
                            model.CAT_Romooc.Add(obj);
                        model.SaveChanges();
                        return obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATRomooc_Delete(CATRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Romooc.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (model.CUS_Romooc.Count(c => c.RomoocID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Romooc đã được phân chuyến, không thể xóa");
                        model.CAT_Romooc.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATVehicle
        public DTOResult CATVehicle_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> lstIDSystem = new List<int> { 1, 2 };
                    var query = model.CAT_Vehicle.Where(c => !lstIDSystem.Contains(c.ID)).Select(c => new DTOCATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        Note = c.Note,
                        TypeOfVehicleID = c.TypeOfVehicleID,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        MinCapacity = c.MinCapacity,
                        MaxCapacity = c.MaxCapacity,
                        MinWeight = c.MinWeight,
                        MaxWeight = c.MaxWeight,
                        RegCapacity = c.RegCapacity,
                        RegWeight = c.RegWeight,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        GPSCode = c.GPSCode,
                        VendorCode = "",
                    }).ToList();

                    foreach (var item in query)
                    {
                        var lst = model.CUS_Vehicle.Where(c => c.VehicleID == item.ID).Select(c => c.CUS_Customer.Code).ToList();
                        item.VendorCode = string.Join(", ", lst.Distinct());
                    }

                    result.Total = query.ToDataSourceResult(CreateRequest(request)).Total;
                    result.Data = query.ToDataSourceResult(CreateRequest(request)).Data as IEnumerable<DTOCATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CATVehicle_Save(DTOCATVehicle item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (string.IsNullOrEmpty(item.RegNo))
                        throw FaultHelper.BusinessFault(null, null, "Số xe không được trống");
                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Vehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Vehicle.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.RegNo = item.RegNo;
                    obj.GroupOfVehicleID = item.GroupOfVehicleID;
                    obj.Note = item.Note;
                    obj.TypeOfVehicleID = item.TypeOfVehicleID;
                    obj.MinCapacity = item.MinCapacity;
                    obj.MaxCapacity = item.MaxCapacity;
                    obj.MinWeight = item.MinWeight;
                    obj.MaxWeight = item.MaxWeight;
                    obj.RegCapacity = item.RegCapacity;
                    obj.RegWeight = item.RegWeight;
                    obj.Lat = item.Lat > 0 ? item.Lat : null;
                    obj.Lng = item.Lng > 0 ? item.Lng : null;
                    obj.GPSCode = item.GPSCode;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATVehicle CATVehicle_Get(int id)
        {
            try
            {
                DTOCATVehicle result = new DTOCATVehicle();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Vehicle.Where(c => c.ID == id).Select(c => new DTOCATVehicle
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                            Note = c.Note,
                            TypeOfVehicleID = c.TypeOfVehicleID,
                            TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                            MinCapacity = c.MinCapacity,
                            MaxCapacity = c.MaxCapacity,
                            MinWeight = c.MinWeight,
                            MaxWeight = c.MaxWeight,
                            RegCapacity = c.RegCapacity,
                            RegWeight = c.RegWeight,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            GPSCode = c.GPSCode
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfVehicle).FirstOrDefault();
                        if (obj != null) result.TypeOfVehicleID = obj.ID; else result.TypeOfVehicleID = 0;
                        result.Lat = result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATVehicle_Delete(DTOCATVehicle item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.RegNo == "[Chờ nhập xe]")
                            throw FaultHelper.BusinessFault(null, null, "Xe hệ thống không được xóa");
                        if (obj.IsOwn)
                            throw FaultHelper.BusinessFault(null, null, "Xe nhà không được xóa ở đây");
                        if (model.OPS_COTOMaster.Count(c => c.VehicleID == item.ID) > 0 || model.OPS_DITOMaster.Count(c => c.VehicleID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được phân chuyến, không thể xóa");
                        if (model.CUS_Vehicle.Count(c => c.VehicleID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xe đã được vendor sử dụng, không thể xóa");
                        model.CAT_Vehicle.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATGroupOfService
        public DTOResult CATGroupOfService_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfService.Select(c => new CATGroupOfService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfService = c.GroupOfService
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATGroupOfService CATGroupOfService_Get(int id)
        {
            try
            {
                CATGroupOfService result = new CATGroupOfService { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfService.Where(c => c.ID == id).Select(c => new CATGroupOfService
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupOfService = c.GroupOfService
                        }).FirstOrDefault();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfService_Save(CATGroupOfService item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfService.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfService();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.GroupOfService = item.GroupOfService;
                    if (obj.ID < 1)
                        model.CAT_GroupOfService.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfService_Delete(CATGroupOfService item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfService.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfService.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATService
        public DTOResult CATService_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Select(c => new CATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        Summary = c.Summary,
                        Code = c.Code,
                        ServiceTypeID = c.ServiceTypeID,
                        ServiceTypeName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATService CATService_Get(int id)
        {
            try
            {
                CATService result = new CATService();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Service.Where(c => c.ID == id).Select(c => new CATService
                        {
                            ID = c.ID,
                            ServiceName = c.ServiceName,
                            Summary = c.Summary,
                            Code = c.Code,
                            ServiceTypeID = c.ServiceTypeID,
                            ServiceTypeName = c.SYS_Var.ValueOfVar
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceType).FirstOrDefault();
                        if (obj != null) result.ServiceTypeID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATService_Save(CATService item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Service.Count(c => c.Code == item.Code && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã dịch vụ đã tồn tại");

                    var obj = model.CAT_Service.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Service();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Service.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.ServiceName = item.ServiceName;
                    obj.Summary = item.Summary;
                    obj.ServiceTypeID = item.ServiceTypeID;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATService_Delete(CATService item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_PriceCOService.Count(c => c.ServiceID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã dịch vụ đang được sử dụng");

                    var obj = model.CAT_Service.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dịch vụ");
                    model.CAT_Service.Remove(obj);
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATService_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Service.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ServiceName = c.ServiceName,
                            Summary = c.Summary,
                            ServiceTypeCode = c.SYS_Var.Code,
                            ServiceTypeName = c.SYS_Var.ValueOfVar,
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại dich vụ dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Summary", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ServiceName));
                            cells.Add(HelperExcel.NewCell(item.ServiceTypeCode));
                            cells.Add(HelperExcel.NewCell(item.ServiceTypeName));
                            cells.Add(HelperExcel.NewCell(item.Summary));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }
                        var lstService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceType).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        var ws1 = lstWorkSheet[1];
                        ws1.Rows.Clear();
                        ws1.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstService)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }



                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATService_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colServiceTypeID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceType).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.CAT_Service.Select(c => new { c.ID, c.Code }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataServiceTypeCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                        {
                            var obj = lstService.FirstOrDefault(c => c.Code == dataServiceTypeCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colServiceTypeID, obj.ID.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }

            }

            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATService_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colServiceTypeID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;


                    var lstService = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceType).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.CAT_Service.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;


                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataServiceTypeCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                        {
                            var obj = lstService.FirstOrDefault(c => c.Code == dataServiceTypeCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colServiceTypeID, obj.ID.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }

            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool CATService_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colServiceTypeID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            string dataServiceTypeID = HelperExcel.GetString(checkRow, colServiceTypeID);

                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));
                            int TypeID = Convert.ToInt32(dataServiceTypeID);
                            var obj = model.CAT_Service.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Service();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;

                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Code = dataCode;
                            obj.ServiceName = dataName;
                            obj.ServiceTypeID = Convert.ToInt32(dataServiceTypeID);

                            if (obj.ID < 1)
                                model.CAT_Service.Add(obj);
                            model.SaveChanges();
                        }

                        return true;
                    }

                    return false;
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region CATGroupOfPartner
        public DTOResult CATGroupOfPartner_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        Code = c.Code,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATGroupOfPartner CATGroupOfPartner_Get(int id)
        {
            try
            {
                CATGroupOfPartner result = new CATGroupOfPartner();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfPartner.Where(c => c.ID == id).Select(c => new CATGroupOfPartner
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            Code = c.Code,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfPartner_Save(CATGroupOfPartner item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfPartner.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfPartner();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.Code = item.Code;
                    if (obj.ID < 1)
                        model.CAT_GroupOfPartner.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfPartner_Delete(CATGroupOfPartner item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfPartner.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfPartner.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfPartner_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            Code = c.Code,
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATGroupOfPartner_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATGroupOfPartner_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfPartner.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfPartner_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.CAT_GroupOfPartner.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfPartner();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            if (obj.ID < 1)
                                model.CAT_GroupOfPartner.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATShift
        public DTOResult CATShift_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Shift.Select(c => new CATShift
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ShiftName = c.ShiftName,
                        TimeFrom = c.TimeFrom,
                        TimeTo = c.TimeTo,
                        Hour = c.Hour
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATShift>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATShift CATShift_Get(int id)
        {
            try
            {
                CATShift result = new CATShift();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Shift.Where(c => c.ID == id).Select(c => new CATShift
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ShiftName = c.ShiftName,
                            TimeFrom = c.TimeFrom,
                            TimeTo = c.TimeTo,
                            Hour = c.Hour
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.Hour = 0;
                        result.TimeFrom = DateTime.Now;
                        result.TimeTo = DateTime.Now;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATShift_Save(CATShift item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Shift.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Shift();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.ShiftName = item.ShiftName;
                    obj.TimeFrom = item.TimeFrom;
                    obj.TimeTo = item.TimeTo;
                    obj.Hour = item.Hour;
                    if (obj.ID < 1)
                        model.CAT_Shift.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATShift_Delete(CATShift item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Shift.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Shift.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATGroupOfTrouble
        public DTOResult CATGroupOfTrouble_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfTrouble.Select(c => new CATGroupOfTrouble
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TypeOfGroupTroubleID = c.TypeOfGroupTroubleID,
                        TypeOfGroupTroubleName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATGroupOfTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATGroupOfTrouble CATGroupOfTrouble_Get(int id)
        {
            try
            {
                CATGroupOfTrouble result = new CATGroupOfTrouble();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfTrouble.Where(c => c.ID == id).Select(c => new CATGroupOfTrouble
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            TypeOfGroupTroubleID = c.TypeOfGroupTroubleID,
                            TypeOfGroupTroubleName = c.SYS_Var.ValueOfVar
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfGroupTrouble).FirstOrDefault();
                        if (obj != null) result.TypeOfGroupTroubleID = obj.ID; else result.TypeOfGroupTroubleID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfTrouble_Save(CATGroupOfTrouble item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfTrouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfTrouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.Name = item.Name;
                    obj.TypeOfGroupTroubleID = item.TypeOfGroupTroubleID;
                    if (obj.ID < 1)
                        model.CAT_GroupOfTrouble.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfTrouble_Delete(CATGroupOfTrouble item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfTrouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfTrouble.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfTrouble_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfTrouble.Select(c => new CATGroupOfTrouble
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            CodeTypeOfGroupTrouble = c.SYS_Var.Code,
                            TypeOfGroupTroubleName = c.SYS_Var.ValueOfVar
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.Name));
                            cells.Add(HelperExcel.NewCell(item.CodeTypeOfGroupTrouble));
                            cells.Add(HelperExcel.NewCell(item.TypeOfGroupTroubleName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfGroup = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfGroupTrouble).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        var ws1 = lstWorkSheet[1];
                        ws1.Rows.Clear();
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 150, 150 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfTrouble_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupTroubleID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstTypeOfGroupOfTrouble = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfGroupTrouble).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.CAT_GroupOfTrouble.Select(c => new { c.ID, c.Code }).ToList();

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;

                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfTrouleCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfTrouleCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfGroupOfTrouble.FirstOrDefault(c => c.Code == dataTypeOfTrouleCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTOfGroupTroubleID, obj.ID.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfTrouble_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupTroubleID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstTypeOfGroupOfTrouble = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfGroupTrouble).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.CAT_GroupOfTrouble.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);
                        string dataTypeOfTrouleCode = HelperExcel.GetString(eRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfTrouleCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfGroupOfTrouble.FirstOrDefault(c => c.Code == dataTypeOfTrouleCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckTOfGroupTroubleID, obj.ID.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfTrouble_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupTroubleID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataTypeID = HelperExcel.GetString(eRow, colCheckTOfGroupTroubleID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_GroupOfTrouble.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfTrouble();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.Name = dataName;
                            obj.TypeOfGroupTroubleID = Convert.ToInt32(dataTypeID);
                            if (obj.ID < 1)
                                model.CAT_GroupOfTrouble.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATTypeBusiness
        public DTOResult CATTypeBusiness_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeBusiness.Select(c => new CATTypeBusiness
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeBusinessName = c.TypeBusinessName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATTypeBusiness>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATTypeBusiness CATTypeBusiness_Get(int id)
        {
            try
            {
                CATTypeBusiness result = new CATTypeBusiness();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_TypeBusiness.Where(c => c.ID == id).Select(c => new CATTypeBusiness
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeBusinessName = c.TypeBusinessName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATTypeBusiness_Save(CATTypeBusiness item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TypeBusiness.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_TypeBusiness();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.TypeBusinessName = item.TypeBusinessName;
                    obj.Code = item.Code;
                    if (obj.ID < 1)
                        model.CAT_TypeBusiness.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATTypeBusiness_Delete(CATTypeBusiness item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TypeBusiness.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_TypeBusiness.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public SYSExcel CATTypeBusiness_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_TypeBusiness.Select(c => new CATTypeBusiness
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeBusinessName = c.TypeBusinessName
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeBusinessName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATTypeBusiness_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_TypeBusiness.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATTypeBusiness_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.CAT_TypeBusiness.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATTypeBusiness_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.CAT_TypeBusiness.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_TypeBusiness();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeBusinessName = dataName;
                            if (obj.ID < 1)
                                model.CAT_TypeBusiness.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATField
        public DTOResult CATField_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Field.Select(c => new CATField
                    {
                        ID = c.ID,
                        Code = c.Code,
                        FieldName = c.FieldName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATField>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public CATField CATField_Get(int id)
        {
            try
            {
                CATField result = new CATField();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Field.Where(c => c.ID == id).Select(c => new CATField
                        {
                            ID = c.ID,
                            Code = c.Code,
                            FieldName = c.FieldName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATField_Save(CATField item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Field.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Field();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.FieldName = item.FieldName;
                    if (obj.ID < 1)
                        model.CAT_Field.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATField_Delete(CATField item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Field.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Field.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public SYSExcel CATField_ExcelInit(int functionid, string functionkey)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_Field.Select(c => new CATField
                        {
                            ID = c.ID,
                            Code = c.Code,
                            FieldName = c.FieldName
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.FieldName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<Row> CATField_ExcelChange(long id, int row, int col, string val)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    List<Worksheet> lstWorksheet = HelperExcel.ChangeText(model, id, row, col, val);
                    var ws = lstWorksheet[0];
                    var result = new List<Row>();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow != null)
                    {
                        string dataCode = HelperExcel.GetString(checkRow, 1);
                        string dataName = HelperExcel.GetString(checkRow, 2);
                        if (string.IsNullOrEmpty(dataCode))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã");
                        else if (string.IsNullOrEmpty(dataName))
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có tên");
                        else
                        {
                            if (lstCode.Contains(dataCode))
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                            }
                        }

                        result.Add(checkRow);
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                    HelperExcel.ClearData(result, colCheckChange);

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATField_ExcelImport(long id, List<Row> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;
                    int failMax = 2;
                    int failCurrent = 0;

                    failCurrent = 0;
                    var lstCode = new List<string>();
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            if (string.IsNullOrEmpty(dataCode))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có mã");
                            else if (string.IsNullOrEmpty(dataName))
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Không có tên");
                            else
                            {
                                if (lstCode.Where(c => c == dataCode).Count() > 1)
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, "Mã đã sử dụng");
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                }
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATField_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colCheckChange = 3;
                    int colCheckNote = 4;
                    int colCheckID = 5;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var eRow in lstRow)
                        {
                            string dataCode = HelperExcel.GetString(eRow, 1);
                            string dataName = HelperExcel.GetString(eRow, 2);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_Field.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Field();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.FieldName = dataName;
                            if (obj.ID < 1)
                                model.CAT_Field.Add(obj);
                            model.SaveChanges();
                        }
                    }

                    var lst = model.CAT_Field.Select(c => new CATField
                    {
                        ID = c.ID,
                        Code = c.Code,
                        FieldName = c.FieldName
                    }).ToList();
                    List<Worksheet> data = new List<Worksheet>();
                    var ws = new Worksheet();
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });
                    ws.Rows = new List<Row>();
                    var cells = new List<Cell>();
                    cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                    ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                    ws.Selection = "A1:A1";
                    ws.ActiveCell = "A1:A1";
                    ws.MergedCells = new List<string>();
                    ws.Name = "Sheet1";
                    int stt = 1;
                    foreach (var item in lst)
                    {
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(stt));
                        cells.Add(HelperExcel.NewCell(item.Code));
                        cells.Add(HelperExcel.NewCell(item.FieldName));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt++;
                    }
                    data.Add(ws);
                    HelperExcel.SaveData(model, id, data);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATScale
        public DTOResult CATScale_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Scale.Select(c => new CATScale
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ScaleName = c.ScaleName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATScale>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATScale CATScale_Get(int id)
        {
            try
            {
                CATScale result = new CATScale();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Scale.Where(c => c.ID == id).Select(c => new CATScale
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ScaleName = c.ScaleName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATScale_Save(CATScale item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Scale.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Scale();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.ScaleName = item.ScaleName;
                    if (obj.ID < 1)
                        model.CAT_Scale.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATScale_Delete(CATScale item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Scale.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Scale.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        public SYSExcel CATScale_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Scale.Select(c => new CATScale
                        {
                            ID = c.ID,
                            Code = c.Code,
                            ScaleName = c.ScaleName
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã qui mô", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên qui mô", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ScaleName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATScale_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Scale.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATScale_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.CAT_Scale.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATScale_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.CAT_Scale.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Scale();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.ScaleName = dataName;
                            if (obj.ID < 1)
                                model.CAT_Scale.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATGroupOfCost
        public DTOResult CATGroupOfCost_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfCost.Select(c => new DTOCATGroupOfCost
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentCode = c.ParentID > 0 ? c.CAT_GroupOfCost2.Code : string.Empty,
                        ParentName = c.ParentID > 0 ? c.CAT_GroupOfCost2.GroupName : string.Empty,
                        ParentID = c.ParentID,
                        Code = c.Code,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATGroupOfCost CATGroupOfCost_Get(int id)
        {
            try
            {
                CATGroupOfCost result = new CATGroupOfCost();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfCost.Where(c => c.ID == id).Select(c => new CATGroupOfCost
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentID = c.ParentID,
                            Code = c.Code,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.ParentID = null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATGroupOfCost_Save(CATGroupOfCost item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfCost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfCost();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupName = item.GroupName;
                    obj.ParentID = item.ParentID;
                    obj.Code = item.Code;
                    if (obj.ID < 1)
                        model.CAT_GroupOfCost.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfCost_Delete(CATGroupOfCost item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfCost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfCost.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult CATGroupOfCost_GroupList(int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfCost.Where(c => c.ID != id).Select(c => new DTOCATGroupOfCost
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        ParentCode = c.ParentID > 0 ? c.CAT_GroupOfCost2.Code : string.Empty,
                        ParentName = c.ParentID > 0 ? c.CAT_GroupOfCost2.GroupName : string.Empty,
                        ParentID = c.ParentID,
                        Code = c.Code,
                    }).ToArray();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<DTOCATGroupOfCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfCost_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfCost.Select(c => new DTOCATGroupOfCost
                        {
                            ID = c.ID,
                            GroupName = c.GroupName,
                            ParentCode = c.ParentID > 0 ? c.CAT_GroupOfCost2.Code : string.Empty,
                            ParentName = c.ParentID > 0 ? c.CAT_GroupOfCost2.GroupName : string.Empty,
                            Code = c.Code,
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên nhóm chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            cells.Add(HelperExcel.NewCell(item.ParentCode));
                            cells.Add(HelperExcel.NewCell(item.ParentName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }
                        var lstTypeOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();
                        var ws1 = lstWorkSheet[1];
                        ws1.Rows.Clear();
                        ws1.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại dịch vụ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfCost_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfCost.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupListCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfGroup.FirstOrDefault(c => c.Code == dataGroupListCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupListID, obj.ID.ToString());
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfCost_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;


                    var lstGetID = model.CAT_GroupOfCost.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupListCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfGroup.FirstOrDefault(c => c.Code == dataGroupListCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupListID, obj.ID.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }

            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfCost_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            string dataID = HelperExcel.GetString(checkRow, colCheckID);
                            string dataTypeID = HelperExcel.GetString(checkRow, colGroupListID);



                            int getid = Convert.ToInt32(dataID);
                            int TypeID = Convert.ToInt32(dataTypeID);

                            var obj = model.CAT_GroupOfCost.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfCost();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;

                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            obj.ParentID = TypeID;
                            if (obj.ID < 1)
                                model.CAT_GroupOfCost.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }

                    return false;
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATCost
        public DTOResult CATCost_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Cost.Select(c => new DTOCATCost
                    {
                        ID = c.ID,
                        GroupOfCostID = c.GroupOfCostID,
                        GroupOfCostName = c.CAT_GroupOfCost.GroupName,
                        Code = c.Code,
                        CostName = c.CostName,
                        AccountNo = c.AccountNo,
                        TypeOfCostID = c.TypeOfCostID,
                        TypeOfCostName = c.SYS_Var.ValueOfVar,
                        IsSystemCost = c.TypeOfCostID == -(int)SYSVarType.TypeOfCostHidden
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATCost CATCost_Get(int id)
        {
            try
            {
                DTOCATCost result = new DTOCATCost();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Cost.Where(c => c.ID == id).Select(c => new DTOCATCost
                        {
                            ID = c.ID,
                            GroupOfCostID = c.GroupOfCostID,
                            GroupOfCostName = c.CAT_GroupOfCost.GroupName,
                            Code = c.Code,
                            CostName = c.CostName,
                            AccountNo = c.AccountNo,
                            TypeOfCostID = c.TypeOfCostID,
                            TypeOfCostName = c.SYS_Var.ValueOfVar,
                            IsSystemCost = c.TypeOfCostID == -(int)SYSVarType.TypeOfCostHidden
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var objGroupCost = model.CAT_GroupOfCost.FirstOrDefault();
                        if (objGroupCost != null) result.GroupOfCostID = objGroupCost.ID; else result.GroupOfCostID = 0;
                        var objType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfCost && c.ID != -(int)SYSVarType.TypeOfCostFixedCost && c.ID != -(int)SYSVarType.TypeOfCostHidden).FirstOrDefault();
                        if (objType != null) result.TypeOfCostID = objType.ID; else result.TypeOfCostID = 0;
                        result.IsSystemCost = false;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATCost_Save(DTOCATCost item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Cost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Cost();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.TypeOfCostID = item.TypeOfCostID;
                    obj.CostName = item.CostName;
                    if (obj.TypeOfCostID != -(int)SYSVarType.TypeOfCostHidden)
                    {
                        obj.Code = item.Code;
                        obj.AccountNo = item.AccountNo;
                        obj.GroupOfCostID = item.GroupOfCostID;
                    }
                    if (obj.ID < 1)
                        model.CAT_Cost.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATCost_Delete(DTOCATCost item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Cost.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Cost.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATCost_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Cost.Select(c => new
                        {
                            ID = c.ID,
                            GroupOfCostID = c.GroupOfCostID,
                            GroupOfCostCode = c.CAT_GroupOfCost.Code,
                            GroupOfCostName = c.CAT_GroupOfCost.GroupName,
                            Code = c.Code,
                            CostName = c.CostName,
                            AccountNo = c.AccountNo,
                            TypeOfCostID = c.TypeOfCostID,
                            TypeOfCostCode = c.SYS_Var.Code,
                            TypeOfCostName = c.SYS_Var.ValueOfVar,
                            IsSystemCost = c.TypeOfCostID == -(int)SYSVarType.TypeOfCostHidden
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Định khoản", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.CostName));
                            cells.Add(HelperExcel.NewCell(item.AccountNo));
                            cells.Add(HelperExcel.NewCell(item.GroupOfCostCode));
                            cells.Add(HelperExcel.NewCell(item.GroupOfCostName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfCostCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfCostName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstGroupOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();
                        var ws1 = lstWorkSheet[1];

                        ws1.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên nhóm chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstGroupOfGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        //var lstTypeOfGroup = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfCost).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        //var ws2 = lstWorkSheet[2];
                        ////ws1.Rows.Clear;
                        //ws2.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        //cells = new List<Cell>();
                        //cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        //cells.Add(HelperExcel.NewCell("Mã Loại chi phí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        //cells.Add(HelperExcel.NewCell("Tên loại chi phi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        //ws2.Rows.Add(HelperExcel.NewRow(ws2.Rows.Count, cells));
                        //stt = 1;
                        //foreach (var item in lstTypeOfGroup)
                        //{
                        //    cells = new List<Cell>();
                        //    cells.Add(HelperExcel.NewCell(stt));
                        //    cells.Add(HelperExcel.NewCell(item.Code));
                        //    cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                        //    ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        //    stt++;
                        //}

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATCost_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;
                    int colTypeListID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_GroupOfCost.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();
                    var lstTypeOfGroup = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfCost).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataAccountNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupListCode = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeListCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataAccountNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag)
                            flag = HelperExcel.Valid(dataGroupListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataGroupListCode) && lstGroupOfGroup.Where(c => c.Code == dataGroupListCode).Count() == 0))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfGroup.FirstOrDefault(c => c.Code == dataGroupListCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupListID, valid);
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataTypeListCode) && lstTypeOfGroup.Where(c => c.Code == dataTypeListCode).Count() == 0))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstTypeOfGroup.FirstOrDefault(c => c.Code == dataTypeListCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypeListID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATCost_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;
                    int colTypeListID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;


                    var lstGetID = model.CAT_GroupOfCost.Select(c => new { c.ID, c.Code }).ToList();
                    var lstGroupOfGroup = CATGroupOfCost_GroupList(0).Data.Cast<DTOCATGroupOfCost>().ToList();
                    var lstTypeOfGroup = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfCost).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataAccountNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupListCode = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeListCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataAccountNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag)
                            flag = HelperExcel.Valid(dataGroupListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataGroupListCode) && lstGroupOfGroup.Where(c => c.Code == dataGroupListCode).Count() == 0))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGroupOfGroup.FirstOrDefault(c => c.Code == dataGroupListCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupListID, valid);
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeListCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        indexError++;
                        if (flag && (string.IsNullOrEmpty(dataTypeListCode) && lstTypeOfGroup.Where(c => c.Code == dataTypeListCode).Count() == 0))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstTypeOfGroup.FirstOrDefault(c => c.Code == dataTypeListCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypeListID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }

            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATCost_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colGroupListID = colData++;
                    int colTypeListID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            string dataAccountNo = HelperExcel.GetString(checkRow, colData++);
                            string dataTypeID = HelperExcel.GetString(checkRow, colGroupListID);
                            string dataTypeOfGroup = HelperExcel.GetString(checkRow, colTypeListID);

                            int getid = Convert.ToInt32(colCheckID);

                            var obj = model.CAT_Cost.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Cost();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;

                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }

                            obj.Code = dataCode;
                            obj.CostName = dataName;
                            obj.AccountNo = dataAccountNo;
                            obj.GroupOfCostID = Convert.ToInt32(dataTypeID);
                            obj.TypeOfCostID = Convert.ToInt32(dataTypeOfGroup);
                            if (obj.ID < 1)
                                model.CAT_Cost.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }

                    return false;
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region SYSCustomer

        public DTOResult SYSCustomer_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => c.IsSystem == true && c.ParentID > 0).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                        ShortName = c.ShortName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note,
                        BiddingID = c.BiddingID,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        ParentID = c.ParentID,
                        IsFinance = c.IsFinance,
                        TypeBusiness = c.TypeBusiness,
                        Scale = c.Scale,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsApproved = c.IsApproved,
                        Field = c.Field,
                        BiddingCode = c.BiddingCode,
                        Image = c.Image,
                        IsSystem = c.IsSystem,
                        Domain = c.Domain,
                        Alias = c.Alias,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int SYSCustomer_Save(CUSCustomer item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    using (var helper = new CopyHelper())
                    {
                        if (model.CUS_Customer.FirstOrDefault(c => c.ID != item.ID && c.Code == item.Code && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH && c.IsSystem) != null)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_Duplicate, DTOErrorMember.Code.ToString());

                        var obj = model.CUS_Customer.Where(c => c.ID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CUS_Customer();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.TypeOfCustomerID = -(int)SYSVarType.TypeOfCustomerBOTH;
                            obj.IsApproved = obj.IsFinance = obj.IsSystem = true;

                            var parent = model.CUS_Customer.FirstOrDefault(c => c.IsSystem && c.ParentID == null);
                            if (parent == null)
                                throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập chi nhánh cấp cha!");
                            obj.ParentID = parent.ID;

                            CUS_Company objCompany1 = new CUS_Company();
                            objCompany1.CreatedBy = Account.UserName;
                            objCompany1.CreatedDate = DateTime.Now;
                            objCompany1.CUS_Customer = obj;
                            objCompany1.CustomerRelateID = parent.ID;
                            model.CUS_Company.Add(objCompany1);

                            CUS_Company objCompany2 = new CUS_Company();
                            objCompany2.CreatedBy = Account.UserName;
                            objCompany2.CreatedDate = DateTime.Now;
                            objCompany2.CustomerOwnID = parent.ID;
                            objCompany2.CUS_Customer1 = obj;
                            model.CUS_Company.Add(objCompany2);

                            foreach (var relate in parent.CUS_Company.ToList())
                            {
                                CUS_Company objCompany3 = new CUS_Company();
                                objCompany3.CreatedBy = Account.UserName;
                                objCompany3.CreatedDate = DateTime.Now;
                                objCompany3.CUS_Customer = obj;
                                objCompany3.CustomerRelateID = relate.CustomerRelateID;
                                model.CUS_Company.Add(objCompany3);

                                CUS_Company objCompany4 = new CUS_Company();
                                objCompany4.CreatedBy = Account.UserName;
                                objCompany4.CreatedDate = DateTime.Now;
                                objCompany4.CUS_Customer1 = obj;
                                objCompany4.CustomerOwnID = relate.CustomerRelateID;
                                model.CUS_Company.Add(objCompany4);
                            }
                            model.CUS_Customer.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Code = item.Code;
                        obj.CustomerName = item.CustomerName;
                        obj.ShortName = item.ShortName;
                        obj.Address = !string.IsNullOrEmpty(item.Address) ? item.Address : string.Empty;
                        obj.WardID = item.WardID;
                        obj.DistrictID = item.DistrictID;
                        obj.ProvinceID = item.ProvinceID;
                        obj.CountryID = item.CountryID;
                        obj.TelNo = item.TelNo;
                        obj.Fax = item.Fax;
                        obj.Email = item.Email;
                        obj.BillingName = item.BillingName;
                        obj.BillingAddress = item.BillingAddress;
                        obj.TaxCode = item.TaxCode;
                        obj.Note = item.Note;
                        obj.BiddingID = item.BiddingID;
                        obj.IsFinance = item.IsFinance;
                        obj.TypeBusiness = item.TypeBusiness;
                        obj.Scale = item.Scale;
                        obj.Note1 = item.Note1;
                        obj.Note2 = item.Note2;
                        obj.IsApproved = item.IsApproved;
                        obj.Field = item.Field;
                        obj.Image = item.Image;
                        obj.Domain = item.Domain;
                        obj.Alias = item.Alias;
                        model.SaveChanges();
                        return obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SYSCustomer_Delete(CUSCustomer item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.ParentID == null)
                            throw FaultHelper.BusinessFault(null, null, "Không được xóa chi nhánh này!");

                        foreach (var cus in model.CUS_Company.Where(c => c.CustomerOwnID == obj.ID))
                            model.CUS_Company.Remove(cus);
                        foreach (var cus in model.CUS_Company.Where(c => c.CustomerRelateID == obj.ID))
                            model.CUS_Company.Remove(cus);
                        model.CUS_Customer.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult SYSCustomer_Goal_List(string request, int branchID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Goal.Where(c => c.CustomerID == branchID).Select(c => new CUSGoal
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        Code = c.Code,
                        GoalName = c.GoalName,
                        Income = c.Income,
                        Cost = c.Cost,
                        Year = c.Year
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSGoal>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int SYSCustomer_Goal_Save(CUSGoal item, int branchID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CUS_Goal.Count(c => c.Code == item.Code && c.CustomerID == branchID && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var obj = model.CUS_Goal.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CUS_Goal();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = branchID;
                        model.CUS_Goal.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.GoalName = item.GoalName;
                    obj.Income = item.Income;
                    obj.Cost = item.Cost;
                    obj.Year = item.Year;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SYSCustomer_Goal_Delete(CUSGoal item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Goal.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var child in model.CUS_GoalDetail.Where(c => c.GoalID == obj.ID))
                        {
                            model.CUS_GoalDetail.Remove(child);
                        }
                        model.CUS_Goal.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SYSCustomer_Goal_Reset(int goalID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var goal = model.CUS_Goal.FirstOrDefault(c => c.ID == goalID);
                    if (goal == null)
                        throw FaultHelper.BusinessFault(null, null, "Chỉ tiêu không tồn tại!");
                    for (int i = 1; i <= 12; i++)
                    {
                        decimal BaseIncome = Math.Round(goal.Income / 12, 0);
                        decimal BaseCost = Math.Round(goal.Cost / 12, 0);
                        var obj = model.CUS_GoalDetail.FirstOrDefault(c => c.GoalID == goalID && c.Month == i);
                        if (obj == null)
                        {
                            obj = new CUS_GoalDetail();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.GoalID = goalID;
                            obj.Month = i;
                            model.CUS_GoalDetail.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.DateFrom = new DateTime(goal.Year, obj.Month, 1);
                        obj.DateTo = obj.DateFrom.AddMonths(1).AddDays(-1);
                        obj.Income = BaseIncome;
                        obj.Cost = BaseCost;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult SYSCustomer_GoalDetail_List(string request, int goalID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GoalDetail.Where(c => c.GoalID == goalID).Select(c => new CUSGoalDetail
                    {
                        ID = c.ID,
                        GoalID = c.GoalID,
                        Month = c.Month,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        Income = c.Income,
                        Cost = c.Cost
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSGoalDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int SYSCustomer_GoalDetail_Save(CUSGoalDetail item, int goalID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GoalDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CUS_GoalDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.GoalID = goalID;
                        obj.Month = item.Month;
                        model.CUS_GoalDetail.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.DateFrom = item.DateFrom;
                    obj.DateTo = item.DateTo;
                    obj.Income = item.Income;
                    obj.Cost = item.Cost;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region SYSSetting

        public DTOSYSSetting SYSSetting_Get(int? syscusID)
        {
            try
            {
                DTOSYSSetting result = new DTOSYSSetting { CollectDataKM = 1 };
                using (var model = new DataEntities())
                {
                    string sKey = SYSSettingKey.System.ToString();

                    if (!syscusID.HasValue || syscusID < 1)
                        syscusID = Account.SYSCustomerID;
                    var item = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == syscusID);
                    if (item != null)
                    {
                        if (!string.IsNullOrEmpty(item.Setting))
                        {
                            var data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(item.Setting);
                            if (data != null && data.Count > 0)
                                result = data.FirstOrDefault();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SYSSetting_Save(DTOSYSSetting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    string sKey = SYSSettingKey.System.ToString();
                    List<DTOSYSSetting> lst = new List<DTOSYSSetting>();
                    lst.Add(item);
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(lst);
                    if (obj == null)
                    {
                        obj = new SYS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.SYS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = sSetting;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void SYSSetting_CheckApplySeaportCarrier()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperRouting.RunApplySetting(model, Account);
                    //var lstPartnerID = model.CUS_Partner.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier || c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerSeaPort).Select(c => c.PartnerID).Distinct().ToList();

                    //var lstPartner = model.CAT_Partner.Where(c =>lstPartnerID.Contains(c.ID)).ToList();
                    //HelperRouting.ApplyPartnerForAllCus(model, Account, lstPartner);

                    //var lstLocation = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier && lstPartnerID.Contains(c.PartnerID)).ToList();

                    //HelperRouting.ApplyDepotForAllCarrier(model, Account, lstLocation);

                    //var lstPartnerLocation = model.CAT_PartnerLocation.Where(c => lstPartnerID.Contains(c.PartnerID)).ToList();
                    //HelperRouting.ApplyLocationForAllCus(model, Account, lstPartnerLocation);


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region SYSMaterial
        public DTOTriggerMaterial SYSMaterial_Get(int? syscusID)
        {
            try
            {
                DTOTriggerMaterial result = new DTOTriggerMaterial();
                using (var model = new DataEntities())
                {
                    string sKey = SYSSettingKey.Material.ToString();

                    if (!(syscusID > 0))
                        syscusID = Account.SYSCustomerID;
                    //if (!syscusID.HasValue || syscusID < 1)
                    //    syscusID = Account.SYSCustomerID;

                    var item = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == syscusID);
                    if (item != null)
                    {
                        if (!string.IsNullOrEmpty(item.Setting))
                        {
                            try
                            {
                                result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOTriggerMaterial>(item.Setting);
                            }
                            catch
                            {
                                item.Setting = string.Empty;
                                item.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(result);
                                model.SaveChanges();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void SYSMaterial_Save(DTOTriggerMaterial item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    string sKey = SYSSettingKey.Material.ToString();
                    //List<DTOTriggerMaterial> lst = new List<DTOTriggerMaterial>();
                    //lst.Add(item);
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(item);
                    if (obj == null)
                    {
                        obj = new SYS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        model.SYS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = string.Empty;
                    obj.Setting = sSetting;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CATSYSCustomerTrouble
        public DTOResult CATSYSCustomerTrouble_SysCustomer_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => c.ParentID != null && c.IsSystem).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        CustomerName = c.CustomerName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CUSCustomer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult CATSYSCustomerTrouble_Trouble_List(string request, int SysCus)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATSYSCustomerTrouble> lstFinal = new List<DTOCATSYSCustomerTrouble>();
                using (var model = new DataEntities())
                {
                    var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                    var orginal = model.CAT_GroupOfTrouble.Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                        GroupOfTroubleName = c.SYS_Var.ValueOfVar,
                    }).ToList();
                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == SysCus);
                    if (obj != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(obj.Setting);
                    foreach (var item in orginal)
                    {
                        var check = lst.FirstOrDefault(c => c.TroubleID == item.TroubleID);
                        if (check != null)
                        {
                            item.IsUse = true;
                            item.CostValue = check.CostValue;
                        }
                    }

                    var query = orginal.ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATSYSCustomerTrouble>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATSYSCustomerTrouble_Trouble_Save(List<DTOCATSYSCustomerTrouble> lst, int SysCus)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    string sKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();

                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == SysCus);
                    string sSetting = Newtonsoft.Json.JsonConvert.SerializeObject(lst);
                    if (obj == null)
                    {
                        obj = new SYS_Setting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Key = sKey;
                        obj.SYSCustomerID = SysCus;
                        model.SYS_Setting.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Setting = sSetting;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATPacking

        public DTOResult CATPackingGOP_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => (c.ID == -(int)SYSVarType.TypeOfPackingGOPTU || c.ID == -(int)SYSVarType.TypeOfPackingGOPCBM || c.ID == -(int)SYSVarType.TypeOfPackingGOPTon)).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATPackingGOPTU_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)).Select(c => new DTOCATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPacking CATPackingGOPTU_Get(int id)
        {
            try
            {
                DTOCATPacking result = new DTOCATPacking();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Packing.Where(c => c.ID == id).Select(c => new DTOCATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName,
                            TypeOfPackageID = c.TypeOfPackageID,
                            TypeOfPackageName = c.SYS_Var.ValueOfVar
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.TypeOfPackageID = -(int)SYSVarType.TypeOfPackingGOPTon;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CATPackingGOPTU_Save(DTOCATPacking item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var q = model.CAT_Packing.FirstOrDefault(c => c.ID == item.ID);
                    if (q == null)
                    {
                        q = new CAT_Packing();
                        q.CreatedBy = Account.UserName;
                        q.CreatedDate = DateTime.Now;
                        q.NoOfDelivery = 0;
                        model.CAT_Packing.Add(q);
                    }
                    else
                    {
                        q.ModifiedBy = Account.UserName;
                        q.ModifiedDate = DateTime.Now;
                    }

                    q.TypeOfPackageID = item.TypeOfPackageID;
                    q.Code = item.Code;
                    q.PackingName = item.PackingName;
                    model.SaveChanges();
                    return q.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATPackingGOPTU_Delete(DTOCATPacking item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var q = model.CAT_Packing.FirstOrDefault(c => c.ID == item.ID);
                    if (q != null)
                    {
                        model.CAT_Packing.Remove(q);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public SYSExcel CATPackingGOPTU_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_Packing.Select(c => new CATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName,
                            TypeOfPackageCode = c.SYS_Var.Code,
                            TypeOfPackageName = c.SYS_Var.ValueOfVar,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.PackingName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfPackageCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfPackageName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfPackage = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfPacking).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        ws = lstWorkSheet[1];
                        ws.Rows.Clear();

                        arrColumnWidth = new double[3];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 3; i++)
                        {
                            arrColumnWidth[i] = 110;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfPackage)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATPackingGOPTU_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_Packing.Select(c => new { c.ID, c.Code }).ToList();
                    var lstTypeOfPackage = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfPacking).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeOfPackage.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel CATPackingGOPTU_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstTypeOfPackage = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfPacking).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstGetID = model.CAT_Packing.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);
                        string dataTypeOfPackageCode = HelperExcel.GetString(eRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfPackageCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var itemTypeOfPacking = lstTypeOfPackage.Where(c => c.Code == dataTypeOfPackageCode).FirstOrDefault();
                            if (itemTypeOfPacking != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckTypeOfPacking, itemTypeOfPacking.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool CATPackingGOPT_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 5;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTypeOfPacking = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataTypeOfPacketID = HelperExcel.GetString(eRow, colCheckTypeOfPacking);

                            int getid = Convert.ToInt32(dataID);
                            int getTypeOfPacketID = Convert.ToInt32(dataTypeOfPacketID);

                            var obj = model.CAT_Packing.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_Packing();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.PackingName = dataName;
                            obj.TypeOfPackageID = getTypeOfPacketID;
                            if (obj.ID < 1)
                                model.CAT_Packing.Add(obj);
                            model.SaveChanges();

                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATTypeOfRouteProblem
        public DTOResult CATTypeOfRouteProblem_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_TypeOfRouteProblem.Select(c => new DTOCATTypeOfRouteProblem
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTypeOfRouteProblem>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATTypeOfRouteProblem_Save(DTOCATTypeOfRouteProblem item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_TypeOfRouteProblem.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_TypeOfRouteProblem();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    if (obj.ID < 1)
                        model.OPS_TypeOfRouteProblem.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATTypeOfRouteProblem CATTypeOfRouteProblem_Get(int ID)
        {
            try
            {
                DTOCATTypeOfRouteProblem result = new DTOCATTypeOfRouteProblem { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.OPS_TypeOfRouteProblem.Where(c => c.ID == ID).Select(c => new DTOCATTypeOfRouteProblem
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATTypeOfRouteProblem_Delete(DTOCATTypeOfRouteProblem item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_TypeOfRouteProblem.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.OPS_TypeOfRouteProblem.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATTypeOfRouteProblem_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.OPS_TypeOfRouteProblem.Select(c => new DTOCATTypeOfRouteProblem
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên vấn đề", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row CATTypeOfRouteProblem_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.OPS_TypeOfRouteProblem.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATTypeOfRouteProblem_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.OPS_TypeOfRouteProblem.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATTypeOfRouteProblem_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.OPS_TypeOfRouteProblem.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new OPS_TypeOfRouteProblem();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeName = dataName;
                            if (obj.ID < 1)
                                model.OPS_TypeOfRouteProblem.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        #endregion

        #region CATTypeOfPriceDIEx
        public DTOResult CATTypeOfPriceDIEx_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTypeOfPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATTypeOfPriceDIEx_Save(DTOCATTypeOfPriceDIEx item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_TypeOfPriceDIEx.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw new Exception("Mã[" + item.Code + "] đã sử dụng");
                    var obj = model.CAT_TypeOfPriceDIEx.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_TypeOfPriceDIEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    if (obj.ID < 1)
                        model.CAT_TypeOfPriceDIEx.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATTypeOfPriceDIEx CATTypeOfPriceDIEx_Get(int ID)
        {
            try
            {
                DTOCATTypeOfPriceDIEx result = new DTOCATTypeOfPriceDIEx { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_TypeOfPriceDIEx.Where(c => c.ID == ID).Select(c => new DTOCATTypeOfPriceDIEx
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            IsUse = model.CAT_PriceDIEx.Count(d => d.TypeOfPriceDIExID == ID) > 0
                        }).FirstOrDefault();
                    }
                    else
                    {

                        result.IsUse = false;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATTypeOfPriceDIEx_Delete(DTOCATTypeOfPriceDIEx item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_PriceDIEx.Count(c => c.TypeOfPriceDIExID == item.ID) > 0)
                        throw new Exception("Đã sử dụng, không thể xóa");
                    var obj = model.CAT_TypeOfPriceDIEx.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_TypeOfPriceDIEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATTypeOfPriceDIEx_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã phụ thu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên phụ thu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATTypeOfPriceDIEx_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;


                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_TypeOfPriceDIEx.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATTypeOfPriceDIEx_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;
                    failCurrent = 0;

                    var lstGetID = model.CAT_TypeOfPriceDIEx.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;

                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATTypeOfPriceDIEx_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;


                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            int getid = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));

                            var obj = model.CAT_TypeOfPriceDIEx.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_TypeOfPriceDIEx();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeName = dataName;
                            if (obj.ID < 1)
                                model.CAT_TypeOfPriceDIEx.Add(obj);
                        }
                        model.SaveChanges();
                        return true;
                    }
                    return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATTypeOfPriceCOEx
        public DTOResult CATTypeOfPriceCOEx_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfPriceCOEx.Select(c => new DTOCATTypeOfPriceCOEx
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTypeOfPriceCOEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATTypeOfPriceCOEx_Save(DTOCATTypeOfPriceCOEx item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TypeOfPriceCOEx.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_TypeOfPriceCOEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    if (obj.ID < 1)
                        model.CAT_TypeOfPriceCOEx.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATTypeOfPriceCOEx CATTypeOfPriceCOEx_Get(int ID)
        {
            try
            {
                DTOCATTypeOfPriceCOEx result = new DTOCATTypeOfPriceCOEx { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_TypeOfPriceCOEx.Where(c => c.ID == ID).Select(c => new DTOCATTypeOfPriceCOEx
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            IsUse = model.CAT_PriceCOEx.Count(d => d.TypeOfPriceCOExID == ID) > 0
                        }).FirstOrDefault();
                    }
                    else
                    {

                        result.IsUse = false;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATTypeOfPriceCOEx_Delete(DTOCATTypeOfPriceCOEx item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TypeOfPriceCOEx.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_TypeOfPriceCOEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        #region CATGroupOfLocation
        public DTOResult CATGroupOfLocation_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        GroupOfPartnerID = c.GroupOfPartnerID,
                        GroupOfPartnerName = c.CAT_GroupOfPartner.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATGroupOfLocation CATGroupOfLocation_Get(int id)
        {
            try
            {
                DTOCATGroupOfLocation result = new DTOCATGroupOfLocation();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_GroupOfLocation.Where(c => c.ID == id).Select(c => new DTOCATGroupOfLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            GroupOfPartnerID = c.GroupOfPartnerID,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.CAT_GroupOfPartner.FirstOrDefault();
                        result.GroupOfPartnerID = 0;
                        if (obj != null) result.GroupOfPartnerID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int CATGroupOfLocation_Save(DTOCATGroupOfLocation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfLocation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_GroupOfLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.GroupName = item.GroupName;
                    obj.GroupOfPartnerID = item.GroupOfPartnerID;

                    if (obj.ID < 1)
                        model.CAT_GroupOfLocation.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATGroupOfLocation_Delete(DTOCATGroupOfLocation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_GroupOfLocation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_GroupOfLocation.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATGroupOfLocation_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                            GroupOfPartnerID = c.GroupOfPartnerID,
                            GroupOfPartnerCode = c.CAT_GroupOfPartner.Code,
                            GroupOfPartnerName = c.CAT_GroupOfPartner.GroupName,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            cells.Add(HelperExcel.NewCell(item.GroupOfPartnerCode));
                            cells.Add(HelperExcel.NewCell(item.GroupOfPartnerName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfLocation = All_CATGroupOfPartner().Data.Cast<CATGroupOfPartner>().ToList();
                        var ws1 = lstWorkSheet[1];
                        ws1.Rows.Clear();
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 150, 150 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfLocation)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.GroupName));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATGroupOfLocation_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupLocationID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstTypeOfLocation = All_CATGroupOfPartner().Data.Cast<CATGroupOfPartner>().ToList();
                    var lstGetID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataTypeOfLocationCode = HelperExcel.GetString(checkRow, colData++);


                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataTypeOfLocationCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfLocation.FirstOrDefault(c => c.Code == dataTypeOfLocationCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTOfGroupLocationID, obj.ID.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATGroupOfLocation_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupLocationID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;



                    var lstTypeOfLocation = All_CATGroupOfPartner().Data.Cast<CATGroupOfPartner>().ToList();
                    var lstGetID = model.CAT_GroupOfLocation.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index >= rowStart)
                        {
                            if (checkRow.Index < rowStart) continue;
                            if (checkRow.Index >= rowEnd) break;
                            colData = 1;

                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            string dataTypeOfLocationCode = HelperExcel.GetString(checkRow, colData++);

                            bool flag = true;
                            int indexError = 0;
                            if (flag)
                                flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataTypeOfLocationCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag)
                            {
                                var obj = lstTypeOfLocation.FirstOrDefault(c => c.Code == dataTypeOfLocationCode);
                                if (obj == null)
                                {
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                }
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTOfGroupLocationID, obj.ID.ToString());
                                }
                            }
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATGroupOfLocation_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckTOfGroupLocationID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);
                            string dataID = HelperExcel.GetString(checkRow, colCheckID);
                            string dataOfGroupLocationID = HelperExcel.GetString(checkRow, colCheckTOfGroupLocationID);

                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_GroupOfLocation.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_GroupOfLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.GroupName = dataName;
                            obj.GroupOfPartnerID = Convert.ToInt32(dataOfGroupLocationID);
                            if (obj.ID < 1)
                                model.CAT_GroupOfLocation.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    return false;


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region OPSTypeOfDITOGroupProductReturn
        public DTOResult OPSTypeOfDITOGroupProductReturn_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_TypeOfDITOGroupProductReturn.Select(c => new DTOOPSTypeOfDITOGroupProductReturn
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                        TypeOfDITOGroupProductReturnStatusID = c.TypeOfDITOGroupProductReturnStatusID,
                        TypeOfDITOGroupProductReturnStatusName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOOPSTypeOfDITOGroupProductReturn>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOOPSTypeOfDITOGroupProductReturn OPSTypeOfDITOGroupProductReturn_Get(int id)
        {
            try
            {
                DTOOPSTypeOfDITOGroupProductReturn result = new DTOOPSTypeOfDITOGroupProductReturn();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.OPS_TypeOfDITOGroupProductReturn.Where(c => c.ID == id).Select(c => new DTOOPSTypeOfDITOGroupProductReturn
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            TypeOfDITOGroupProductReturnStatusID = c.TypeOfDITOGroupProductReturnStatusID,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDITOGroupProductReturnStatus).FirstOrDefault();
                        result.TypeOfDITOGroupProductReturnStatusID = 0;
                        if (obj != null) result.TypeOfDITOGroupProductReturnStatusID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int OPSTypeOfDITOGroupProductReturn_Save(DTOOPSTypeOfDITOGroupProductReturn item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_TypeOfDITOGroupProductReturn.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new OPS_TypeOfDITOGroupProductReturn();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    obj.TypeOfDITOGroupProductReturnStatusID = item.TypeOfDITOGroupProductReturnStatusID;

                    if (obj.ID < 1)
                        model.OPS_TypeOfDITOGroupProductReturn.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void OPSTypeOfDITOGroupProductReturn_Delete(DTOOPSTypeOfDITOGroupProductReturn item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_TypeOfDITOGroupProductReturn.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.OPS_TypeOfDITOGroupProductReturn.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel OPSTypeOfDITOGroupProductReturn_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.OPS_TypeOfDITOGroupProductReturn.Select(c => new DTOOPSTypeOfDITOGroupProductReturn
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            TypeOfDITOGroupProductReturnStatusCode = c.SYS_Var.Code,
                            TypeOfDITOGroupProductReturnStatusName = c.SYS_Var.ValueOfVar
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã lý do trả về", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Lý do trả về", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhóm lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfDITOGroupProductReturnStatusCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfDITOGroupProductReturnStatusName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        var lstTypeOfGroup = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDITOGroupProductReturnStatus).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        var ws1 = lstWorkSheet[1];
                        //ws1.Rows.Clear;
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 150, 150 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã Nhóm lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Nhóm lý do", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfGroup)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row OPSTypeOfDITOGroupProductReturn_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckStatusID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstStatusCode = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDITOGroupProductReturnStatus).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.OPS_TypeOfDITOGroupProductReturn.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataStatusCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataStatusCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {

                            var itemStatus = lstStatusCode.Where(c => c.Code == dataStatusCode).FirstOrDefault();
                            if (itemStatus != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckStatusID, itemStatus.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel OPSTypeOfDITOGroupProductReturn_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckStatusID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstStatusCode = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDITOGroupProductReturnStatus).Select(c => new { c.ID, c.Code }).ToList();
                    var lstGetID = model.OPS_TypeOfDITOGroupProductReturn.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 150, 150 });
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);
                        string dataStatusCode = HelperExcel.GetString(eRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataStatusCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {

                            var itemStatus = lstStatusCode.Where(c => c.Code == dataStatusCode).FirstOrDefault();
                            if (itemStatus != null)
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckStatusID, itemStatus.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool OPSTypeOfDITOGroupProductReturn_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckStatusID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData);
                            string dataName = HelperExcel.GetString(eRow, colData);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataStatusID = HelperExcel.GetString(eRow, colCheckStatusID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.OPS_TypeOfDITOGroupProductReturn.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new OPS_TypeOfDITOGroupProductReturn();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeName = dataName;
                            obj.TypeOfDITOGroupProductReturnStatusID = Convert.ToInt32(dataStatusID);
                            if (obj.ID < 1)
                                model.OPS_TypeOfDITOGroupProductReturn.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATTypeOfDriverFee
        public DTOResult CATTypeOfDriverFee_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_TypeOfDriverFee.Select(c => new DTOCATTypeOfDriverFee
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTypeOfDriverFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATTypeOfDriverFee_Save(DTOCATTypeOfDriverFee item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_TypeOfDriverFee.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_TypeOfDriverFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_TypeOfDriverFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATTypeOfDriverFee CATTypeOfDriverFee_Get(int ID)
        {
            try
            {
                DTOCATTypeOfDriverFee result = new DTOCATTypeOfDriverFee { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_TypeOfDriverFee.Where(c => c.ID == ID).Select(c => new DTOCATTypeOfDriverFee
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATTypeOfDriverFee_Delete(DTOCATTypeOfDriverFee item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_TypeOfDriverFee.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_TypeOfDriverFee.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATTypeOfDriverFee_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1)
                    {
                        var lst = model.CAT_TypeOfDriverFee.Select(c => new DTOCATTypeOfDriverFee
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[4];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 4; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên loại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATTypeOfDriverFee_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CAT_TypeOfDriverFee.Select(c => new { c.ID, c.Code }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATTypeOfDriverFee_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_TypeOfDriverFee.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[1].Value != null && !string.IsNullOrEmpty(eRow.Cells[1].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[1].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var eRow in lst)
                    {
                        if (eRow.Index < rowStart) continue;
                        if (eRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(eRow, colData++);
                        string dataName = HelperExcel.GetString(eRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATTypeOfDriverFee_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.CAT_TypeOfDriverFee.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new CAT_TypeOfDriverFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeName = dataName;
                            if (obj.ID < 1)
                                model.CAT_TypeOfDriverFee.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region ORD_TypeOfDoc
        public DTOResult ORDTypeOfDoc_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //var query = model.ORD_TypeOfDoc.Select(c => new DTOORDTypeOfDoc
                    //{

                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    TypeName = c.TypeName,
                    //    SortOrder = c.SortOrder,
                    //    TypeOfWAInspectionStatusID = c.TypeOfWAInspectionStatusID > 0 ? c.TypeOfWAInspectionStatusID : -1,
                    //    TypeOfWAInspectionStatusName = c.TypeOfWAInspectionStatusID > 0 ? c.SYS_Var.ValueOfVar : string.Empty
                    //}).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    //result.Total = query.Total;
                    //result.Data = query.Data as IEnumerable<DTOORDTypeOfDoc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int ORDTypeOfDoc_Save(DTOORDTypeOfDoc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    //if (model.ORD_TypeOfDoc.Count(c => c.Code == item.Code && c.ID != item.ID) > 0)
                    //    throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    //var obj = model.ORD_TypeOfDoc.FirstOrDefault(c => c.ID == item.ID);
                    //if (obj == null)
                    //{
                    //    obj = new ORD_TypeOfDoc();
                    //    obj.CreatedBy = Account.UserName;
                    //    obj.CreatedDate = DateTime.Now;
                    //    model.ORD_TypeOfDoc.Add(obj);
                    //}
                    //else
                    //{
                    //    obj.ModifiedBy = Account.UserName;
                    //    obj.ModifiedDate = DateTime.Now;
                    //}
                    //obj.Code = item.Code;
                    //obj.TypeName = item.TypeName;
                    //obj.SortOrder = item.SortOrder;
                    //obj.TypeOfWAInspectionStatusID = item.TypeOfWAInspectionStatusID > 0 ? item.TypeOfWAInspectionStatusID : null;

                    //model.SaveChanges();
                    //return obj.ID;
                    return -1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOORDTypeOfDoc ORDTypeOfDoc_Get(int ID)
        {
            try
            {
                DTOORDTypeOfDoc result = new DTOORDTypeOfDoc { ID = 0 };
                using (var model = new DataEntities())
                {
                    //if (ID > 0)
                    //{
                    //    result = model.ORD_TypeOfDoc.Where(c => c.ID == ID).Select(c => new DTOORDTypeOfDoc
                    //    {
                    //        ID = c.ID,
                    //        Code = c.Code,
                    //        TypeName = c.TypeName,
                    //        SortOrder = c.SortOrder,
                    //        TypeOfWAInspectionStatusID = c.TypeOfWAInspectionStatusID > 0 ? c.TypeOfWAInspectionStatusID : -1,
                    //    }).FirstOrDefault();
                    //}
                    //else
                    //{
                    //    result.ID = 0;
                    //    result.SortOrder = 1;
                    //    result.TypeOfWAInspectionStatusID = -1;
                    //}
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void ORDTypeOfDoc_Delete(DTOORDTypeOfDoc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    //var obj = model.ORD_TypeOfDoc.FirstOrDefault(c => c.ID == item.ID);
                    //if (obj != null)
                    //{
                    //    model.ORD_TypeOfDoc.Remove(obj);
                    //    model.SaveChanges();
                    //}
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region FLM_TypeOfScheduleFee
        public DTOResult FLMTypeOfScheduleFee_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_TypeOfScheduleFee.Select(c => new DTOFLMTypeOfScheduleFee
                    {

                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                        TypeOfScheduleFeeStatusID = c.TypeOfScheduleFeeStatusID,
                        TypeOfScheduleFeeStatusName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTypeOfScheduleFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMTypeOfScheduleFee_Save(DTOFLMTypeOfScheduleFee item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    //model.EventAccount = Account; model.EventRunning = false;
                    //if (model.ORD_TypeOfDoc.Count(c => c.Code == item.Code && c.ID != item.ID) > 0)
                    //    throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    var obj = model.FLM_TypeOfScheduleFee.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_TypeOfScheduleFee();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.FLM_TypeOfScheduleFee.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    obj.TypeOfScheduleFeeStatusID = item.TypeOfScheduleFeeStatusID;
                    model.SaveChanges();
                    return -1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOFLMTypeOfScheduleFee FLMTypeOfScheduleFee_Get(int ID)
        {
            try
            {
                DTOFLMTypeOfScheduleFee result = new DTOFLMTypeOfScheduleFee { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.FLM_TypeOfScheduleFee.Where(c => c.ID == ID).Select(c => new DTOFLMTypeOfScheduleFee
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            TypeOfScheduleFeeStatusID = c.TypeOfScheduleFeeStatusID
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.TypeOfScheduleFeeStatusID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == -(int)SYSVarType.TypeOfScheduleFeeStatus).FirstOrDefault();
                        if (obj != null) result.TypeOfScheduleFeeStatusID = obj.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMTypeOfScheduleFee_Delete(DTOFLMTypeOfScheduleFee item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_ScheduleFee.Count(c => c.TypeOfScheduleFeeID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Trạng thái chi phí tháng đang dược sử dụng, không được xóa");
                    var obj = model.FLM_TypeOfScheduleFee.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_TypeOfScheduleFee.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public SYSExcel FLMTypeOfScheduleFee_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.FLM_TypeOfScheduleFee.Select(c => new
                        {

                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            TypeOfScheduleFeeStatusCode = c.SYS_Var.Code,
                            TypeOfScheduleFeeStatusID = c.TypeOfScheduleFeeStatusID,
                            TypeOfScheduleFeeStatusName = c.SYS_Var.ValueOfVar
                        }).ToList();
                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã trạng thái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Trạng thái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.TypeName));
                            cells.Add(HelperExcel.NewCell(item.TypeOfScheduleFeeStatusCode));
                            cells.Add(HelperExcel.NewCell(item.TypeOfScheduleFeeStatusName));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }


                        var lstTypeOfScheduleFee = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfScheduleFeeStatus).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                        var ws1 = lstWorkSheet[1];
                        //ws1.Rows.Clear;
                        ws1.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80 });
                        cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã trạng thái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên trạng thái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                        stt = 1;
                        foreach (var item in lstTypeOfScheduleFee)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.ValueOfVar));
                            ws1.Rows.Add(HelperExcel.NewRow(ws1.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row FLMTypeOfScheduleFee_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colTypeOfScheduleFeeStatusID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstTypeOfScheduleFee = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfScheduleFeeStatus).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstGetID = model.FLM_TypeOfScheduleFee.Select(c => new { c.ID, c.Code }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataSTypeOfScheduleFeeStatusCode = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataSTypeOfScheduleFeeStatusCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                        indexError++;
                        if (flag)
                        {
                            var obj = lstTypeOfScheduleFee.FirstOrDefault(c => c.Code == dataSTypeOfScheduleFeeStatusCode);
                            if (obj == null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            }
                            else
                            {
                                var valid = "-1";
                                var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                if (objID != null)
                                    valid = objID.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTypeOfScheduleFeeStatusID, obj.ID.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel FLMTypeOfScheduleFee_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colTypeOfScheduleFeeStatusID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstTypeOfScheduleFee = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfScheduleFeeStatus).Select(c => new { c.ID, c.Code, c.ValueOfVar }).ToList();
                    var lstGetID = model.FLM_TypeOfScheduleFee.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Index < rowStart) continue;
                            if (eRow.Index >= rowEnd) break;
                            colData = 1;

                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataSTypeOfScheduleFeeStatusCode = HelperExcel.GetString(eRow, colData++);

                            bool flag = true;
                            int indexError = 0;
                            if (flag)
                                flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                            {
                                HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                            indexError++;
                            if (flag)
                                flag = HelperExcel.Valid(dataSTypeOfScheduleFeeStatusCode, HelperExcel.ValidType.String, eRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 100);
                            indexError++;
                            if (flag)
                            {
                                var obj = lstTypeOfScheduleFee.FirstOrDefault(c => c.Code == dataSTypeOfScheduleFeeStatusCode);
                                if (obj == null)
                                {
                                    HelperExcel.CheckErrorFail(eRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                }
                                else
                                {
                                    var valid = "-1";
                                    var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                                    if (objID != null)
                                        valid = objID.ID.ToString();
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colCheckID, valid);
                                    HelperExcel.CheckErrorSuccess(eRow, colCheckChange, colCheckNote, colTypeOfScheduleFeeStatusID, obj.ID.ToString());
                                }
                            }

                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool FLMTypeOfScheduleFee_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 6;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colTypeOfScheduleFeeStatusID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            string dataSTypeOfScheduleFeeStatusID = HelperExcel.GetString(eRow, colTypeOfScheduleFeeStatusID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.FLM_TypeOfScheduleFee.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new FLM_TypeOfScheduleFee();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.TypeName = dataName;
                            obj.TypeOfScheduleFeeStatusID = Convert.ToInt32(dataSTypeOfScheduleFeeStatusID);
                            if (obj.ID < 1)
                                model.FLM_TypeOfScheduleFee.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CAT_LocationMatrix
        public DTOResult CATLocationMatrix_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_LocationMatrix.Select(c => new CATLocationMatrix
                    {
                        ID = c.ID,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationFromLat = c.CAT_Location.Lat,
                        LocationFromLng = c.CAT_Location.Lng,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToLat = c.CAT_Location1.Lat,
                        LocationToLng = c.CAT_Location1.Lng,
                        KM = c.KM,
                        Hour = c.Hour,
                        IsChecked = c.IsChecked,
                        Instructions = c.Instructions
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATLocationMatrix>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrix_Save(CATLocationMatrix item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.KM = item.KM;
                        obj.Hour = item.Hour;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATLocationMatrix CATLocationMatrix_Get(int ID)
        {
            try
            {
                CATLocationMatrix result = new CATLocationMatrix { ID = 0 };
                using (var model = new DataEntities())
                {
                    result = model.CAT_LocationMatrix.Where(c => c.ID == ID).Select(c => new CATLocationMatrix
                    {
                        ID = c.ID,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationFromLat = c.CAT_Location.Lat,
                        LocationFromLng = c.CAT_Location.Lng,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToLat = c.CAT_Location1.Lat,
                        LocationToLng = c.CAT_Location1.Lng,
                        KM = c.KM,
                        Hour = c.Hour,
                        IsChecked = c.IsChecked,
                        Instructions = c.Instructions
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrix_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.ID == id);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    foreach (var detail in model.CAT_LocationMatrixDetail.Where(c => c.LocationMatrixID == obj.ID))
                    {
                        foreach (var detailStation in model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixDetailID == detail.ID))
                        {
                            model.CAT_LocationMatrixStation.Remove(detailStation);
                        }
                        model.CAT_LocationMatrixDetail.Remove(detail);
                    }

                    model.CAT_LocationMatrix.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrix_CreateFromOPS(bool isDI)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (isDI)
                    {
                        #region DI
                        var lstOPS = model.OPS_DITOLocation.Where(c => c.LocationID > 0).Select(c => new { c.DITOMasterID, c.LocationID, c.SortOrder }).ToList();

                        Dictionary<int, List<int>> dictFromTos = new Dictionary<int, List<int>>();

                        foreach (var group in lstOPS.GroupBy(c => c.DITOMasterID))
                        {
                            var lst = group.OrderBy(c => c.SortOrder).ToList();
                            if (lst.Count > 1)
                            {
                                for (int i = 0; i < lst.Count - 1; i++)
                                {
                                    var from = lst[i];
                                    var to = lst[i + 1];

                                    if (!dictFromTos.ContainsKey(from.LocationID.Value))
                                        dictFromTos.Add(from.LocationID.Value, new List<int>());
                                    dictFromTos[from.LocationID.Value].Add(to.LocationID.Value);
                                }
                            }
                        }

                        foreach (var itemFrom in dictFromTos)
                        {
                            var dataTo = itemFrom.Value.Distinct().ToList();
                            foreach (var itemTo in dataTo.Where(c => c != itemFrom.Key))
                            {
                                var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.LocationFromID == itemFrom.Key && c.LocationToID == itemTo);
                                if (obj == null)
                                {
                                    obj = new CAT_LocationMatrix();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.LocationFromID = itemFrom.Key;
                                    obj.LocationToID = itemTo;
                                    obj.KM = 0;
                                    obj.Hour = 0;
                                    obj.IsChecked = false;
                                    model.CAT_LocationMatrix.Add(obj);
                                }
                                var objDetail = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.LocationMatrixID == obj.ID && c.IsDefault == true);
                                if (objDetail == null)
                                {
                                    objDetail = new CAT_LocationMatrixDetail();
                                    objDetail.CreatedBy = Account.UserName;
                                    objDetail.CreatedDate = DateTime.Now;
                                    objDetail.CAT_LocationMatrix = obj;
                                    objDetail.Name = string.Empty;
                                    objDetail.KM = 0;
                                    objDetail.Hour = 0;
                                    objDetail.IsChecked = true;
                                    objDetail.IsDefault = true;

                                    model.CAT_LocationMatrixDetail.Add(objDetail);
                                }
                            }
                        }

                        model.SaveChanges();
                        #endregion
                    }
                    else
                    {
                        #region CO
                        var lstCurrent = model.CAT_LocationMatrix.Select(c => new { c.LocationFromID, c.LocationToID }).ToList();
                        var lstCOTO = model.OPS_COTO.Where(c => c.LocationFromID != c.LocationToID).Select(c => new { c.LocationFromID, c.LocationToID }).ToList();
                        Dictionary<int, List<int>> dicAdd = new Dictionary<int, List<int>>();

                        foreach (var item in lstCOTO)
                        {
                            if (!dicAdd.ContainsKey(item.LocationFromID.Value))
                                dicAdd.Add(item.LocationFromID.Value, new List<int>());
                            if (!dicAdd[item.LocationFromID.Value].Contains(item.LocationToID.Value))
                            {
                                if (lstCurrent.Where(c => c.LocationFromID == item.LocationFromID.Value && c.LocationToID == item.LocationToID.Value).Count() == 0)
                                    dicAdd[item.LocationFromID.Value].Add(item.LocationToID.Value);
                            }
                        }

                        foreach (var item in dicAdd)
                        {
                            if (item.Value.Count > 0)
                            {
                                foreach (var toid in item.Value)
                                {
                                    var obj = new CAT_LocationMatrix();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.LocationFromID = item.Key;
                                    obj.LocationToID = toid;
                                    obj.KM = 0;
                                    obj.Hour = 0;
                                    obj.IsChecked = false;
                                    model.CAT_LocationMatrix.Add(obj);

                                    var objDetail = new CAT_LocationMatrixDetail();
                                    objDetail.CreatedBy = Account.UserName;
                                    objDetail.CreatedDate = DateTime.Now;
                                    objDetail.CAT_LocationMatrix = obj;
                                    objDetail.Name = string.Empty;
                                    objDetail.KM = 0;
                                    objDetail.Hour = 0;
                                    objDetail.IsChecked = true;
                                    objDetail.IsDefault = true;

                                    model.CAT_LocationMatrixDetail.Add(objDetail);
                                }
                            }
                        }
                        model.SaveChanges();

                        //var lstOPS = model.OPS_COTOLocation.Where(c => c.LocationID > 0).Select(c => new { c.COTOMasterID, c.LocationID, c.SortOrder }).ToList();

                        //Dictionary<int, List<int>> dictFromTos = new Dictionary<int, List<int>>();

                        //foreach (var group in lstOPS.GroupBy(c => c.COTOMasterID))
                        //{
                        //    var lst = group.OrderBy(c => c.SortOrder).ToList();
                        //    if (lst.Count > 1)
                        //    {
                        //        for (int i = 0; i < lst.Count - 1; i++)
                        //        {
                        //            var from = lst[i];
                        //            var to = lst[i + 1];

                        //            if (!dictFromTos.ContainsKey(from.LocationID.Value))
                        //                dictFromTos.Add(from.LocationID.Value, new List<int>());
                        //            dictFromTos[from.LocationID.Value].Add(to.LocationID.Value);
                        //        }
                        //    }
                        //}

                        //foreach (var itemFrom in dictFromTos)
                        //{
                        //    var dataTo = itemFrom.Value.Distinct().ToList();
                        //    foreach (var itemTo in dataTo.Where(c => c != itemFrom.Key))
                        //    {
                        //        var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.LocationFromID == itemFrom.Key && c.LocationToID == itemTo);
                        //        if (obj == null)
                        //        {
                        //            obj = new CAT_LocationMatrix();
                        //            obj.CreatedBy = Account.UserName;
                        //            obj.CreatedDate = DateTime.Now;
                        //            obj.LocationFromID = itemFrom.Key;
                        //            obj.LocationToID = itemTo;
                        //            obj.KM = 0;
                        //            obj.Hour = 0;
                        //            obj.IsChecked = false;
                        //            model.CAT_LocationMatrix.Add(obj);
                        //        }
                        //        var objDetail = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.LocationMatrixID == obj.ID && c.IsDefault == true);
                        //        if (objDetail == null)
                        //        {
                        //            objDetail = new CAT_LocationMatrixDetail();
                        //            objDetail.CreatedBy = Account.UserName;
                        //            objDetail.CreatedDate = DateTime.Now;
                        //            objDetail.CAT_LocationMatrix = obj;
                        //            objDetail.Name = string.Empty;
                        //            objDetail.KM = 0;
                        //            objDetail.Hour = 0;
                        //            objDetail.IsChecked = true;
                        //            objDetail.IsDefault = true;

                        //            model.CAT_LocationMatrixDetail.Add(objDetail);
                        //        }
                        //    }
                        //}

                        //model.SaveChanges();
                        #endregion
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }


        #region CATLocationMatrixDetail
        public DTOResult CATLocationMatrixDetail_List(string request, long LocationMatrixID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_LocationMatrixDetail.Where(c => c.LocationMatrixID == LocationMatrixID).Select(c => new CATLocationMatrixDetail
                    {
                        ID = c.ID,
                        Name = c.Name,
                        KM = c.KM,
                        Hour = c.Hour,
                        IsChecked = c.IsChecked,
                        IsDefault = c.IsDefault,
                        Instructions = c.Instructions
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATLocationMatrixDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public long CATLocationMatrixDetail_Save(CATLocationMatrixDetail item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_LocationMatrixDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.LocationMatrixID = item.LocationMatrixID;
                        model.CAT_LocationMatrixDetail.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Name = item.Name;
                    obj.Instructions = item.Instructions;
                    obj.KM = item.KM;
                    obj.Hour = item.Hour;
                    obj.IsChecked = item.IsChecked;
                    obj.IsDefault = item.IsDefault;
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public CATLocationMatrixDetail CATLocationMatrixDetail_Get(long ID)
        {
            try
            {
                CATLocationMatrixDetail result = new CATLocationMatrixDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_LocationMatrixDetail.Where(c => c.ID == ID).Select(c => new CATLocationMatrixDetail
                        {
                            ID = c.ID,
                            KM = c.KM,
                            Name = c.Name,
                            Hour = c.Hour,
                            IsChecked = c.IsChecked,
                            Instructions = c.Instructions,
                            LocationMatrixID = c.LocationMatrixID,
                            IsDefault = c.IsDefault,
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrixDetail_Detele(long ID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.ID == ID);
                    if (obj == null)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy LocationMatrixDetail");
                    }
                    else
                    {
                        var lstStation = model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixDetailID == ID);
                        if (lstStation != null)
                        {
                            model.CAT_LocationMatrixStation.RemoveRange(lstStation);
                        }
                        model.CAT_LocationMatrixDetail.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region CAT_LocationMatrixDetailStation
        public DTOResult CATLocationMatrixDetailStation_List(string request, long LocationMatrixDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixDetailID == LocationMatrixDetailID).Select(c => new DTOCATLocationMatrixStation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        IsChecked = c.IsChecked,
                        KM = c.KM
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationMatrixStation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrixDetailStationNotIn_SaveList(List<int> lstStaionID, long LocationMatrixDetailID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng GroupID
                    foreach (var item in lstStaionID)
                    {
                        var obj = model.CAT_LocationMatrixStation.FirstOrDefault(c => c.LocationID == item && c.LocationMatrixDetailID == LocationMatrixDetailID);
                        if (obj != null)
                            throw FaultHelper.BusinessFault(null, null, "Trạm đã sử dụng!");
                    }
                    #endregion

                    foreach (var item in lstStaionID)
                    {
                        var obj = new CAT_LocationMatrixStation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.LocationMatrixDetailID = LocationMatrixDetailID;
                        obj.LocationID = item;
                        obj.IsChecked = true;
                        model.CAT_LocationMatrixStation.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrixDetailStation_SaveList(List<DTOCATLocationMatrixStation> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.CAT_LocationMatrixStation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.IsChecked = item.IsChecked;
                            obj.KM = item.KM;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATLocationMatrixDetailStation_DeleteList(List<int> lstId)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lstId)
                    {
                        var obj = model.CAT_LocationMatrixStation.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.CAT_LocationMatrixStation.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult CATLocationMatrixDetailStation_LocationList(string request, long LocationMatrixDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.ID == LocationMatrixDetailID);
                    if (obj == null)
                    {
                        //throw FaultHelper.BusinessFault(null, null, "Không tìm thấy LocationMatrixDetail");
                    }
                    else
                    {
                        var lstLocation = model.CAT_LocationMatrixStation.Where(c => c.LocationMatrixDetailID == LocationMatrixDetailID).Select(c => c.LocationID);
                        var query = model.CAT_PartnerLocation.Where(c => !lstLocation.Contains(c.LocationID) && !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATPartnerLocationMatrix
                        {
                            ID = c.LocationID,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            PartnerCode = c.CAT_Partner.Code,
                            PartnerName = c.CAT_Partner.PartnerName,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATPartnerLocationMatrix>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #endregion

        public void CATLocationMatrix_Generate()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.Configuration.AutoDetectChangesEnabled = false;
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstLocation = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => c.ID).ToList();
                    var lstMatrixExist = model.CAT_LocationMatrix.Select(c => new { LocationFromID = c.LocationFromID, LocationToID = c.LocationToID }).ToList();
                    //Dictionary<int, List<int>> dic = new Dictionary<int, List<int>>();
                    foreach (var itemFrom in lstLocation)
                    {
                        var lstid = lstMatrixExist.Where(c => c.LocationFromID == itemFrom).Select(c => c.LocationToID).ToList();
                        foreach (var itemTo in lstLocation.Where(c => !lstid.Contains(c) && c != itemFrom))
                        {
                            var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.LocationFromID == itemFrom && c.LocationToID == itemTo);
                            if (obj == null)
                            {
                                obj = new CAT_LocationMatrix();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.LocationFromID = itemFrom;
                                obj.LocationToID = itemTo;
                                obj.KM = 0;
                                obj.Hour = 0;
                                obj.IsChecked = false;
                                model.CAT_LocationMatrix.Add(obj);
                            }
                            var objDetail = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.LocationMatrixID == obj.ID && c.IsDefault == true);
                            if (objDetail == null)
                            {
                                objDetail = new CAT_LocationMatrixDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.CAT_LocationMatrix = obj;
                                objDetail.Name = string.Empty;
                                objDetail.KM = 0;
                                objDetail.Hour = 0;
                                objDetail.IsChecked = true;
                                objDetail.IsDefault = true;

                                model.CAT_LocationMatrixDetail.Add(objDetail);
                            }
                        }
                    }
                    model.SaveChanges();
                    model.Configuration.AutoDetectChangesEnabled = true;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrix_SaveList(List<CATLocationMatrix> lst)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.KM = item.KM;
                            obj.Hour = item.Hour;
                        }
                        model.SaveChanges();
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrix_GenerateByList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstLocation = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => c.ID).ToList();
                    var lstMatrixExist = model.CAT_LocationMatrix.Select(c => new { LocationFromID = c.LocationFromID, LocationToID = c.LocationToID }).ToList();
                    //Dictionary<int, List<int>> dic = new Dictionary<int, List<int>>();
                    foreach (var itemFrom in lst)
                    {
                        var lstid = lstMatrixExist.Where(c => c.LocationFromID == itemFrom).Select(c => c.LocationToID).ToList();
                        foreach (var itemTo in lstLocation.Where(c => !lstid.Contains(c)))
                        {
                            CAT_LocationMatrix obj = new CAT_LocationMatrix();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.LocationFromID = itemFrom;
                            obj.LocationToID = itemTo;
                            obj.KM = 0;
                            obj.Hour = 0;
                            obj.IsChecked = false;
                            model.CAT_LocationMatrix.Add(obj);

                            model.SaveChanges();

                            CAT_LocationMatrixDetail objDetail = new CAT_LocationMatrixDetail();
                            objDetail.CreatedBy = Account.UserName;
                            objDetail.CreatedDate = DateTime.Now;
                            objDetail.LocationMatrixID = obj.ID;
                            objDetail.Name = string.Empty;
                            objDetail.KM = 0;
                            objDetail.Hour = 0;
                            objDetail.IsChecked = true;
                            objDetail.IsDefault = true;

                            model.CAT_LocationMatrixDetail.Add(objDetail);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrix_GenerateLimit(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    lst = lst.Distinct().ToList();
                    //Dictionary<int, List<int>> dic = new Dictionary<int, List<int>>();
                    foreach (var itemFrom in lst)
                    {
                        foreach (var itemTo in lst.Where(c => c != itemFrom))
                        {
                            //tuyen duong xuoi from-to
                            var checkFromTo = model.CAT_LocationMatrix.FirstOrDefault(c => c.LocationFromID == itemFrom && c.LocationToID == itemTo);
                            if (checkFromTo == null)
                            {
                                CAT_LocationMatrix objFromTo = new CAT_LocationMatrix();
                                objFromTo.CreatedBy = Account.UserName;
                                objFromTo.CreatedDate = DateTime.Now;
                                objFromTo.LocationFromID = itemFrom;
                                objFromTo.LocationToID = itemTo;
                                objFromTo.KM = 0;
                                objFromTo.Hour = 0;
                                objFromTo.IsChecked = false;
                                model.CAT_LocationMatrix.Add(objFromTo);

                                model.SaveChanges();

                                CAT_LocationMatrixDetail objDetail = new CAT_LocationMatrixDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.LocationMatrixID = objFromTo.ID;
                                objDetail.Name = string.Empty;
                                objDetail.KM = 0;
                                objDetail.Hour = 0;
                                objDetail.IsChecked = true;
                                objDetail.IsDefault = true;

                                model.CAT_LocationMatrixDetail.Add(objDetail);
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel CATLocationMatrix_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_LocationMatrix.Select(c => new
                        {
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromAdress = c.CAT_Location.Address,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToAdress = c.CAT_Location1.Address,
                            KM = c.KM,
                            Hour = c.Hour,
                        }).ToList();
                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();
                        int col = 0;
                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã điểm đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Địa chỉ điểm đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã điểm đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Địa chỉ điểm đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "KM", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Thời gian(giờ)", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            col = 0;
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.LocationFromCode));
                            cells.Add(HelperExcel.NewCell(col++, item.LocationFromAdress));
                            cells.Add(HelperExcel.NewCell(col++, item.LocationToCode));
                            cells.Add(HelperExcel.NewCell(col++, item.LocationToAdress));
                            cells.Add(HelperExcel.NewCell(col++, item.KM));
                            cells.Add(HelperExcel.NewCell(col++, item.Hour));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATLocationMatrix_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colLocationFromID = colData++;
                    int colLocationToID = colData++;

                    int failMax = 2;
                    int failCurrent = 0;

                    var lstMatrix = model.CAT_LocationMatrix.Select(c => new { c.ID, c.LocationFromID, c.LocationToID }).ToList();
                    var lstLocation = model.CAT_Location.Where(c => c.ID > 1 && !string.IsNullOrEmpty(c.Code)).Select(c => new { c.ID, c.Code }).ToList();

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);

                    List<string> strCode_Code = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    int colFrom = 1;
                    int colTo = 3;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            string dataCodeFrom = HelperExcel.GetString(checkRow, colFrom);
                            string dataCodeTo = HelperExcel.GetString(checkRow, colTo);
                            if (!string.IsNullOrEmpty(dataCodeFrom) && !string.IsNullOrEmpty(dataCodeTo))
                                strCode_Code.Add(dataCodeFrom + "_" + dataCodeTo);
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    int FromID = -1, ToID = -1;
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        string dataCodeFrom = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataCodeTo = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataKM = HelperExcel.GetString(checkRow, colData++);
                        string dataHour = HelperExcel.GetString(checkRow, colData++);

                        FromID = -1; ToID = -1;

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeFrom, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstLocation.Count(c => c.Code == dataCodeFrom) == 0)
                            flag = HelperExcel.Valid(dataCodeFrom, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeTo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstLocation.Count(c => c.Code == dataCodeTo) == 0)
                            flag = HelperExcel.Valid(dataCodeTo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);

                        if (flag)
                        {
                            FromID = -1;
                            ToID = -1;

                            var check = lstLocation.FirstOrDefault(c => c.Code == dataCodeFrom);
                            if (check != null) FromID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationFromID, FromID.ToString());

                            check = lstLocation.FirstOrDefault(c => c.Code == dataCodeTo);
                            if (check != null) ToID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationFromID, ToID.ToString());
                        }
                        indexError++;
                        if (flag && FromID == ToID)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && strCode_Code.Count(c => c == dataCodeFrom + "_" + dataCodeTo) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var check = lstMatrix.FirstOrDefault(c => c.LocationFromID == FromID && c.LocationToID == ToID);
                            if (check != null) valid = check.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataKM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataHour, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 0, 0);

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATLocationMatrix_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colLocationFromID = colData++;
                    int colLocationToID = colData++;

                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstMatrix = model.CAT_LocationMatrix.Select(c => new { c.ID, c.LocationFromID, c.LocationToID }).ToList();
                    var lstLocation = model.CAT_Location.Where(c => c.ID > 1 && !string.IsNullOrEmpty(c.Code)).Select(c => new { c.ID, c.Code }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> strCode_Code = new List<string>();
                    int colFrom = 1;
                    int colTo = 3;
                    foreach (var checkRow in ws.Rows)
                    {
                        if (checkRow.Index >= rowStart)
                        {
                            string dataCodeFrom = HelperExcel.GetString(checkRow, colFrom);
                            string dataCodeTo = HelperExcel.GetString(checkRow, colTo);
                            if (!string.IsNullOrEmpty(dataCodeFrom) && !string.IsNullOrEmpty(dataCodeTo))
                                strCode_Code.Add(dataCodeFrom + "_" + dataCodeTo);
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = checkRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;
                        colData = 1;
                        string dataCodeFrom = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataCodeTo = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataKM = HelperExcel.GetString(checkRow, colData++);
                        string dataHour = HelperExcel.GetString(checkRow, colData++);

                        int FromID = -1, ToID = -1;

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeFrom, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstLocation.Count(c => c.Code == dataCodeFrom) == 0)
                            flag = HelperExcel.Valid(dataCodeFrom, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeTo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag && lstLocation.Count(c => c.Code == dataCodeTo) == 0)
                            flag = HelperExcel.Valid(dataCodeTo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);

                        if (flag)
                        {
                            FromID = -1;
                            ToID = -1;

                            var check = lstLocation.FirstOrDefault(c => c.Code == dataCodeFrom);
                            if (check != null) FromID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationFromID, FromID.ToString());

                            check = lstLocation.FirstOrDefault(c => c.Code == dataCodeTo);
                            if (check != null) ToID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationFromID, ToID.ToString());
                        }
                        indexError++;
                        if (flag && FromID == ToID)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && strCode_Code.Count(c => c == dataCodeFrom + "_" + dataCodeTo) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var check = lstMatrix.FirstOrDefault(c => c.LocationFromID == FromID && c.LocationToID == ToID);
                            if (check != null) valid = check.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataKM, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 0, 0);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataHour, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 0, 0);

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATLocationMatrix_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 8;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colLocationFromID = colData++;
                    int colLocationToID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 5;
                            string dataKM = HelperExcel.GetString(checkRow, colData++);
                            string dataHour = HelperExcel.GetString(checkRow, colData++);

                            int? matrixID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckID));
                            int? locationFromID = Convert.ToInt32(HelperExcel.GetString(checkRow, colLocationFromID));
                            int? locationToID = Convert.ToInt32(HelperExcel.GetString(checkRow, colLocationToID));

                            var obj = model.CAT_LocationMatrix.FirstOrDefault(c => c.ID == matrixID);
                            if (obj == null)
                            {
                                obj = new CAT_LocationMatrix();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.LocationFromID = locationFromID.Value;
                                obj.LocationToID = locationToID.Value;
                                model.CAT_LocationMatrix.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.KM = !string.IsNullOrEmpty(dataKM) ? Convert.ToDouble(dataKM) : 0;
                            obj.Hour = !string.IsNullOrEmpty(dataHour) ? Convert.ToDouble(dataHour) : 0;

                            var objDetail = model.CAT_LocationMatrixDetail.FirstOrDefault(c => c.LocationMatrixID == obj.ID && c.IsDefault == true);
                            if (objDetail == null)
                            {
                                objDetail = new CAT_LocationMatrixDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.CAT_LocationMatrix = obj;
                                objDetail.Name = string.Empty;
                                objDetail.IsChecked = true;
                                objDetail.IsDefault = true;
                                model.CAT_LocationMatrixDetail.Add(objDetail);
                            }
                            else
                            {
                                objDetail.ModifiedBy = Account.UserName;
                                objDetail.ModifiedDate = DateTime.Now;
                            }
                            objDetail.KM = obj.KM;
                            objDetail.Hour = obj.Hour;
                        }
                        model.SaveChanges();

                        return true;
                    }
                    else return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATStation
        public List<CATPartner> CATStation_Data()
        {
            try
            {
                List<CATPartner> result = new List<CATPartner>();
                using (var model = new DataEntities())
                {
                    int iStation = -(int)SYSVarType.TypeOfPartnerStation;
                    result = model.CAT_Partner.Where(c => c.TypeOfPartnerID == iStation).Select(c => new CATPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerName = c.PartnerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.DistrictID > 0 ? c.CAT_District.DistrictName : string.Empty,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.DistrictID > 0 ? c.CAT_Province.ProvinceName : string.Empty,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID > 0 ? c.CAT_Country.CountryName : string.Empty,
                        TypeOfPartnerID = c.TypeOfPartnerID,
                        TypeOfPartnerName = c.SYS_Var.ValueOfVar
                    }).ToList();
                    foreach (var item in result)
                    {
                        item.lstPartnerLocation = new List<DTOCATPartnerLocation>();
                        var lstLocation = model.CAT_PartnerLocation.Where(c => c.PartnerID == item.ID).Select(c => new DTOCATPartnerLocation
                        {
                            ID = c.LocationID,
                            Code = c.CAT_Location.Code,
                            PartnerCode = c.PartnerCode,
                            PartnerID = c.PartnerID,
                            PartnerName = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                            WardID = c.CAT_Location.WardID,
                            WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                            DistrictID = c.CAT_Location.DistrictID,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Location.CountryID,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                        }).ToList();
                        item.lstPartnerLocation.AddRange(lstLocation);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATPartner CATStation_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    CATPartner result = new CATPartner();
                    if (id > 0)
                    {
                        result = model.CAT_Partner.Where(c => c.ID == id).Select(c => new CATPartner
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PartnerName = c.PartnerName,
                            Address = c.Address,
                            WardID = c.WardID,
                            WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                            DistrictID = c.DistrictID,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                            TelNo = c.TelNo,
                            Fax = c.Fax,
                            Email = c.Email,
                            BillingName = c.BillingName,
                            BillingAddress = c.BillingAddress,
                            TaxCode = c.TaxCode,
                            Note = c.Note,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int CATStation_Save(CATPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    CAT_Partner partner = new CAT_Partner();
                    partner = HelperRouting.CATPartner_Save(model, Account, item, SYSVarType.TypeOfPartnerStation);
                    if (partner != null)
                        result = partner.ID;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATStation_Delete(CATPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult LocationInStation_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => c.PartnerID == partnerid).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        PartnerCode = c.PartnerCode,
                        LocationID = c.LocationID,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        WardID = c.CAT_Location.WardID,
                        WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATLocationInPartner LocationInStation_Save(DTOCATLocationInPartner item, int partnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return HelperRouting.LocationInPartner_Save(model, Account, item, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATLocationInPartner LocationInStation_Get(int id)
        {
            try
            {
                DTOCATLocationInPartner result = new DTOCATLocationInPartner();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PartnerLocation.Where(c => c.ID == id).Select(c => new DTOCATLocationInPartner
                        {
                            ID = c.ID,
                            PartnerCode = c.PartnerCode,
                            LocationID = c.LocationID,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                            WardID = c.CAT_Location.WardID,
                            WardName = (c.CAT_Location.WardID != null) ? c.CAT_Location.CAT_Ward.WardName : "",
                            DistrictID = c.CAT_Location.DistrictID,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Location.CountryID,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.Lat = 0;
                        result.Lng = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void LocationInStation_Delete(DTOCATLocationInPartner item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationInPartner_Delete(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult LocationNotInStation_List(string request, int partnerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => c.CAT_PartnerLocation.Count() == 0 || !c.CAT_PartnerLocation.Any(d => d.PartnerID == partnerid)).Select(c => new DTOCATLocationInPartner
                    {
                        ID = c.ID,
                        LocationID = c.ID,
                        PartnerCode = c.Code,
                        Location = c.Location,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = (c.WardID != null) ? c.CAT_Ward.WardName : "",
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        Lat = c.Lat,
                        Lng = c.Lng
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationInPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void LocationNotInStation_SaveList(List<DTOCATLocationInPartner> lst, int partnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.LocationNotInPartner_Save(model, Account, lst, partnerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATSupplier
        public DTOResult FLMSupplier_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Supplier.Select(c => new FLMSupplier
                    {
                        ID = c.ID,
                        Code = c.Code,
                        SupplierName = c.SupplierName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<FLMSupplier>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public FLMSupplier FLMSupplier_Get(int id)
        {
            try
            {
                FLMSupplier result = new FLMSupplier { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_Supplier.Where(c => c.ID == id).Select(c => new FLMSupplier
                        {
                            ID = c.ID,
                            Code = c.Code,
                            SupplierName = c.SupplierName,
                            Address = c.Address,
                            WardID = c.WardID,
                            WardName = c.CAT_Ward.WardName,
                            DistrictID = c.DistrictID,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                            TelNo = c.TelNo,
                            Fax = c.Fax,
                            Email = c.Email,
                            BillingName = c.BillingName,
                            BillingAddress = c.BillingAddress,
                            TaxCode = c.TaxCode,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int FLMSupplier_Save(FLMSupplier item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.FLM_Supplier.Where(c => c.ID != item.ID && c.Code == item.Code).Count() > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    else
                    {
                        var obj = model.FLM_Supplier.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new FLM_Supplier();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            model.FLM_Supplier.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Code = item.Code;
                        obj.SupplierName = item.SupplierName;
                        obj.Address = item.Address;
                        obj.WardID = item.WardID;
                        obj.DistrictID = item.DistrictID;
                        obj.ProvinceID = item.ProvinceID;
                        obj.CountryID = item.CountryID;
                        obj.TelNo = item.TelNo;
                        obj.Fax = item.Fax;
                        obj.Email = item.Email;
                        obj.BillingName = item.BillingName;
                        obj.BillingAddress = item.BillingAddress;
                        obj.TaxCode = item.TaxCode;
                        obj.Note = item.Note;
                        model.SaveChanges();

                        return obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMSupplier_Delete(FLMSupplier item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_Supplier.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_Supplier.Remove(obj);

                        var listMPrice = model.FLM_MaterialPrice.Where(c => c.SupplierID == item.ID).ToList();
                        if (listMPrice != null)
                            model.FLM_MaterialPrice.RemoveRange(listMPrice);

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public SYSExcel FLMSupplier_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.FLM_Supplier.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            SupplierName = c.SupplierName,
                            Address = c.Address,
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();
                        ws.Columns = HelperExcel.NewColumns(new double[] { 80, 80, 80, 80 });

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Mã nhà phân phối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên nhà phân phối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Địa chỉ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.Code));
                            cells.Add(HelperExcel.NewCell(item.SupplierName));
                            cells.Add(HelperExcel.NewCell(item.Address));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row FLMSupplier_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.FLM_Supplier.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel FLMSupplier_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.FLM_Supplier.Select(c => new { c.ID, c.Code }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCode).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.Code == dataCode);
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool FLMSupplier_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 4;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(eRow, colData++);
                            string dataName = HelperExcel.GetString(eRow, colData++);
                            string dataAddress = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);
                            int getid = Convert.ToInt32(dataID);

                            var obj = model.FLM_Supplier.FirstOrDefault(c => c.ID == getid);
                            if (obj == null)
                            {
                                obj = new FLM_Supplier();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.SupplierName = dataName;
                            obj.Address = dataAddress;
                            if (obj.ID < 1)
                                model.FLM_Supplier.Add(obj);
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CATMaterialPrice
        public DTOResult FLMMaterialPrice_List(int supplierID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_MaterialPrice.Where(c => c.SupplierID == supplierID).Select(c => new DTOFLMMaterialPrice
                    {
                        ID = c.ID,
                        MaterialID = c.MaterialID,
                        MaterialCode = c.FLM_Material.Code,
                        MaterialName = c.FLM_Material.MaterialName,
                        SupplierName = c.FLM_Supplier.SupplierName,
                        Price = c.Price,
                        EffectDate = c.EffectDate,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMMaterialPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOFLMMaterialPrice FLMMaterialPrice_Get(int id)
        {
            try
            {
                DTOFLMMaterialPrice result = new DTOFLMMaterialPrice { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.FLM_MaterialPrice.Where(c => c.ID == id).Select(c => new DTOFLMMaterialPrice
                        {
                            ID = c.ID,
                            MaterialID = c.MaterialID,
                            MaterialCode = c.FLM_Material.Code,
                            MaterialName = c.FLM_Material.MaterialName,
                            Price = c.Price,
                            EffectDate = c.EffectDate,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objMaterial = model.FLM_Material.FirstOrDefault();
                        if (objMaterial != null) result.MaterialID = objMaterial.ID;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int FLMMaterialPrice_Save(DTOFLMMaterialPrice item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_MaterialPrice.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_MaterialPrice();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.FLM_MaterialPrice.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.SupplierID = item.SupplierID;
                    obj.MaterialID = item.MaterialID;
                    obj.Price = item.Price;
                    obj.EffectDate = item.EffectDate;
                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void FLMaterialPrice_Delete(DTOFLMMaterialPrice item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_MaterialPrice.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_MaterialPrice.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATStationPrice
        public DTOResult CATStationPrice_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_StationPrice.Select(c => new DTOCATStationPrice
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Ton = c.Ton,
                        Price = c.Price,
                        PriceKM = c.PriceKM,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATStationPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATStationPrice CATStationPrice_Get(int id)
        {
            try
            {
                DTOCATStationPrice result = new DTOCATStationPrice { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_StationPrice.Where(c => c.ID == id).Select(c => new DTOCATStationPrice
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationAddress = c.CAT_Location.Address,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,
                            Price = c.Price,
                            PriceKM = c.PriceKM,
                            Note = c.Note,
                            Ton = c.Ton
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.LocationID = -1;
                        var objLocation = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code));
                        if (objLocation != null) result.LocationID = objLocation.ID;
                        result.Price = 0;
                        result.PriceKM = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATStationPrice_Save(DTOCATStationPrice item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;


                    var obj = model.CAT_StationPrice.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_StationPrice();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_StationPrice.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.LocationID = item.LocationID;
                    obj.Price = item.Price;
                    obj.PriceKM = item.PriceKM;
                    obj.Note = item.Note;
                    obj.Ton = item.Ton;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATStationPrice_Delete(DTOCATStationPrice item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_StationPrice.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_StationPrice.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOCATLocation> CATStationPrice_LocationList()
        {
            try
            {
                List<DTOCATLocation> result = new List<DTOCATLocation>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PartnerLocation.Where(c => !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Location = c.CAT_Location.Location,
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOFLMVehicle> CATStationPrice_AssetList()
        {
            try
            {
                List<DTOFLMVehicle> result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOFLMVehicle
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            RegWeight = c.CAT_Vehicle.RegWeight
                        }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<DTOCATStationPriceImport> CATStationPriceExport()
        {
            try
            {
                List<DTOCATStationPriceImport> result = new List<DTOCATStationPriceImport>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_StationPrice.Select(c => new DTOCATStationPriceImport
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Price = c.Price,
                        PriceKM = c.PriceKM,
                        Note = c.Note,
                        Ton = c.Ton
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATStationPriceData CATStationPrice_Data()
        {
            try
            {
                DTOCATStationPriceData result = new DTOCATStationPriceData();
                result.ListStation = new List<DTOCATLocation>();
                result.ListStationPrice = new List<DTOCATStationPrice>();
                using (var model = new DataEntities())
                {
                    result.ListStation = model.CAT_PartnerLocation.Where(c => !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Location = c.CAT_Location.Location,
                    }).ToList();

                    result.ListStationPrice = model.CAT_StationPrice.Select(c => new DTOCATStationPrice
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Price = c.Price,
                        PriceKM = c.PriceKM,
                        Note = c.Note,
                        Ton = c.Ton
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATStationPriceImport(List<DTOCATStationPriceImport> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lst != null)
                    {
                        foreach (var item in lst.Where(c => c.ExcelSuccess))
                        {
                            var obj = model.CAT_StationPrice.FirstOrDefault(c => c.ID == item.ID);
                            if (obj == null)
                            {
                                obj = new CAT_StationPrice();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_StationPrice.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.LocationID = item.LocationID;
                            obj.Price = item.Price;
                            obj.PriceKM = item.PriceKM;
                            obj.Note = item.Note;
                            obj.Ton = item.Ton;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATStationMonth
        public DTOResult CATStationMonth_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_StationMonth.Select(c => new DTOCATStationMonth
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,

                        AssetID = c.AssetID,
                        AssetNo = c.FLM_Asset.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? c.FLM_Asset.CAT_Romooc.RegNo : string.Empty,
                        Price = c.Price,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATStationMonth>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATStationMonth CATStationMonth_Get(int id)
        {
            try
            {
                DTOCATStationMonth result = new DTOCATStationMonth { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_StationMonth.Where(c => c.ID == id).Select(c => new DTOCATStationMonth
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationAddress = c.CAT_Location.Address,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,

                            AssetID = c.AssetID,
                            AssetNo = c.FLM_Asset.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? c.FLM_Asset.CAT_Romooc.RegNo : string.Empty,
                            Price = c.Price,
                            DateTo = c.DateTo,
                            DateFrom = c.DateFrom,
                            Note = c.Note,
                            ExprDay = c.ExprDay,
                            ExprInputDay = c.ExprInputDay
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.AssetID = -1;
                        result.LocationID = -1;
                        var objLocation = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code));
                        if (objLocation != null) result.LocationID = objLocation.ID;
                        result.Price = 0;
                        result.DateFrom = DateTime.Now;
                        result.DateTo = DateTime.Now;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATStationMonth_Save(DTOCATStationMonth item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_StationMonth.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_StationMonth();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_StationMonth.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.LocationID = item.LocationID;
                    obj.AssetID = item.AssetID;
                    obj.Price = item.Price;
                    obj.DateFrom = item.DateFrom;
                    obj.DateTo = item.DateTo;
                    obj.Note = item.Note;
                    obj.ExprInputDay = item.ExprInputDay;
                    obj.ExprDay = item.ExprDay;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATStationMonth_Delete(DTOCATStationMonth item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_StationMonth.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_StationMonth.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOCATLocation> CATStationMonth_LocationList()
        {
            try
            {
                List<DTOCATLocation> result = new List<DTOCATLocation>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PartnerLocation.Where(c => !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Location = c.CAT_Location.Location,
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOFLMVehicle> CATStationMonth_AssetList()
        {
            try
            {
                List<DTOFLMVehicle> result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOFLMVehicle
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            RegWeight = c.CAT_Vehicle.RegWeight
                        }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<DTOCATStationMonthExcel> CATStationMonthExport()
        {
            try
            {
                List<DTOCATStationMonthExcel> result = new List<DTOCATStationMonthExcel>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_StationMonth.Select(c => new DTOCATStationMonthExcel
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,

                        AssetID = c.AssetID,
                        AssetNo = c.FLM_Asset.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? c.FLM_Asset.CAT_Romooc.RegNo : string.Empty,
                        Price = c.Price,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        Note = c.Note
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATStationMonthData CATStationMonth_Data()
        {
            try
            {
                DTOCATStationMonthData result = new DTOCATStationMonthData();
                result.ListStation = new List<DTOCATLocation>();
                result.ListVehicle = new List<DTOFLMVehicle>();
                result.ListStationMonth = new List<DTOCATStationMonth>();
                using (var model = new DataEntities())
                {
                    result.ListStation = model.CAT_PartnerLocation.Where(c => !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.CAT_Location.Code,
                        Location = c.CAT_Location.Location,
                    }).ToList();

                    result.ListStationMonth = model.CAT_StationMonth.Select(c => new DTOCATStationMonth
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,

                        AssetID = c.AssetID,
                        AssetNo = c.FLM_Asset.VehicleID > 0 ? c.FLM_Asset.CAT_Vehicle.RegNo : c.FLM_Asset.RomoocID > 0 ? c.FLM_Asset.CAT_Romooc.RegNo : string.Empty,
                        Price = c.Price,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        Note = c.Note
                    }).ToList();

                    result.ListVehicle = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID &&
                        (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck)).Select(c => new DTOFLMVehicle
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            RegWeight = c.CAT_Vehicle.RegWeight
                        }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATStationMonthImport(List<DTOCATStationMonthExcel> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lst != null)
                    {
                        foreach (var item in lst.Where(c => c.ExcelSuccess))
                        {
                            var obj = model.CAT_StationMonth.FirstOrDefault(c => c.ID == item.ID);
                            if (obj == null)
                            {
                                obj = new CAT_StationMonth();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_StationMonth.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.LocationID = item.LocationID;
                            obj.AssetID = item.AssetID;
                            obj.Price = item.Price;
                            obj.DateFrom = item.DateFrom;
                            obj.DateTo = item.DateTo;
                            obj.Note = item.Note;
                            model.SaveChanges();
                        }

                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATLocationMatrixStation
        public DTOResult CATLocationMatrixStation_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_LocationMatrixStation.Select(c => new DTOCATLocationMatrixStation
                    {
                        ID = c.ID,

                        //LocationMatrixID = c.LocationMatrixID,

                        //LocationMatrixFromID = c.CAT_LocationMatrix.LocationFromID,
                        //LocationMatrixFromAddress = c.CAT_LocationMatrix.CAT_Location.Address,
                        //LocationMatrixFromCode = c.CAT_LocationMatrix.CAT_Location.Code,
                        //LocationMatrixFromName = c.CAT_LocationMatrix.CAT_Location.Location,

                        //LocationMatrixToID = c.CAT_LocationMatrix.LocationToID,
                        //LocationMatrixToAddress = c.CAT_LocationMatrix.CAT_Location1.Address,
                        //LocationMatrixToCode = c.CAT_LocationMatrix.CAT_Location1.Code,
                        //LocationMatrixToName = c.CAT_LocationMatrix.CAT_Location1.Location,

                        LocationID = c.LocationID,
                        LocationAddress = c.CAT_Location.Address,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,

                        IsChecked = c.IsChecked,
                        KM = c.KM
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocationMatrixStation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOCATLocationMatrixStation CATLocationMatrixStation_Get(int id)
        {
            try
            {
                DTOCATLocationMatrixStation result = new DTOCATLocationMatrixStation { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_LocationMatrixStation.Where(c => c.ID == id).Select(c => new DTOCATLocationMatrixStation
                        {
                            ID = c.ID,

                            //LocationMatrixID = c.LocationMatrixID,

                            //LocationMatrixFromID = c.CAT_LocationMatrix.LocationFromID,
                            //LocationMatrixFromAddress = c.CAT_LocationMatrix.CAT_Location.Address,
                            //LocationMatrixFromCode = c.CAT_LocationMatrix.CAT_Location.Code,
                            //LocationMatrixFromName = c.CAT_LocationMatrix.CAT_Location.Location,

                            //LocationMatrixToID = c.CAT_LocationMatrix.LocationToID,
                            //LocationMatrixToAddress = c.CAT_LocationMatrix.CAT_Location1.Address,
                            //LocationMatrixToCode = c.CAT_LocationMatrix.CAT_Location1.Code,
                            //LocationMatrixToName = c.CAT_LocationMatrix.CAT_Location1.Location,

                            LocationID = c.LocationID,
                            LocationAddress = c.CAT_Location.Address,
                            LocationCode = c.CAT_Location.Code,
                            LocationName = c.CAT_Location.Location,

                            IsChecked = c.IsChecked,
                            KM = c.KM
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.KM = 0;
                        result.LocationMatrixID = 0;
                        result.LocationMatrixToID = 0;
                        result.LocationMatrixFromID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrixStation_Save(DTOCATLocationMatrixStation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_LocationMatrixStation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_LocationMatrixStation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_LocationMatrixStation.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.LocationID = item.LocationID;
                    //obj.LocationMatrixID = item.LocationMatrixID;
                    obj.IsChecked = item.IsChecked;
                    obj.KM = item.KM;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void CATLocationMatrixStation_Delete(DTOCATLocationMatrixStation item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_LocationMatrixStation.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_LocationMatrixStation.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult CATLocationMatrixStation_LocationMatrixList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_LocationMatrix.Select(c => new CATLocationMatrix
                    {
                        ID = c.ID,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationFromLat = c.CAT_Location.Lat,
                        LocationFromLng = c.CAT_Location.Lng,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationToLat = c.CAT_Location1.Lat,
                        LocationToLng = c.CAT_Location1.Lng,
                        KM = c.KM,
                        Hour = c.Hour,
                        IsChecked = c.IsChecked,
                        Instructions = c.Instructions
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATLocationMatrix>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOResult CATLocationMatrixStation_LocationList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PartnerLocation.Where(c => !string.IsNullOrEmpty(c.CAT_Location.Code) && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => new DTOCATPartnerLocationMatrix
                    {
                        ID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPartnerLocationMatrix>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CATRoutingArea
        public DTOResult CATRoutingArea_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName,
                        FollowID = c.FollowID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int CATRoutingArea_Save(CATRoutingArea item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CATRoutingArea_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATRoutingArea CATRoutingArea_Get(int ID)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingArea.Where(c => c.ID == ID).Select(c => new CATRoutingArea
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AreaName = c.AreaName,
                            FollowID = c.FollowID,
                        }).FirstOrDefault();
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATRoutingArea_Delete(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATRoutingArea_Delete(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATRoutingAreaDetail_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaDetail
                    {
                        ID = c.ID,
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                        WardID = c.WardID,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        ColID = c.ID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingAreaDetail CATRoutingAreaDetail_Get(int ID)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingAreaDetail.Where(c => c.ID == ID).Select(c => new DTOCATRoutingAreaDetail
                        {
                            ID = c.ID,
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            WardID = c.WardID,
                            CountryID = c.CountryID,
                            CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                            ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                            WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int CATRoutingAreaDetail_Save(DTOCATRoutingAreaDetail item, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return HelperRouting.CATRoutingAreaDetail_Save(model, Account, item, areaID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void CATRoutingAreaDetail_Delete(DTOCATRoutingAreaDetail item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATRoutingAreaDetail_Delete(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATRoutingArea_Location_List(string request, int routingAreaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == routingAreaID).Select(c => new DTOCATRoutingAreaLocation
                    {
                        ID = c.ID,
                        LocationID = c.CAT_Location.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        Country = c.CAT_Location.CAT_Country.CountryName,
                        Province = c.CAT_Location.CAT_Province.ProvinceName,
                        District = c.CAT_Location.CAT_District.DistrictName,
                        Ward = c.CAT_Location.CAT_Ward != null ? c.CAT_Location.CAT_Ward.WardName : "",
                        CreatedDate = c.CreatedDate,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATRoutingArea_LocationNotIn_List(string request, int routingAreaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> hasList = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == routingAreaID).Select(c => c.LocationID).ToList();
                    if (hasList != null)
                    {
                        var query = model.CAT_Location.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                    else
                    {
                        var query = model.CAT_Location.Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATRoutingArea_LocationNotIn_Save(int routingAreaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objRoutingArea = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == routingAreaID);
                    if (objRoutingArea != null)
                    {
                        foreach (var id in lstID)
                        {
                            var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == id);
                            if (objLocation != null)
                            {
                                var obj = new CAT_RoutingAreaLocation();
                                obj.LocationID = id;
                                obj.RoutingAreaID = routingAreaID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }

                        }

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATRoutingArea_Location_Delete(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in lstID)
                    {
                        var obj = model.CAT_RoutingAreaLocation.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            model.CAT_RoutingAreaLocation.Remove(obj);
                        }

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATRoutingAreaLocation_Refresh(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATRoutingAreaLocation_Update(model, Account, id);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by area
        public DTOResult CATRoutingArea_AreaNotIn_AreaList(string request, int id)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Where(c => c.ID != id).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATRoutingArea_AreaLocation_Copy(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstLocationID = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).Distinct().ToList();

                    foreach (var ID in lstID)
                    {
                        foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == ID))
                        {
                            if (lstLocationID.Count(c => c == item.LocationID) == 0)
                            {
                                CAT_RoutingAreaLocation obj = new CAT_RoutingAreaLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RoutingAreaID = areaID;
                                obj.LocationID = item.LocationID;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATRoutingAreaExcel_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CATRoutingAreaExcel_List(model, Account);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void CATRoutingAreaExcel_Save(List<DTOExcelRouteArea> lstArea)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CATRoutingAreaExcel_Save(model, Account, lstArea);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOExcelRouteAreaLocation> CATRouteAreaLocationExcel_List()
        {
            try
            {
                List<DTOExcelRouteAreaLocation> result = new List<DTOExcelRouteAreaLocation>();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CATRouteAreaLocationExcel_List(model, Account);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATRoutingArea_ExcelInit(int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lstArea = model.CAT_RoutingArea.Select(c => new
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.AreaName,
                        }).ToList();

                        var lstAreaDetail = model.CAT_RoutingAreaDetail.Select(c => new
                        {
                            c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.ProvinceID > 0 ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictID = c.DistrictID,
                            DistrictName = c.DistrictID > 0 ? c.CAT_District.DistrictName : string.Empty
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        var cellsR2 = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        for (int i = 0; i < 10; i++)
                        {
                            cells.Add(HelperExcel.NewCell(col, "Chi tiết " + (i + 1).ToString(), HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cellsR2.Add(HelperExcel.NewCell(col++, "Tỉnh thành", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cellsR2.Add(HelperExcel.NewCell(col++, "Quận huyện", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        }
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellsR2));
                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        ws.MergedCells = new List<string>{
                             HelperExcel.AddressRows(0, 0, 1),
                             HelperExcel.AddressRows(1, 0, 1),
                             HelperExcel.AddressRows(2, 0, 1)
                        };

                        col = 3;
                        for (int i = 0; i < 10; i++)
                        {
                            ws.MergedCells.Add(HelperExcel.AddressColumns(0, col, col + 1));
                            col = col + 2;
                        }

                        int stt = 1;
                        foreach (var area in lstArea)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, area.Code));
                            cells.Add(HelperExcel.NewCell(col++, area.Name));

                            var lst = lstAreaDetail.Where(c => c.RoutingAreaID == area.ID).Take(10).ToList();

                            foreach (var detail in lst)
                            {
                                cells.Add(HelperExcel.NewCell(col++, detail.ProvinceName));
                                cells.Add(HelperExcel.NewCell(col++, detail.DistrictName));
                            }

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row CATRoutingArea_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAreaID = colData++;

                    int colPro1 = colData++;
                    int colDis1 = colData++;
                    int colPro2 = colData++;
                    int colDis2 = colData++;
                    int colPro3 = colData++;
                    int colDis3 = colData++;
                    int colPro4 = colData++;
                    int colDis4 = colData++;
                    int colPro5 = colData++;
                    int colDis5 = colData++;
                    int colPro6 = colData++;
                    int colDis6 = colData++;
                    int colPro7 = colData++;
                    int colDis7 = colData++;

                    int colPro8 = colData++;
                    int colDis8 = colData++;
                    int colPro9 = colData++;
                    int colDis9 = colData++;
                    int colPro10 = colData++;
                    int colDis10 = colData++;

                    int failMax = 2;
                    int failCurrent = 0;

                    var result = default(Row);

                    var lstArea = model.CAT_RoutingArea.Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.AreaName,
                    }).ToList();

                    var lstAreaDetail = model.CAT_RoutingAreaDetail.Select(c => new
                    {
                        c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                    }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    List<string> lstCode = new List<string>();
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;



                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }



                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince1 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict1 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince2 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict2 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince3 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict3 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince4 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict4 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince5 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict5 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince6 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict6 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince7 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict7 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince8 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict8 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince9 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict9 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince10 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict10 = HelperExcel.GetString(checkRow, colData++);

                        //HelperExcel.SetString(checkRow, colPro1, "-1");
                        //HelperExcel.SetString(checkRow, colDis1, "-1");
                        //HelperExcel.SetString(checkRow, colPro2, "-1");
                        //HelperExcel.SetString(checkRow, colDis2, "-1");
                        //HelperExcel.SetString(checkRow, colPro3, "-1");
                        //HelperExcel.SetString(checkRow, colDis3, "-1");
                        //HelperExcel.SetString(checkRow, colPro4, "-1");
                        //HelperExcel.SetString(checkRow, colDis4, "-1");
                        //HelperExcel.SetString(checkRow, colPro5, "-1");
                        //HelperExcel.SetString(checkRow, colDis5, "-1");
                        //HelperExcel.SetString(checkRow, colPro6, "-1");
                        //HelperExcel.SetString(checkRow, colDis6, "-1");
                        //HelperExcel.SetString(checkRow, colPro7, "-1");
                        //HelperExcel.SetString(checkRow, colDis7, "-1");
                        //HelperExcel.SetString(checkRow, colPro8, "-1");
                        //HelperExcel.SetString(checkRow, colDis8, "-1");
                        //HelperExcel.SetString(checkRow, colPro9, "-1");
                        //HelperExcel.SetString(checkRow, colDis9, "-1");
                        //HelperExcel.SetString(checkRow, colPro10, "-1");
                        //HelperExcel.SetString(checkRow, colDis10, "-1");

                        bool flag = true;
                        int areaID = -1, proID = -1, distID = -1;
                        Dictionary<int, List<int>> dictDetail = new Dictionary<int, List<int>>();

                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && lstCode.Count(c => c == dataCode) > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;

                        if (flag)
                        {
                            areaID = -1;
                            var check = lstArea.FirstOrDefault(c => c.Code == dataCode);
                            if (check != null) areaID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAreaID, areaID.ToString());
                        }


                        #region check chi tiết 1
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince1) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince1.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince1.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro1, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince1) && !string.IsNullOrEmpty(dataDistrict1))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince1) && !string.IsNullOrEmpty(dataDistrict1) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict1.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict1.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis1, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 2
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince2) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince2.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince2.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro2, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince2) && !string.IsNullOrEmpty(dataDistrict2))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince2) && !string.IsNullOrEmpty(dataDistrict2) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict2.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict2.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis2, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 3
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince3) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince3.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince3.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro3, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince3) && !string.IsNullOrEmpty(dataDistrict3))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince3) && !string.IsNullOrEmpty(dataDistrict3) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict3.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict3.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis3, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 4
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince4) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince4.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince4.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro4, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince4) && !string.IsNullOrEmpty(dataDistrict4))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince4) && !string.IsNullOrEmpty(dataDistrict4) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict4.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict4.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis4, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 5
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince5) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince5.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince5.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro5, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince5) && !string.IsNullOrEmpty(dataDistrict5))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince5) && !string.IsNullOrEmpty(dataDistrict5) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict5.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict5.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis5, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 6
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince6) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince6.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince6.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro6, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince6) && !string.IsNullOrEmpty(dataDistrict6))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince6) && !string.IsNullOrEmpty(dataDistrict6) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict6.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict6.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis6, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 7
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince7) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince7.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince7.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro7, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince7) && !string.IsNullOrEmpty(dataDistrict7))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince7) && !string.IsNullOrEmpty(dataDistrict7) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict7.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict7.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis7, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 8
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince8) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince8.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince8.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro8, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince8) && !string.IsNullOrEmpty(dataDistrict8))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince8) && !string.IsNullOrEmpty(dataDistrict8) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict8.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict8.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis8, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 9
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince9) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince9.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince9.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro9, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince9) && !string.IsNullOrEmpty(dataDistrict9))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince9) && !string.IsNullOrEmpty(dataDistrict9) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict9.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict9.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis9, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 10
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince10) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince10.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince10.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro10, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince10) && !string.IsNullOrEmpty(dataDistrict10))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince10) && !string.IsNullOrEmpty(dataDistrict10) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict10.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict10.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis10, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel CATRoutingArea_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAreaID = colData++;

                    int colPro1 = colData++;
                    int colDis1 = colData++;
                    int colPro2 = colData++;
                    int colDis2 = colData++;
                    int colPro3 = colData++;
                    int colDis3 = colData++;
                    int colPro4 = colData++;
                    int colDis4 = colData++;
                    int colPro5 = colData++;
                    int colDis5 = colData++;
                    int colPro6 = colData++;
                    int colDis6 = colData++;
                    int colPro7 = colData++;
                    int colDis7 = colData++;

                    int colPro8 = colData++;
                    int colDis8 = colData++;
                    int colPro9 = colData++;
                    int colDis9 = colData++;
                    int colPro10 = colData++;
                    int colDis10 = colData++;
                    int rowEnd = lst.Count;

                    int failMax = 2;
                    int failCurrent = 0;

                    var lstArea = model.CAT_RoutingArea.Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.AreaName,
                    }).ToList();

                    var lstAreaDetail = model.CAT_RoutingAreaDetail.Select(c => new
                    {
                        c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                    }).ToList();
                    var lstProvinceID = model.CAT_Province.Select(c => new { c.ID, c.ProvinceName }).ToList();
                    var lstDistrictID = model.CAT_District.Select(c => new { c.ID, c.DistrictName, c.ProvinceID }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataCode = HelperExcel.GetString(checkRow, colData++);
                        string dataName = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince1 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict1 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince2 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict2 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince3 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict3 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince4 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict4 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince5 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict5 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince6 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict6 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince7 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict7 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince8 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict8 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince9 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict9 = HelperExcel.GetString(checkRow, colData++);
                        string dataProvince10 = HelperExcel.GetString(checkRow, colData++);
                        string dataDistrict10 = HelperExcel.GetString(checkRow, colData++);

                        //HelperExcel.SetString(checkRow, colPro1, "-1");
                        //HelperExcel.SetString(checkRow, colDis1, "-1");
                        //HelperExcel.SetString(checkRow, colPro2, "-1");
                        //HelperExcel.SetString(checkRow, colDis2, "-1");
                        //HelperExcel.SetString(checkRow, colPro3, "-1");
                        //HelperExcel.SetString(checkRow, colDis3, "-1");
                        //HelperExcel.SetString(checkRow, colPro4, "-1");
                        //HelperExcel.SetString(checkRow, colDis4, "-1");
                        //HelperExcel.SetString(checkRow, colPro5, "-1");
                        //HelperExcel.SetString(checkRow, colDis5, "-1");
                        //HelperExcel.SetString(checkRow, colPro6, "-1");
                        //HelperExcel.SetString(checkRow, colDis6, "-1");
                        //HelperExcel.SetString(checkRow, colPro7, "-1");
                        //HelperExcel.SetString(checkRow, colDis7, "-1");
                        //HelperExcel.SetString(checkRow, colPro8, "-1");
                        //HelperExcel.SetString(checkRow, colDis8, "-1");
                        //HelperExcel.SetString(checkRow, colPro9, "-1");
                        //HelperExcel.SetString(checkRow, colDis9, "-1");
                        //HelperExcel.SetString(checkRow, colPro10, "-1");
                        //HelperExcel.SetString(checkRow, colDis10, "-1");

                        bool flag = true;
                        int areaID = -1, proID = -1, distID = -1;
                        Dictionary<int, List<int>> dictDetail = new Dictionary<int, List<int>>();

                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag && lstCode.Count(c => c == dataCode) > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 1000);
                        indexError++;
                        if (flag)
                        {
                            areaID = -1;
                            var check = lstArea.FirstOrDefault(c => c.Code == dataCode);
                            if (check != null) areaID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colAreaID, areaID.ToString());
                        }


                        #region check chi tiết 1
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince1) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince1.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince1.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro1, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince1) && !string.IsNullOrEmpty(dataDistrict1))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince1) && !string.IsNullOrEmpty(dataDistrict1) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict1.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict1.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis1, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 2
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince2) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince2.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince2.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro2, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince2) && !string.IsNullOrEmpty(dataDistrict2))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince2) && !string.IsNullOrEmpty(dataDistrict2) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict2.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict2.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis2, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 3
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince3) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince3.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince3.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro3, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince3) && !string.IsNullOrEmpty(dataDistrict3))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince3) && !string.IsNullOrEmpty(dataDistrict3) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict3.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict3.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis3, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 4
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince4) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince4.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince4.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro4, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince4) && !string.IsNullOrEmpty(dataDistrict4))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince4) && !string.IsNullOrEmpty(dataDistrict4) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict4.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict4.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis4, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 5
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince5) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince5.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince5.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro5, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince5) && !string.IsNullOrEmpty(dataDistrict5))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince5) && !string.IsNullOrEmpty(dataDistrict5) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict5.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict5.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis5, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 6
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince6) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince6.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince6.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro6, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince6) && !string.IsNullOrEmpty(dataDistrict6))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince6) && !string.IsNullOrEmpty(dataDistrict6) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict6.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict6.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis6, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 7
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince7) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince7.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince7.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro7, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince7) && !string.IsNullOrEmpty(dataDistrict7))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince7) && !string.IsNullOrEmpty(dataDistrict7) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict7.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict7.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis7, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 8
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince8) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince8.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince8.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro8, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince8) && !string.IsNullOrEmpty(dataDistrict8))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince8) && !string.IsNullOrEmpty(dataDistrict8) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict8.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict8.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis8, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 9
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince9) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince9.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince9.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro9, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince9) && !string.IsNullOrEmpty(dataDistrict9))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince9) && !string.IsNullOrEmpty(dataDistrict9) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict9.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict9.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis9, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                        #region check chi tiết 10
                        proID = -1; distID = -1;
                        indexError++;//co tinh nhung sai
                        if (flag && !string.IsNullOrEmpty(dataProvince10) && lstProvinceID.Count(c => c.ProvinceName.ToLower() == dataProvince10.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstProvinceID.FirstOrDefault(c => c.ProvinceName.ToLower() == dataProvince10.ToLower());
                            if (check != null) proID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPro10, proID.ToString());
                            if (!dictDetail.ContainsKey(proID))
                                dictDetail.Add(proID, new List<int>());
                        }

                        indexError++;// co huyen ma ko tinh
                        if (flag && string.IsNullOrEmpty(dataProvince10) && !string.IsNullOrEmpty(dataDistrict10))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co tinh nhung huyen sai
                        if (flag && !string.IsNullOrEmpty(dataProvince10) && !string.IsNullOrEmpty(dataDistrict10) && lstDistrictID.Count(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict10.ToLower()) == 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var check = lstDistrictID.FirstOrDefault(c => c.ProvinceID == proID && c.DistrictName.ToLower() == dataDistrict10.ToLower());
                            if (check != null) distID = check.ID;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDis10, distID.ToString());
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID > 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID == null) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        //co khu vuc bao quat khi them chi tiêt
                        indexError++;
                        if (flag & proID > 0 && distID < 0 && lstAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == proID && c.DistrictID > 0) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// trùng tỉnh-huyện
                        if (flag && proID > 0 && ((distID > 0 && dictDetail[proID].Count(c => c == distID) > 0) || (distID < 0 && dictDetail[proID].Count(c => c == -1) > 0)))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv bao quát
                        if (flag && proID > 0 && distID > 0 && dictDetail[proID].Count(c => c == -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;// co kv chi tiết trên file
                        if (flag && proID > 0 && distID < 0 && dictDetail[proID].Count(c => c > -1) > 0)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        #endregion

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool CATRoutingArea_ExcelApprove(long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 30;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colAreaID = colData++;

                    int colPro1 = colData++;
                    int colDis1 = colData++;
                    int colPro2 = colData++;
                    int colDis2 = colData++;
                    int colPro3 = colData++;
                    int colDis3 = colData++;
                    int colPro4 = colData++;
                    int colDis4 = colData++;
                    int colPro5 = colData++;
                    int colDis5 = colData++;
                    int colPro6 = colData++;
                    int colDis6 = colData++;
                    int colPro7 = colData++;
                    int colDis7 = colData++;

                    int colPro8 = colData++;
                    int colDis8 = colData++;
                    int colPro9 = colData++;
                    int colDis9 = colData++;
                    int colPro10 = colData++;
                    int colDis10 = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        //Import partner and update code
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataCode = HelperExcel.GetString(checkRow, colData++);
                            string dataName = HelperExcel.GetString(checkRow, colData++);

                            int areaID = Convert.ToInt32(HelperExcel.GetString(checkRow, colAreaID));
                            int? province1 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro1));
                            int? district1 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis1));
                            int? province2 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro2));
                            int? district2 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis2));
                            int? province3 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro3));
                            int? district3 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis3));
                            int? province4 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro4));
                            int? district4 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis4));
                            int? province5 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro5));
                            int? district5 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis5));
                            int? province6 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro6));
                            int? district6 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis6));
                            int? province7 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro7));
                            int? district7 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis7));
                            int? province8 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro8));
                            int? district8 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis8));
                            int? province9 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro9));
                            int? district9 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis9));
                            int? province10 = Convert.ToInt32(HelperExcel.GetString(checkRow, colPro10));
                            int? district10 = Convert.ToInt32(HelperExcel.GetString(checkRow, colDis10));

                            var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == areaID);
                            if (obj == null)
                            {
                                obj = new CAT_RoutingArea();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_RoutingArea.Add(obj);
                            }
                            else
                            {
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                            }
                            obj.Code = dataCode;
                            obj.AreaName = dataName;
                            obj.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(obj.Code);

                            if (province1 > 0)
                            {
                                var objDetail1 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province1 && c.DistrictID == district1);
                                if (objDetail1 == null)
                                {
                                    objDetail1 = new CAT_RoutingAreaDetail();
                                    objDetail1.CreatedBy = Account.UserName;
                                    objDetail1.CreatedDate = DateTime.Now;
                                    objDetail1.ProvinceID = province1 > 0 ? province1 : null;
                                    objDetail1.DistrictID = district1 > 0 ? district1 : null;
                                    objDetail1.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail1);
                                }
                            }
                            if (province2 > 0)
                            {
                                var objDetail2 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province2 && c.DistrictID == district2);
                                if (objDetail2 == null)
                                {
                                    objDetail2 = new CAT_RoutingAreaDetail();
                                    objDetail2.CreatedBy = Account.UserName;
                                    objDetail2.CreatedDate = DateTime.Now;
                                    objDetail2.ProvinceID = province2 > 0 ? province2 : null;
                                    objDetail2.DistrictID = district2 > 0 ? district2 : null;
                                    objDetail2.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail2);
                                }
                            }

                            if (province3 > 0)
                            {
                                var objDetail3 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province3 && c.DistrictID == district3);
                                if (objDetail3 == null)
                                {
                                    objDetail3 = new CAT_RoutingAreaDetail();
                                    objDetail3.CreatedBy = Account.UserName;
                                    objDetail3.CreatedDate = DateTime.Now;
                                    objDetail3.ProvinceID = province3 > 0 ? province3 : null;
                                    objDetail3.DistrictID = district3 > 0 ? district3 : null;
                                    objDetail3.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail3);
                                }
                            }

                            if (province4 > 0)
                            {
                                var objDetail4 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province4 && c.DistrictID == district4);
                                if (objDetail4 == null)
                                {
                                    objDetail4 = new CAT_RoutingAreaDetail();
                                    objDetail4.CreatedBy = Account.UserName;
                                    objDetail4.CreatedDate = DateTime.Now;
                                    objDetail4.ProvinceID = province4 > 0 ? province4 : null;
                                    objDetail4.DistrictID = district4 > 0 ? district4 : null;
                                    objDetail4.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail4);
                                }
                            }

                            if (province5 > 0)
                            {
                                var objDetail5 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province5 && c.DistrictID == district5);
                                if (objDetail5 == null)
                                {
                                    objDetail5 = new CAT_RoutingAreaDetail();
                                    objDetail5.CreatedBy = Account.UserName;
                                    objDetail5.CreatedDate = DateTime.Now;
                                    objDetail5.ProvinceID = province5 > 0 ? province5 : null;
                                    objDetail5.DistrictID = district5 > 0 ? district5 : null;
                                    objDetail5.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail5);
                                }
                            }

                            if (province6 > 0)
                            {
                                var objDetail6 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province6 && c.DistrictID == district6);
                                if (objDetail6 == null)
                                {
                                    objDetail6 = new CAT_RoutingAreaDetail();
                                    objDetail6.CreatedBy = Account.UserName;
                                    objDetail6.CreatedDate = DateTime.Now;
                                    objDetail6.ProvinceID = province6 > 0 ? province6 : null;
                                    objDetail6.DistrictID = district6 > 0 ? district6 : null;
                                    objDetail6.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail6);
                                }
                            }

                            if (province7 > 0)
                            {
                                var objDetail7 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province7 && c.DistrictID == district7);
                                if (objDetail7 == null)
                                {
                                    objDetail7 = new CAT_RoutingAreaDetail();
                                    objDetail7.CreatedBy = Account.UserName;
                                    objDetail7.CreatedDate = DateTime.Now;
                                    objDetail7.ProvinceID = province7 > 0 ? province7 : null;
                                    objDetail7.DistrictID = district7 > 0 ? district7 : null;
                                    objDetail7.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail7);
                                }
                            }

                            if (province8 > 0)
                            {
                                var objDetail8 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province8 && c.DistrictID == district8);
                                if (objDetail8 == null)
                                {
                                    objDetail8 = new CAT_RoutingAreaDetail();
                                    objDetail8.CreatedBy = Account.UserName;
                                    objDetail8.CreatedDate = DateTime.Now;
                                    objDetail8.ProvinceID = province8 > 0 ? province8 : null;
                                    objDetail8.DistrictID = district8 > 0 ? district8 : null;
                                    objDetail8.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail8);
                                }
                            }

                            if (province9 > 0)
                            {
                                var objDetail9 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province9 && c.DistrictID == district9);
                                if (objDetail9 == null)
                                {
                                    objDetail9 = new CAT_RoutingAreaDetail();
                                    objDetail9.CreatedBy = Account.UserName;
                                    objDetail9.CreatedDate = DateTime.Now;
                                    objDetail9.ProvinceID = province9 > 0 ? province9 : null;
                                    objDetail9.DistrictID = district9 > 0 ? district9 : null;
                                    objDetail9.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail9);
                                }
                            }

                            if (province10 > 0)
                            {
                                var objDetail10 = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.RoutingAreaID == obj.ID && c.ProvinceID == province10 && c.DistrictID == district10);
                                if (objDetail10 == null)
                                {
                                    objDetail10 = new CAT_RoutingAreaDetail();
                                    objDetail10.CreatedBy = Account.UserName;
                                    objDetail10.CreatedDate = DateTime.Now;
                                    objDetail10.ProvinceID = province10 > 0 ? province10 : null;
                                    objDetail10.DistrictID = district10 > 0 ? district10 : null;
                                    objDetail10.CAT_RoutingArea = obj;
                                    model.CAT_RoutingAreaDetail.Add(objDetail10);
                                }
                            }

                        }
                        model.SaveChanges();

                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region DTOFLMTypeWarning
        public DTOResult FLMTypeWarning_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_TypeWarning.Select(c => new DTOFLMTypeWarning
                    {
                        ID = c.ID,
                        Code = c.Code,
                        WarningName = c.WarningName,
                        FLMTypeWarningID = c.FLMTypeWarningID,
                        FLMTypeWarningName = c.SYS_Var.ValueOfVar,
                        IsDate = c.IsDate,
                        CreatedDate = c.CreatedDate,
                        CreatedBy = c.CreatedBy,
                        ModifiedDate = c.ModifiedDate,
                        ModifiedBy = c.ModifiedBy,

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOFLMTypeWarning>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOFLMTypeWarning FLMTypeWarning_Get(int ID)
        {
            try
            {
                DTOFLMTypeWarning result = new DTOFLMTypeWarning { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.FLM_TypeWarning.Where(c => c.ID == ID).Select(c => new DTOFLMTypeWarning
                        {
                            ID = c.ID,
                            Code = c.Code,
                            WarningName = c.WarningName,
                            FLMTypeWarningID = c.FLMTypeWarningID,
                            FLMTypeWarningName = c.SYS_Var.ValueOfVar,
                            IsDate = c.IsDate,
                            CreatedDate = c.CreatedDate,
                            CreatedBy = c.CreatedBy,
                            ModifiedDate = c.ModifiedDate,
                            ModifiedBy = c.ModifiedBy,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        //result.ID = 1;
                        result.FLMTypeWarningID = -(int)SYSVarType.FLMTypeWarningNote;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public int FLMTypeWarning_Save(DTOFLMTypeWarning item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.FLM_TypeWarning.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new FLM_TypeWarning();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.WarningName = item.WarningName;
                    obj.FLMTypeWarningID = item.FLMTypeWarningID;
                    if (obj.ID < 1)
                        model.FLM_TypeWarning.Add(obj);
                    model.SaveChanges();
                    return obj.ID;
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public void FLMTypeWarning_Delete(DTOFLMTypeWarning item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.FLM_TypeWarning.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.FLM_TypeWarning.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region CAT Vessel
        public DTOResult CATVessel_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Vessel.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new DTOCATVessel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        VesselName = c.VesselName,
                        PartnerID = c.PartnerID,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATVessel>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATVessel CATVessel_Get(int id)
        {
            try
            {
                DTOCATVessel result = new DTOCATVessel { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_Vessel.Where(c => c.ID == id).Select(c => new DTOCATVessel
                        {
                            ID = c.ID,
                            Code = c.Code,
                            VesselName = c.VesselName,
                            PartnerID = c.PartnerID,
                            PartnerName = c.CAT_Partner.PartnerName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.Code = string.Empty;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<CATPartner> CboCATPartner_List()
        {
            try
            {
                List<CATPartner> result = new List<CATPartner>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Partner.Where(c => c.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new CATPartner
                    {
                        ID = c.ID,
                        PartnerName = c.PartnerName,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATVessel_Save(DTOCATVessel item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;


                    var obj = model.CAT_Vessel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Vessel();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Vessel.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.VesselName = item.VesselName;
                    obj.PartnerID = item.PartnerID;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void CATVessel_Delete(DTOCATVessel item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Vessel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Vessel.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        #region catlocation test
        public List<DTOOPSDI_Map_Schedule_Event> CATLocationTest_Read(DateTime dtStart, DateTime dtEnd)
        {
            try
            {
                List<DTOOPSDI_Map_Schedule_Event> result = new List<DTOOPSDI_Map_Schedule_Event>();
                dtEnd = dtEnd.AddDays(1).Date;
                dtStart = dtStart.Date;
                using (var model = new DataEntities())
                {
                    var dataFLMTime = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 &&
                        c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck&&c.DateFromActual>=dtStart&&c.DateToActual<dtEnd).Select(c => new DTOOPSDI_Map_Schedule_Event
                    {
                        ID = c.ReferID,
                        StartDate = c.DateFromActual,
                        EndDate = c.DateToActual,
                        GroupID = c.FLM_Asset.VehicleID.Value,
                        VehicleID = c.FLM_Asset.VehicleID.Value,
                        VendorID = -1,
                        StatusOfEvent = c.TypeOfAssetTimeSheetID,
                        TypeOfEvent = c.StatusOfAssetTimeSheetID
                    }).ToList();
                    var dataOPSVend = model.OPS_DITOMaster.Where(c => c.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterPlanning && c.SYSCustomerID == Account.SYSCustomerID && c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID).Select(c => new DTOOPSDI_Map_Schedule_Event
                    {
                        ID = c.ID,
                        Code = c.Code,
                        StartDate = c.ATD ?? c.ETD.Value,
                        EndDate = c.ATA ?? c.ETA.Value,
                        GroupID = c.VehicleID ?? c.VendorOfVehicleID.Value,
                        VendorID = c.VendorOfVehicleID.Value,
                        VehicleID = c.VehicleID ?? -1,
                        StatusOfEvent = c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved || c.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning ? 1 : c.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3,
                        TypeOfEvent = 1,
                        TOMasterMode = c.TransportModeID.HasValue && c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL ? 1 : 2
                    }).ToList();

                    dataOPSVend = dataOPSVend.Where(c => c.StartDate >= dtStart && c.EndDate < dtEnd).ToList();

                    List<int> dataCus = new List<int>();
                    List<int> dataStatus = new List<int>();
                    string COCodeNum = "0000000";

                    foreach (var item in dataFLMTime)
                    {
                        switch (item.TypeOfEvent)
                        {
                            case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster:
                                var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                                if (objRef != null)
                                {
                                    var flag = true;
                                    if (flag && dataCus.Count > 0)
                                    {
                                        flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                                    }

                                    if (flag)
                                    {
                                        item.Code = objRef.Code;
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProductLite
                                        {
                                            ID = c.ID,
                                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                            CusCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                            DisCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "Kho KH",
                                            GOPCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                            PROCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                            DNCode = c.DNCode,
                                            SOCode = c.ORD_GroupProduct.SOCode,
                                            ModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                            Ton = c.Ton,
                                            CBM = c.CBM,
                                            Qty = c.Quantity,
                                            TempMax = c.ORD_GroupProduct.TempMax,
                                            TempMin = c.ORD_GroupProduct.TempMin,
                                            ETA = c.ORD_GroupProduct.ETA,
                                            ETD = c.ORD_GroupProduct.ETD,
                                            From = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                            To = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                            Route = c.CUSRoutingID.HasValue ? c.CUS_Routing.Code : string.Empty
                                        }).Distinct().ToList();

                                        item.Title = string.Empty;
                                        item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                        item.Ton = item.ListGroupProduct.Sum(c => c.Ton);
                                        item.Title += item.ListGroupProduct.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T ";
                                        item.Title += string.Join(",", item.ListGroupProduct.Select(c => c.Route).Distinct().ToList());
                                        item.StatusOfEvent = objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterPlanning || objRef.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterApproved ? 1 : objRef.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived ? 2 : 3;
                                        if (dataStatus.Count == 0 || dataStatus.Contains(item.StatusOfEvent))
                                        {
                                            if (item.StatusOfEvent == 1)
                                            {
                                                if (objRef.VehicleID > 0 && objRef.DriverName1 != null && objRef.DriverName1 != string.Empty)
                                                {
                                                    item.StatusOfEvent = 11;
                                                }
                                            }
                                            item.TypeOfEvent = 1;
                                            result.Add(item);
                                        }
                                    }
                                }
                                else
                                {
                                    if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                    {
                                        item.Title = string.Empty;
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.TypeOfEvent = 1;
                                        item.StatusOfEvent = -1;
                                        result.Add(item);
                                    }
                                }
                                break;
                            case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                            case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                            case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                if (dataStatus.Count == 0 || dataStatus.Contains(4))
                                {
                                    var objAct = model.FLM_Activity.FirstOrDefault(c => c.ID == item.ID);
                                    if (objAct != null)
                                    {
                                        if (dataCus.Count == 0)
                                        {
                                            item.Code = "AC" + item.ID.ToString(COCodeNum);
                                            item.StatusOfEvent = 3;
                                            item.TypeOfEvent = item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetMaintence ? 2 : item.TypeOfEvent == -(int)SYSVarType.StatusOfAssetTimeSheetRegistry ? 3 : 4;
                                            item.Title = string.Empty;
                                            result.Add(item);
                                        }
                                    }
                                    else
                                    {
                                        item.Title = string.Empty;
                                        item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                        item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                        item.TypeOfEvent = 1;
                                        item.StatusOfEvent = -1;
                                        result.Add(item);
                                    }
                                }
                                break;
                            default: break;
                        }
                    }
                    foreach (var item in dataOPSVend)
                    {
                        var objRef = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                        if (objRef != null)
                        {
                            var flag = true;
                            if (flag && dataCus.Count > 0)
                            {
                                flag = model.OPS_DITOGroupProduct.Count(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)) > 0;
                            }
                            if (flag && dataStatus.Count > 0)
                            {
                                flag = dataStatus.Contains(item.StatusOfEvent);
                            }
                            if (flag)
                            {
                                item.ETA = item.EndDate.ToString("dd/MM/yyyy hh:mm");
                                item.ETD = item.StartDate.ToString("dd/MM/yyyy hh:mm");
                                item.ListGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == objRef.ID && c.OrderGroupProductID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOOPSDI_MAP_GroupProductLite
                                {
                                    ID = c.ID,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    CusCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                                    DisCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : "Kho KH",
                                    GOPCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                    PROCode = c.ORD_GroupProduct.ORD_Product.Count > 0 ? c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code : string.Empty,
                                    DNCode = c.DNCode,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    ModeName = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                    Ton = c.Ton,
                                    CBM = c.CBM,
                                    Qty = c.Quantity,
                                    TempMax = c.ORD_GroupProduct.TempMax,
                                    TempMin = c.ORD_GroupProduct.TempMin,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    From = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    To = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    Route = c.CUSRoutingID.HasValue ? c.CUS_Routing.Code : string.Empty
                                }).Distinct().ToList();

                                item.Title = string.Empty;
                                item.MaxTon = Math.Min(objRef.CAT_Vehicle.MaxWeight ?? 0, 0);
                                item.Ton = item.ListGroupProduct.Sum(c => c.Ton);
                                item.Title += item.ListGroupProduct.Sum(c => c.Ton) + "/" + Math.Round(item.MaxTon, 1) + "T ";
                                item.Title += string.Join(",", item.ListGroupProduct.Select(c => c.Route).Distinct().ToList());
                                result.Add(item);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public List<DTOOPSDI_Map_Schedule_Group> CATLocationTest_Resource()
        {
            try
            {
                List<DTOOPSDI_Map_Schedule_Group> result = new List<DTOOPSDI_Map_Schedule_Group>();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var dataVehHome = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Group
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = -1,
                        VendorCode = "Xe nhà",
                        VendorName = "Xe nhà",
                        Text = c.CAT_Vehicle.RegNo
                    }).ToList();
                    var dataVehVend = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : true) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDI_Map_Schedule_Group
                    {
                        ID = c.ID,
                        VehicleID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        VendorCode = c.CUS_Customer.Code,
                        VendorName = c.CUS_Customer.CustomerName,
                        Text = c.CAT_Vehicle.RegNo
                    }).ToList();
                    var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDI_Map_Schedule_Group
                    {
                        ID = c.ID,
                        VehicleID = -1,
                        VehicleNo = string.Empty,
                        VendorID = c.ID,
                        VendorCode = c.Code,
                        VendorName = c.CustomerName,
                        Text = c.Code
                    }).ToList();
                    var homeGroup = new DTOOPSDI_Map_Schedule_Group();
                    homeGroup.Text = "Xe nhà";
                    homeGroup.ID = -1;
                    homeGroup.VehicleID = -1;
                    homeGroup.VehicleNo = string.Empty;
                    homeGroup.VendorID = -1;
                    homeGroup.VendorCode = "Xe nhà";
                    homeGroup.VendorName = "Xe nhà";

                    result.Add(homeGroup);
                    result.AddRange(dataVehHome);

                    foreach (var item in dataVend)
                    {
                        result.Add(item);
                        result.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID).ToList());
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion
    }
}