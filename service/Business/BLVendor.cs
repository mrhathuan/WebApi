using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;
using OfficeOpenXml;
using System.Text.RegularExpressions;

namespace Business
{
    public class BLVendor : Base, IBase
    {
        #region Vendor
        /// <summary>
        /// Tạo danh sách vendor theo định dạng của Kendo
        /// </summary>
        /// <param name="request">Request từ Kendo</param>
        /// <returns>Danh sách trả về</returns>
        public DTOResult Vendor_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOVendor
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                        VendorName = c.CustomerName,
                        Address = c.Address,
                        WardID = c.WardID,
                        WardName = c.CAT_Ward.WardName,
                        DistrictID = c.DistrictID,
                        DistrictName = c.CAT_District.DistrictName,
                        ProvinceID = c.ProvinceID,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        CountryID = c.CountryID,
                        CountryName = c.CAT_Country.CountryName,
                        TelNo = c.TelNo,
                        Fax = c.Fax,
                        Email = c.Email,
                        BillingName = c.BillingName,
                        BillingAddress = c.BillingAddress,
                        TaxCode = c.TaxCode,
                        Note = c.Note,
                        BiddingID = c.BiddingID,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        ParentID = c.ParentID,
                        IsFinance = c.IsFinance,
                        TypeBusiness = c.TypeBusiness,
                        Scale = c.Scale,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsApproved = c.IsApproved,
                        Field = c.Field,
                        BiddingCode = c.BiddingCode,
                        Image = c.Image,
                        IsSystem = c.IsSystem,
                        URL = string.Empty
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOVendor>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENVendor_ApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ActApproved = SYSActionCode.ActApproved.ToString();
                    if (Account.ListActionCode.Contains(ActApproved))
                    {
                        model.EventAccount = Account; model.EventRunning = false;
                        foreach (var id in lst)
                        {
                            var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == id);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.IsApproved = true;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENVendor_UnApprovedList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ActApproved = SYSActionCode.ActApproved.ToString();
                    if (Account.ListActionCode.Contains(ActApproved))
                    {
                        model.EventAccount = Account; model.EventRunning = false;
                        foreach (var id in lst)
                        {
                            var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == id);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.IsApproved = false;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        /// <summary>
        /// Lấy thông tin một vendor
        /// </summary>
        /// <param name="ID">Mã vendor</param>
        /// <returns></returns>
        /// 
        public DTOVendor Vendor_Get(int id)
        {
            try
            {
                DTOVendor result = new DTOVendor();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_Customer.Where(c => c.ID == id).Select(c => new DTOVendor
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CustomerName = c.CustomerName,
                            Address = c.Address,
                            WardID = c.WardID,
                            WardName = c.CAT_Ward.WardName,
                            DistrictID = c.DistrictID,
                            DistrictName = c.CAT_District.DistrictName,
                            ProvinceID = c.ProvinceID,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            CountryID = c.CountryID,
                            CountryName = c.CAT_Country.CountryName,
                            TelNo = c.TelNo,
                            Fax = c.Fax,
                            Email = c.Email,
                            BillingName = c.BillingName,
                            BillingAddress = c.BillingAddress,
                            TaxCode = c.TaxCode,
                            Note = c.Note,
                            BiddingID = c.BiddingID,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            ParentID = c.ParentID,
                            IsFinance = c.IsFinance,
                            TypeBusiness = c.TypeBusiness,
                            Scale = c.Scale,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            IsApproved = c.IsApproved,
                            Field = c.Field,
                            BiddingCode = c.BiddingCode,
                            Image = c.Image,
                            IsSystem = c.IsSystem,
                            VendorName = c.CustomerName,
                            URL = string.Empty,
                            ShortName = c.ShortName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.CountryID = 0;
                        result.ProvinceID = 0;
                        result.WardID = null;
                        var objC = model.CAT_Country.FirstOrDefault();
                        if (objC != null) result.CountryID = objC.ID;
                        var objP = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objP != null) result.ProvinceID = objP.ID;
                        var objD = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objD != null) result.DistrictID = objD.ID;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu thông tin vendor
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public int Vendor_Save(DTOVendor item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfCustomerVEN = -(int)SYSVarType.TypeOfCustomerVEN;

                    if (item.Code == null || item.Code == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Mã không được trống");
                    }
                    else if (item.VendorName == null || item.VendorName == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Tên không được trống");
                    }
                    else if (item.ShortName == null || item.ShortName == string.Empty)
                    {
                        throw FaultHelper.BusinessFault(null, null, "Tên ngắn không được trống");
                    }

                    if (item.CountryID == null && item.ProvinceID > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn quốc gia trước khi chọn tỉnh thành");
                    if (item.ProvinceID == null && item.DistrictID > 0)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn tỉnh thành trước khi chọn quận huyện");

                    var lstDistrictID = model.CAT_District.Where(c => c.ProvinceID == item.ProvinceID).Select(c => c.ID).Distinct().ToList();
                    if (item.DistrictID > 0 && !lstDistrictID.Contains(item.DistrictID.Value))
                        throw FaultHelper.BusinessFault(null, null, "Quận huyện ko thuộc tỉnh thành đã chọn");

                    if (model.CUS_Customer.Count(c => c.Code == item.Code && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");

                    var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CUS_Customer();
                        obj.TypeOfCustomerID = iTypeOfCustomerVEN;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;

                        #region Lưu CUSCompany
                        var cusCom = new CUS_Company();
                        cusCom.CreatedBy = Account.UserName;
                        cusCom.CreatedDate = DateTime.Now;
                        cusCom.CUS_Customer = obj;
                        cusCom.CUS_Customer1 = obj;
                        model.CUS_Company.Add(cusCom);
                        #endregion
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.Code = item.Code;
                    obj.CustomerName = item.VendorName;
                    obj.ShortName = item.ShortName;
                    obj.Address = !string.IsNullOrEmpty(item.Address) ? item.Address : string.Empty;
                    obj.WardID = item.WardID;
                    obj.DistrictID = item.DistrictID;
                    obj.ProvinceID = item.ProvinceID;
                    obj.CountryID = item.CountryID;
                    obj.TelNo = item.TelNo;
                    obj.Fax = item.Fax;
                    obj.Email = item.Email;
                    obj.BillingName = item.BillingName;
                    obj.BillingAddress = item.BillingAddress;
                    obj.TaxCode = item.TaxCode;
                    obj.Note = item.Note;
                    obj.BiddingID = item.BiddingID;
                    obj.ParentID = item.ParentID;
                    obj.IsFinance = item.IsFinance;
                    obj.TypeBusiness = item.TypeBusiness;
                    obj.Scale = item.Scale;
                    obj.Note1 = item.Note1;
                    obj.Note2 = item.Note2;
                    string ActApproved = SYSActionCode.ActApproved.ToString();
                    string ActAddAndApproved = SYSActionCode.ActAddAndApproved.ToString();
                    if (Account.ListActionCode.Contains(ActApproved) || Account.ListActionCode.Contains(ActAddAndApproved))
                        obj.IsApproved = item.IsApproved;

                    obj.Field = item.Field;
                    if (obj.ID < 1)
                    {
                        model.CUS_Customer.Add(obj);

                        //add xe cho nhap cho vendor
                        var objTruck = new CUS_Vehicle();
                        var truck = model.CAT_Vehicle.Where(c => c.RegNo == "[Chờ nhập xe]" && c.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).FirstOrDefault();
                        objTruck.CreatedBy = Account.UserName;
                        objTruck.CreatedDate = DateTime.Now;
                        objTruck.VehicleID = 1;
                        if (truck != null) objTruck.VehicleID = truck.ID;
                        objTruck.CUS_Customer = obj;
                        model.CUS_Vehicle.Add(objTruck);
                        var objTractor = new CUS_Vehicle();
                        var tractor = model.CAT_Vehicle.Where(c => c.RegNo == "[Chờ nhập xe]" && c.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).FirstOrDefault();
                        objTractor.CreatedBy = Account.UserName;
                        objTractor.CreatedDate = DateTime.Now;
                        objTractor.VehicleID = 2;
                        if (tractor != null) objTractor.VehicleID = tractor.ID;
                        objTractor.CUS_Customer = obj;
                        model.CUS_Vehicle.Add(objTractor);

                        var objMooc = new CUS_Romooc();
                        objMooc.CreatedBy = Account.UserName;
                        objMooc.CreatedDate = DateTime.Now;
                        objMooc.RomoocID = 1;
                        objMooc.CUS_Customer = obj;
                        model.CUS_Romooc.Add(objMooc);
                    }

                    model.SaveChanges();

                    // Tự động add vào ListCustomer khi thêm mới
                    if (item.ID <= 0)
                    {
                        var user = model.SYS_User.FirstOrDefault(c => c.ID == Account.UserID);
                        user.ModifiedBy = Account.UserName;
                        user.ModifiedDate = DateTime.Now;
                        if (!string.IsNullOrEmpty(user.ListCustomerID))
                            user.ListCustomerID += "," + obj.ID;
                        else
                            user.ListCustomerID = obj.ID.ToString();
                        model.SaveChanges();
                        Account.ListCustomerID = user.ListCustomerID.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(n => Convert.ToInt32(n)).ToArray();
                    }

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Vendor_Delete(DTOVendor item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Customer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (model.CAT_Contract.Count(c => c.CustomerID == obj.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Xóa hợp đồng trước!");

                        foreach (var group in model.CUS_GroupOfProduct.Where(c => c.CustomerID == obj.ID))
                        {
                            foreach (var group2 in model.CUS_GroupOfProductInStock.Where(c => c.GroupOfProductID == group.ID))
                            {
                                model.CUS_GroupOfProductInStock.Remove(group2);
                            }
                            foreach (var group2 in model.CUS_GroupOfProduct.Where(c => c.ParentID == group.ID))
                            {
                                foreach (var product in model.CUS_Product.Where(c => c.GroupOfProductID == group2.ID))
                                {
                                    model.CUS_Product.Remove(product);
                                }
                                model.CUS_GroupOfProduct.Remove(group2);
                            }
                            foreach (var product in model.CUS_Product.Where(c => c.GroupOfProductID == group.ID))
                            {
                                model.CUS_Product.Remove(product);
                            }
                            model.CUS_GroupOfProduct.Remove(group);
                        }

                        foreach (var partner in model.CUS_Partner.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Partner.Remove(partner);
                        }

                        foreach (var location in model.CUS_Location.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Location.Remove(location);
                        }


                        foreach (var route in model.CUS_Routing.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Routing.Remove(route);
                        }

                        foreach (var contact in model.CUS_Contact.Where(c => c.CustomerID == obj.ID))
                        {
                            model.CUS_Contact.Remove(contact);
                        }

                        foreach (var cus in model.CUS_Company.Where(c => c.CustomerOwnID == obj.ID))
                            model.CUS_Company.Remove(cus);

                        foreach (var cusVehicle in model.CUS_Vehicle.Where(c => c.CustomerID == obj.ID))
                            model.CUS_Vehicle.Remove(cusVehicle);

                        foreach (var cusRomooc in model.CUS_Romooc.Where(c => c.CustomerID == obj.ID))
                            model.CUS_Romooc.Remove(cusRomooc);

                        foreach (var catVehicle in model.CAT_Vehicle.Where(c => c.CurrentVendorID == obj.ID))
                        {
                            catVehicle.CurrentVendorID = null;
                            catVehicle.ModifiedBy = Account.UserName;
                            catVehicle.ModifiedDate = DateTime.Now;
                        }

                        model.CUS_Customer.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        #endregion

        #region Company
        /// <summary>
        /// Danh sách Company thuộc khách hàng
        /// </summary>
        /// <param name="request"></param>
        /// <param name="customerid">ID Khách hàng</param>
        /// <returns></returns>
        public DTOResult Company_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Company.Where(c => c.CustomerOwnID == vendorid && c.CustomerRelateID != vendorid).Select(c => new DTOCUSCompany
                    {
                        ID = c.ID,
                        CustomerOwnID = c.CustomerOwnID,
                        CustomerRelateID = c.CustomerRelateID,
                        CustomerRelateCode = c.CUS_Customer1.Code,
                        CustomerRelateName = c.CUS_Customer1.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSCompany>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Danh sách công ty chưa thuộc khách hàng
        /// </summary>
        /// <param name="request"></param>
        /// <param name="customerid"></param>
        /// <returns></returns>
        public DTOResult CompanyNotIn_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == vendorid).Select(c => c.CustomerRelateID).ToList();
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && !lstCustomerID.Contains(c.ID) && c.ID != vendorid && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOCUSCompany
                    {
                        ID = -1,
                        CustomerOwnID = vendorid,
                        CustomerRelateID = c.ID,
                        CustomerRelateCode = c.Code,
                        CustomerRelateName = c.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSCompany>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách Company
        /// </summary>
        /// <param name="lst"></param>
        public void CompanyNotIn_SaveList(List<DTOCUSCompany> lst, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    using (var helper = new CopyHelper())
                    {
                        #region Kiểm tra trùng
                        foreach (var item in lst)
                        {
                            if (model.CUS_Company.FirstOrDefault(c => c.CustomerOwnID == vendorid && c.CustomerRelateID == item.CustomerRelateID) != null)
                                throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                        }
                        #endregion

                        #region Lưu CUSCompany
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_Company.FirstOrDefault(c => c.ID == item.ID);
                            if (obj == null)
                            {
                                obj = new CUS_Company();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CustomerOwnID = vendorid;
                                obj.CustomerRelateID = item.CustomerRelateID;
                                model.CUS_Company.Add(obj);
                            }
                        }

                        model.SaveChanges();
                        #endregion
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa danh sách Company khỏi khách hàng
        /// </summary>
        /// <param name="lst"></param>
        public void Company_DeleteList(List<DTOCUSCompany> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    using (var helper = new CopyHelper())
                    {
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_Company.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                model.CUS_Company.Remove(obj);
                            }
                        }

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Truck

        public List<CATGroupOfVehicle> VENGroupOfVehicleList()
        {
            try
            {
                List<CATGroupOfVehicle> result = new List<CATGroupOfVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        Code = c.Code,
                        Ton = c.Ton
                    }).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATTruck_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfVehicleTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == iTypeOfVehicleTruck).Select(c => new CATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        Note = c.Note,
                        IsOwn = c.IsOwn,
                        CurrentVendorID = c.CurrentVendorID,
                        TypeOfVehicleID = c.TypeOfVehicleID,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        MaxWeight = c.MaxWeight,
                        MaxCapacity = c.MaxCapacity,
                        RegWeight = c.RegWeight,
                        RegCapacity = c.RegCapacity,
                        CurrentRomoocID = c.CurrentRomoocID,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        MinWeight = c.MinWeight,
                        MinCapacity = c.MinCapacity,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSVehicle Truck_Get(int id)
        {
            try
            {
                DTOCUSVehicle result = new DTOCUSVehicle();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_Vehicle.Where(c => c.ID == id).Select(c => new DTOCUSVehicle
                                   {
                                       ID = c.ID,
                                       RegNo = c.CAT_Vehicle.RegNo,
                                       Note = c.CAT_Vehicle.Note,
                                       IsOwn = c.CAT_Vehicle.IsOwn,
                                       CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                                       TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                                       TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                                       MaxWeight = c.CAT_Vehicle.MaxWeight,
                                       MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                                       RegWeight = c.CAT_Vehicle.RegWeight,
                                       RegCapacity = c.CAT_Vehicle.RegCapacity,
                                       CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                                       Lat = c.CAT_Vehicle.Lat,
                                       Lng = c.CAT_Vehicle.Lng,
                                       MinWeight = c.CAT_Vehicle.MinWeight,
                                       MinCapacity = c.CAT_Vehicle.MinCapacity,
                                       VehicleID = c.VehicleID ,
                                       GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                                   }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.VehicleID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Truck_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfVehicleTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == iTypeOfVehicleTruck && c.VehicleID > 2).Select(c => new DTOCUSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int Truck_Save(DTOCUSVehicle item, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    int iTypeOfTruck = -(int)SYSVarType.TypeOfVehicleTruck;

                    if (model.CAT_Vehicle.Count(c => c.RegNo.ToUpper() == item.RegNo.ToUpper() && c.ID != item.VehicleID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe đã tồn tại trong hệ thống");

                    var objCAT = model.CAT_Vehicle.Where(c => c.ID == item.VehicleID).FirstOrDefault();

                    if (objCAT == null)
                    {
                        objCAT = new CAT_Vehicle();
                        objCAT.CreatedBy = Account.UserName;
                        objCAT.CreatedDate = DateTime.Now;
                        objCAT.TypeOfVehicleID = iTypeOfTruck;
                        objCAT.RegNo = item.RegNo.ToUpper();
                        objCAT.IsOwn = false;
                        objCAT.CurrentVendorID = vendorid;
                        model.CAT_Vehicle.Add(objCAT);
                    }
                    else
                    {
                        objCAT.ModifiedBy = Account.UserName;
                        objCAT.ModifiedDate = DateTime.Now;
                    }
                    objCAT.Note = item.Note;
                    objCAT.MaxWeight = item.MaxWeight;
                    objCAT.MaxCapacity = item.MaxCapacity;
                    objCAT.RegWeight = item.RegWeight;
                    objCAT.RegCapacity = item.RegCapacity;
                    objCAT.Lat = item.Lat;
                    objCAT.Lng = item.Lng;
                    objCAT.MinWeight = item.MinWeight;
                    objCAT.MinCapacity = item.MinCapacity;
                    objCAT.GroupOfVehicleID = item.GroupOfVehicleID;

                    var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (objCUS == null)
                    {
                        objCUS = new CUS_Vehicle();
                        objCUS.CreatedBy = Account.UserName;
                        objCUS.CreatedDate = DateTime.Now;
                        objCUS.CAT_Vehicle = objCAT;
                        objCUS.CustomerID = vendorid;
                        model.CUS_Vehicle.Add(objCUS);
                    }
                    model.SaveChanges();

                    return objCUS.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Truck_Delete(DTOCUSVehicle item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    if (model.OPS_DITOMaster.Count(c => c.VehicleID > 0 && c.VehicleID == obj.VehicleID && c.VendorOfVehicleID == obj.CustomerID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Xe đã lập chuyến, không thể xóa");

                    if (model.CUS_Vehicle.Count(c => c.VehicleID == obj.VehicleID) == 1)
                    {
                        var objCAT = model.CAT_Vehicle.FirstOrDefault(c => c.ID == obj.VehicleID);
                        if (objCAT != null)
                            model.CAT_Vehicle.Remove(objCAT);
                    }

                    model.CUS_Vehicle.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Truck_NotInList(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTruck = -(int)SYSVarType.TypeOfVehicleTruck;
                    var listExist = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == iTruck).Select(c => c.VehicleID).ToList();
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == iTruck && !listExist.Contains(c.ID) && c.ID > 2).Select(c => new DTOCATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        Note = c.Note,
                        MaxWeight = c.MaxWeight,
                        MaxCapacity = c.MaxCapacity,
                        RegWeight = c.RegWeight,
                        RegCapacity = c.RegCapacity,
                        MinWeight = c.MinWeight,
                        MinCapacity = c.MinCapacity,
                        GroupOfVehicleName = string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Truck_NotInSave(List<int> lst, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objCUSVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == item && c.CustomerID == vendorid);
                        if (objCUSVehicle == null)
                        {
                            objCUSVehicle = new CUS_Vehicle();
                            objCUSVehicle.CreatedBy = Account.UserName;
                            objCUSVehicle.CreatedDate = DateTime.Now;
                            objCUSVehicle.VehicleID = item;
                            objCUSVehicle.CustomerID = vendorid;
                            model.CUS_Vehicle.Add(objCUSVehicle);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCUSVehicle_Excel> Truck_Export(int customerID, string type)
        {
            try
            {

                List<DTOCUSVehicle_Excel> result = new List<DTOCUSVehicle_Excel>();
                using (var model = new DataEntities())
                {

                    int iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTruck;
                    if (type == "tractor")
                        iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTractor;
                    result = model.CUS_Vehicle.Where(c => c.CustomerID == customerID && c.CAT_Vehicle.TypeOfVehicleID == iTypeOfVehicle && c.VehicleID > 2).Select(c => new DTOCUSVehicle_Excel
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleCode = c.CAT_Vehicle.CAT_GroupOfVehicle.Code,
                    }).ToList();

                }
                return result;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSVehicle_Check Truck_Check(int customerID)
        {
            try
            {
                DTOCUSVehicle_Check result = new DTOCUSVehicle_Check();
                using (var model = new DataEntities())
                {
                    result.lstCATVehicle = model.CAT_Vehicle.Select(c => new DTOCUSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        TypeOfVehicleID = c.TypeOfVehicleID
                    }).ToList();
                    result.lstCUSVehicle = model.CUS_Vehicle.Where(c => c.CustomerID == customerID).Select(c => new DTOCUSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        VehicleID = c.VehicleID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }

        }
        public void Truck_Import(List<DTOCUSVehicle_Excel> lst, int customerid, string type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        int iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTruck;
                        if (type == "tractor")
                            iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTractor;
                        #region Lưu CATVehicle
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.VehicleID);
                        if (obj == null)
                        {
                            obj = new CAT_Vehicle();
                            obj.TypeOfVehicleID = iTypeOfVehicle;
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.RegNo = item.RegNo;
                        obj.Note = item.Note;
                        obj.IsOwn = item.IsOwn;
                        obj.CurrentVendorID = customerid;
                        obj.MaxWeight = item.MaxWeight;
                        obj.MaxCapacity = item.MaxCapacity;
                        obj.RegWeight = item.RegWeight;
                        obj.RegCapacity = item.RegCapacity;
                        obj.Lat = item.Lat;
                        obj.Lng = item.Lng;
                        obj.MinWeight = item.MinWeight;
                        obj.MinCapacity = item.MinCapacity;
                        if (obj.ID < 1)
                            model.CAT_Vehicle.Add(obj);
                        #endregion

                        #region Lưu CUSVehicle
                        var objCUSVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                        if (objCUSVehicle == null)
                        {
                            objCUSVehicle = new CUS_Vehicle();
                            objCUSVehicle.CreatedBy = Account.UserName;
                            objCUSVehicle.CreatedDate = DateTime.Now;
                            objCUSVehicle.CAT_Vehicle = obj;
                            objCUSVehicle.CustomerID = customerid;
                            model.CUS_Vehicle.Add(objCUSVehicle);
                        }
                        #endregion
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public SYSExcel VEN_Truck_ExcelInit(int customerID, string type, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    functionkey = functionkey + customerID.ToString();
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = Truck_Export(customerID, type);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã loại xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col, "Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colWeight = col; col += 3;
                        cells.Add(HelperExcel.NewCell(col, "Số khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colCapacity = col; col += 3;
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        col = colWeight;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        col = colCapacity;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressColumns(0, colWeight, colWeight+2),
                            HelperExcel.AddressColumns(0, colCapacity, colCapacity+2),
                        };
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.RegNo));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfVehicleCode));
                            cells.Add(HelperExcel.NewCell(col++, item.RegWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.RegCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);

                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VEN_Truck_ExcelChange(int customerID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    //DTOCUSVehicle_Check lstGetID = Truck_Check(customerID);
                    var lstCUSVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && !string.IsNullOrEmpty(c.CAT_Vehicle.RegNo) && c.CustomerID == customerID).Select(c => new
                    {
                        c.ID,
                        c.VehicleID,
                        c.CAT_Vehicle.RegNo,
                        c.CAT_Vehicle
                    }).ToList();

                    var lstCATVehicle = model.CAT_Vehicle.Where(c => c.ID > 2 && !string.IsNullOrEmpty(c.RegNo)).Select(c => new
                    {
                        c.ID,
                        c.RegNo,
                        c.TypeOfVehicleID
                    }).ToList();

                    var lstGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new { 
                        c.ID,
                        c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);



                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicle.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 0)
                        {
                           
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCUSVehicle.Where(c => c.RegNo == dataRegNo && c.CAT_Vehicle.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            string IDGroup = "0";
                            var obj = lstGroupOfVehicle.FirstOrDefault(c => c.Code == dataGroupOfVehicle);
                            if (obj != null)
                            {
                                IDGroup = obj.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, IDGroup);
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        if (flag && string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, "0");
                        }

                        if (flag)
                        {
                            var IDCus = "-1";
                            var IDCat = "-1";
                            var objID = lstCUSVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                            if (objID != null)
                            {
                                IDCus = objID.ID.ToString();
                                IDCat = objID.VehicleID.ToString();
                            }
                            else
                            {
                                var objIDCat = lstCATVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                                if (objIDCat != null)
                                    IDCat = objIDCat.ID.ToString();
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, IDCat);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, IDCus);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VEN_Truck_ExcelImport(int customerID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    //DTOCUSVehicle_Check lstGetID = Truck_Check(customerID);
                    var lstCUSVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && !string.IsNullOrEmpty(c.CAT_Vehicle.RegNo) && c.CustomerID == customerID).Select(c => new
                    {
                        c.ID,
                        c.VehicleID,
                        c.CAT_Vehicle.RegNo,
                        c.CAT_Vehicle,
                    }).ToList();

                    var lstCATVehicle = model.CAT_Vehicle.Where(c => c.ID > 2 && !string.IsNullOrEmpty(c.RegNo)).Select(c => new
                    {
                        c.ID,
                        c.RegNo,
                        c.TypeOfVehicleID
                    }).ToList();

                    var lstGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new
                    {
                        c.ID,
                        c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicle.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCUSVehicle.Where(c => c.RegNo == dataRegNo && c.CAT_Vehicle.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTruck).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            string IDGroup = "0";
                            var obj = lstGroupOfVehicle.FirstOrDefault(c => c.Code == dataGroupOfVehicle);
                            if (obj != null)
                            {
                                IDGroup = obj.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, IDGroup);
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        if (flag && string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, "0");
                        }
                        if (flag)
                        {
                            var IDCus = "-1";
                            var IDCat = "-1";
                            var objID = lstCUSVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                            if (objID != null)
                            {
                                IDCus = objID.ID.ToString();
                                IDCat = objID.VehicleID.ToString();
                            }
                            else
                            {
                                var objIDCat = lstCATVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                                if (objIDCat != null)
                                    IDCat = objIDCat.ID.ToString();
                            }

                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, IDCat);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, IDCus);
                            
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VEN_Truck_ExcelApprove(int customerid, string type, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckIDCAT = colData++;
                    int colCheckIDCUS = colData++;
                    int colCheckGroup = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataGroup = HelperExcel.GetString(checkRow, colData++);
                            string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();
                            int assetidCAT = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckIDCAT));
                            int assetidCUS = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckIDCUS));
                            int assetidGroup = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroup));


                            int iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTruck;
                            if (type == "tractor")
                                iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTractor;

                            var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == assetidCAT);
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.TypeOfVehicleID = iTypeOfVehicle;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                 model.CAT_Vehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }


                            obj.RegNo = dataRegNo;
                            obj.RegWeight = !string.IsNullOrEmpty(dataRegWeight) ? Convert.ToDouble(dataRegWeight) : 0; ;
                            obj.MinWeight = !string.IsNullOrEmpty(dataMinWeight) ? Convert.ToDouble(dataMinWeight) : 0;
                            obj.MaxWeight = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            obj.RegCapacity = !string.IsNullOrEmpty(dataRegCapacity) ? Convert.ToDouble(dataRegCapacity) : 0;
                            obj.MinCapacity = !string.IsNullOrEmpty(dataMinCapacity) ? Convert.ToDouble(dataMinCapacity) : 0;
                            obj.MaxCapacity = !string.IsNullOrEmpty(dataMaxCapacity) ? Convert.ToDouble(dataMaxCapacity) : 0;
                            if (assetidGroup > 0)
                                obj.GroupOfVehicleID = assetidGroup;
                            else obj.GroupOfVehicleID = null;

                            var objCUSVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.ID == assetidCUS);
                            if (objCUSVehicle == null)
                            {
                                objCUSVehicle = new CUS_Vehicle();
                                objCUSVehicle.CreatedBy = Account.UserName;
                                objCUSVehicle.CreatedDate = DateTime.Now;
                                objCUSVehicle.CAT_Vehicle = obj;
                                objCUSVehicle.CustomerID = customerid;
                                model.CUS_Vehicle.Add(objCUSVehicle);
                            }
                            model.SaveChanges();

                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Tractor


        public DTOResult CATTractor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfVehicleTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == iTypeOfVehicleTractor).Select(c => new CATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        Note = c.Note,
                        IsOwn = c.IsOwn,
                        CurrentVendorID = c.CurrentVendorID,
                        TypeOfVehicleID = c.TypeOfVehicleID,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        MaxWeight = c.MaxWeight,
                        MaxCapacity = c.MaxCapacity,
                        RegWeight = c.RegWeight,
                        RegCapacity = c.RegCapacity,
                        CurrentRomoocID = c.CurrentRomoocID,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        MinWeight = c.MinWeight,
                        MinCapacity = c.MinCapacity,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSVehicle Tractor_Get(int id)
        {
            try
            {
                DTOCUSVehicle result = new DTOCUSVehicle();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_Vehicle.Where(c => c.ID == id).Select(c => new DTOCUSVehicle
                        {
                            ID = c.ID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            Note = c.CAT_Vehicle.Note,
                            IsOwn = c.CAT_Vehicle.IsOwn,
                            CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                            TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                            TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                            MaxWeight = c.CAT_Vehicle.MaxWeight,
                            MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                            RegWeight = c.CAT_Vehicle.RegWeight,
                            RegCapacity = c.CAT_Vehicle.RegCapacity,
                            CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            MinWeight = c.CAT_Vehicle.MinWeight,
                            MinCapacity = c.CAT_Vehicle.MinCapacity,
                            VehicleID = c.VehicleID,
                            GroupOfVehicleID = c.CAT_Vehicle.GroupOfVehicleID,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.VehicleID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Tractor_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTypeOfTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == iTypeOfTractor && c.VehicleID > 2).Select(c => new DTOCUSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        Note = c.CAT_Vehicle.Note,
                        IsOwn = c.CAT_Vehicle.IsOwn,
                        CurrentVendorID = c.CAT_Vehicle.CurrentVendorID,
                        TypeOfVehicleID = c.CAT_Vehicle.TypeOfVehicleID,
                        TypeOfVehicleName = c.CAT_Vehicle.SYS_Var.ValueOfVar,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        CurrentRomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        VehicleID = c.VehicleID,
                        GroupOfVehicleName = c.CAT_Vehicle.CAT_GroupOfVehicle.GroupName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int Tractor_Save(DTOCUSVehicle item, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int iTypeOfTractor = -(int)SYSVarType.TypeOfVehicleTractor;

                    if (model.CAT_Vehicle.Count(c => c.RegNo.ToUpper() == item.RegNo.ToUpper() && c.ID != item.VehicleID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe đã tồn tại trong hệ thống");

                    var objCAT = model.CAT_Vehicle.Where(c => c.ID == item.VehicleID).FirstOrDefault();

                    if (objCAT == null)
                    {
                        objCAT = new CAT_Vehicle();
                        objCAT.CreatedBy = Account.UserName;
                        objCAT.CreatedDate = DateTime.Now;
                        objCAT.TypeOfVehicleID = iTypeOfTractor;
                        objCAT.RegNo = item.RegNo.ToUpper();
                        objCAT.IsOwn = false;
                        objCAT.CurrentVendorID = vendorid;
                        model.CAT_Vehicle.Add(objCAT);
                    }
                    else
                    {
                        objCAT.ModifiedBy = Account.UserName;
                        objCAT.ModifiedDate = DateTime.Now;
                    }
                    objCAT.Note = item.Note;
                    objCAT.MaxWeight = item.MaxWeight;
                    objCAT.MaxCapacity = item.MaxCapacity;
                    objCAT.RegWeight = item.RegWeight;
                    objCAT.RegCapacity = item.RegCapacity;
                    objCAT.Lat = item.Lat;
                    objCAT.Lng = item.Lng;
                    objCAT.MinWeight = item.MinWeight;
                    objCAT.MinCapacity = item.MinCapacity;
                    objCAT.GroupOfVehicleID = item.GroupOfVehicleID;
                    var objCUS = model.CUS_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (objCUS == null)
                    {
                        objCUS = new CUS_Vehicle();
                        objCUS.CreatedBy = Account.UserName;
                        objCUS.CreatedDate = DateTime.Now;
                        objCUS.CAT_Vehicle = objCAT;
                        objCUS.CustomerID = vendorid;
                        model.CUS_Vehicle.Add(objCUS);
                    }
                    model.SaveChanges();

                    return objCUS.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Tractor_Delete(DTOCUSVehicle item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    if (model.OPS_COTOMaster.Count(c => c.VehicleID > 0 && c.VehicleID == obj.VehicleID && c.VendorOfVehicleID == obj.CustomerID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Xe đã lập chuyến, không thể xóa");

                    if (model.CUS_Vehicle.Count(c => c.VehicleID == obj.VehicleID) == 1)
                    {
                        var objCAT = model.CAT_Vehicle.FirstOrDefault(c => c.ID == obj.VehicleID);
                        if (objCAT != null)
                            model.CAT_Vehicle.Remove(objCAT);
                    }

                    model.CUS_Vehicle.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult Tractor_NotInList(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iTractor = -(int)SYSVarType.TypeOfVehicleTractor;
                    var listExist = model.CUS_Vehicle.Where(c => c.CustomerID == vendorid && c.CAT_Vehicle.TypeOfVehicleID == iTractor).Select(c => c.VehicleID).ToList();
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == iTractor && !listExist.Contains(c.ID) && c.ID > 2).Select(c => new DTOCATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        Note = c.Note,
                        MaxWeight = c.MaxWeight,
                        MaxCapacity = c.MaxCapacity,
                        RegWeight = c.RegWeight,
                        RegCapacity = c.RegCapacity,
                        MinWeight = c.MinWeight,
                        MinCapacity = c.MinCapacity,
                        GroupOfVehicleName = string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATVehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Tractor_NotInSave(List<int> lst, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objCUSVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.VehicleID == item && c.CustomerID == vendorid);
                        if (objCUSVehicle == null)
                        {
                            objCUSVehicle = new CUS_Vehicle();
                            objCUSVehicle.CreatedBy = Account.UserName;
                            objCUSVehicle.CreatedDate = DateTime.Now;
                            objCUSVehicle.VehicleID = item;
                            objCUSVehicle.CustomerID = vendorid;
                            model.CUS_Vehicle.Add(objCUSVehicle);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public SYSExcel VEN_Tractor_ExcelInit(int customerID, string type, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    functionkey = functionkey + customerID.ToString();
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = Truck_Export(customerID, type);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Số xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã loại xe", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col, "Trọng tải", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colWeight = col; col += 3;
                        cells.Add(HelperExcel.NewCell(col, "Số khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        int colCapacity = col; col += 3;
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        cells = new List<Cell>();
                        col = colWeight;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        col = colCapacity;
                        cells.Add(HelperExcel.NewCell(col++, "Đăng kí", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối thiểu", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tối Đa", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressColumns(0, colWeight, colWeight+2),
                            HelperExcel.AddressColumns(0, colCapacity, colCapacity+2),
                        };
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.RegNo));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfVehicleCode)); 
                            cells.Add(HelperExcel.NewCell(col++, item.RegWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxWeight, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.RegCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MinCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            cells.Add(HelperExcel.NewCell(col++, item.MaxCapacity, HelperExcel.ColorBlack, HelperExcel.ColorWhite, HelperExcel.FormatNumber2));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);

                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VEN_Tractor_ExcelChange(int customerID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    //DTOCUSVehicle_Check lstGetID = Truck_Check(customerID);
                    var lstCUSVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && !string.IsNullOrEmpty(c.CAT_Vehicle.RegNo) && c.CustomerID == customerID).Select(c => new
                    {
                        c.ID,
                        c.VehicleID,
                        c.CAT_Vehicle.RegNo,
                        c.CAT_Vehicle
                    }).ToList();

                    var lstCATVehicle = model.CAT_Vehicle.Where(c => c.ID > 2 && !string.IsNullOrEmpty(c.RegNo)).Select(c => new
                    {
                        c.ID,
                        c.RegNo,
                        c.TypeOfVehicleID
                    }).ToList();

                    var lstGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new
                    {
                        c.ID,
                        c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicle.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCUSVehicle.Where(c => c.RegNo == dataRegNo && c.CAT_Vehicle.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            string IDGroup = "0";
                            var obj = lstGroupOfVehicle.FirstOrDefault(c => c.Code == dataGroupOfVehicle);
                            if (obj != null)
                            {
                                IDGroup = obj.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, IDGroup);
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        if (flag && string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, "0");
                        }

                        if (flag)
                        {
                            var IDCus = "-1";
                            var IDCat = "-1";
                            var objID = lstCUSVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                            if (objID != null)
                            {
                                IDCus = objID.ID.ToString();
                                IDCat = objID.VehicleID.ToString();
                            }
                            else
                            {
                                var objIDCat = lstCATVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                                if (objIDCat != null)
                                    IDCat = objIDCat.ID.ToString();
                            }

                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, IDCat);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, IDCus);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VEN_Tractor_ExcelImport(int customerID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckGroup = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    //DTOCUSVehicle_Check lstGetID = Truck_Check(customerID);
                    var lstCUSVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && !string.IsNullOrEmpty(c.CAT_Vehicle.RegNo) && c.CustomerID == customerID).Select(c => new
                    {
                        c.ID,
                        c.VehicleID,
                        c.CAT_Vehicle.RegNo,
                        c.CAT_Vehicle,
                    }).ToList();

                    var lstCATVehicle = model.CAT_Vehicle.Where(c => c.ID > 2 && !string.IsNullOrEmpty(c.RegNo)).Select(c => new
                    {
                        c.ID,
                        c.RegNo,
                        c.TypeOfVehicleID
                    }).ToList();

                    var lstGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new
                    {
                        c.ID,
                        c.Code
                    }).ToList();

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfVehicle = HelperExcel.GetString(checkRow, colData++);
                        string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                        string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                        string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);

                        dataRegNo = dataRegNo.ToUpper();
                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCATVehicle.Where(c => c.RegNo == dataRegNo && c.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCUSVehicle.Where(c => c.RegNo == dataRegNo && c.CAT_Vehicle.TypeOfVehicleID != -(int)SYSVarType.TypeOfVehicleTractor).Count() > 0)
                        {

                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            string IDGroup = "0";
                            var obj = lstGroupOfVehicle.FirstOrDefault(c => c.Code == dataGroupOfVehicle);
                            if (obj != null)
                            {
                                IDGroup = obj.ID.ToString();
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, IDGroup);
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        if (flag && string.IsNullOrEmpty(dataGroupOfVehicle))
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroup, "0");
                        }
                        if (flag)
                        {
                            var IDCus = "-1";
                            var IDCat = "-1";
                            var objID = lstCUSVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                            if (objID != null)
                            {
                                IDCus = objID.ID.ToString();
                                IDCat = objID.VehicleID.ToString();
                            }
                            else
                            {
                                var objIDCat = lstCATVehicle.FirstOrDefault(c => c.RegNo.ToUpper() == dataRegNo);
                                if (objIDCat != null)
                                    IDCat = objIDCat.ID.ToString();
                            }

                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, IDCat);
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, IDCus);
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VEN_Tractor_ExcelApprove(int customerid, string type, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 16;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckIDCAT = colData++;
                    int colCheckIDCUS = colData++;
                    int colCheckGroup = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(checkRow, colData++);
                            string dataGroup = HelperExcel.GetString(checkRow, colData++);
                            string dataRegWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataMinWeight = HelperExcel.GetString(checkRow, colData++);
                            string dataRegCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMaxCapacity = HelperExcel.GetString(checkRow, colData++);
                            string dataMinCapacity = HelperExcel.GetString(checkRow, colData++);

                            dataRegNo = dataRegNo.ToUpper();
                            int assetidCAT = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckIDCAT));
                            int assetidCUS = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckIDCUS));
                            int assetidGroup = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroup));

                            int iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTruck;
                            if (type == "tractor")
                                iTypeOfVehicle = -(int)SYSVarType.TypeOfVehicleTractor;

                            var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == assetidCAT);
                            if (obj == null)
                            {
                                obj = new CAT_Vehicle();
                                obj.TypeOfVehicleID = iTypeOfVehicle;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_Vehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }


                            obj.RegNo = dataRegNo;
                            obj.RegWeight = !string.IsNullOrEmpty(dataRegWeight) ? Convert.ToDouble(dataRegWeight) : 0; ;
                            obj.MinWeight = !string.IsNullOrEmpty(dataMinWeight) ? Convert.ToDouble(dataMinWeight) : 0;
                            obj.MaxWeight = !string.IsNullOrEmpty(dataMaxWeight) ? Convert.ToDouble(dataMaxWeight) : 0;
                            obj.RegCapacity = !string.IsNullOrEmpty(dataRegCapacity) ? Convert.ToDouble(dataRegCapacity) : 0;
                            obj.MinCapacity = !string.IsNullOrEmpty(dataMinCapacity) ? Convert.ToDouble(dataMinCapacity) : 0;
                            obj.MaxCapacity = !string.IsNullOrEmpty(dataMaxCapacity) ? Convert.ToDouble(dataMaxCapacity) : 0;
                            if (assetidGroup > 0)
                                obj.GroupOfVehicleID = assetidGroup;
                            else obj.GroupOfVehicleID = null;


                            var objCUSVehicle = model.CUS_Vehicle.FirstOrDefault(c => c.ID == assetidCUS);
                            if (objCUSVehicle == null)
                            {
                                objCUSVehicle = new CUS_Vehicle();
                                objCUSVehicle.CreatedBy = Account.UserName;
                                objCUSVehicle.CreatedDate = DateTime.Now;
                                objCUSVehicle.CAT_Vehicle = obj;
                                objCUSVehicle.CustomerID = customerid;
                                model.CUS_Vehicle.Add(objCUSVehicle);
                            }
                            model.SaveChanges();

                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Romooc

        public DTOResult CATRomooc_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Romooc.Select(c => new CATRomooc
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        IsOwn = c.IsOwn,
                        CurrentVendorID = c.CurrentVendorID,
                        NoOfDelivery = c.NoOfDelivery,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        //ContainerID = c.ContainerID,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSRomooc Romooc_Get(int id)
        {
            try
            {
                DTOCUSRomooc result = new DTOCUSRomooc();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_Romooc.Where(c => c.ID == id).Select(c => new DTOCUSRomooc
                        {
                            ID = c.ID,
                            RegNo = c.CAT_Romooc.RegNo,
                            IsOwn = c.CAT_Romooc.IsOwn,
                            CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                            NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            //ContainerID = c.CAT_Romooc.ContainerID,
                            RomoocID = c.RomoocID
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.RomoocID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Romooc_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Romooc.Where(c => c.CustomerID == vendorid && c.RomoocID > 1).Select(c => new DTOCUSRomooc
                    {
                        ID = c.ID,
                        RegNo = c.CAT_Romooc.RegNo,
                        IsOwn = c.CAT_Romooc.IsOwn,
                        CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        //ContainerID = c.CAT_Romooc.ContainerID,
                        RomoocID = c.RomoocID
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int Romooc_Save(DTOCUSRomooc item, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (model.CAT_Romooc.Count(c => c.RegNo.ToUpper() == item.RegNo.ToUpper() && c.ID != item.RomoocID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Số xe đã tồn tại trong hệ thống");

                    var objCAT = model.CAT_Romooc.Where(c => c.ID == item.RomoocID).FirstOrDefault();

                    if (objCAT == null)
                    {
                        objCAT = new CAT_Romooc();
                        objCAT.CreatedBy = Account.UserName;
                        objCAT.CreatedDate = DateTime.Now;
                        objCAT.RegNo = item.RegNo.ToUpper();
                        objCAT.IsOwn = false;
                        objCAT.CurrentVendorID = vendorid;
                        objCAT.HasContainer = false;
                        model.CAT_Romooc.Add(objCAT);
                    }
                    else
                    {
                        objCAT.ModifiedBy = Account.UserName;
                        objCAT.ModifiedDate = DateTime.Now;
                    }


                    var objCUS = model.CUS_Romooc.FirstOrDefault(c => c.ID == item.ID);
                    if (objCUS == null)
                    {
                        objCUS = new CUS_Romooc();
                        objCUS.CreatedBy = Account.UserName;
                        objCUS.CreatedDate = DateTime.Now;
                        objCUS.CAT_Romooc = objCAT;
                        objCUS.CustomerID = vendorid;
                        model.CUS_Romooc.Add(objCUS);
                    }
                    model.SaveChanges();

                    return objCUS.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Romooc_Delete(DTOCUSRomooc item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Romooc.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    if (model.OPS_COTOMaster.Count(c => c.RomoocID > 0 && c.RomoocID == obj.RomoocID && c.VendorOfRomoocID == obj.CustomerID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Xe đã lập chuyến, không thể xóa");

                    if (model.CUS_Romooc.Count(c => c.RomoocID == obj.RomoocID) == 1)
                    {
                        var objCAT = model.CAT_Romooc.FirstOrDefault(c => c.ID == obj.RomoocID);
                        if (objCAT != null)
                            model.CAT_Romooc.Remove(objCAT);
                    }

                    model.CUS_Romooc.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Romooc_NotInList(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var listExist = model.CUS_Romooc.Where(c => c.CustomerID == vendorid).Select(c => c.RomoocID).ToList();
                    var query = model.CAT_Romooc.Where(c => !listExist.Contains(c.ID)).Select(c => new CATRomooc
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        IsOwn = c.IsOwn,
                        CurrentVendorID = c.CurrentVendorID,
                        NoOfDelivery = c.NoOfDelivery,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        //ContainerID = c.ContainerID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRomooc>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void Romooc_NotInSave(List<int> lst, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objCUSVehicle = model.CUS_Romooc.FirstOrDefault(c => c.RomoocID == item && c.CustomerID == vendorid);
                        if (objCUSVehicle == null)
                        {
                            objCUSVehicle = new CUS_Romooc();
                            objCUSVehicle.CreatedBy = Account.UserName;
                            objCUSVehicle.CreatedDate = DateTime.Now;
                            objCUSVehicle.RomoocID = item;
                            objCUSVehicle.CustomerID = vendorid;
                            model.CUS_Romooc.Add(objCUSVehicle);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel Romooc_ExcelInit(int vendorid, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CUS_Romooc.Where(c => c.CustomerID == vendorid && c.RomoocID > 1).Select(c => new DTOCUSRomooc
                        {
                            ID = c.ID,
                            RegNo = c.CAT_Romooc.RegNo,
                            IsOwn = c.CAT_Romooc.IsOwn,
                            CurrentVendorID = c.CAT_Romooc.CurrentVendorID,
                            NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            //ContainerID = c.CAT_Romooc.ContainerID,
                            RomoocID = c.RomoocID
                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số xe ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.RegNo));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row Romooc_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstGetID = model.CUS_Romooc.Select(c => new { c.ID, c.CAT_Romooc.RegNo, }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                        {
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo.Trim().ToUpper());
                            if (objID != null)
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel Romooc_ExcelImport(long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CUS_Romooc.Select(c => new { c.ID, c.CAT_Romooc.RegNo }).ToList();
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataRegNo = HelperExcel.GetString(checkRow, colData++);

                        if (flag)
                            flag = HelperExcel.Valid(dataRegNo, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && !(new Regex(@"[a-zA-Z0-9]{3,4}[-][a-zA-Z0-9.]{3,7}")).IsMatch(dataRegNo))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataRegNo).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            var valid = "-1";
                            var objID = lstGetID.FirstOrDefault(c => c.RegNo == dataRegNo.Trim());
                            if (objID != null)
                                valid = objID.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, valid);
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool Romooc_ExcelApprove(int vendorid, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataRegNo = HelperExcel.GetString(eRow, colData++);
                            string dataID = HelperExcel.GetString(eRow, colCheckID);

                            int remoocid = Convert.ToInt32(dataID);

                            var objCAT = model.CAT_Romooc.Where(c => c.ID == remoocid).FirstOrDefault();

                            if (objCAT == null)
                            {
                                objCAT = new CAT_Romooc();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.RegNo = dataRegNo.ToUpper();
                                objCAT.IsOwn = false;
                                objCAT.CurrentVendorID = vendorid;
                                objCAT.HasContainer = false;
                                model.CAT_Romooc.Add(objCAT);
                            }
                            else
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }
                            var objCUS = model.CUS_Romooc.FirstOrDefault(c => c.ID == remoocid);
                            if (objCUS == null)
                            {
                                objCUS = new CUS_Romooc();
                                objCUS.CreatedBy = Account.UserName;
                                objCUS.CreatedDate = DateTime.Now;
                                objCUS.CAT_Romooc = objCAT;
                                objCUS.CustomerID = vendorid;
                                model.CUS_Romooc.Add(objCUS);
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Routing
        public DTOResult Routing_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Routing.Where(c => c.CustomerID == vendorid).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        RoutingID = c.RoutingID,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingParentID = c.CAT_Routing.ParentID,
                        Note = c.CAT_Routing.Note
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void Routing_Delete(DTOCUSRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CUS_Routing.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingCusNotIn_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMyRouting = model.CUS_Routing.Where(c => c.CustomerID == vendorid).Select(c => c.RoutingID).ToList();
                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == vendorid && c.CustomerRelateID != vendorid).Select(c => c.CustomerRelateID).ToList();
                    var lstCusRouting = model.CUS_Routing.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => c.RoutingID).Distinct().ToList();

                    var query = model.CAT_Routing.Where(c => !lstMyRouting.Contains(c.ID) && c.Code != string.Empty && lstCusRouting.Contains(c.ID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        IsChoose = false,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RoutingNotIn_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMyRouting = model.CUS_Routing.Where(c => c.CustomerID == vendorid).Select(c => c.RoutingID).ToList();

                    var query = model.CAT_Routing.Where(c => !lstMyRouting.Contains(c.ID) && c.Code != string.Empty).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        IsChoose = false,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public void RoutingNotIn_SaveList(List<DTOCATRouting> lst, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        if (model.CUS_Routing.Count(c => c.CustomerID == vendorid && c.RoutingID == item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập trước đó!");

                        CUS_Routing obj = new CUS_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = vendorid;
                        obj.RoutingID = item.ID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        model.CUS_Routing.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Cập nhật thêm routing của tất cả đối tác
        /// </summary>
        /// <param name="vendorid"></param>
        public void Routing_Update(int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == vendorid && c.CustomerRelateID != vendorid).Select(c => c.CustomerRelateID).Distinct().ToList();
                    var lstRoutingID = model.CUS_Routing.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => c.RoutingID).Distinct().ToList();
                    var lstExistID = model.CUS_Routing.Where(c => c.CustomerID == vendorid && lstRoutingID.Contains(c.RoutingID)).Select(c => c.RoutingID).Distinct().ToList();
                    foreach (var routingID in lstRoutingID.Where(c => !lstExistID.Contains(c)))
                    {
                        CUS_Routing obj = new CUS_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = vendorid;
                        obj.RoutingID = routingID;
                        model.CUS_Routing.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Driver
        public DTOResult VENDriver_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Driver.Where(c => c.CustomerID == vendorid).Select(c => new DTOVENDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        Code = c.CAT_Driver.Code,
                        LastName = c.CAT_Driver.LastName,
                        FirstName = c.CAT_Driver.FirstName,
                        Birthday = c.CAT_Driver.Birthday,
                        CardNumber = c.CAT_Driver.CardNumber,
                        ListDrivingLicence = c.CAT_Driver.ListDrivingLicence,
                        Note = c.CAT_Driver.Note,
                        Cellphone = c.CAT_Driver.Cellphone,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOVENDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOVENDriver VENDriver_Get(int id)
        {
            try
            {
                DTOVENDriver result = new DTOVENDriver();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CUS_Driver.Where(c => c.ID == id).Select(c => new DTOVENDriver
                     {
                         ID = c.ID,
                         DriverID = c.DriverID,
                         //Code = c.CAT_Driver.Code,
                         LastName = c.CAT_Driver.LastName,
                         FirstName = c.CAT_Driver.FirstName,
                         Birthday = c.CAT_Driver.Birthday,
                         CardNumber = c.CAT_Driver.CardNumber,
                         ListDrivingLicence = c.CAT_Driver.ListDrivingLicence,
                         Note = c.CAT_Driver.Note,
                         Cellphone = c.CAT_Driver.Cellphone,
                     }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.DriverID = 0;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENDriver_Save(DTOVENDriver item, int vendorID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    if (model.CAT_Driver.Count(c => c.CardNumber == item.CardNumber && c.ID != item.ID) > 1)
                        throw FaultHelper.BusinessFault(null, null, "Số CMND [" + item.CardNumber + "] đã tồn tại trong hệ thống");
                    var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                    if (objCAT == null)
                    {
                        objCAT = new CAT_Driver();
                        objCAT.CreatedBy = Account.UserName;
                        objCAT.CreatedDate = DateTime.Now;
                        objCAT.CardNumber = item.CardNumber;
                        objCAT.Code = item.CardNumber;
                        model.CAT_Driver.Add(objCAT);
                    }
                    else
                    {
                        objCAT.ModifiedBy = Account.UserName;
                        objCAT.ModifiedDate = DateTime.Now;
                    }
                    objCAT.LastName = item.LastName;
                    objCAT.FirstName = item.FirstName;
                    objCAT.ListDrivingLicence = item.ListDrivingLicence;
                    objCAT.Birthday = item.Birthday;
                    objCAT.Cellphone = item.Cellphone;
                    objCAT.Note = item.Note;

                    var objCus = model.CUS_Driver.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (objCus == null)
                    {
                        objCus = new CUS_Driver();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = vendorID;
                        objCus.CAT_Driver = objCAT;
                        model.CUS_Driver.Add(objCus);
                    }
                    else
                    {
                        objCus.ModifiedBy = Account.UserName;
                        objCus.ModifiedDate = DateTime.Now;
                    }

                    model.SaveChanges();
                    return objCus.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENDriver_Delete(DTOVENDriver item)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    var objCus = model.CUS_Driver.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (objCus != null)
                        model.CUS_Driver.Remove(objCus);
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy tài xế");
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOVENDriverData VENDriver_Data(int vendorid)
        {
            try
            {
                DTOVENDriverData result = new DTOVENDriverData();
                result.ListCATDriver = new List<DTOVENDriver>();
                result.ListCUSDriver = new List<DTOVENDriver>();
                result.ListDriverLicence = new List<DTOCATDriverLicence>();
                result.ListDrivingLicence = new List<DTOCATDrivingLicence>();
                using (var model = new DataEntities())
                {
                    result.ListCUSDriver = model.CUS_Driver.Where(c => c.CustomerID == vendorid).Select(c => new DTOVENDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        Code = c.CAT_Driver.Code,
                        CardNumber = c.CAT_Driver.CardNumber,
                    }).ToList();

                    result.ListCATDriver = model.CAT_Driver.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOVENDriver
                    {
                        ID = c.ID,
                        DriverID = c.ID,
                        Code = c.Code,
                        CardNumber = c.CardNumber,
                    }).ToList();
                    result.ListDrivingLicence = model.CAT_DrivingLicence.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATDrivingLicence
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DrivingLicenceName = c.DrivingLicenceName
                    }).ToList();

                    result.ListDriverLicence = model.CAT_DriverLicence.Select(c => new DTOCATDriverLicence
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            DrivingLicenceID = c.DrivingLicenceID,
                            DrivingLicenceNumber = c.DrivingLicenceNumber
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENDriver_Import(List<DTOVENDriverImport> lst, int vendorID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst.Where(c => c.ExcelSuccess))
                    {
                        if (model.CAT_Driver.Count(c => c.CardNumber == item.CardNumber && c.ID != item.ID) > 1)
                            throw FaultHelper.BusinessFault(null, null, "Số CMND [" + item.CardNumber + "] đã tồn tại trong hệ thống");
                        var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                        if (objCAT == null)
                        {
                            objCAT = new CAT_Driver();
                            objCAT.CreatedBy = Account.UserName;
                            objCAT.CreatedDate = DateTime.Now;
                            objCAT.CardNumber = item.CardNumber;
                            objCAT.Code = item.CardNumber;
                            model.CAT_Driver.Add(objCAT);
                        }
                        else
                        {
                            objCAT.ModifiedBy = Account.UserName;
                            objCAT.ModifiedDate = DateTime.Now;
                        }
                        objCAT.LastName = item.LastName;
                        objCAT.FirstName = item.FirstName;
                        objCAT.Birthday = item.Birthday;
                        objCAT.Cellphone = item.Cellphone;
                        objCAT.Note = item.Note;

                        var objCus = model.CUS_Driver.Where(c => c.ID == item.ID).FirstOrDefault();
                        if (objCus == null)
                        {
                            objCus = new CUS_Driver();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Driver = objCAT;
                            model.CUS_Driver.Add(objCus);
                        }
                        else
                        {
                            objCus.ModifiedBy = Account.UserName;
                            objCus.ModifiedDate = DateTime.Now;
                        }
                        //list bang lai
                        if (item.ListDriverLicence != null && item.ListDriverLicence.Count > 0)
                        {
                            foreach (var licence in item.ListDriverLicence)
                            {
                                var objLicence = objCAT.CAT_DriverLicence.FirstOrDefault(c => c.ID == licence.ID);
                                if (objLicence == null)
                                {
                                    objLicence = new CAT_DriverLicence();
                                    objLicence.CreatedDate = DateTime.Now;
                                    objLicence.CreatedBy = Account.UserName;
                                    objLicence.DrivingLicenceID = licence.DrivingLicenceID;
                                    objLicence.CAT_Driver = objCAT;
                                    model.CAT_DriverLicence.Add(objLicence);
                                }
                                else
                                {
                                    objLicence.ModifiedDate = DateTime.Now;
                                    objLicence.ModifiedBy = Account.UserName;
                                }
                                objLicence.DrivingLicenceNumber = licence.DrivingLicenceNumber;
                            }
                        }
                        // save 
                        model.SaveChanges();
                        List<string> lstCode = new List<string>();
                        var lstID = objCAT.CAT_DriverLicence.Select(c => c.DrivingLicenceID).Distinct().ToList();
                        lstCode = model.CAT_DrivingLicence.Where(c => lstID.Contains(c.ID)).Select(c => c.Code).ToList();
                        objCAT.ListDrivingLicence = lstCode.Count > 0 ? string.Join(",", lstCode) : string.Empty;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENDriver_NotInList(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var listID = model.CUS_Driver.Where(c => c.CustomerID == vendorid).Select(c => c.DriverID).ToList();
                    var query = model.CAT_Driver.Where(c => !listID.Contains(c.ID)).Select(c => new DTOVENDriver
                    {
                        ID = c.ID,
                        DriverID = c.ID,
                        Code = c.Code,
                        LastName = c.LastName,
                        FirstName = c.FirstName,
                        Birthday = c.Birthday,
                        CardNumber = c.CardNumber,
                        ListDrivingLicence = c.ListDrivingLicence,
                        Note = c.Note,
                        Cellphone = c.Code,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOVENDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENDriver_NotInSave(List<DTOVENDriver> lst, int vendorID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst)
                    {
                        var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == item.DriverID);
                        if (objCAT == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy tài xế");
                        else
                        {
                            CUS_Driver objCus = new CUS_Driver();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = vendorID;
                            objCus.CAT_Driver = objCAT;
                            model.CUS_Driver.Add(objCus);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOVENDriverImport> VENDriver_ExportByVendor(int vendorid)
        {
            try
            {
                List<DTOVENDriverImport> result = new List<DTOVENDriverImport>();
                using (var model = new DataEntities())
                {
                    var data = model.CUS_Driver.Where(c => c.CustomerID == vendorid).ToList();
                    foreach (var item in data)
                    {
                        DTOVENDriverImport obj = new DTOVENDriverImport();
                        obj.ID = item.ID;
                        obj.DriverID = item.DriverID;
                        obj.Code = item.CAT_Driver.Code;
                        obj.LastName = item.CAT_Driver.LastName;
                        obj.FirstName = item.CAT_Driver.FirstName;
                        obj.Birthday = item.CAT_Driver.Birthday;
                        obj.CardNumber = item.CAT_Driver.CardNumber;
                        obj.Note = item.CAT_Driver.Note;
                        obj.Cellphone = item.CAT_Driver.Cellphone;
                        obj.ListDriverLicence = new List<DTOCATDriverLicence>();

                        var driverLicense = item.CAT_Driver.CAT_DriverLicence.OrderByDescending(c => c.CreatedDate).FirstOrDefault();
                        if (driverLicense != null)
                        {
                            DTOCATDriverLicence objLicence = new DTOCATDriverLicence();
                            objLicence.ID = driverLicense.ID;
                            objLicence.DrivingLicenceID = driverLicense.DrivingLicenceID;
                            objLicence.DrivingLicenceCode = driverLicense.CAT_DrivingLicence.Code;
                            objLicence.DrivingLicenceName = driverLicense.CAT_DrivingLicence.DrivingLicenceName;
                            objLicence.DrivingLicenceNumber = driverLicense.DrivingLicenceNumber;
                            obj.ListDriverLicence.Add(objLicence);
                        }
                        result.Add(obj);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENDriver_DrivingLicence_List(string request, int driverID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_DriverLicence.Where(c => c.DriverID == driverID).Select(c => new DTOCATDriverLicence
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        DrivingLicenceID = c.DrivingLicenceID,
                        DrivingLicenceName = c.CAT_DrivingLicence.DrivingLicenceName,
                        Note = c.Note,
                        ExpiredDate = c.ExpiredDate,
                        IsUse = c.IsUse,
                        DrivingLicenceNumber = c.DrivingLicenceNumber
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATDriverLicence>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATDriverLicence VENDriver_DrivingLicence_Get(int id)
        {
            try
            {
                DTOCATDriverLicence result = new DTOCATDriverLicence();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_DriverLicence.Where(c => c.ID == id).Select(c => new DTOCATDriverLicence
                        {
                            ID = c.ID,
                            DriverID = c.DriverID,
                            DrivingLicenceID = c.DrivingLicenceID,
                            DrivingLicenceName = c.CAT_DrivingLicence.DrivingLicenceName,
                            Note = c.Note,
                            ExpiredDate = c.ExpiredDate,
                            IsUse = c.IsUse,
                            DrivingLicenceNumber = c.DrivingLicenceNumber
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.DrivingLicenceID = 0;
                        var obj = model.CAT_DrivingLicence.FirstOrDefault();
                        if (obj != null) result.DrivingLicenceID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENDriver_DrivingLicence_Save(DTOCATDriverLicence item, int driverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_DriverLicence.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    else
                    {
                        obj = new CAT_DriverLicence();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DriverID = driverID;
                        model.CAT_DriverLicence.Add(obj);
                    }
                    obj.DrivingLicenceID = item.DrivingLicenceID;
                    obj.DrivingLicenceNumber = item.DrivingLicenceNumber;
                    obj.ExpiredDate = item.ExpiredDate;
                    obj.IsUse = item.IsUse;
                    obj.Note = item.Note;

                    model.SaveChanges();

                    //update
                    var driver = model.CAT_Driver.FirstOrDefault(c => c.ID == driverID);
                    if (driver != null)
                    {
                        List<string> lstCode = new List<string>();
                        var lst = driver.CAT_DriverLicence.Where(c => c.IsUse).Select(c => c.DrivingLicenceID).Distinct().ToList();
                        lstCode = model.CAT_DrivingLicence.Where(c => lst.Contains(c.ID)).Select(c => c.Code).ToList();
                        driver.ListDrivingLicence = lstCode.Count > 0 ? string.Join(",", lstCode) : string.Empty;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENDriver_DrivingLicence_Delete(DTOCATDriverLicence item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.CAT_DriverLicence.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        int id = obj.DriverID;

                        model.CAT_DriverLicence.Remove(obj);
                        model.SaveChanges();
                        var driver = model.CAT_Driver.FirstOrDefault(c => c.ID == id);
                        if (driver != null)
                        {
                            driver.ListDrivingLicence = string.Join(",", driver.CAT_DriverLicence.Select(c => c.CAT_DrivingLicence.Code).ToList());
                            model.SaveChanges();
                        }
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không thấy bằng lái của tài xế");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VEN_Driver_ExcelInit(int vendorid, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENDriver_ExportByVendor(vendorid);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[16];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 16; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }

                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell("STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số CMND", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Họ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Tên", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số điện thoại", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ngày sinh", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Loại bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Số bằng lái", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell("Ghi chú", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(item.CardNumber));
                            cells.Add(HelperExcel.NewCell(item.LastName));
                            cells.Add(HelperExcel.NewCell(item.FirstName));
                            cells.Add(HelperExcel.NewCell(item.Cellphone));
                            cells.Add(HelperExcel.NewCell(String.Format("{0:dd/MM/yyyy HH:mm}", item.Birthday)));
                            if (item.ListDriverLicence != null && item.ListDriverLicence.Count() > 0)
                            {
                                DTOCATDriverLicence driverLicence = item.ListDriverLicence.FirstOrDefault();
                                cells.Add(HelperExcel.NewCell(driverLicence.DrivingLicenceCode));
                                cells.Add(HelperExcel.NewCell(driverLicence.DrivingLicenceNumber));
                            }
                            else
                            {
                                cells.Add(HelperExcel.NewCell(""));
                                cells.Add(HelperExcel.NewCell(""));
                            }
                            cells.Add(HelperExcel.NewCell(item.Note));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row VEN_Driver_ExcelChange(int vendorid, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckDriverID = colData++;
                    int colCheckID = colData++;
                    int colCheckLicenceID = colData++;
                    int colCheckLicencningID = colData++;


                    int failMax = 2;
                    int failCurrent = 0;

                    var lstDriver_Data = VENDriver_Data(vendorid);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCMND = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataPhoneNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataBirthday = HelperExcel.GetString(checkRow, colData++);
                        string dataDrivingLicenceCode = HelperExcel.GetString(checkRow, colData++);
                        string dataDrivingLicenceNumber = HelperExcel.GetString(checkRow, colData++);


                        if (flag)
                            flag = HelperExcel.Valid(dataCMND, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCMND).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBirthday, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDrivingLicenceCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDrivingLicenceNumber, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        indexError++;
                        if (flag)
                        {
                            var drivingLicence = lstDriver_Data.ListDrivingLicence.FirstOrDefault(c => c.Code == dataDrivingLicenceCode);
                            if (drivingLicence != null)
                            {

                                //get DriverID
                                var driverCAT = lstDriver_Data.ListCATDriver.FirstOrDefault(c => c.CardNumber == dataCMND);
                                int driverID = 0;
                                if (driverCAT != null)
                                {
                                    driverID = driverCAT.DriverID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckDriverID, driverCAT.DriverID.ToString());
                                }
                                else
                                {
                                    driverID = 0;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckDriverID, "0");
                                }

                                var driverCUS = lstDriver_Data.ListCUSDriver.FirstOrDefault(c => c.CardNumber == dataCMND);
                                if (driverCUS != null)
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, driverCUS.ID.ToString());
                                else
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, "0");

                                //get driverLicence 
                                var driverLicence = lstDriver_Data.ListDriverLicence.FirstOrDefault(c => c.DrivingLicenceID == drivingLicence.ID && c.DriverID == driverID);
                                if (driverLicence != null)
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicenceID, driverLicence.ID.ToString());
                                }
                                else
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicenceID, "0");
                                }
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicencningID, drivingLicence.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VEN_Driver_ExcelImport(int vendorid, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckDriverID = colData++;
                    int colCheckID = colData++;
                    int colCheckLicenceID = colData++;
                    int colCheckLicencningID = colData++;
                    int rowEnd = lst.Count;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstDriver_Data = VENDriver_Data(vendorid);
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 1;
                        int indexError = 0;
                        bool flag = true;
                        string dataCMND = HelperExcel.GetString(checkRow, colData++);
                        string dataLastName = HelperExcel.GetString(checkRow, colData++);
                        string dataFirstName = HelperExcel.GetString(checkRow, colData++);
                        string dataPhoneNumber = HelperExcel.GetString(checkRow, colData++);
                        string dataBirthday = HelperExcel.GetString(checkRow, colData++);
                        string dataDrivingLicenceCode = HelperExcel.GetString(checkRow, colData++);
                        string dataDrivingLicenceNumber = HelperExcel.GetString(checkRow, colData++);


                        if (flag)
                            flag = HelperExcel.Valid(dataCMND, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag && lstCode.Where(c => c == dataCMND).Count() > 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataLastName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataFirstName, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataBirthday, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDrivingLicenceCode, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                            flag = HelperExcel.Valid(dataDrivingLicenceNumber, HelperExcel.ValidType.DateTime, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                        indexError++;
                        if (flag)
                        {
                            var drivingLicence = lstDriver_Data.ListDrivingLicence.FirstOrDefault(c => c.Code == dataDrivingLicenceCode);
                            if (drivingLicence != null)
                            {

                                //get DriverID
                                var driverCAT = lstDriver_Data.ListCATDriver.FirstOrDefault(c => c.CardNumber == dataCMND);
                                int driverID = 0;
                                if (driverCAT != null)
                                {
                                    driverID = driverCAT.DriverID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckDriverID, driverCAT.DriverID.ToString());
                                }
                                else
                                {
                                    driverID = 0;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckDriverID, "0");
                                }

                                var driverCUS = lstDriver_Data.ListCUSDriver.FirstOrDefault(c => c.CardNumber == dataCMND);
                                if (driverCUS != null)
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, driverCUS.ID.ToString());
                                else
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, "0");

                                //get driverLicence 
                                var driverLicence = lstDriver_Data.ListDriverLicence.FirstOrDefault(c => c.DrivingLicenceID == drivingLicence.ID && c.DriverID == driverID);
                                if (driverLicence != null)
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicenceID, drivingLicence.ID.ToString());
                                }
                                else
                                {
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicenceID, "0");
                                }
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLicencningID, drivingLicence.ID.ToString());
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VEN_Driver_ExcelApprove(int vendorid, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 9;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckDriverID = colData++;
                    int colCheckID = colData++;
                    int colCheckLicenceID = colData++;
                    int colCheckLicencningID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            colData = 1;
                            string dataCMND = HelperExcel.GetString(eRow, colData++);
                            string dataLastName = HelperExcel.GetString(eRow, colData++);
                            string dataFirstName = HelperExcel.GetString(eRow, colData++);
                            string dataPhoneNumber = HelperExcel.GetString(eRow, colData++);
                            string dataBirthday = HelperExcel.GetString(eRow, colData++);
                            string dataDrivingLicenceCode = HelperExcel.GetString(eRow, colData++);
                            string dataDrivingLicenceNumber = HelperExcel.GetString(eRow, colData++);
                            string dataNote = HelperExcel.GetString(eRow, colData++);

                            string DriverID = HelperExcel.GetString(eRow, colCheckDriverID);
                            string ObjID = HelperExcel.GetString(eRow, colCheckID);
                            string LicenceID = HelperExcel.GetString(eRow, colCheckLicenceID);
                            string LiceningID = HelperExcel.GetString(eRow, colCheckLicencningID);


                            int getDriverID = Convert.ToInt32(DriverID);
                            int getObjID = Convert.ToInt32(ObjID);
                            int getLicenceID = Convert.ToInt32(LicenceID);
                            int getLiceningID = Convert.ToInt32(LiceningID);


                            var objCAT = model.CAT_Driver.FirstOrDefault(c => c.ID == getDriverID);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Driver();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;
                                objCAT.CardNumber = dataCMND;
                                objCAT.Code = dataCMND;
                                model.CAT_Driver.Add(objCAT);
                            }
                            else
                            {
                                objCAT.ModifiedBy = Account.UserName;
                                objCAT.ModifiedDate = DateTime.Now;
                            }

                            objCAT.LastName = dataLastName;
                            objCAT.FirstName = dataFirstName;
                            objCAT.Birthday = HelperExcel.ValueToDateVN(dataBirthday);
                            objCAT.Cellphone = dataPhoneNumber;
                            objCAT.Note = dataNote;

                            var objCus = model.CUS_Driver.Where(c => c.ID == getObjID).FirstOrDefault();
                            if (objCus == null)
                            {
                                objCus = new CUS_Driver();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.CustomerID = vendorid;
                                objCus.CAT_Driver = objCAT;
                                model.CUS_Driver.Add(objCus);
                            }
                            else
                            {
                                objCus.ModifiedBy = Account.UserName;
                                objCus.ModifiedDate = DateTime.Now;
                            }

                            // bang lai
                            var objLicence = objCAT.CAT_DriverLicence.FirstOrDefault(c => c.ID == getLicenceID);
                            if (objLicence == null)
                            {
                                objLicence = new CAT_DriverLicence();
                                objLicence.CreatedDate = DateTime.Now;
                                objLicence.CreatedBy = Account.UserName;
                                objLicence.DrivingLicenceID = getLiceningID;
                                objLicence.CAT_Driver = objCAT;
                                model.CAT_DriverLicence.Add(objLicence);
                            }
                            else
                            {
                                objLicence.ModifiedDate = DateTime.Now;
                                objLicence.ModifiedBy = Account.UserName;
                            }
                            objLicence.DrivingLicenceNumber = dataDrivingLicenceNumber;
                            // save 
                            model.SaveChanges();
                            List<string> lstCode = new List<string>();
                            var lstID = objCAT.CAT_DriverLicence.Select(c => c.DrivingLicenceID).Distinct().ToList();
                            lstCode = model.CAT_DrivingLicence.Where(c => lstID.Contains(c.ID)).Select(c => c.Code).ToList();
                            objCAT.ListDrivingLicence = lstCode.Count > 0 ? string.Join(",", lstCode) : string.Empty;
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region danh sách địa chỉ
        public DTOResult VENLocation_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_List(model, Account, vendorid, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENLocationSaveLoad_List(List<DTOCUSLocationInVEN> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst)
                    {
                        var obj = model.CUS_Location.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.IsVendorLoad = item.IsVendorLoad;
                            obj.IsVendorUnLoad = item.IsVendorUnLoad;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENLocation_SaveList(int vendorid, List<CATLocation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSLocation_SaveList(model, Account, vendorid, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENLocation_Delete(int cuslocationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.CUSLocation_Delete(model, Account, cuslocationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public AddressSearchItem AddressSearch_List(int id)
        {
            try
            {
                var result = new AddressSearchItem();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.ID == id).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<AddressSearchItem> AddressSearch_ByCustomerList(int Vendorid)
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.CustomerID == Vendorid).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENLocation_NotInList(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_NotInList(model, Account, vendorid, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel VENLocation_ExcelInit(int functionid, string functionkey, bool isreload, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int IsBl = 1;
                    return HelperRouting.CUSLocation_ExcelInit(model, Account, functionid, functionkey, isreload, customerid, IsBl);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public Row VENLocation_ExcelChange(long id, int row, List<Cell> cells, List<string> lstMessageError, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    return HelperRouting.CUSLocation_ExcelChange(model, Account, id, row, cells, lstMessageError, customerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel VENLocation_ExcelImport(long id, List<Row> lst, List<string> lstMessageError, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    return HelperRouting.CUSLocation_ExcelImport(model, Account, id, lst, lstMessageError, customerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public bool VENLocation_ExcelApprove(long id, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int IsBl = 1;
                    return HelperRouting.CUSLocation_ExcelApprove(model, Account, id, customerid, IsBl);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENLocation_HasRun(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperRouting.CUSLocation_HasRun(model, Account, vendorid, request);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        // -----
        public DTOResult VENLocation_RoutingContract_List(string request, int customerid, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_List(model, Account, request, customerid, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENLocation_RoutingContract_SaveList(List<int> lstAreaClear, List<int> lstAreaAdd, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_SaveList(model, Account, lstAreaClear, lstAreaAdd, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENLocation_RoutingContract_NewRoutingSave(DTOCUSPartnerNewRouting item, int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_NewRoutingSave(model, Account, item, customerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPartnerNewRouting VENLocation_RoutingContract_NewRoutingGet(int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_NewRoutingGet(model, Account, customerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCATContract> VENLocation_RoutingContract_ContractData(int customerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_ContractData(model, Account, customerid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENLocation_RoutingContract_NewAreaSave(CATRoutingArea item, int locationid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperRouting.RoutingContract_NewAreaSave(model, Account, item, locationid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENLocation_RoutingContract_AreaList(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    return HelperRouting.RoutingContract_AreaList(model, Account, request);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region GroupOfProduct
        /// <summary>
        /// Lấy tất cả danh sách Nhóm sản phẩm
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult GroupOfProductAll_List(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        ParentID = c.ParentID,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lấy danh sách các nhóm sản phẩm của một khách hàng
        /// </summary>
        /// <param name="request">Request</param>
        /// <param name="vendorid">ID khách hàng</param>
        /// <returns></returns>
        public DTOResult GroupOfProduct_List(string request, int vendorid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == vendorid).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        BiddingGroupOfProductName = c.CAT_GroupOfProduct.GroupOfProduct,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        ParentID = c.ParentID,
                        ParentName = c.CUS_GroupOfProduct2.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu thông tin nhóm sản phẩm
        /// </summary>
        /// <param name="item">Nhóm sản phẩm</param>
        /// <param name="vendorid">ID Khách hàng</param>
        /// <returns></returns>
        public int GroupOfProduct_Save(DTOCUSGroupOfProduct item, int vendorid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Code
                    var objCheck = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == vendorid && c.Code == item.Code && c.ID != item.ID);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");
                    #endregion

                    var obj = model.CUS_GroupOfProduct.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CUS_GroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.CustomerID = vendorid;
                        #region Kiểm tra parentID
                        if (item.ParentID != null)
                        {
                            // Kiểm tra group parent đã có con chưa? Nếu có ko cho thay đổi
                            var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                            if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                                throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild, "Parent has childs");
                        }
                        #endregion
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        #region Kiểm tra parentID
                        // Thay đổi parentID
                        if (item.ParentID != obj.ParentID)
                        {
                            // Trở thành group con của group khác
                            if (item.ParentID != null)
                            {
                                // Kiểm tra group parent mới đã có con chưa? Nếu có ko cho thay đổi
                                var lstProductOfParent = model.CUS_Product.Where(c => c.GroupOfProductID == item.ParentID);
                                if (lstProductOfParent != null && lstProductOfParent.Count() > 0)
                                    throw FaultHelper.BusinessFault(DTOErrorString.DAT_HasChild, "Parent has childs");
                            }
                        }
                        #endregion
                    }
                    obj.BiddingGroupOfProductID = item.BiddingGroupOfProductID;
                    obj.Code = item.Code;
                    obj.GroupName = item.GroupName;
                    obj.Level = 1;
                    obj.ParentID = item.ParentID;
                    obj.PriceOfGOPID = item.PriceOfGOPID;
                    if (obj.ID < 1)
                        model.CUS_GroupOfProduct.Add(obj);

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa thông tin nhóm sản phẩm
        /// </summary>
        /// <param name="item">Nhóm sản phẩm</param>
        public void GroupOfProduct_Delete(DTOCUSGroupOfProduct item)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        foreach (var child in model.CUS_Product.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_Product.Remove(child);
                        }
                        foreach (var child in model.CUS_GroupOfProductInStock.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CUS_GroupOfProductInStock.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.GroupOfProductID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        model.CUS_GroupOfProduct.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CUSGroupOfProduct GroupOfProduct_GetByCode(string Code, int vendorid)
        {
            CUSGroupOfProduct result = new CUSGroupOfProduct();
            using (var model = new DataEntities())
            {
                using (var helper = new CopyHelper())
                {
                    CUS_GroupOfProduct obj = model.CUS_GroupOfProduct.FirstOrDefault(c => c.Code == Code && c.CustomerID == vendorid);
                    if (obj != null)
                    {
                        helper.Copy(obj, result);
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Cập nhật lại tất cả nhóm sản phẩm cho PriceTruckLoadingSet và PriceMOQLevelDetail
        /// </summary>
        /// <param name="vendorid"></param>
        public void GroupOfProduct_ResetPrice(int vendorid)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == vendorid && c.CUS_GroupOfProduct1.Count() == 0);

                    #region Kiểm tra xem Nhóm sản phẩm có được thiết lập đơn vị tính hay chưa
                    var objCheck = lstGroupOfProduct.FirstOrDefault(c => c.PriceOfGOPID == null);
                    if (objCheck != null)
                        throw FaultHelper.BusinessFault(DTOErrorString.DAT_Require, "");
                    #endregion

                    if (lstGroupOfProduct != null)
                    {
                        var lstGroupOfProductID = lstGroupOfProduct.Select(c => c.ID).ToList();

                        #region Cập nhật cho PriceTruckLoadingSet
                        var lstPriceTruckLoadingSet = model.CAT_PriceDILoadDetail.Where(c => c.CAT_PriceDILoad.CAT_Price.CAT_ContractTerm.CAT_Contract.CustomerID == vendorid);
                        foreach (var detail in lstPriceTruckLoadingSet)
                        {
                            var lstExistID = model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == detail.ID).Select(c => c.GroupOfProductID).ToList();
                            var lstNew = lstGroupOfProductID.Where(c => !lstExistID.Contains(c));
                            foreach (var item in lstNew)
                            {
                                CAT_PriceDILoadDetail objDetail = new CAT_PriceDILoadDetail();
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.PriceDILoadID = detail.ID;
                                objDetail.GroupOfProductID = item;
                                objDetail.PriceOfGOPID = lstGroupOfProduct.FirstOrDefault(c => c.ID == item).PriceOfGOPID;
                                model.CAT_PriceDILoadDetail.Add(objDetail);
                            }
                        }
                        #endregion


                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfProductMapping_List(string request, int groupOfProductID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProductMapping.Where(c => c.GroupOfProductVENID == groupOfProductID).Select(c => new DTOCUSGroupOfProductMapping
                    {
                        ID = c.ID,
                        SYSCustomerID = c.SYSCustomerID,
                        CustomerID = c.CustomerID,
                        VendorID = c.VendorID,
                        GroupOfProductCUSID = c.GroupOfProductCUSID,
                        GroupOfProductVENID = c.GroupOfProductVENID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSGroupOfProductMapping>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult GroupOfProductMappingNotIn_List(string request, int groupOfProductID, int vendorID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == groupOfProductID);
                    if (group != null)
                    {
                        var lstExistID = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == vendorID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == group.CustomerID && c.CustomerRelateID != group.CustomerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        var query = model.CUS_GroupOfProduct.Where(c => lstCustomerID.Contains(c.CustomerID) && !lstExistID.Contains(c.ID)).Select(c => new DTOCUSGroupOfProductMapping
                        {
                            ID = 0,
                            SYSCustomerID = Account.SYSCustomerID,
                            CustomerID = c.CustomerID,
                            VendorID = group.CustomerID,
                            GroupOfProductCUSID = c.ID,
                            GroupOfProductVENID = groupOfProductID,
                            GroupOfProductName = c.GroupName,
                            CustomerCode = c.CUS_Customer.Code,
                            CustomerName = c.CUS_Customer.CustomerName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCUSGroupOfProductMapping>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void GroupOfProductMapping_SaveList(List<DTOCUSGroupOfProductMapping> lst, int groupOfProductID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == groupOfProductID);
                    if (group != null)
                    {
                        foreach (var item in lst)
                        {
                            var obj = model.CUS_GroupOfProductMapping.FirstOrDefault(c => c.VendorID == item.VendorID && c.CustomerID == item.CustomerID && c.GroupOfProductCUSID == item.GroupOfProductCUSID && c.GroupOfProductVENID == item.GroupOfProductVENID);
                            if (obj == null)
                            {
                                obj = new CUS_GroupOfProductMapping();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CustomerID = item.CustomerID;
                                obj.VendorID = item.VendorID;
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.GroupOfProductCUSID = item.GroupOfProductCUSID;
                                obj.GroupOfProductVENID = item.GroupOfProductVENID;
                                model.CUS_GroupOfProductMapping.Add(obj);
                            }
                        }
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm!");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void GroupOfProductMapping_Delete(DTOCUSGroupOfProductMapping item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CUS_GroupOfProductMapping.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CUS_GroupOfProductMapping.Remove(obj);
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm sản phẩm!");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        //Inprocess
        #region VENContract

        #region Common

        /// <summary>
        /// Danh sách hợp đồng
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public DTOResult VENContract_List(string request)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == false &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                        c.CustomerID > 0 && (isAdmin ? true : Account.ListCustomerID.Contains(c.CustomerID.Value))).Select(c => new DTOCATContract
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        ContractNo = c.ContractNo,
                        EffectDate = c.EffectDate,
                        ExpiredDate = c.ExpiredDate,
                        SignDate = c.SignDate,
                        SignBy = c.SignBy,
                        PostionName = c.PostionName,
                        Content = c.Content,
                        DisplayName = c.DisplayName,
                        IsSKU = c.IsSKU,
                        UseRegion = c.UseRegion,
                        TypeOfContractDateID = c.TypeOfContractDateID,
                        TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                        TypeOfCustomerID = c.TypeOfCustomerID,
                        SYSCustomerID = c.SYSCustomerID,
                        CompanyID = c.CompanyID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        CompanyName = c.CUS_Company.CUS_Customer1.CustomerName,
                        CompanyCode = c.CUS_Company.CUS_Customer1.Code,
                        //ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        TypeOfContractID = c.TypeOfContractID,
                        UseLoadLocation = c.UseLoadLocation,
                        TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                        TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                        LeadTime = c.LeadTime,
                        AllowCoLoad = c.AllowCoLoad,
                        IsDisabled = c.CAT_ContractTerm.Count > 0,
                        ShortName = c.CUS_Customer.ShortName,
                    }).OrderBy(c => c.CustomerCode).ThenBy(c => c.CustomerName).ThenBy(c => c.ContractNo).ThenBy(c => c.DisplayName).ThenBy(c => c.TransportModeID).ThenBy(c => c.EffectDate).ThenBy(c => c.ExpiredDate).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Get hợp đồng
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public DTOCATContract VENContract_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    int iFTL = -(int)SYSVarType.TransportModeFTL;
                    int iLTL = -(int)SYSVarType.TransportModeLTL;
                    int iMain = -(int)SYSVarType.TypeOfContractMain;
                    //int iFrame = -(int)SYSVarType.TypeOfContractFrame;
                    if (id > 0)
                    {
                        var result = model.CAT_Contract.Where(c => c.ID == id).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            SYSCustomerID = c.SYSCustomerID,
                            CompanyID = c.CompanyID > 0 ? c.CompanyID : -1,
                            CustomerName = c.CUS_Customer.CustomerName,
                            CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            TransportModeID = c.TransportModeID,
                            TypeOfContractID = c.TypeOfContractID,
                            UseLoadLocation = c.UseLoadLocation,
                            TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                            TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            IsVENLTLLevelOrder = c.IsVENLTLLevelOrder,
                            PriceInDay = c.PriceInDay,
                            ExprVENTenderFTL = c.ExprVENTenderFTL,
                            ExprVENTenderLTL = c.ExprVENTenderLTL,
                            ExprVENTenderFTLCompareField = c.ExprVENTenderFTLCompareField,
                            ExprVENTenderLTLCompareField = c.ExprVENTenderLTLCompareField,
                            TypeOfRunLevelID = c.TypeOfRunLevelID > 0 ? c.TypeOfRunLevelID : -1,
                            TypeOfSGroupProductChangeID = c.TypeOfSGroupProductChangeID > 0 ? c.TypeOfSGroupProductChangeID : null,
                            IsCreateNewTerm = c.IsCreateNewTerm,
                            ExprFCLAllocationPrice = c.ExprFCLAllocationPrice,
                            TypeOfContractQuantityID = c.TypeOfContractQuantityID,
                        }).FirstOrDefault();

                        if (result != null)
                        {
                            bool flag = true;
                            try
                            {
                                result.ListSetting = result.ExprFCLAllocationPrice != null ? Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATContract_Setting>>(result.ExprFCLAllocationPrice) : null;
                                if (result.ListSetting == null || result.ListSetting.Count == 0)
                                {
                                    flag = false;
                                }
                            }
                            catch
                            {
                                flag = false;
                            }
                            if (!flag)
                            {
                                result.ListSetting = new List<DTOCATContract_Setting>();
                                foreach (var item in model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder))
                                {
                                    DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                                    itemCat.ServiceOfOrderID = item.ID;
                                    itemCat.Laden = 0;
                                    itemCat.GetEmpty = 0;
                                    itemCat.ReturnEmpty = 0;
                                    result.ListSetting.Add(itemCat);
                                }
                                string lstSetting = Newtonsoft.Json.JsonConvert.SerializeObject(result.ListSetting);
                                VenContractSetting_Save(lstSetting, id);
                            }
                        }
                        var transportModeID = result.TransportModeID.HasValue ? HelperContract.GetTransportMode(model, result.TransportModeID.Value) : -1;
                        result.TypeOfMode = transportModeID == iFCL ? 1 : transportModeID == iFTL ? 2 : transportModeID == iLTL ? 3 : 0;

                        return result;
                    }
                    else
                    {
                        var result = new DTOCATContract();
                        result.ID = -1;
                        result.AllowCoLoad = true;
                        result.TransportModeID = HelperContract.GetTransportMode_First(model, iFCL);
                        result.TypeOfContractID = iMain;
                        result.ServiceOfOrderID = -(int)SYSVarType.ServiceOfOrderExport;
                        result.TypeOfContractDateID = -(int)SYSVarType.TypeOfContractDateRequest;
                        result.SignDate = DateTime.Now.Date;
                        result.EffectDate = DateTime.Now.Date;
                        result.ExpiredDate = DateTime.Now.Date.AddDays(1);
                        result.TypeOfMode = 0;
                        result.IsVENLTLLevelOrder = false;
                        //result.CompanyID = -1;

                        result.ListSetting = new List<DTOCATContract_Setting>();
                        foreach (var item in model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ServiceOfOrder))
                        {
                            DTOCATContract_Setting itemCat = new DTOCATContract_Setting();
                            itemCat.ServiceOfOrderID = item.ID;
                            itemCat.Laden = 0;
                            itemCat.GetEmpty = 0;
                            itemCat.ReturnEmpty = 0;
                            result.ListSetting.Add(itemCat);
                        }

                        return result;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu hợp đồng
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public int VENContract_Save(DTOCATContract item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    result = HelperContract.Contract_Save(model, Account, item, -(int)SYSVarType.TypeOfCustomerVEN);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Xóa hợp đồng
        /// </summary>
        /// <param name="id"></param>
        public void VENContract_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Contract_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOVENContract_Data VENContract_Data(int id)
        {
            try
            {
                DTOVENContract_Data result = new DTOVENContract_Data();
                using (var model = new DataEntities())
                {
                    int iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;
                    int iVen = -(int)SYSVarType.TypeOfCustomerVEN;
                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == id);
                    int customerid = 0;
                    int cusRelateID = 0;
                    if (contract != null)
                    {
                        customerid = contract.CustomerID.Value;
                        var company = model.CUS_Company.FirstOrDefault(c => c.ID == contract.CompanyID);
                        if (company != null)
                            cusRelateID = company.CustomerRelateID;
                    }

                    result.ListCustomer = model.CUS_Customer.Where(c => c.IsSystem == false && (c.TypeOfCustomerID == iBoth || c.TypeOfCustomerID == iVen)).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.ListProduct = new List<CUSProduct>();

                    var lstMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == customerid && c.CustomerID == cusRelateID).Select(c => new
                    {
                        c.GroupOfProductCUSID,
                        c.GroupOfProductVENID
                    }).ToList();

                    var lstCusGroupID = lstMapping.Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstCusGroupID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                        {
                            ID = c.ID,
                            GroupOfProductID = c.GroupOfProductID,
                            ProductName = c.ProductName,
                            Code = c.Code
                        }).ToList();

                    foreach (var item in result.ListGroupOfProduct)
                    {
                        var lstMyMap = lstMapping.Where(c => c.GroupOfProductVENID == item.ID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        result.ListProduct.AddRange(lstProduct.Where(c => lstMyMap.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                            {
                                ID = c.ID,
                                GroupOfProductID = item.ID,
                                ProductName = c.ProductName,
                                Code = c.Code,
                            }).ToList());
                    }

                    //result.ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == customerid).Select(c => new CUSProduct
                    //{
                    //    ID = c.ID,
                    //    GroupOfProductID = c.GroupOfProductID,
                    //    ProductName = c.ProductName,
                    //    Code = c.Code
                    //}).ToList();


                    result.ListCompany = model.CUS_Company.Where(c => c.CUS_Customer.IsSystem == false && (c.CUS_Customer.TypeOfCustomerID == iBoth || c.CUS_Customer.TypeOfCustomerID == iVen)).Select(c => new DTOCUSCompany
                    {
                        ID = c.ID,
                        CustomerOwnID = c.CustomerOwnID,
                        CustomerRelateID = c.CustomerRelateID,
                        CustomerRelateCode = c.CUS_Customer1.Code,
                        CustomerRelateName = c.CUS_Customer1.CustomerName
                    }).ToList();
                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListKPI = model.KPI_KPI.Where(c => c.KPITypeID == -(int)SYSVarType.KPITypeOrder).Select(c => new KPIKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        KPIName = c.KPIName,
                        TypeOfKPIName = c.SYS_Var.ValueOfVar
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENContract_ByCustomerList(string request, int vendorID)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CUS_Customer.IsSystem == false &&
                        (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) &&
                        c.CustomerID > 0 && c.CustomerID.Value == vendorID).Select(c => new DTOCATContract
                        {
                            ID = c.ID,
                            CustomerID = c.CustomerID,
                            ContractNo = c.ContractNo,
                            EffectDate = c.EffectDate,
                            ExpiredDate = c.ExpiredDate,
                            SignDate = c.SignDate,
                            SignBy = c.SignBy,
                            PostionName = c.PostionName,
                            Content = c.Content,
                            DisplayName = c.DisplayName,
                            IsSKU = c.IsSKU,
                            UseRegion = c.UseRegion,
                            TypeOfContractDateID = c.TypeOfContractDateID,
                            TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                            TypeOfCustomerID = c.TypeOfCustomerID,
                            SYSCustomerID = c.SYSCustomerID,
                            CompanyID = c.CompanyID,
                            CustomerName = c.CUS_Customer.CustomerName,
                            CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                            //ServiceOfOrderID = c.ServiceOfOrderID,
                            TransportModeID = c.TransportModeID,
                            TypeOfContractID = c.TypeOfContractID,
                            UseLoadLocation = c.UseLoadLocation,
                            TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.SYS_Var.ValueOfVar : string.Empty,
                            TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                            LeadTime = c.LeadTime,
                            AllowCoLoad = c.AllowCoLoad,
                            IsDisabled = c.CAT_ContractTerm.Count > 0,
                            PriceInDay = c.PriceInDay
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContract>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region CODefault

        /// <summary>
        /// Danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="request"></param>
        /// <param name="contractID"></param>
        /// <returns></returns>
        public DTOResult VENContract_CODefault_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractCODefault
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Ton = c.Ton,
                        ContractID = c.ContractID,
                        PackingName = c.CAT_Packing.PackingName,
                        IsChoose = false,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractCODefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_CODefault_NotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstPackingID = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F) && !lstPackingID.Contains(c.ID)).Select(c => new DTOCATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID,
                        TypeOfPackageName = c.SYS_Var.ValueOfVar,
                        IsChoose = false
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_CODefault_NotIn_SaveList(List<DTOCATPacking> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID && c.PackingID == item.ID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_ContractCODefault();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            obj.PackingID = item.ID;
                            model.CAT_ContractCODefault.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_CODefault_Delete(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceCOContainer.Where(c => c.PackingID == obj.PackingID && c.CAT_ContractRouting.ContractID == obj.ContractID))
                                model.CAT_PriceCOContainer.Remove(detail);
                            foreach (var detail in model.CAT_PriceCOService.Where(c => c.PackingID == obj.PackingID && c.CAT_Price.CAT_ContractTerm.ContractID == obj.ContractID))
                                model.CAT_PriceCOService.Remove(detail);

                            model.CAT_ContractCODefault.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Lưu danh sách thiết lập trọng tải container
        /// </summary>
        /// <param name="data"></param>
        /// <param name="contractID"></param>
        public void VENContract_CODefault_Update(List<DTOCATContractCODefault> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractCODefault.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.Ton = item.Ton;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Routing

        public DTOResult VENContract_Routing_List(int contractID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingParentID = c.CAT_Routing.ParentID,
                        ContractID = c.ContractID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = c.CAT_PriceCOContainer.Count > 0 || c.CAT_PriceDIGroupProduct.Count > 0 || c.CAT_PriceGroupVehicle.Count > 0,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        IsArea = c.CAT_Routing.RoutingAreaFromID.HasValue ? true : c.CAT_Routing.RoutingAreaToID.HasValue ? true : false,
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    var list = query.Data.Cast<DTOCATContractRouting>().ToList();

                    foreach (DTOCATContractRouting item in list)
                    {
                        var iExport = (int)KPICode.Export;
                        var iOPS = (int)KPICode.OPS;
                        var iPOD = (int)KPICode.POD;

                        var lstKPI = model.KPI_KPI.Where(c => c.ID == iExport || c.ID == iOPS || c.ID == iPOD).Select(c => new DTOContractKPITime
                        {
                            ID = -1,
                            KPIID = c.ID,
                            KPICode = c.Code,
                            KPIName = c.KPIName,
                            // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                            TypeOfKPIName = c.SYS_Var.ValueOfVar,
                            Expression = "",
                            CompareField = ""
                        }).ToList();

                        item.ListKPI = model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == item.ID).Select(c => new DTOContractKPITime
                        {
                            ID = c.ID,
                            KPIID = c.KPIID,
                            KPICode = c.KPI_KPI.Code,
                            KPIName = c.KPI_KPI.KPIName,
                            // TypeOfKPIID = c.KPI_KPI.TypeOfKPIID,
                            TypeOfKPIName = c.KPI_KPI.SYS_Var.ValueOfVar,
                            Expression = c.Expression,
                            CompareField = c.CompareField
                        }).ToList();

                        if (item.ListKPI != null && item.ListKPI.Count > 0)
                        {
                            foreach (var objKPI in lstKPI)
                            {
                                var hasKPI = false;
                                foreach (var objKPITime in item.ListKPI)
                                {
                                    if (objKPI.KPIID == objKPITime.KPIID)
                                    {
                                        hasKPI = true;
                                        break;
                                    }
                                }
                                if (!hasKPI)
                                {
                                    item.ListKPI.Add(objKPI);
                                }
                            }
                        }
                        else
                        {
                            item.ListKPI = lstKPI;
                        }
                        item.ListKPI.OrderBy(c => c.KPICode);
                    }
                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Routing_Save(DTOCATContractRouting item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractRouting.Count(c => c.ID != item.ID && c.ContractID == item.ContractID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == item.ContractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0)
                        lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                        if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                        {
                            HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                        }

                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.LeadTime = item.LeadTime;
                        obj.Zone = item.Zone;

                        obj.SortOrder = item.SortOrder > 0 ? item.SortOrder : lastSortOrder;

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Routing_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var child in model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceCOContainer.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceDILevelGroupProduct.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceDILevelGroupProduct.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(child);
                        }
                        foreach (var child in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_PriceGVLevelGroupVehicle.Remove(child);
                        }
                        foreach (var child in model.CAT_ContractKPITime.Where(c => c.ContractRoutingID == obj.ID))
                        {
                            model.CAT_ContractKPITime.Remove(child);
                        }

                        // cung duong chỉ có 1 khách hàng xài +  chưa có đơn hàng thì xóa khỏi khách hàng 
                        if (model.CUS_Routing.Count(c => c.RoutingID == obj.RoutingID) == 1)
                        {
                            if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == obj.ID) == 0)
                            {
                                var objCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == obj.RoutingID);
                                if (objCUS != null) model.CUS_Routing.Remove(objCUS);
                            }

                        }

                        model.CAT_ContractRouting.Remove(obj);

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_Routing_NotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstMyRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => c.RoutingID).ToList();
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int vendorid = objContract != null && objContract.CustomerID.HasValue ? objContract.CustomerID.Value : 0;

                    var query = model.CUS_Routing.Where(c => !lstMyRouting.Contains(c.RoutingID) && c.CAT_Routing.Code != string.Empty && c.CustomerID == vendorid).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        ParentID = c.CAT_Routing.ParentID,
                        LocationFromID = c.CAT_Routing.LocationFromID,
                        LocationToID = c.CAT_Routing.LocationToID,
                        EDistance = c.CAT_Routing.EDistance,
                        EHours = c.CAT_Routing.EHours,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID,
                        IsAreaLast = c.CAT_Routing.IsAreaLast,
                        IsUse = c.CAT_Routing.IsUse,
                        LocationFromName = c.CAT_Routing.LocationFromID.HasValue ? c.CAT_Routing.CAT_Location.Location : string.Empty,
                        LocationToName = c.CAT_Routing.LocationToID.HasValue ? c.CAT_Routing.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.CAT_Routing.RoutingAreaFromID.HasValue ? c.CAT_Routing.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.CAT_Routing.RoutingAreaToID.HasValue ? c.CAT_Routing.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.CAT_Routing.ParentID.HasValue ? c.CAT_Routing.CAT_Routing2.RoutingName : string.Empty,
                        IsChoose = false,
                        Note = c.CAT_Routing.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Routing_NotIn_Delete(int id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.ID == id);
                    if (objCus == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu CusRouting");
                    if (model.CAT_ContractRouting.Count(c => c.ContractID != contractID && c.RoutingID == objCus.RoutingID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho hơp đồng khác, không thể xóa");
                    if (model.ORD_Order.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Cung đường đã sử dụng cho đơn hàng, không thể xóa");
                    if (model.ORD_Container.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_Container");
                    if (model.ORD_GroupProduct.Count(c => c.CUSRoutingID == objCus.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Không thể xóa, có dữ liệu ORD_GroupProduct");

                    int CusID = objCus.CustomerID;
                    int RouteID = objCus.RoutingID;

                    model.CUS_Routing.Remove(objCus);

                    if (model.CUS_Routing.Count(c => c.RoutingID == CusID && c.CustomerID != RouteID) > 0)
                    {

                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == RouteID);
                        if (objCAT != null)
                        {
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.CATRoutingID == objCAT.ID))
                            {
                                model.OPS_DITOGroupProduct.Remove(item);
                            }
                            model.CAT_Routing.Remove(objCAT);
                        }
                    }



                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Routing_Insert(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        if (model.CAT_ContractRouting.Count(c => c.ContractID == contractID && c.RoutingID == item.RoutingID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập!");

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        obj.RoutingID = item.RoutingID;
                        model.CAT_ContractRouting.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOVENContractRouting_Import> VENContract_Routing_Export(int contractID)
        {
            try
            {
                List<DTOVENContractRouting_Import> result = new List<DTOVENContractRouting_Import>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOVENContractRouting_Import
                    {
                        CATRoutingID = c.RoutingID,
                        CATRoutingCode = c.CAT_Routing.Code,
                        CATRoutingName = c.CAT_Routing.RoutingName,
                        ContractRoutingID = c.ID,
                        ContractRoutingCode = c.Code,
                        ContractRoutingName = c.RoutingName,
                        Zone = c.Zone,
                        LeadTime = c.LeadTime,
                        LeadTimeETA = c.LeadTimeETA,
                        LeadTimeETD = c.LeadTimeETD,
                        SortOrder = c.SortOrder,
                        ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                        ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                        IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                        LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                        LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                        LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                        LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                        AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                        AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                        AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                        AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                        ContractRoutingType = c.SYS_Var.ValueOfVar,
                        ContractRoutingTypeCode = c.SYS_Var.Code,
                        ContractRoutingTypeID = c.ContractRoutingTypeID,
                    }).OrderBy(c => c.SortOrder).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Routing_Import(List<DTOVENContractRouting_Import> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");

                    int CusID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    var objLastOnFile = data.Where(c => c.ExcelSuccess && c.SortOrder > 0).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && objLastOnFile.SortOrder > 0) lastOnFile = objLastOnFile.SortOrder;
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;

                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        #region lưu cat routing(nếu là mới)
                        var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == item.CATRoutingID);
                        if (objCAT == null)
                        {
                            objCAT = new CAT_Routing();
                            objCAT.CreatedBy = Account.UserName;
                            objCAT.CreatedDate = DateTime.Now;

                            objCAT.Code = item.CATRoutingCode;
                            objCAT.RoutingName = item.CATRoutingName;
                            objCAT.IsAreaLast = false;
                            objCAT.IsUse = true;
                            objCAT.IsLocation = false;
                            objCAT.IsChecked = false;

                            if (item.LocationFromID > 0)
                                objCAT.LocationFromID = item.LocationFromID;
                            else objCAT.LocationFromID = null;
                            if (item.LocationToID > 0)
                                objCAT.LocationToID = item.LocationToID;
                            else objCAT.LocationToID = null;

                            if (item.AreaFromID > 0)
                                objCAT.RoutingAreaFromID = item.AreaFromID;
                            else objCAT.RoutingAreaFromID = null;
                            if (item.AreaToID > 0)
                                objCAT.RoutingAreaToID = item.AreaToID;
                            else objCAT.RoutingAreaToID = null;

                            model.CAT_Routing.Add(objCAT);
                        }
                        else
                        {
                            var count = model.CUS_Routing.Count(c => c.RoutingID == objCAT.ID && c.CustomerID != objContract.CustomerID);

                            if (count == 0)
                            {
                                if (item.LocationFromID > 0)
                                    objCAT.LocationFromID = item.LocationFromID;
                                else objCAT.LocationFromID = null;
                                if (item.LocationToID > 0)
                                    objCAT.LocationToID = item.LocationToID;
                                else objCAT.LocationToID = null;

                                if (item.AreaFromID > 0)
                                    objCAT.RoutingAreaFromID = item.AreaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (item.AreaToID > 0)
                                    objCAT.RoutingAreaToID = item.AreaToID;
                                else objCAT.RoutingAreaToID = null;
                            }
                        }
                        #endregion

                        #region lưu cus routing
                        if (!(item.CUSRoutingID > 0))
                        {
                            CUS_Routing objCus = new CUS_Routing();
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            objCus.CustomerID = CusID;
                            objCus.CAT_Routing = objCAT;
                            objCus.Code = item.CATRoutingCode;
                            objCus.RoutingName = item.CATRoutingName;
                            model.CUS_Routing.Add(objCus);
                        }
                        #endregion

                        #region Lưu contract routing
                        var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == item.ContractRoutingID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;

                            //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI hoac khi đổi phụ lục
                            if ((item.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != item.ContractTermID))
                            {
                                HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                            }
                        }
                        else
                        {
                            obj = new CAT_ContractRouting();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.CAT_Routing = objCAT;
                            obj.ContractID = contractID;
                            model.CAT_ContractRouting.Add(obj);
                        }
                        obj.Code = item.ContractRoutingCode;
                        obj.RoutingName = item.ContractRoutingName;
                        obj.Zone = item.Zone;
                        obj.LeadTime = item.LeadTime;

                        if (item.SortOrder > 0)
                            obj.SortOrder = item.SortOrder;
                        else
                        {
                            obj.SortOrder = lastSortOrder;
                            lastSortOrder++;
                        }

                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        else obj.ContractTermID = null;

                        obj.ContractRoutingTypeID = item.ContractRoutingTypeID;
                        #endregion

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOVENContractRoutingData VENContract_RoutingByCus_List(int customerID, int contractID)
        {
            try
            {
                DTOVENContractRoutingData result = new DTOVENContractRoutingData();
                using (var model = new DataEntities())
                {
                    result.ListCUSRouting = model.CUS_Routing.Where(c => c.CustomerID == customerID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        RoutingID = c.RoutingID,
                        Code = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        RoutingParentID = c.CAT_Routing.ParentID
                    }).ToList();
                    result.ListContractRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        Code = c.Code,
                    }).ToList();
                    result.ListCATRouting = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                    }).ToList();
                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                    }).ToList();

                    result.ListLocation = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location
                    }).ToList();
                    result.ListArea = model.CAT_RoutingArea.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_KPI_Save(List<DTOContractKPITime> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == item.KPIID && c.ContractRoutingID == routingID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractKPITime();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = routingID;
                            obj.KPIID = item.KPIID;
                            model.CAT_ContractKPITime.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_KPI_Routing_List(string request, int contractID, int routingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.ID != routingID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        RoutingID = c.RoutingID,
                        CATCode = c.CAT_Routing.Code,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        LeadTime = c.LeadTime,
                        Zone = c.Zone,
                        IsDelete = false
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? VENContract_KPI_Check_Expression(string sExpression, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(sExpression, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? VENContract_KPI_Check_Hit(string sExpression, string sField, KPIKPITime item, double zone, double leadTime, List<DTOContractKPITime> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(sExpression, sField, item, zone, leadTime, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_KPI_Routing_Apply(List<DTOCATContractRouting> data, int routingID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objRouting = model.CAT_ContractRouting.Where(c => c.ID == routingID).Select(c => new
                    {
                        ContractID = c.ContractID,
                        ListKPI = c.CAT_ContractKPITime.Select(o => new DTOContractKPITime
                        {
                            KPIID = o.KPIID,
                            Expression = o.Expression,
                            CompareField = o.CompareField
                        }).ToList()
                    }).FirstOrDefault();
                    if (objRouting != null)
                    {
                        foreach (var item in data)
                        {
                            foreach (var o in objRouting.ListKPI)
                            {
                                var obj = model.CAT_ContractKPITime.FirstOrDefault(c => c.KPIID == o.KPIID && c.ContractRoutingID == item.ID);
                                if (obj == null)
                                {
                                    obj = new CAT_ContractKPITime();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.ContractRoutingID = item.ID;
                                    obj.KPIID = o.KPIID;
                                    model.CAT_ContractKPITime.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Expression = o.Expression;
                                obj.CompareField = o.CompareField;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENContract_Routing_CATNotIn_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objCus = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int cusID = objCus != null && objCus.CustomerID > 0 ? objCus.CustomerID.Value : 0;
                    var lstID = model.CUS_Routing.Where(c => c.CustomerID == cusID).Select(c => c.RoutingID).ToList();
                    var query = model.CAT_Routing.Where(c => !string.IsNullOrEmpty(c.Code) && !lstID.Contains(c.ID)).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        RoutingID = c.ID,
                        ParentID = c.ParentID,
                        LocationFromID = c.LocationFromID,
                        LocationToID = c.LocationToID,
                        EDistance = c.EDistance,
                        EHours = c.EHours,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        RoutingAreaFromID = c.RoutingAreaFromID,
                        RoutingAreaToID = c.RoutingAreaToID,
                        IsAreaLast = c.IsAreaLast,
                        IsUse = c.IsUse,
                        LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                        LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                        AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                        AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                        ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                        Note = c.Note
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Routing_CATNotIn_Save(List<DTOCATRouting> data, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");

                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : 0;
                    if (cusID == 0) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khách hàng");

                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;

                    lastSortOrder++;

                    foreach (var item in data)
                    {
                        CUS_Routing objCus = new CUS_Routing();
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        objCus.CustomerID = cusID;
                        objCus.RoutingID = item.RoutingID;
                        objCus.Code = item.Code;
                        objCus.RoutingName = item.RoutingName;
                        model.CUS_Routing.Add(objCus);

                        CAT_ContractRouting obj = new CAT_ContractRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.Code = item.Code;
                        obj.RoutingName = item.RoutingName;
                        obj.RoutingID = item.RoutingID;
                        obj.SortOrder = lastSortOrder;
                        obj.ContractRoutingTypeID = -(int)SYSVarType.ContractRoutingTypePrice;
                        model.CAT_ContractRouting.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOContractTerm> VENContract_Routing_ContractTermList(int contractID)
        {
            try
            {
                List<DTOContractTerm> result = new List<DTOContractTerm>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && c.IsAllRouting == false).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                    }).ToList();
                    DTOContractTerm itemNull = new DTOContractTerm { ID = -1, Code = string.Empty, TermName = string.Empty, DisplayName = string.Empty };
                    result.Insert(0, itemNull);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region tạo mới cung duong trong hợp đồng
        public DTOCATRouting VENContract_NewRouting_Get(int ID)
        {
            try
            {
                DTOCATRouting result = new DTOCATRouting { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_Routing.Where(c => c.ID == ID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            ParentID = c.ParentID,
                            LocationFromID = c.LocationFromID,
                            LocationToID = c.LocationToID,
                            EDistance = c.EDistance,
                            EHours = c.EHours,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            RoutingAreaFromID = c.RoutingAreaFromID,
                            RoutingAreaToID = c.RoutingAreaToID,
                            IsAreaLast = c.IsAreaLast,
                            IsUse = c.IsUse,
                            LocationFromName = c.LocationFromID.HasValue ? c.CAT_Location.Location : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CAT_Location1.Location : string.Empty,
                            AreaFromName = c.RoutingAreaFromID.HasValue ? c.CAT_RoutingArea.AreaName : string.Empty,
                            AreaToName = c.RoutingAreaToID.HasValue ? c.CAT_RoutingArea1.AreaName : string.Empty,
                            IsLocation = c.LocationFromID.HasValue ? true : c.LocationToID.HasValue ? true : false,
                            IsArea = c.RoutingAreaFromID.HasValue ? true : c.RoutingAreaToID.HasValue ? true : false,
                            IsChangeAble = c.LocationFromID == null && c.LocationToID == null && c.RoutingAreaFromID == null && c.RoutingAreaToID == null,
                            ParentName = c.ParentID.HasValue ? c.CAT_Routing2.RoutingName : string.Empty,
                            Note = c.Note
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.IsUse = true;
                        result.ID = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENContract_NewRouting_Save(DTOCATRouting item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_Routing.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");
                    if ((item.RoutingAreaFromID < 0 && item.RoutingAreaToID < 0) || (item.RoutingAreaFromID > 0 && !(item.RoutingAreaToID > 0)) || (item.RoutingAreaToID > 0 && !(item.RoutingAreaFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo khu vực thiếu khu vực bắt đầu hoặc kết thúc");
                    if ((item.LocationFromID < 0 && item.LocationToID < 0) || (item.LocationFromID > 0 && !(item.LocationToID > 0)) || (item.LocationToID > 0 && !(item.LocationFromID > 0)))
                        throw FaultHelper.BusinessFault(null, null, "Cung đường theo điểm thiếu điểm bắt đầu hoặc kết thúc");

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng ID: " + contractID);
                    int cusID = objContract.CustomerID > 0 ? objContract.CustomerID.Value : objContract.SYSCustomerID;

                    var obj = model.CAT_Routing.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Routing();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.IsAreaLast = false;
                        obj.IsUse = true;
                        model.CAT_Routing.Add(obj);
                    }
                    else
                    {
                        // Edit thì ko hiện IsAreaLast
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        if (model.CUS_Routing.Where(c => c.RoutingID == item.ID && c.CustomerID != cusID).Count() > 0)
                        {
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được khách hàng khác sử dụng không được thay đổi!");
                        }
                    }
                    obj.ParentID = null;
                    obj.LocationFromID = item.LocationFromID;
                    obj.LocationToID = item.LocationToID;
                    obj.EDistance = item.EDistance;
                    obj.EHours = item.EHours;
                    obj.Code = item.Code;
                    obj.RoutingName = item.RoutingName;
                    obj.RoutingAreaFromID = item.RoutingAreaFromID;
                    obj.RoutingAreaToID = item.RoutingAreaToID;

                    obj.Note = item.Note;
                    obj.IsLocation = false;
                    if (obj.LocationFromID > 0)
                        obj.IsLocation = true;

                    var objCus = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == item.ID);
                    if (objCus == null)
                    {
                        objCus = new CUS_Routing();
                        objCus.CustomerID = cusID;
                        objCus.CAT_Routing = obj;
                        objCus.CreatedBy = Account.UserName;
                        objCus.CreatedDate = DateTime.Now;
                        model.CUS_Routing.Add(objCus);
                    }
                    else
                    {
                        objCus.ModifiedBy = Account.UserName;
                        objCus.ModifiedDate = DateTime.Now;
                    }
                    objCus.Code = item.Code;
                    objCus.RoutingName = item.RoutingName;

                    model.SaveChanges();

                    //if (obj.RoutingAreaFromID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaFromID.Value);
                    //if (obj.RoutingAreaToID.HasValue)
                    //    RoutingAreaLocation_Update(model, obj.RoutingAreaToID.Value);

                    //model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by location
        public DTOResult VENContract_NewRouting_LocationList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Location.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.Location,
                        Address = c.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //route by area
        public DTOResult VENContract_NewRouting_AreaList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingArea.Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<CATRoutingArea>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public CATRoutingArea VENContract_NewRouting_AreaGet(int ID)
        {
            try
            {
                CATRoutingArea result = new CATRoutingArea { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingArea.Where(c => c.ID == ID).Select(c => new CATRoutingArea
                        {
                            ID = c.ID,
                            Code = c.Code,
                            AreaName = c.AreaName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENContract_NewRouting_AreaSave(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_RoutingArea.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");

                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingArea();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_RoutingArea.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.AreaName = item.AreaName;
                    obj.CodeNoUnicode = HelperString.RemoveSign4VietnameseString(obj.Code);
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaDelete(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        if (obj.CAT_Routing.Count > 0 || obj.CAT_Routing1.Count > 0)
                            throw FaultHelper.BusinessFault(null, null, "Cung đường đã được thiết lập cho khu vực này, không thể xóa!");

                        foreach (var temp in model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaDetail.Remove(temp);
                        foreach (var temp in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == obj.ID))
                            model.CAT_RoutingAreaLocation.Remove(temp);

                        model.CAT_RoutingArea.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaRefresh(CATRoutingArea item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    VENContract_RoutingAreaLocation_Update(model, item.ID);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_NewRouting_AreaDetailList(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaDetail
                    {
                        ID = c.ID,
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                        WardID = c.WardID,
                        CountryID = c.CountryID,
                        CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                        ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                        DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                        WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        ColID = c.ID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATRoutingAreaDetail VENContract_NewRouting_AreaDetailGet(int ID)
        {
            try
            {
                DTOCATRoutingAreaDetail result = new DTOCATRoutingAreaDetail { ID = 0 };
                using (var model = new DataEntities())
                {
                    if (ID > 0)
                    {
                        result = model.CAT_RoutingAreaDetail.Where(c => c.ID == ID).Select(c => new DTOCATRoutingAreaDetail
                        {
                            ID = c.ID,
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                            WardID = c.WardID,
                            CountryID = c.CountryID,
                            CountryName = c.CountryID.HasValue ? c.CAT_Country.CountryName : string.Empty,
                            ProvinceName = c.ProvinceID.HasValue ? c.CAT_Province.ProvinceName : string.Empty,
                            DistrictName = c.DistrictID.HasValue ? c.CAT_District.DistrictName : string.Empty,
                            WardName = c.WardID.HasValue ? c.CAT_Ward.WardName : string.Empty,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objCountry = model.CAT_Country.FirstOrDefault();
                        if (objCountry != null) result.CountryID = objCountry.ID;
                        var objProvince = model.CAT_Province.FirstOrDefault(c => c.CountryID == result.CountryID);
                        if (objProvince != null) result.ProvinceID = objProvince.ID;
                        var objDistrict = model.CAT_District.FirstOrDefault(c => c.ProvinceID == result.ProvinceID);
                        if (objDistrict != null) result.DistrictID = objDistrict.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENContract_NewRouting_AreaDetailSave(DTOCATRoutingAreaDetail item, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (item.ProvinceID == null)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập tỉnh thành!");

                    if (item.ProvinceID > 0 && item.DistrictID > 0)
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã có khu vực bao quát khu vực đã chọn"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == item.DistrictID && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!");
                    }
                    if (item.ProvinceID > 0 && !(item.DistrictID > 0))
                    {
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID == null && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Khu vực chi tiết này đã tồn tại!"); ;
                        if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID && c.ProvinceID == item.ProvinceID && c.DistrictID > 0 && c.ID != item.ID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Đã tồn tại khu vực chi tiết, không thể thêm khu vực bao quát");
                    }

                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_RoutingAreaDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.RoutingAreaID = areaID;
                    obj.ProvinceID = item.ProvinceID > 0 ? item.ProvinceID : null;
                    obj.DistrictID = item.DistrictID > 0 ? item.DistrictID : null;
                    obj.WardID = item.WardID < 1 ? null : item.WardID;
                    obj.CountryID = item.CountryID;

                    if (obj.ID < 1)
                        model.CAT_RoutingAreaDetail.Add(obj);
                    model.SaveChanges();

                    if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == areaID || c.RoutingAreaToID == areaID) > 0)
                    {
                        VENContract_RoutingAreaLocation_Update(model, areaID);
                        model.SaveChanges();
                    }

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaDetailDelete(DTOCATRoutingAreaDetail item)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_RoutingAreaDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_RoutingAreaDetail.Remove(obj);
                        model.SaveChanges();
                        if (model.CAT_Routing.Count(c => c.RoutingAreaFromID == obj.RoutingAreaID || c.RoutingAreaToID == obj.RoutingAreaID) > 0)
                        {
                            VENContract_RoutingAreaLocation_Update(model, obj.RoutingAreaID);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        private void VENContract_RoutingAreaLocation_Update(DataEntities model, int areaID)
        {
            try
            {
                // Xóa area location cũ
                foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID))
                    model.CAT_RoutingAreaLocation.Remove(item);

                var lstWardID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.WardID.HasValue).Select(c => c.WardID.Value).Distinct().ToArray();
                var lstDistrictID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.DistrictID.HasValue && c.WardID == null).Select(c => c.DistrictID.Value).Distinct().ToArray();
                var lstProvinceID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.ProvinceID.HasValue && c.DistrictID == null && c.WardID == null).Select(c => c.ProvinceID.Value).Distinct().ToArray();

                var lstLocation = model.CAT_Location.Where(c => (c.WardID.HasValue && lstWardID.Contains(c.WardID.Value)) || lstDistrictID.Contains(c.DistrictID) || lstProvinceID.Contains(c.ProvinceID)).Select(c => c.ID).ToArray();
                foreach (var location in lstLocation)
                {
                    CAT_RoutingAreaLocation objLocation = new CAT_RoutingAreaLocation();
                    objLocation.CreatedBy = Account.UserName;
                    objLocation.CreatedDate = DateTime.Now;
                    objLocation.LocationID = location;
                    objLocation.RoutingAreaID = areaID;
                    model.CAT_RoutingAreaLocation.Add(objLocation);
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        // area location
        public DTOResult VENContract_NewRouting_AreaLocation_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => new DTOCATRoutingAreaLocation
                    {
                        ID = c.ID,
                        LocationID = c.CAT_Location.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        Country = c.CAT_Location.CAT_Country.CountryName,
                        Province = c.CAT_Location.CAT_Province.ProvinceName,
                        District = c.CAT_Location.CAT_District.DistrictName,
                        Ward = c.CAT_Location.CAT_Ward != null ? c.CAT_Location.CAT_Ward.WardName : "",
                        CreatedDate = c.CreatedDate,
                        TypeOfPartnerName = "",
                    }).ToDataSourceResult(CreateRequest(request));
                    foreach (DTOCATRoutingAreaLocation item in query.Data)
                    {
                        var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.LocationID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                        item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                    }
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATRoutingAreaLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENContract_NewRouting_AreaLocationNotIn_List(string request, int areaID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> hasList = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).ToList();
                    if (hasList != null)
                    {
                        var query = model.CAT_Location.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                    else
                    {
                        var query = model.CAT_Location.Select(c => new DTOCATLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Location = c.Location,
                            Address = c.Address,
                            CountryName = c.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_District.DistrictName,
                            TypeOfPartnerName = "",
                        }).ToDataSourceResult(CreateRequest(request));
                        foreach (DTOCATLocation item in query.Data)
                        {
                            var lstTypeOfPartner = model.CAT_PartnerLocation.Where(c => c.LocationID == item.ID).Select(c => c.CAT_Partner.SYS_Var.ValueOfVar).Distinct().ToList();
                            item.TypeOfPartnerName = string.Join(", ", lstTypeOfPartner);
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaLocationNotIn_Save(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objRoutingArea = model.CAT_RoutingArea.FirstOrDefault(c => c.ID == areaID);
                    if (objRoutingArea != null)
                    {
                        foreach (var id in lstID)
                        {
                            var objLocation = model.CAT_Location.FirstOrDefault(c => c.ID == id);
                            if (objLocation != null)
                            {
                                var obj = new CAT_RoutingAreaLocation();
                                obj.LocationID = id;
                                obj.RoutingAreaID = areaID;
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }

                        }

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khu vực");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaLocation_Delete(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in lstID)
                    {
                        var obj = model.CAT_RoutingAreaLocation.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            model.CAT_RoutingAreaLocation.Remove(obj);
                        }

                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_NewRouting_AreaLocation_Copy(int areaID, List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstLocationID = model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID).Select(c => c.LocationID).Distinct().ToList();

                    foreach (var ID in lstID)
                    {
                        foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == ID))
                        {
                            if (lstLocationID.Count(c => c == item.LocationID) == 0)
                            {
                                CAT_RoutingAreaLocation obj = new CAT_RoutingAreaLocation();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.RoutingAreaID = areaID;
                                obj.LocationID = item.LocationID;
                                model.CAT_RoutingAreaLocation.Add(obj);
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        public SYSExcel VENContract_Routing_ExcelOnline_Init(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).Select(c => new
                        {
                            CATRoutingID = c.RoutingID,
                            CATRoutingCode = c.CAT_Routing.Code,
                            CATRoutingName = c.CAT_Routing.RoutingName,
                            ContractRoutingID = c.ID,
                            ContractRoutingCode = c.Code,
                            ContractRoutingName = c.RoutingName,
                            Zone = c.Zone,
                            LeadTime = c.LeadTime,
                            LeadTimeETA = c.LeadTimeETA,
                            LeadTimeETD = c.LeadTimeETD,
                            SortOrder = c.SortOrder,
                            ContractTermID = c.ContractTermID > 0 ? c.ContractTermID.Value : -1,
                            ContractTermCode = c.ContractTermID > 0 ? c.CAT_ContractTerm.Code : string.Empty,
                            IsArea = c.CAT_Routing.RoutingAreaFromID > 0 ? true : false,

                            LocationFromID = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.LocationFromID.Value : -1,
                            LocationFromCode = c.CAT_Routing.LocationFromID > 0 ? c.CAT_Routing.CAT_Location.Code : string.Empty,
                            LocationToID = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.LocationToID.Value : -1,
                            LocationToCode = c.CAT_Routing.LocationToID > 0 ? c.CAT_Routing.CAT_Location1.Code : string.Empty,

                            AreaFromID = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.RoutingAreaFromID.Value : -1,
                            AreaFromCode = c.CAT_Routing.RoutingAreaFromID > 0 ? c.CAT_Routing.CAT_RoutingArea.Code : string.Empty,
                            AreaToID = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.RoutingAreaToID.Value : -1,
                            AreaToCode = c.CAT_Routing.RoutingAreaToID > 0 ? c.CAT_Routing.CAT_RoutingArea1.Code : string.Empty,

                            ContractRoutingType = c.SYS_Var.ValueOfVar,
                            ContractRoutingTypeCode = c.SYS_Var.Code,
                            ContractRoutingTypeID = c.ContractRoutingTypeID,
                        }).OrderBy(c => c.SortOrder).ToList();

                        List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                        var ws = data[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[15];
                        arrColumnWidth[0] = 80;
                        for (int i = 1; i < 15; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        var cells = new List<Cell>();
                        cells.Add(HelperExcel.NewCell(0, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(1, "Mã hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(2, "Tên hệ thống", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(3, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(4, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(5, "Zone", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(6, "Leadtime", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(7, "Phụ lục hợp đồng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(8, "Mã loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(9, "Loại cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(10, "Theo khu vực", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(11, "Khu vực đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(12, "Khu vực đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(13, "Điểm đi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(14, "Điểm đến", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        int stt = 1;
                        foreach (var item in lst)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(item.SortOrder));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.CATRoutingName));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingName));
                            cells.Add(HelperExcel.NewCell(item.Zone));
                            cells.Add(HelperExcel.NewCell(item.LeadTime));
                            cells.Add(HelperExcel.NewCell(item.ContractTermCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingTypeCode));
                            cells.Add(HelperExcel.NewCell(item.ContractRoutingType));
                            var IsArea = item.IsArea ? "x" : string.Empty;
                            cells.Add(HelperExcel.NewCell(IsArea));
                            cells.Add(HelperExcel.NewCell(item.AreaFromCode));
                            cells.Add(HelperExcel.NewCell(item.AreaToCode));
                            cells.Add(HelperExcel.NewCell(item.LocationFromCode));
                            cells.Add(HelperExcel.NewCell(item.LocationToCode));

                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            stt++;
                        }

                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENContract_Routing_ExcelOnline_Change(int contractID, int customerID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {

                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[colData + 1].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        colData = 0;

                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;
                        //Cung đường
                        //Mã hệ thống
                        isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = model.CAT_Routing.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Contains(dataCATCode))
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = model.CUS_Routing.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = model.CAT_ContractRouting.FirstOrDefault(c => c.Code == dataConCode && c.ContractID == contractID);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Contains(dataConCode))
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if (isContinue)
                                        {
                                            if (model.CAT_ContractRouting.Where(c => c.Code != dataConCode && c.ContractID == contractID && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Contains(dataConCode) && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && c.ContractID == contractID && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }

                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = model.CAT_RoutingArea.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());

                            }
                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataLocationTo))
                                {
                                    var checkLo = model.CAT_Location.FirstOrDefault(c => !string.IsNullOrEmpty(c.Code) && c.Code == dataLocationTo);
                                    if (checkLo != null)
                                    {
                                        LocationToID = checkLo.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            if (isContinue)
                            {
                                AreaFromID = AreaToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENContract_Routing_ExcelOnline_Import(int contractID, int customerID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOVENContractRoutingData resRouting = new DTOVENContractRoutingData();
                    resRouting = VENContract_RoutingByCus_List(customerID, contractID);

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstGetID = model.CAT_Field.Select(c => new { c.ID, c.Code }).ToList();
                    var lstContractRoutingType = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ContractRoutingType);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCATCode = new List<string>();
                    var lstCUSCode = new List<string>();

                    colData = 1;
                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData + 1].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData + 1].Value.ToString()))
                            {
                                lstCUSCode.Add(eRow.Cells[2].Value.ToString());
                            }

                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCATCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        colData = 0;
                        string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                        string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                        string dataCATName = HelperExcel.GetString(checkRow, colData++);
                        string dataConCode = HelperExcel.GetString(checkRow, colData++);
                        string dataConName = HelperExcel.GetString(checkRow, colData++);
                        string dataZone = HelperExcel.GetString(checkRow, colData++);
                        string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                        string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                        string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                        colData++;
                        string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                        string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                        bool isContinue = true;

                        //Cung đường
                        //Mã hệ thống
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataCATCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 0, lstMessageError, true, 50);

                        if (isContinue)
                        {
                            var checkCAT = resRouting.ListCATRouting.FirstOrDefault(c => c.Code == dataCATCode);
                            var CATId = 0;
                            if (checkCAT != null && isContinue)
                            {
                                CATId = checkCAT.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else if (isContinue)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCATID, CATId.ToString());
                                if (lstCATCode.Where(c => c == dataCATCode).Count() > 1)
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã hệ thống đã sử dụng");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(1, lstMessageError));
                                    isContinue = false;
                                }
                            }

                            var CUSId = 0;
                            //Mã cung đường khách hàng
                            var checkCUS = resRouting.ListCUSRouting.FirstOrDefault(c => c.RoutingID == CATId && c.CustomerID == customerID);
                            if (checkCUS != null && isContinue)
                            {
                                CUSId = checkCUS.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }
                            else if (isContinue)
                            {
                                CUSId = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckCUSID, CUSId.ToString());
                            }

                            if (isContinue)
                                isContinue = HelperExcel.Valid(dataConCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, 2, lstMessageError, true, 50);

                            if (isContinue)
                            {
                                //kiem tra ma trong hop dong
                                var ContractRoutingID = 0;
                                var checkContract = resRouting.ListContractRouting.FirstOrDefault(c => c.Code == dataConCode);
                                if (checkContract == null && isContinue)
                                {
                                    //kiem tra tren file
                                    if (lstCUSCode.Where(c => c == dataConCode).Count() > 1)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                        isContinue = false;
                                        if (isContinue)
                                        {
                                            if (resRouting.ListContractRouting.Where(c => c.Code != dataConCode && c.RoutingID == CATId).Count() > 0)
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                    }
                                }
                                else if (isContinue)
                                {
                                    if (checkContract.RoutingID != checkCAT.ID && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng trong hợp đồng");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(4, lstMessageError));
                                        isContinue = false;
                                    }
                                    else if (isContinue)
                                    {
                                        ContractRoutingID = checkContract.ID;
                                        if (lstCUSCode.Where(c => c == dataConCode).Count() > 1 && isContinue)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Mã cung đường đã sử dụng");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(3, lstMessageError));
                                            isContinue = false;
                                        }
                                        else if (isContinue)
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckID, ContractRoutingID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        //Zone
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataZone, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 5, lstMessageError, false);

                        //Leadtime
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataLeadtime, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 6, lstMessageError, false);

                        //SortOrder
                        if (isContinue)
                            isContinue = HelperExcel.Valid(dataSortOrder, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, 7, lstMessageError, false);

                        var TermID = 0;
                        //Term
                        if (!string.IsNullOrEmpty(dataContractTerm) && isContinue)
                        {
                            var checkTerm = resRouting.ListContractTerm.FirstOrDefault(c => c.Code == dataContractTerm && !c.IsAllRouting);
                            if (checkTerm != null)
                            {
                                TermID = checkTerm.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Phụ lục không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                isContinue = false;
                            }
                        }
                        else if (isContinue)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTermID, TermID.ToString());
                        }

                        var ContractRoutingTypeID = 0;
                        //check loai cung đường
                        if (string.IsNullOrEmpty(dataContractRoutingTypeCode) && isContinue)
                        {
                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có mã loại cung đường");
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                            isContinue = false;
                        }
                        else if (isContinue)
                        {
                            var checkType = lstContractRoutingType.FirstOrDefault(c => c.Code == dataContractRoutingTypeCode);
                            if (checkType != null)
                            {
                                ContractRoutingTypeID = checkType.ID;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckTypeRouteID, ContractRoutingTypeID.ToString());
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại cung đường không tồn tại");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                isContinue = false;
                            }
                        }

                        var IsArea = false;
                        //theo khu vực/ điểm
                        if (string.IsNullOrEmpty(dataIsArea) && isContinue)
                            IsArea = false;
                        else
                            IsArea = true;


                        var AreaFromID = 0;
                        var AreaToID = 0;
                        var LocationFromID = 0;
                        var LocationToID = 0;
                        //check khu vuc
                        if (IsArea && isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataAreaFrom) && isContinue)
                            {
                                var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaFrom);
                                if (checkArea != null)
                                {
                                    AreaFromID = checkArea.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                isContinue = false;
                            }
                            if (isContinue)
                            {
                                if (!string.IsNullOrEmpty(dataAreaTo))
                                {
                                    var checkArea = resRouting.ListArea.FirstOrDefault(c => c.Code == dataAreaTo);
                                    if (checkArea != null)
                                    {
                                        AreaToID = checkArea.ID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                                    }
                                    else
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không tại trong hệ thống");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Khu vực đến không được trống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            if (isContinue)
                            {
                                LocationFromID = LocationToID = 0;
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                            }
                        }
                        else if (isContinue)
                        {
                            if (!string.IsNullOrEmpty(dataLocationFrom) && isContinue)
                            {
                                var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == dataLocationFrom);
                                if (checkLo != null)
                                {
                                    LocationFromID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationFromID, LocationFromID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đi không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                isContinue = false;
                            }

                            if (!string.IsNullOrEmpty(dataLocationTo) && isContinue)
                            {
                                var checkLo = resRouting.ListLocation.FirstOrDefault(c => c.Code == dataLocationTo);
                                if (checkLo != null)
                                {
                                    LocationToID = checkLo.ID;
                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckLocationToID, LocationToID.ToString());
                                }
                                else
                                {
                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không tại trong hệ thống");
                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                    isContinue = false;
                                }
                            }
                            else
                            {
                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Điểm đến không được trống");
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                isContinue = false;
                            }

                            AreaFromID = AreaToID = 0;
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaFromID, AreaFromID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckAreaToID, AreaToID.ToString());
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENContract_Routing_ExcelOnline_Approve(long id, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 15;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckID = colData++;
                    int colCheckCATID = colData++;
                    int colCheckCUSID = colData++;
                    int colCheckTermID = colData++;
                    int colCheckTypeRouteID = colData++;
                    int colCheckAreaFromID = colData++;
                    int colCheckAreaToID = colData++;
                    int colCheckLocationFromID = colData++;
                    int colCheckLocationToID = colData++;

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.ID == contractID);
                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hơp đồng");
                    int CustomerID = objContract.CustomerID.Value;
                    var objLast = model.CAT_ContractRouting.Where(c => c.ContractID == contractID).OrderByDescending(c => c.SortOrder).FirstOrDefault();

                    int lastSortOrder = 0;
                    if (objLast != null && objLast.SortOrder > 0) lastSortOrder = objLast.SortOrder;
                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    var objLastOnFile = lstRow.Where(c => c.Cells[0].Value != null && !string.IsNullOrEmpty(c.Cells[0].Value.ToString()) && c.Cells[0].Value.ToString().All(Char.IsNumber) && Convert.ToInt32(c.Cells[0].Value) > 0).OrderByDescending(c => Convert.ToInt32(HelperExcel.GetString(c, 0))).FirstOrDefault();
                    int lastOnFile = 0;
                    if (objLastOnFile != null && Convert.ToInt32(objLastOnFile.Cells[0].Value) > 0) lastOnFile = Convert.ToInt32(objLastOnFile.Cells[0].Value);
                    if (lastOnFile > lastSortOrder) lastSortOrder = lastOnFile;
                    lastSortOrder++;

                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            colData = 0;
                            string dataSortOrder = HelperExcel.GetString(checkRow, colData++);
                            string dataCATCode = HelperExcel.GetString(checkRow, colData++);
                            string dataCATName = HelperExcel.GetString(checkRow, colData++);
                            string dataConCode = HelperExcel.GetString(checkRow, colData++);
                            string dataConName = HelperExcel.GetString(checkRow, colData++);
                            string dataZone = HelperExcel.GetString(checkRow, colData++);
                            string dataLeadtime = HelperExcel.GetString(checkRow, colData++);
                            string dataContractTerm = HelperExcel.GetString(checkRow, colData++);
                            string dataContractRoutingTypeCode = HelperExcel.GetString(checkRow, colData++);
                            colData++;
                            string dataIsArea = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataAreaTo = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationFrom = HelperExcel.GetString(checkRow, colData++);
                            string dataLocationTo = HelperExcel.GetString(checkRow, colData++);

                            string dataContractRoutingID = HelperExcel.GetString(checkRow, colCheckID);
                            string dataCATID = HelperExcel.GetString(checkRow, colCheckCATID);
                            string dataCUSID = HelperExcel.GetString(checkRow, colCheckCUSID);
                            string dataTermID = HelperExcel.GetString(checkRow, colCheckTermID);
                            string dataTypeRouteID = HelperExcel.GetString(checkRow, colCheckTypeRouteID);
                            string dataAreaFromID = HelperExcel.GetString(checkRow, colCheckAreaFromID);
                            string dataAreaToID = HelperExcel.GetString(checkRow, colCheckAreaToID);
                            string dataLocationFromID = HelperExcel.GetString(checkRow, colCheckLocationFromID);
                            string dataLocationToID = HelperExcel.GetString(checkRow, colCheckLocationToID);

                            int contractRoutingID = Convert.ToInt32(dataContractRoutingID);
                            int CATID = Convert.ToInt32(dataCATID);
                            int CUSID = Convert.ToInt32(dataCUSID);
                            int termID = Convert.ToInt32(dataTermID);
                            int typeRouteID = Convert.ToInt32(dataTypeRouteID);
                            int areaFromID = Convert.ToInt32(dataAreaFromID);
                            int areaToID = Convert.ToInt32(dataAreaToID);
                            int locationFromID = Convert.ToInt32(dataLocationFromID);
                            int locationToID = Convert.ToInt32(dataLocationToID);

                            #region lưu cat routing(nếu là mới)
                            var objCAT = model.CAT_Routing.FirstOrDefault(c => c.ID == CATID);
                            if (objCAT == null)
                            {
                                objCAT = new CAT_Routing();
                                objCAT.CreatedBy = Account.UserName;
                                objCAT.CreatedDate = DateTime.Now;

                                objCAT.Code = dataCATCode;
                                objCAT.RoutingName = dataCATName;
                                objCAT.IsAreaLast = false;
                                objCAT.IsUse = true;
                                objCAT.IsLocation = false;
                                objCAT.IsChecked = false;

                                if (locationFromID > 0)
                                    objCAT.LocationFromID = locationFromID;
                                else objCAT.LocationFromID = null;
                                if (locationToID > 0)
                                    objCAT.LocationToID = locationToID;
                                else objCAT.LocationToID = null;

                                if (areaFromID > 0)
                                    objCAT.RoutingAreaFromID = areaFromID;
                                else objCAT.RoutingAreaFromID = null;
                                if (areaToID > 0)
                                    objCAT.RoutingAreaToID = areaToID;
                                else objCAT.RoutingAreaToID = null;

                                model.CAT_Routing.Add(objCAT);
                            }
                            else
                            {
                                if (model.CUS_Routing.Where(c => c.RoutingID == CATID && c.CustomerID != CustomerID).Count() > 0)
                                {
                                    bool isError = true;
                                    if (isError && locationFromID > 0 && objCAT.LocationFromID != locationFromID)
                                        isError = false;
                                    if (isError && locationToID > 0 && objCAT.LocationToID != locationToID)
                                        isError = false;
                                    if (isError && areaFromID > 0 && objCAT.RoutingAreaFromID != areaFromID)
                                        isError = false;
                                    if (isError && areaToID > 0 && objCAT.RoutingAreaToID != areaToID)
                                        isError = false;
                                    if (!isError)
                                    {
                                        throw FaultHelper.BusinessFault(null, null, "[Dòng" + (checkRow.Index + 1) + "]Cung đường đã được khác hàng khác sử dụng không được thay đổi!");
                                    }
                                }
                                else
                                {
                                    if (locationFromID > 0)
                                        objCAT.LocationFromID = locationFromID;
                                    else objCAT.LocationFromID = null;
                                    if (locationToID > 0)
                                        objCAT.LocationToID = locationToID;
                                    else objCAT.LocationToID = null;

                                    if (areaFromID > 0)
                                        objCAT.RoutingAreaFromID = areaFromID;
                                    else objCAT.RoutingAreaFromID = null;
                                    if (areaToID > 0)
                                        objCAT.RoutingAreaToID = areaToID;
                                    else objCAT.RoutingAreaToID = null;
                                }
                            }

                            #endregion

                            #region lưu cus routing
                            if (!(CUSID > 0))
                            {
                                CUS_Routing objCus = new CUS_Routing();
                                objCus.CreatedBy = Account.UserName;
                                objCus.CreatedDate = DateTime.Now;
                                objCus.CustomerID = CustomerID;
                                objCus.CAT_Routing = objCAT;
                                objCus.Code = dataCATCode;
                                objCus.RoutingName = dataCATName;
                                model.CUS_Routing.Add(objCus);
                            }
                            #endregion

                            #region Lưu contract routing
                            var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ID == contractRoutingID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;

                                //Xóa cung đường trong bảng giá khi đổi từ giá sang KPI
                                if ((typeRouteID == -(int)SYSVarType.ContractRoutingTypeKPI && obj.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice) || (obj.ContractTermID > 0 && obj.ContractTermID != termID))
                                {
                                    HelperContract.CUSContract_Routing_RemoveInPrice(obj.ID, obj.ContractID, model);
                                }
                            }
                            else
                            {
                                obj = new CAT_ContractRouting();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.CAT_Routing = objCAT;
                                obj.ContractID = contractID;
                                model.CAT_ContractRouting.Add(obj);
                            }
                            obj.Code = dataConCode;
                            obj.RoutingName = dataConName;
                            obj.Zone = !string.IsNullOrEmpty(dataZone) ? (double?)Convert.ToDouble(dataZone) : null;
                            obj.LeadTime = !string.IsNullOrEmpty(dataLeadtime) ? (double?)Convert.ToDouble(dataLeadtime) : null;

                            if (!string.IsNullOrEmpty(dataSortOrder))
                            {
                                int sortOrder = Convert.ToInt32(dataSortOrder);
                                if (sortOrder > 0)
                                    obj.SortOrder = sortOrder;
                                else
                                {
                                    obj.SortOrder = lastSortOrder;
                                    lastSortOrder++;
                                }
                            }
                            else
                            {
                                obj.SortOrder = lastSortOrder;
                                lastSortOrder++;
                            }

                            if (termID > 0)
                                obj.ContractTermID = termID;
                            else obj.ContractTermID = null;

                            obj.ContractRoutingTypeID = typeRouteID;
                            #endregion
                        }
                        model.SaveChanges();
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Price

        #region Common

        public DTOResult VENContract_Price_List(string request, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int VENContract_Price_Save(DTOPrice item, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var result = -1;
                    result = HelperContract.Price_Save(model, Account, item, contractTermID);
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Price_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOVENPrice_Data VENContract_Price_Data(int contractTermID)
        {
            try
            {
                DTOVENPrice_Data result = new DTOVENPrice_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListMaterial = model.FLM_Material.Select(c => new FLMMaterial
                    {
                        ID = c.ID,
                        Code = c.Code,
                        MaterialName = c.MaterialName,
                        GroupOfMaterialID = c.GroupOfMaterialID,
                        GroupOfMaterialName = c.CAT_GroupOfMaterial.GroupName
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objContract.ID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        SortOrder = c.SortOrder
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        CBM = c.CBM,
                        Ton = c.Ton,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        SortOrder = c.SortOrder,
                        Quantity = c.Quantity,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName
                    }).OrderBy(c => c.SortOrder).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();

                    result.ListGroupOfPartner = model.CAT_GroupOfPartner.Select(c => new CATGroupOfPartner
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListCurrency = model.CAT_Currency.Select(c => new CATCurrency
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CurrencyName = c.CurrencyName
                    }).ToList();

                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();
                        lstRoutingID.AddRange(model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());
                        lstRoutingID.AddRange(model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList());

                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    var ListRoutingParent = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue).Select(c => new
                    {
                        ID = c.CAT_Routing.ParentID.Value,
                        Code = c.CAT_Routing.CAT_Routing2.Code,
                        RoutingName = c.CAT_Routing.CAT_Routing2.RoutingName
                    }).Distinct().ToList();

                    result.ListRoutingParent = ListRoutingParent.Select(c => new CATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName
                    }).ToList();

                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == cusID && c.CustomerRelateID != cusID).Select(c => c.CustomerRelateID).Distinct().ToList();
                    var ListLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).Distinct().ToList();
                    result.ListLocation = ListLocation.Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationName = c.LocationName
                    }).ToList();

                    var dataRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.RoutingAreaToID.HasValue && c.CAT_Routing.CAT_RoutingArea1.ParentID.HasValue).Select(c => c.CAT_Routing.CAT_RoutingArea1.ParentID.Value).Distinct().ToList();
                    result.ListRoutingArea = model.CAT_RoutingArea.Where(c => dataRouting.Contains(c.ID)).Select(c => new CATRoutingArea
                    {
                        ID = c.ID,
                        Code = c.Code,
                        AreaName = c.AreaName
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListTypeOfPriceDIEx = model.CAT_TypeOfPriceDIEx.Select(c => new DTOCATTypeOfPriceDIEx
                    {
                        ID = c.ID,
                        Code = c.Code,
                        TypeName = c.TypeName,
                        //TypeOfPriceExID = c.TypeOfPriceExID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOPrice VENContract_Price_Get(int id)
        {
            try
            {
                DTOPrice result = new DTOPrice();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Contract_Price_Get(model, Account, id);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Price_Copy(List<DTOVENPrice_ItemCopy> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == item.ID);
                        if (objPrice != null)
                        {
                            CAT_Price obj = new CAT_Price();
                            model.CAT_Price.Add(obj);

                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;

                            obj.Code = item.NewCode;
                            obj.Name = item.NewName;
                            obj.ContractTermID = objPrice.ContractTermID;
                            obj.EffectDate = objPrice.EffectDate;
                            obj.TypeOfOrderID = objPrice.TypeOfOrderID;
                            obj.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                            #region CAT_PriceCOContainer
                            var listCOContainer = model.CAT_PriceCOContainer.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID
                            }).ToList();
                            foreach (var i in listCOContainer)
                            {
                                CAT_PriceCOContainer o = new CAT_PriceCOContainer();
                                model.CAT_PriceCOContainer.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.ContractRoutingID = i.ContractRoutingID;
                            }
                            #endregion

                            #region CAT_PriceCOService
                            var listCOService = model.CAT_PriceCOService.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ServiceID,
                                c.Price,
                                c.PriceMin,
                                c.PriceMax,
                                c.PackingID,
                                c.CurrencyID
                            }).ToList();
                            foreach (var i in listCOService)
                            {
                                CAT_PriceCOService o = new CAT_PriceCOService();
                                model.CAT_PriceCOService.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.PackingID = i.PackingID;
                                o.CurrencyID = i.CurrencyID;
                                o.ServiceID = i.ServiceID;
                            }
                            #endregion

                            #region CAT_PriceDIEx
                            var listPriceEX = model.CAT_PriceDIEx.Where(c => c.PriceID == objPrice.ID).Select(c => new
                            {
                                ID = c.ID,
                                TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                                ExprCBM = c.ExprCBM,
                                ExprInput = c.ExprInput,
                                ExprPrice = c.ExprPrice,
                                ExprPriceFix = c.ExprPriceFix,
                                ExprQuan = c.ExprQuan,
                                ExprTon = c.ExprTon,
                                Note = c.Note,
                                DIExSumID = c.DIExSumID,
                            }).ToList();
                            foreach (var priceEx in listPriceEX)
                            {
                                CAT_PriceDIEx o = new CAT_PriceDIEx();
                                model.CAT_PriceDIEx.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.PriceID = obj.ID;
                                o.TypeOfPriceDIExID = priceEx.TypeOfPriceDIExID;
                                o.ExprCBM = priceEx.ExprCBM;
                                o.ExprInput = priceEx.ExprInput;
                                o.ExprPrice = priceEx.ExprPrice;
                                o.ExprPriceFix = priceEx.ExprPriceFix;
                                o.ExprQuan = priceEx.ExprQuan;
                                o.ExprTon = priceEx.ExprTon;
                                o.Note = priceEx.Note;
                                o.DIExSumID = priceEx.DIExSumID;
                                foreach (var exGOL in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupLocation gol = new CAT_PriceDIExGroupLocation();
                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.CAT_PriceDIEx = o;
                                    gol.GroupOfLocationID = exGOL.GroupOfLocationID;
                                    model.CAT_PriceDIExGroupLocation.Add(gol);
                                }
                                foreach (var exGOP in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExGroupProduct gop = new CAT_PriceDIExGroupProduct();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.GroupOfProductID = exGOP.GroupOfProductID;
                                    gop.ExprPrice = exGOP.ExprPrice;
                                    gop.ExprQuantity = exGOP.ExprQuantity;
                                    model.CAT_PriceDIExGroupProduct.Add(gop);
                                }
                                foreach (var exRoute in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceEx.ID))
                                {
                                    CAT_PriceDIExRouting gop = new CAT_PriceDIExRouting();
                                    gop.CreatedBy = Account.UserName;
                                    gop.CreatedDate = DateTime.Now;
                                    gop.CAT_PriceDIEx = o;
                                    gop.RoutingID = exRoute.RoutingID;
                                    gop.ParentRoutingID = exRoute.ParentRoutingID;
                                    gop.LocationID = exRoute.LocationID;
                                    gop.TypeOfTOLocationID = exRoute.TypeOfTOLocationID;
                                    model.CAT_PriceDIExRouting.Add(gop);
                                }
                            }
                            #endregion

                            #region CAT_PriceDIGroupProduct
                            foreach (var i in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfProductID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceDIGroupProduct o = new CAT_PriceDIGroupProduct();
                                model.CAT_PriceDIGroupProduct.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfProductID = i.GroupOfProductID;
                            }
                            #endregion

                            #region CAT_PriceDILevel +CAT_PriceDILevelGroupproduct


                            foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceDILevelGroupProduct g = new CAT_PriceDILevelGroupProduct();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.GroupOfProductID = detail.GroupOfProductID;
                                g.Price = detail.Price;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.CAT_Price = obj;
                                model.CAT_PriceDILevelGroupProduct.Add(g);
                            }
                            #endregion

                            #region CAT_PriceGroupVehicle
                            foreach (var i in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == item.ID).Select(c => new
                            {
                                c.ContractRoutingID,
                                c.Price,
                                c.GroupOfVehicleID,
                                c.PriceMin,
                                c.PriceMax
                            }).ToList())
                            {
                                CAT_PriceGroupVehicle o = new CAT_PriceGroupVehicle();
                                model.CAT_PriceGroupVehicle.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.Price = i.Price;
                                o.PriceMin = i.PriceMin;
                                o.PriceMax = i.PriceMax;
                                o.ContractRoutingID = i.ContractRoutingID;
                                o.GroupOfVehicleID = i.GroupOfVehicleID;
                            }
                            #endregion

                            #region CAT_PriceGVLevel +CAT_PriceGVLevelGroupVehicle


                            foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == objPrice.ID))
                            {
                                CAT_PriceGVLevelGroupVehicle g = new CAT_PriceGVLevelGroupVehicle();
                                g.CreatedBy = Account.UserName;
                                g.CreatedDate = DateTime.Now;
                                g.ContractRoutingID = detail.ContractRoutingID;
                                g.ContractLevelID = detail.ContractLevelID;
                                g.Price = detail.Price;
                                g.PriceMax = detail.PriceMax;
                                g.PriceMin = detail.PriceMin;
                                g.CAT_Price = obj;
                                model.CAT_PriceGVLevelGroupVehicle.Add(g);
                            }

                            #endregion

                            #region CAT_PriceDILoad
                            var listPriceDILoad = model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var i in listPriceDILoad)
                            {
                                CAT_PriceDILoad o = new CAT_PriceDILoad();
                                model.CAT_PriceDILoad.Add(o);

                                o.CreatedBy = Account.UserName;
                                o.CreatedDate = DateTime.Now;

                                o.CAT_Price = obj;
                                o.LocationID = i.LocationID;
                                o.IsLoading = i.IsLoading;
                                o.ParentRoutingID = i.ParentRoutingID;
                                o.RoutingID = i.RoutingID;
                                o.GroupOfLocationID = i.GroupOfLocationID;

                                foreach (var e in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == i.ID).Select(c => new
                                {
                                    c.PriceOfGOPID,
                                    c.Price,
                                    c.GroupOfProductID
                                }).ToList())
                                {
                                    CAT_PriceDILoadDetail g = new CAT_PriceDILoadDetail();

                                    g.CreatedBy = Account.UserName;
                                    g.CreatedDate = DateTime.Now;

                                    g.PriceOfGOPID = e.PriceOfGOPID;
                                    g.GroupOfProductID = e.GroupOfProductID;
                                    g.Price = e.Price;
                                    g.CAT_PriceDILoad = o;
                                    model.CAT_PriceDILoadDetail.Add(g);
                                }
                            }
                            #endregion

                            #region price moq
                            var listMOQ = model.CAT_PriceDIMOQ.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMOQ)
                            {
                                CAT_PriceDIMOQ m = new CAT_PriceDIMOQ();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQSumID = moq.DIMOQSumID;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQ.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupLocation gol = new CAT_PriceDIMOQGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQGroupProduct gol = new CAT_PriceDIMOQGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                {
                                    CAT_PriceDIMOQRouting gol = new CAT_PriceDIMOQRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;
                                    gol.TypeOfTOLocationID = detail.TypeOfTOLocationID;

                                    gol.CAT_PriceDIMOQ = m;

                                    model.CAT_PriceDIMOQRouting.Add(gol);
                                }
                            }
                            #endregion

                            #region DI load moq
                            var listMoqLoad = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == objPrice.ID).ToList();
                            foreach (var moq in listMoqLoad)
                            {
                                CAT_PriceDIMOQLoad m = new CAT_PriceDIMOQLoad();
                                m.CreatedBy = Account.UserName;
                                m.CreatedDate = DateTime.Now;
                                m.MOQName = moq.MOQName;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.IsLoading = moq.IsLoading;
                                m.ExprInput = moq.ExprInput;
                                m.ExprPrice = moq.ExprPrice;
                                m.ExprPriceFix = moq.ExprPriceFix;
                                m.ExprQuan = moq.ExprQuan;
                                m.ExprTon = moq.ExprTon;
                                m.ExprCBM = moq.ExprCBM;
                                m.TypeOfPriceDIExID = moq.TypeOfPriceDIExID;
                                m.ParentRoutingID = moq.ParentRoutingID;
                                m.DIMOQLoadSumID = moq.DIMOQLoadSumID;
                                m.CAT_Price = obj;
                                model.CAT_PriceDIMOQLoad.Add(m);

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupLocation gol = new CAT_PriceDIMOQLoadGroupLocation();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfLocationID = detail.GroupOfLocationID;
                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupLocation.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadGroupProduct gol = new CAT_PriceDIMOQLoadGroupProduct();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.GroupOfProductID = detail.GroupOfProductID;
                                    gol.ExprPrice = detail.ExprPrice;
                                    gol.ExprQuantity = detail.ExprQuantity;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadGroupProduct.Add(gol);
                                }

                                foreach (var detail in moq.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                {
                                    CAT_PriceDIMOQLoadRouting gol = new CAT_PriceDIMOQLoadRouting();

                                    gol.CreatedBy = Account.UserName;
                                    gol.CreatedDate = DateTime.Now;
                                    gol.RoutingID = detail.RoutingID;
                                    gol.ParentRoutingID = detail.ParentRoutingID;
                                    gol.LocationID = detail.LocationID;

                                    gol.CAT_PriceDIMOQLoad = m;

                                    model.CAT_PriceDIMOQLoadRouting.Add(gol);
                                }
                            }
                            #endregion

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Price_DeletePriceNormal(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (obj != null)
                    {
                        //xoa tu DI GOP
                        foreach (var price in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceDIGroupProduct.Remove(price);
                        }
                        //xoa tu gov
                        foreach (var price in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(price);
                        }

                        model.SaveChanges();
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_Price_DeletePriceLevel(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (obj != null)
                    {
                        //xoa tu DI GOP

                        foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceDILevelGroupProduct.Remove(detail);
                        }
                        //xoa tu gov
                        foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == obj.ID))
                        {
                            model.CAT_PriceGVLevelGroupVehicle.Remove(detail);
                        }
                        model.SaveChanges();
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOVENPriceCO_Data VENContract_PriceCO_Data(int contractTermID)
        {
            try
            {
                DTOVENPriceCO_Data result = new DTOVENPriceCO_Data();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");
                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    int iPackingTu = -(int)SYSVarType.TypeOfPackingGOPTU;
                    int iServiceCO = -(int)SYSVarType.TypeOfPackingServiceCO;

                    result.TermClosed = objContractTerm.IsClosed;

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListPackingTU = model.CAT_Packing.Where(c => c.TypeOfPackageID == iPackingTu).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                        TypeOfPackageID = c.TypeOfPackageID
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        ServiceName = c.ServiceName,
                        //PackingID = c.PackingID,
                        //PackingName = c.CAT_Packing.PackingName,
                        //IsContainer = c.CAT_Packing.TypeOfPackageID == iServiceCO
                    }).ToList();


                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                    if (result.TermClosed)
                    {
                        var lstRoutingID = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == objContractTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();


                        result.ListRouting = model.CAT_ContractRouting.Where(c => lstRoutingID.Contains(c.ID)).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATContractRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOVENPrice_ExcelData VENContract_Price_ExcelData(int contractTermID)
        {
            try
            {
                DTOVENPrice_ExcelData result = new DTOVENPrice_ExcelData();
                using (var model = new DataEntities())
                {
                    var objContractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objContractTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objContractTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    int cusID = -1;
                    if (objContract != null && objContract.CustomerID.HasValue)
                        cusID = objContract.CustomerID.Value;

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        PriceOfGOPID = c.PriceOfGOPID,
                        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    }).ToList();


                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractID == objContract.ID && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATContractRouting
                    {
                        ID = c.RoutingID,
                        Code = c.Code,
                        CATCode = c.CAT_Routing.Code,
                        RoutingName = c.CAT_Routing.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                    var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == cusID && c.CustomerRelateID != cusID).Select(c => c.CustomerRelateID).Distinct().ToList();
                    var ListLocation = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID)).Select(c => new
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        CATCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToList();
                    result.ListLocation = ListLocation.Select(c => new DTOCUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CATLocationCode = c.CATCode,
                        LocationName = c.LocationName,
                        Address = c.Address,
                    }).ToList();

                    result.ListPriceOfGOP = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.PriceOfGOP).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        ValueOfVar = c.ValueOfVar,
                        TypeOfVar = c.TypeOfVar
                    }).ToList();

                    result.ListGroupOfLocation = model.CAT_GroupOfLocation.Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region DI_GroupVehicle

        #region old
        public List<DTOPriceGroupVehicle> VENPrice_DI_GroupVehicle_GetData(int priceID)
        {
            try
            {
                List<DTOPriceGroupVehicle> result = new List<DTOPriceGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGroupVehicle
                    {
                        RouteID = c.ContractRoutingID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_GroupVehicle_SaveList(List<DTOPriceGroupVehicle> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == priceNew.RouteID && c.GroupOfVehicleID == priceNew.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.RouteID;
                            obj.GroupOfVehicleID = priceNew.GroupOfVehicleID;
                            model.CAT_PriceGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGroupVehicleData VENPrice_DI_GroupVehicle_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGroupVehicleData result = new DTOPriceGroupVehicleData();
                result.ListDetail = new List<DTOPriceGroupVehicle>();
                result.ListGOV = new List<CATGroupOfVehicle>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (objPrice == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGroupVehicle
                    {
                        ID = c.ID,
                        RouteID = c.ContractRoutingID,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        Price = c.Price
                    }).ToList();

                    result.ListGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.CAT_GroupOfVehicle.ID,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder,
                    }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    if (objPrice.CAT_ContractTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objPrice.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == objPrice.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_GroupVehicle_ExcelImport(List<DTOPriceGroupVehicleImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == detail.RouteID && c.GroupOfVehicleID == detail.GroupOfVehicleID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfVehicleID = detail.GroupOfVehicleID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_GroupVehicle_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOV)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOV)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {
                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOV)
                                {

                                    var check = lst.ListDetail.Where(c => c.RouteID == route.ID && c.GroupOfVehicleID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENPrice_DI_GroupVehicle_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = VENPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOV.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOV.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_GroupVehicle_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENPrice_DI_GroupVehicle_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_GroupVehicle_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOV.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOV.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOV)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceGroupVehicle();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfVehicleID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceGroupVehicle.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOV)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceGroupVehicle.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfVehicleID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceGroupVehicle();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfVehicleID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceGroupVehicle.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_DI_GroupVehicle_GOVList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID).Select(c => c.GroupOfVehicleID).Distinct().ToList();
                    var query = model.CAT_GroupOfVehicle.Where(c => lisGOV.Contains(c.ID)).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Ton = c.Ton,
                        GroupName = c.GroupName
                    }).OrderBy(c => c.Ton).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_GroupVehicle_GOVDelete(List<int> lstGov, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var govID in lstGov)
                    {
                        foreach (var priceGov in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID && c.GroupOfVehicleID == govID))
                        {
                            model.CAT_PriceGroupVehicle.Remove(priceGov);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_GroupVehicle_GOVNotInList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == priceID).Select(c => c.GroupOfVehicleID).Distinct().ToList();
                    var query = model.CAT_GroupOfVehicle.Where(c => !lisGOV.Contains(c.ID)).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Ton = c.Ton,
                        GroupName = c.GroupName
                    }).OrderBy(c => c.Ton).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_GroupVehicle_GOVNotInSave(List<int> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var listRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => c.ID).ToList();
                        foreach (var route in listRoute)
                        {
                            foreach (var govID in lst)
                            {
                                var obj = model.CAT_PriceGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.GroupOfVehicleID == govID);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceGroupVehicle();
                                    obj.GroupOfVehicleID = govID;
                                    obj.PriceID = priceID;
                                    obj.ContractRoutingID = route;
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    model.CAT_PriceGroupVehicle.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = 0;
                            }
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region new

        public List<DTOPriceGVLevelGroupVehicle> VENPrice_DI_PriceGVLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceGVLevelGroupVehicle> result = new List<DTOPriceGVLevelGroupVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceGVLevel_Save(List<DTOPriceGVLevelGroupVehicle> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.ContractLevelID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceGVLevelGroupVehicle();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.ContractLevelID = priceNew.ContractLevelID;
                            obj.PriceID = priceID;
                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceGVLevelData VENPrice_DI_PriceGVLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceGVLevelData result = new DTOPriceGVLevelData();
                result.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                result.ListGroupVehicle = new List<CATGroupOfVehicle>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);
                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();

                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    result.ListDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == priceid).Select(c => new DTOPriceGVLevelGroupVehicle
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        ContractLevelID = c.ContractLevelID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceGVLevel_ExcelImport(List<DTOPriceGVLevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var priceNew in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.RouteID && c.ContractLevelID == priceNew.LevelID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceGVLevelGroupVehicle();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = priceNew.LevelID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = priceNew.Price;
                            obj.PriceMax = priceNew.PriceMax;
                            obj.PriceMin = priceNew.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_PriceGVLevel_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListLevel)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListLevel)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListLevel)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.ContractLevelID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENPrice_DI_PriceGVLevel_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = VENPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListLevel.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListLevel.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_PriceGVLevel_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENPrice_DI_PriceGVLevel_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_PriceGVLevel_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListLevel.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListLevel.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String priceMin = HelperExcel.GetString(eRow, colData++);
                                    String priceMax = HelperExcel.GetString(eRow, colData++);
                                    Int32? getpriceMin = Convert.ToInt32(priceMin);
                                    Int32? getpriceMax = Convert.ToInt32(priceMax);
                                    if (getpriceMin >= 0 || getpriceMax >= 0)
                                    {
                                        var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceGVLevelGroupVehicle();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.ContractRoutingID = getRoutingID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.PriceMax = getpriceMax;
                                        obj.PriceMin = getpriceMin;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var level in lstRoute.ListLevel)
                                {
                                    String price = HelperExcel.GetString(eRow, colData++);
                                    decimal getprice = 0;
                                    try
                                    {
                                        getprice = decimal.Parse(price);
                                    }
                                    catch
                                    {
                                        getprice = 0;
                                    }
                                    var obj = model.CAT_PriceGVLevelGroupVehicle.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == getRoutingID && c.ContractLevelID == level.ID);
                                    if (obj == null)
                                    {
                                        obj = new CAT_PriceGVLevelGroupVehicle();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.ContractLevelID = level.ID;
                                        obj.ContractRoutingID = getRoutingID;
                                        obj.PriceID = priceID;
                                        model.CAT_PriceGVLevelGroupVehicle.Add(obj);
                                    }
                                    else
                                    {
                                        obj.ModifiedBy = Account.UserName;
                                        obj.ModifiedDate = DateTime.Now;
                                    }
                                    obj.Price = getprice;
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region DI_GroupProduct

        public List<DTOPriceDIGroupOfProduct> VENPrice_DI_GroupProduct_List(int priceID)
        {
            try
            {
                List<DTOPriceDIGroupOfProduct> result = new List<DTOPriceDIGroupOfProduct>();

                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                    {
                        ID = c.ID,
                        ContractRoutingID = c.ContractRoutingID,
                        GroupOfProductID = c.GroupOfProductID,
                        Price = c.Price,
                        PriceID = c.PriceID,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_GroupProduct_SaveList(List<DTOPriceDIGroupOfProduct> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceDIGroupProduct.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == priceNew.ContractRoutingID && c.GroupOfProductID == priceNew.GroupOfProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDIGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.GroupOfProductID = priceNew.GroupOfProductID;
                            model.CAT_PriceDIGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMin = priceNew.PriceMin;
                        obj.PriceMax = priceNew.PriceMax;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIGroupOfProductData VENPrice_DI_GroupProduct_Export(int priceID)
        {
            try
            {
                DTOPriceDIGroupOfProductData result = new DTOPriceDIGroupOfProductData();
                result.ListGOP = new List<CUSGroupOfProduct>();
                result.ListDetail = new List<DTOPriceDIGroupOfProduct>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var objContract = price.CAT_ContractTerm.CAT_Contract;
                        int cusID = -1;
                        if (objContract != null && objContract.CustomerID.HasValue)
                            cusID = objContract.CustomerID.Value;

                        var listGOPMapping = new List<int>();
                        if (objContract.CompanyID > 0)
                        {
                            var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                            listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                        }
                        result.ListGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new CUSGroupOfProduct
                        {
                            ID = c.ID,
                            Code = c.Code,
                            GroupName = c.GroupName,
                        }).ToList();

                        if (price.CAT_ContractTerm.IsClosed)
                        {
                            var lstRoutingID = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == price.ContractTermID).Select(c => c.ContractRoutingID).Distinct().ToList();

                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == price.ContractTermID).Select(c => new DTOCATRouting
                            {
                                ID = c.ID,
                                Code = c.Code,
                                RoutingName = c.RoutingName,
                                SortOrder = c.SortOrder,
                            }).OrderBy(c => c.SortOrder).ToList();
                        }

                        result.ListDetail = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIGroupOfProduct
                        {
                            ContractRoutingID = c.ContractRoutingID,
                            GroupOfProductID = c.GroupOfProductID,
                            Price = c.Price,
                            PriceID = c.PriceID,
                            ID = c.ID,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_GroupProduct_Import(List<DTOPriceDIGroupOfProductImport> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in data.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.GroupOfProductID == detail.GroupOfProductID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceDIGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.GroupOfProductID = detail.GroupOfProductID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceDIGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_GroupProduct_ExcelInit(bool isFrame, int priceID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENPrice_DI_GroupProduct_Export(priceID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListGOP)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListGOP)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRoute)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListGOP)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.GroupOfProductID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENPrice_DI_GroupProduct_ExcelChange(bool isFrame, int priceID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = VENPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListGOP.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListGOP.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_GroupProduct_ExcelOnImport(bool isFrame, int priceID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENPrice_DI_GroupProduct_ExcelApprove(bool isFrame, int priceID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_GroupProduct_Export(priceID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListGOP.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListGOP.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOP)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceDIGroupProduct();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfProductID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceDIGroupProduct.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRoute)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListGOP)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceDIGroupProduct.Where(c => c.ContractRoutingID == getRoutingID && c.GroupOfProductID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceDIGroupProduct();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.GroupOfProductID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceDIGroupProduct.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        //ko xài
        #region DI_ConfigLoading

        public List<DTOPriceTruckDILoad> VENPrice_DI_Loading_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDILoad.Where(c => c.PriceID == priceID).Select(c => new
                    {
                        ID = c.ID,
                        IsLoading = c.IsLoading,
                        PriceID = c.PriceID,
                        LocationID = c.LocationID,
                        //  LocationCode = c.CUS_Location.Code,
                        //   LocationName = c.CUS_Location.LocationName,
                        ListPriceDILoadGroupProduct = c.CAT_PriceDILoadDetail.Select(o => new DTOPriceTruckDILoadDetail
                        {
                            ID = o.ID,
                            PriceDILoadID = o.PriceDILoadID,
                            CustomerID = o.CUS_GroupOfProduct.CustomerID,
                            CustomerName = o.CUS_GroupOfProduct.CUS_Customer.CustomerName,
                            GroupOfProductID = o.GroupOfProductID,
                            GroupOfProductCode = o.CUS_GroupOfProduct.Code,
                            GroupOfProductName = o.CUS_GroupOfProduct.GroupName,
                            PriceOfGOPCode = o.SYS_Var.Code,
                            PriceOfGOPName = o.SYS_Var.ValueOfVar,
                            Price = o.Price,
                            PriceOfGOPID = o.PriceOfGOPID
                        }).ToList()
                    }).ToList();
                    foreach (var item in query)
                    {
                        DTOPriceTruckDILoad obj = new DTOPriceTruckDILoad();
                        obj.ID = item.ID;
                        obj.IsLoading = item.IsLoading;
                        obj.PriceID = item.PriceID;
                        //obj.LocationID = item.LocationID;
                        //fix 18/5 cus->cat
                        // obj.LocationCode = item.LocationCode;
                        // obj.LocationName = item.LocationName;
                        obj.ListPriceTruckLoadingDetail = item.ListPriceDILoadGroupProduct;

                        result.Add(obj);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_DI_Loading_Location_NotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.Where(c => c.ID == priceID).Select(c => new { c.CAT_ContractTerm.CAT_Contract.CustomerID }).FirstOrDefault();
                    if (objPrice != null && objPrice.CustomerID > 0)
                    {
                        var lstid = model.CUS_Company.Where(c => c.CustomerOwnID == objPrice.CustomerID).Select(c => c.CustomerRelateID).ToList();
                        var query = model.CUS_Location.Where(c => lstid.Contains(c.CustomerID) && c.CusPartID > 0).Select(c => new DTOPriceLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CATLocationID = c.LocationID,
                            CATPartnerID = c.CUS_Partner.PartnerID,
                            Location = c.LocationName,
                            Address = c.CAT_Location.Address,
                            WardID = c.CAT_Location.WardID,
                            WardName = c.CAT_Location.WardID != null ? c.CAT_Location.CAT_Ward.WardName : "",
                            DistrictID = c.CAT_Location.DistrictID,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            ProvinceID = c.CAT_Location.ProvinceID,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            CountryID = c.CAT_Location.CountryID,
                            CountryName = c.CAT_Location.CAT_Country.CountryName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOPriceLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_Loading_Location_NotIn_SaveList(List<DTOPriceLocation> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var cusID = model.CAT_Price.FirstOrDefault(c => c.ID == priceID).CAT_ContractTerm.CAT_Contract.CustomerID;
                    var lstGop = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID && c.PriceOfGOPID > 0).Select(c => new
                    {
                        ID = c.ID,
                        PriceOfGOPID = c.PriceOfGOPID
                    }).ToList();

                    foreach (var item in data.Distinct().GroupBy(c => c.CATPartnerID).ToList())
                    {
                        var catPart = model.CAT_Partner.FirstOrDefault(c => c.ID == item.Key);
                        if (catPart != null)
                        {
                            var objCusPart = model.CUS_Partner.FirstOrDefault(c => c.PartnerID == item.Key && c.CustomerID == cusID);
                            if (objCusPart == null)
                            {
                                objCusPart = new CUS_Partner();
                                objCusPart.CreatedBy = Account.UserName;
                                objCusPart.CreatedDate = DateTime.Now;
                                objCusPart.CustomerID = cusID.Value;
                                objCusPart.PartnerID = item.Key;
                                objCusPart.PartnerCode = catPart.Code;
                                model.CUS_Partner.Add(objCusPart);
                            }
                            foreach (var detail in item)
                            {
                                var obj = model.CUS_Location.FirstOrDefault(c => c.CustomerID == cusID && c.LocationID == detail.CATLocationID);
                                if (obj == null)
                                {
                                    obj = new CUS_Location();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.CustomerID = cusID.Value;
                                    obj.LocationID = detail.CATLocationID;
                                    obj.CUS_Partner = objCusPart;
                                    obj.Code = detail.Code;
                                    obj.LocationName = catPart.PartnerName;
                                    model.CUS_Location.Add(obj);
                                }
                            }
                        }
                    }

                    model.SaveChanges();
                    var lstLocation = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new { c.ID, c.LocationID });

                    foreach (var item in data)
                    {
                        CAT_PriceDILoad obj = new CAT_PriceDILoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        var objLocation = lstLocation.FirstOrDefault(c => c.LocationID == item.CATLocationID);
                        if (objLocation == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy địa điểm!");
                        obj.LocationID = objLocation.ID;
                        obj.IsLoading = true;
                        model.CAT_PriceDILoad.Add(obj);

                        foreach (var group in lstGop)
                        {
                            CAT_PriceDILoadDetail objDetail = new CAT_PriceDILoadDetail();
                            objDetail.CreatedBy = Account.UserName;
                            objDetail.CreatedDate = DateTime.Now;
                            objDetail.GroupOfProductID = group.ID;
                            objDetail.PriceOfGOPID = group.PriceOfGOPID;
                            objDetail.Price = 0;
                            obj.CAT_PriceDILoadDetail.Add(objDetail);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_Loading_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        if (item.ListPriceTruckLoadingDetail != null && item.ListPriceTruckLoadingDetail.Count > 0)
                        {
                            foreach (var detail in item.ListPriceTruckLoadingDetail)
                            {
                                var obj = model.CAT_PriceDILoadDetail.FirstOrDefault(c => c.PriceDILoadID == item.ID && c.GroupOfProductID == detail.GroupOfProductID);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceDILoadDetail();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.PriceDILoadID = item.ID;
                                    obj.GroupOfProductID = detail.GroupOfProductID;
                                    model.CAT_PriceDILoadDetail.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.PriceOfGOPID = detail.PriceOfGOPID;
                                obj.Price = detail.Price;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_Loading_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_Loading_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceTruckDILoad_Export VENPrice_DI_Loading_Export(int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                //result.ListDILoad = new List<DTOPriceTruckDILoad>();
                //result.ListGroupProduct = new List<DTOCUSGroupOfProduct>();
                using (var model = new DataEntities())
                {
                    //var cusID = model.CAT_Price.Where(c => c.ID == priceID).Select(c => c.CAT_Contract.CustomerID).FirstOrDefault();
                    //result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new DTOCUSGroupOfProduct
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    GroupName = c.GroupName,
                    //    PriceOfGOPID = c.PriceOfGOPID,
                    //    PriceOfGOPName = c.SYS_Var.ValueOfVar
                    //}).ToList();

                    //var query = model.CAT_PriceDILoad.Where(c => c.PriceID == priceID).ToList();
                    //foreach (var item in query)
                    //{
                    //    DTOPriceTruckDILoad obj = new DTOPriceTruckDILoad();
                    //    obj.ID = item.ID;
                    //    obj.IsLoading = item.IsLoading;
                    //    obj.PriceID = item.PriceID;
                    //    //obj.LocationID = item.LocationID;
                    //    //fix 18/5 cus->cat
                    //    // obj.LocationCode = item.CUS_Location.Code;
                    //    //  obj.LocationName = item.CUS_Location.LocationName;
                    //    obj.ListPriceTruckLoadingDetail = new List<DTOPriceTruckDILoadDetail>();
                    //    foreach (var loadGroup in item.CAT_PriceDILoadDetail)
                    //    {
                    //        DTOPriceTruckDILoadDetail detail = new DTOPriceTruckDILoadDetail();
                    //        detail.ID = loadGroup.ID;
                    //        detail.PriceDILoadID = loadGroup.PriceDILoadID;
                    //        detail.CustomerID = loadGroup.CUS_GroupOfProduct.CustomerID;
                    //        detail.CustomerName = loadGroup.CUS_GroupOfProduct.CUS_Customer.CustomerName;
                    //        detail.GroupOfProductID = loadGroup.GroupOfProductID;
                    //        detail.GroupOfProductCode = loadGroup.CUS_GroupOfProduct.Code;
                    //        detail.GroupOfProductName = loadGroup.CUS_GroupOfProduct.GroupName;
                    //        detail.PriceOfGOPCode = loadGroup.SYS_Var.Code;
                    //        detail.PriceOfGOPName = loadGroup.SYS_Var.ValueOfVar;
                    //        detail.PriceOfGOPID = loadGroup.PriceOfGOPID;
                    //        detail.Price = loadGroup.Price;
                    //        obj.ListPriceTruckLoadingDetail.Add(detail);
                    //    }
                    //    result.ListDILoad.Add(obj);
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_Loading_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (data != null)
                    {
                        var customerID = model.CAT_Price.FirstOrDefault(c => c.ID == priceID).CAT_ContractTerm.CAT_Contract.CustomerID;
                        var lstGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerID && c.PriceOfGOPID > 0).Select(c => new
                        {
                            c.ID,
                            c.PriceOfGOPID
                        }).ToList();
                        foreach (var item in data)
                        {
                            var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.PriceID == priceID && c.LocationID == item.LocationID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceDILoad();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.LocationID = item.LocationID;
                                obj.IsLoading = true;
                                model.CAT_PriceDILoad.Add(obj);
                            }

                            model.SaveChanges();

                            foreach (var group in lstGroupOfProduct)
                            {
                                //Đã có Detail => gán Price = 0; PriceOfGOPID = mặc định.
                                var objDetail = model.CAT_PriceDILoadDetail.FirstOrDefault(c => c.GroupOfProductID == group.ID && c.PriceDILoadID == obj.ID);
                                if (objDetail == null)
                                {
                                    objDetail = new CAT_PriceDILoadDetail();
                                    objDetail.CreatedBy = Account.UserName;
                                    objDetail.CreatedDate = DateTime.Now;
                                    objDetail.GroupOfProductID = group.ID;
                                    objDetail.PriceOfGOPID = group.PriceOfGOPID;
                                    obj.CAT_PriceDILoadDetail.Add(objDetail);
                                }
                                objDetail.Price = 0;

                                //Nếu có DL import => gán DL
                                var objGroup = item.ListPriceTruckLoadingDetail.FirstOrDefault(c => c.GroupOfProductID == group.ID);
                                if (objGroup != null)
                                {
                                    objDetail.PriceOfGOPID = objGroup.PriceOfGOPID;
                                    objDetail.Price = objGroup.Price;
                                }
                                model.SaveChanges();
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        //ko xài
        #region DI_PriceEx
        public List<DTOCATRouting> VENPrice_DI_PriceEx_RoutingParentList(int priceID)
        {
            try
            {
                List<DTOCATRouting> result = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID && c.CAT_Routing.ParentID.HasValue).Select(c => new
                        {
                            ID = c.CAT_Routing.ParentID.Value,
                            Code = c.CAT_Routing.CAT_Routing2.Code,
                            RoutingName = c.CAT_Routing.CAT_Routing2.RoutingName,
                        }).Distinct().ToList();
                        result = query.Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATRouting> VENPrice_DI_PriceEx_RoutingList(int priceID)
        {
            try
            {
                List<DTOCATRouting> result = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        result = model.CAT_ContractRouting.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSLocation> VENPrice_DI_PriceEx_DisLocationList(int priceID)
        {
            try
            {
                List<CUSLocation> result = new List<CUSLocation>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == price.CAT_ContractTerm.CAT_Contract.CustomerID && c.CustomerRelateID != price.CAT_ContractTerm.CAT_Contract.CustomerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor).Select(c => new
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            LocationName = c.LocationName
                        }).Distinct().ToList();

                        result = query.Select(c => new CUSLocation
                            {
                                ID = c.ID,
                                Code = c.Code,
                                LocationName = c.LocationName
                            }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSLocation> VENPrice_DI_PriceEx_StockLocationList(int priceID)
        {
            try
            {
                List<CUSLocation> result = new List<CUSLocation>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var lstCustomerID = model.CUS_Company.Where(c => c.CustomerOwnID == price.CAT_ContractTerm.CAT_Contract.CustomerID && c.CustomerRelateID != price.CAT_ContractTerm.CAT_Contract.CustomerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lstCustomerID.Contains(c.CustomerID) && c.CusPartID == null).Select(c => new
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            LocationName = c.LocationName
                        }).Distinct().ToList();

                        result = query.Select(c => new CUSLocation
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LocationName = c.LocationName
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_DI_PriceEx_List(int priceID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfPriceEX).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ValueOfVar = c.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<SYSVar>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_DI_PriceEx_Detail(int typeid, int priceID, string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //var query = model.CAT_PriceDIEx.Where(c => c.PriceID == priceID && c.CAT_TypeOfPriceDIEx.TypeOfPriceExID == typeid).Select(c => new DTOCATPriceDIEx
                    //{
                    //    ID = c.ID,
                    //    PriceID = c.PriceID,
                    //    TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                    //    TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                    //    Price = c.Price,
                    //    Point = c.Point,
                    //    GroupOfVehicleID = c.GroupOfVehicleID,
                    //    GroupOfVehicleName = c.GroupOfVehicleID.HasValue ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                    //    ContractRoutingID = c.ContractRoutingID,
                    //    ContractRoutingCode = c.ContractRoutingID.HasValue ? c.CAT_ContractRouting.Code : string.Empty,
                    //    ContractRoutingName = c.ContractRoutingID.HasValue ? c.CAT_ContractRouting.RoutingName : string.Empty,
                    //    CATParentRoutingID = c.CATParentRoutingID,
                    //    CATParentRoutingCode = c.CATParentRoutingID.HasValue ? c.CAT_Routing.Code : string.Empty,
                    //    CATParentRoutingName = c.CATParentRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,
                    //    CUSLocationID = c.CUSLocationID,
                    //    CUSLocationCode = c.CUSLocationID.HasValue ? c.CUS_Location.Code : string.Empty,
                    //    CUSLocationName = c.CUSLocationID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                    //    Ton = c.Ton,
                    //    CBM = c.CBM,
                    //    Quantity = c.Quantity
                    //}).ToDataSourceResult(CreateRequest(request));

                    //result.Total = query.Total;
                    //result.Data = query.Data as IEnumerable<DTOCATPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPriceDIEx VENPrice_DI_PriceEx_Get(int id, int typeid, int priceID)
        {
            try
            {
                DTOCATPriceDIEx result = new DTOCATPriceDIEx();
                using (var model = new DataEntities())
                {
                    if (id < 1)
                    {
                        var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                        if (price != null)
                        {
                            //var contractRouting = model.CAT_ContractRouting.FirstOrDefault(c => c.ContractID == price.ContractID);
                            //if (contractRouting != null)
                            //    result.ContractRoutingID = contractRouting.ID;

                            //var routing = model.CAT_ContractRouting.FirstOrDefault(c => c.ContractID == price.ContractID && c.CAT_Routing.ParentID.HasValue);
                            //if (routing != null)
                            //    result.CATParentRoutingID = routing.CAT_Routing.ParentID;

                            if (price.CAT_ContractTerm.CAT_Contract.TransportModeID != null && price.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                            {
                                var vehicle = model.CAT_GroupOfVehicle.OrderBy(c => c.Ton).FirstOrDefault();
                                if (vehicle != null)
                                    result.GroupOfVehicleID = vehicle.ID;
                            }

                            //var type = model.CAT_TypeOfPriceDIEx.FirstOrDefault(c => c.TypeOfPriceExID == typeid);
                            //if (type != null)
                            //    result.TypeOfPriceDIExID = type.ID;

                            //switch (typeid)
                            //{
                            //    // Lấy địa điểm NPP
                            //    case -(int)SYSVarType.TypeOfPriceExDropPoint:
                            //        var disLocation = model.CUS_Location.FirstOrDefault(c => c.CustomerID == price.CAT_Contract.CustomerID && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor);
                            //        if (disLocation != null)
                            //            result.CUSLocationID = disLocation.ID;
                            //        break;
                            //    // Lấy địa điểm Kho
                            //    case -(int)SYSVarType.TypeOfPriceExGetPoint:
                            //        var cusLocation = model.CUS_Location.FirstOrDefault(c => c.CustomerID == price.CAT_Contract.CustomerID && c.CusPartID == null);
                            //        if (cusLocation != null)
                            //            result.CUSLocationID = cusLocation.ID;
                            //        break;
                            //}
                        }
                    }
                    else
                    {
                        result = model.CAT_PriceDIEx.Where(c => c.ID == id).Select(c => new DTOCATPriceDIEx
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            Price = c.Price,
                            Point = c.Point,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleName = c.GroupOfVehicleID.HasValue ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                            ContractRoutingID = c.ContractRoutingID,
                            ContractRoutingCode = c.ContractRoutingID.HasValue ? c.CAT_ContractRouting.Code : string.Empty,
                            ContractRoutingName = c.ContractRoutingID.HasValue ? c.CAT_ContractRouting.RoutingName : string.Empty,
                            CATParentRoutingID = c.CATParentRoutingID,
                            CATParentRoutingCode = c.CATParentRoutingID.HasValue ? c.CAT_Routing.Code : string.Empty,
                            CATParentRoutingName = c.CATParentRoutingID.HasValue ? c.CAT_Routing.RoutingName : string.Empty,
                            CUSLocationID = c.CUSLocationID,
                            CUSLocationCode = c.CUSLocationID.HasValue ? c.CUS_Location.Code : string.Empty,
                            CUSLocationName = c.CUSLocationID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity
                        }).FirstOrDefault();
                    }

                    if (typeid == -(int)SYSVarType.TypeOfPriceExDropPoint || typeid == -(int)SYSVarType.TypeOfPriceExGetPoint)
                        result.IsPoint = true;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceEx_SaveList(List<DTOCATPriceDIEx> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_PriceDIEx.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDIEx();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            model.CAT_PriceDIEx.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = item.Price;
                        obj.Point = item.Point;
                        obj.Ton = item.Ton;
                        obj.CBM = item.CBM;
                        obj.Quantity = item.Quantity;
                        obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;
                        obj.GroupOfVehicleID = item.GroupOfVehicleID > 0 ? item.GroupOfVehicleID : null;
                        obj.CUSLocationID = item.CUSLocationID > 0 ? item.CUSLocationID : null;
                        obj.ContractRoutingID = item.ContractRoutingID > 0 ? item.ContractRoutingID : null;
                        obj.CATParentRoutingID = item.CATParentRoutingID > 0 ? item.CATParentRoutingID : null;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int VENPrice_DI_PriceEx_Save(DTOCATPriceDIEx item, int typeid, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.TypeOfPriceDIExID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn loại phí!");

                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Bảng giá ko tồn tại!");

                    var obj = model.CAT_PriceDIEx.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Price = item.Price;
                    obj.Point = item.Point;
                    obj.Ton = item.Ton;
                    obj.CBM = item.CBM;
                    obj.Quantity = item.Quantity;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;
                    obj.GroupOfVehicleID = item.GroupOfVehicleID > 0 ? item.GroupOfVehicleID : null;
                    obj.ContractRoutingID = item.ContractRoutingID > 0 ? item.ContractRoutingID : null;
                    obj.CATParentRoutingID = item.CATParentRoutingID > 0 ? item.CATParentRoutingID : null;
                    obj.CUSLocationID = null;
                    if (item.CUSLocationID > 0)
                    {
                        // Ktra cus location có tồn tại chưa
                        var cusLocation = model.CUS_Location.FirstOrDefault(c => c.LocationID == item.CUSLocationID && c.CustomerID == price.CAT_ContractTerm.CAT_Contract.CustomerID);
                        if (cusLocation == null)
                        {
                            var catLocation = model.CAT_Location.FirstOrDefault(c => c.ID == item.CUSLocationID);
                            if (catLocation != null)
                            {
                                cusLocation = new CUS_Location();
                                cusLocation.CreatedBy = Account.UserName;
                                cusLocation.CreatedDate = DateTime.Now;
                                cusLocation.LocationID = item.CUSLocationID.Value;
                                cusLocation.CustomerID = price.CAT_ContractTerm.CAT_Contract.CustomerID.Value;
                                cusLocation.Code = catLocation.Code;
                                cusLocation.LocationName = catLocation.Location;
                                model.CUS_Location.Add(cusLocation);
                                if (typeid == -(int)SYSVarType.TypeOfPriceExDropPoint)
                                {
                                    var partner = model.CAT_PartnerLocation.FirstOrDefault(c => c.LocationID == item.CUSLocationID);
                                    if (partner != null)
                                    {
                                        var cusPart = model.CUS_Partner.FirstOrDefault(c => c.PartnerID == partner.PartnerID && c.CustomerID == price.CAT_ContractTerm.CAT_Contract.CustomerID);
                                        if (cusPart == null)
                                        {
                                            cusPart = new CUS_Partner();
                                            cusPart.CreatedBy = Account.UserName;
                                            cusPart.CreatedDate = DateTime.Now;
                                            cusPart.PartnerID = partner.PartnerID;
                                            cusPart.CustomerID = price.CAT_ContractTerm.CAT_Contract.CustomerID.Value;
                                            cusPart.PartnerCode = partner.PartnerCode;
                                            model.CUS_Partner.Add(cusPart);
                                        }
                                        cusLocation.CUS_Partner = cusPart;
                                    }
                                }
                            }
                        }
                        if (cusLocation != null)
                            obj.CUS_Location = cusLocation;
                    }
                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceEx_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.CAT_PriceDIEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO_Packing

        public List<DTOPriceRouting> VENPrice_CO_COPackingPrice_List(int priceID)
        {
            try
            {
                List<DTOPriceRouting> result = new List<DTOPriceRouting>();
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objPrice.CAT_ContractTerm.ContractID);
                        result = objContract.CAT_ContractRouting.Select(c => new DTOPriceRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();

                        foreach (var item in result)
                        {
                            item.ListContainerPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceCOContainer
                            {
                                ID = c.ID,
                                PackingID = c.PackingID,
                                Price = c.Price,
                                PriceMin = c.PriceMin,
                                PriceMax = c.PriceMax,
                                PriceID = c.PriceID,
                                ContractRoutingID = c.ContractRoutingID,
                                PackingName = c.CAT_Packing.PackingName
                            }).ToList();
                        }
                    }
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_CO_COPackingPrice_SaveList(List<DTOPriceRouting> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routing in data)
                    {
                        if (routing.ListContainerPrice != null && routing.ListContainerPrice.Count > 0)
                        {
                            foreach (var con in routing.ListContainerPrice)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.ContractRoutingID == routing.ID && c.PackingID == con.PackingID);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.PriceID = priceID;
                                    obj.PackingID = con.PackingID;
                                    obj.ContractRoutingID = routing.ID;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = con.Price;
                                obj.PriceMax = con.PriceMax;
                                obj.PriceMin = con.PriceMin;
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceContainer_Export VENPrice_CO_COPackingPrice_Export(int priceID)
        {
            try
            {
                DTOPriceContainer_Export result = new DTOPriceContainer_Export();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOPrice_Routing>();
                result.ListRoutingPrice = new List<DTOPrice_COPrice>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price != null)
                    {
                        var lstPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PackingName = c.PackingName
                        }).ToList();
                        result.ListPacking.AddRange(lstPacking);
                        var lstRouting = model.CAT_ContractRouting.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new DTOPrice_Routing
                        {
                            RoutingID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToList();
                        result.ListRouting.AddRange(lstRouting);
                        var lstRoutingPrice = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.ContractRoutingID.HasValue).Select(c => new DTOPrice_COPrice
                        {
                            RoutingID = c.ContractRoutingID.Value,
                            PackingID = c.PackingID,
                            Price = c.Price
                        }).ToList();
                        result.ListRoutingPrice.AddRange(lstRoutingPrice);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_CO_COPackingPrice_Import(List<DTOPrice_COPackingPrice_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (data != null)
                    {
                        // Xóa hết dữ liệu cũ
                        var lst = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID);
                        foreach (var item in lst)
                        {
                            model.CAT_PriceCOContainer.Remove(item);
                        }

                        foreach (var item in data.Where(c => c.ID > 0))
                        {
                            foreach (var o in item.ListContainerPrice)
                            {
                                var objPrice = new CAT_PriceCOContainer();
                                objPrice.CreatedBy = Account.UserName;
                                objPrice.CreatedDate = DateTime.Now;
                                objPrice.ContractRoutingID = item.ID;
                                objPrice.PackingID = o.PackingID;
                                objPrice.PriceID = priceID;
                                objPrice.Price = o.Price;
                                model.CAT_PriceCOContainer.Add(objPrice);
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO_Service old

        //public DTOResult VENPrice_CO_Service_List(string request, int priceID)
        //{
        //    try
        //    {
        //        DTOResult result = new DTOResult();
        //        using (var model = new DataEntities())
        //        {
        //            var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID).Select(c => new DTOCATPriceCOService
        //            {
        //                ID = c.ID,
        //                PriceID = c.PriceID,
        //                ServiceID = c.ServiceID,
        //                Price = c.Price,
        //                CurrencyID = c.CurrencyID,
        //                ServiceName = c.CAT_Service.ServiceName,
        //                CurrencyName = c.CAT_Currency.CurrencyName,
        //                PackingID = c.PackingID,
        //                PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
        //                PriceMax = c.PriceMax,
        //                PriceMin = c.PriceMin,
        //                //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
        //                //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
        //            }).ToDataSourceResult(CreateRequest(request));
        //            result.Total = query.Total;
        //            result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
        //            return result;
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        //public int VENPrice_CO_Service_Save(DTOCATPriceCOService item, int priceID)
        //{
        //    try
        //    {
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;
        //            #region Kiểm tra trùng Service
        //            if (item.PackingID.HasValue)
        //            {
        //                if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == item.PackingID && c.ID != item.ID) != null)
        //                    throw FaultHelper.BusinessFault(null, null, "Dịch vụ và loại Cotainer không được trùng!");
        //            }
        //            else
        //            {
        //                if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == null && c.ID != item.ID) != null)
        //                    throw FaultHelper.BusinessFault(null, null, "Dịch vụ không được trùng!");
        //            }
        //            #endregion

        //            var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == item.ID);
        //            if (obj == null)
        //            {
        //                obj = new CAT_PriceCOService();
        //                obj.CreatedBy = Account.UserName;
        //                obj.CreatedDate = DateTime.Now;
        //                obj.PriceID = priceID;
        //            }
        //            else
        //            {
        //                obj.ModifiedBy = Account.UserName;
        //                obj.ModifiedDate = DateTime.Now;
        //            }
        //            obj.ServiceID = item.ServiceID;
        //            obj.CurrencyID = item.CurrencyID;
        //            if (item.IsContainer)
        //                obj.PackingID = item.PackingID;
        //            else
        //                obj.PackingID = null;
        //            obj.Price = item.Price;
        //            obj.PriceMax = item.PriceMax;
        //            obj.PriceMin = item.PriceMin;

        //            if (obj.ID < 1)
        //                model.CAT_PriceCOService.Add(obj);

        //            model.SaveChanges();

        //            return obj.ID;
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        //public void VENPrice_CO_Service_Delete(int id)
        //{
        //    try
        //    {
        //        DTOError result = new DTOError();
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;
        //            var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == id);
        //            if (obj != null)
        //            {
        //                model.CAT_PriceCOService.Remove(obj);
        //                model.SaveChanges();
        //            }
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        #endregion

        #region CO_Service

        public DTOResult VENPrice_CO_Service_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID == null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_CO_ServicePacking_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOService.Where(c => c.PriceID == priceID && c.PackingID != null).Select(c => new DTOCATPriceCOService
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        ServiceID = c.ServiceID,
                        Price = c.Price,
                        CurrencyID = c.CurrencyID,
                        ServiceName = c.CAT_Service.ServiceName,
                        CurrencyName = c.CAT_Currency.CurrencyName,
                        PackingID = c.PackingID,
                        PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        //IsContainer = c.CAT_Service.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingServiceCO,
                        //PackingNameService = c.CAT_Service.CAT_Packing.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceCOService>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATPriceCOService VENPrice_CO_Service_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public DTOCATPriceCOService VENPrice_CO_ServicePacking_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCATPriceCOService result = new DTOCATPriceCOService();
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOService.Where(c => c.ID == id).Select(c => new DTOCATPriceCOService
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            ServiceID = c.ServiceID,
                            PackingID = c.PackingID,
                            Price = c.Price,
                            CurrencyID = c.CurrencyID,
                            ServiceName = c.CAT_Service.ServiceName,
                            CurrencyName = c.CAT_Currency.CurrencyName,
                            PackingName = c.CAT_Packing != null ? c.CAT_Packing.PackingName : string.Empty,
                            PriceMax = c.PriceMax,
                            PriceMin = c.PriceMin,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var objService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).FirstOrDefault();
                        if (objService != null) result.ServiceID = objService.ID;
                        var objCurrency = model.CAT_Currency.FirstOrDefault();
                        if (objCurrency != null) result.CurrencyID = objCurrency.ID;
                        var objPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).FirstOrDefault();
                        if (objPacking != null) result.PackingID = objPacking.ID;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public int VENPrice_CO_Service_Save(DTOCATPriceCOService item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng Service
                    if (item.PackingID.HasValue)
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == item.PackingID && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ và loại Cotainer không được trùng!");
                    }
                    else
                    {
                        if (model.CAT_PriceCOService.FirstOrDefault(c => c.PriceID == priceID && c.ServiceID == item.ServiceID && c.PackingID == null && c.ID != item.ID) != null)
                            throw FaultHelper.BusinessFault(null, null, "Dịch vụ không được trùng!");
                    }
                    #endregion

                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOService();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ServiceID = item.ServiceID;
                    obj.CurrencyID = item.CurrencyID;
                    if (item.PackingID != null && item.PackingID > 0)
                        obj.PackingID = item.PackingID;
                    else
                        obj.PackingID = null;
                    obj.Price = item.Price;
                    obj.PriceMax = item.PriceMax;
                    obj.PriceMin = item.PriceMin;

                    if (obj.ID < 1)
                        model.CAT_PriceCOService.Add(obj);

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_CO_Service_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOService.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        model.CAT_PriceCOService.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_CO_CATService_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_CO_CATServicePacking_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).Select(c => new CATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName
                    }).ToList();
                    result.Data = query as IEnumerable<CATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENPrice_CO_CATCODefault_List(int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = new List<DTOCATPacking>();
                    if (contractTermID > 0)
                    {
                        int ContractID = model.CAT_ContractTerm.Where(c => c.ID == contractTermID).Select(c => c.ContractID).FirstOrDefault();
                        query = model.CAT_ContractCODefault.Where(c => c.ContractID == ContractID).Select(c => new DTOCATPacking
                        {
                            ID = c.PackingID,
                            PackingName = c.CAT_Packing.PackingName
                        }).ToList();
                    }
                    result.Data = query as IEnumerable<DTOCATPacking>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region DI_PriceLevel

        public List<DTOPriceDILevelGroupProduct> VENPrice_DI_PriceLevel_DetailData(int priceID)
        {
            try
            {
                List<DTOPriceDILevelGroupProduct> result = new List<DTOPriceDILevelGroupProduct>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceLevel_Save(List<DTOPriceDILevelGroupProduct> lst, int priceid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in lst)
                    {
                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.PriceID == priceid && c.ContractRoutingID == priceNew.RoutingID && c.ContractLevelID == priceNew.LevelID && c.GroupOfProductID == priceNew.GroupProductID);
                        if (obj == null)
                        {
                            obj = new CAT_PriceDILevelGroupProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractLevelID = priceNew.LevelID;
                            obj.GroupOfProductID = priceNew.GroupProductID;
                            obj.ContractRoutingID = priceNew.RoutingID;
                            obj.PriceID = priceid;
                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                    }
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDILevelData VENPrice_DI_PriceLevel_ExcelData(int priceid, int contractTermID)
        {
            try
            {
                DTOPriceDILevelData result = new DTOPriceDILevelData();
                result.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                result.ListGroupProduct = new List<DTOCUSGroupOfProduct>();
                result.ListLevel = new List<DTOCATContractLevel>();
                result.ListRoute = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục ID:" + contractTermID);

                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == objTerm.ContractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ");

                    result.ListLevel = model.CAT_ContractLevel.Where(c => c.ContractID == objTerm.ContractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName
                    }).ToList();

                    var listGOPMapping = new List<int>();
                    if (objContract.CompanyID > 0)
                    {
                        var CustomerRelateID = objContract.CUS_Company.CustomerRelateID;
                        listGOPMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == objContract.CustomerID && c.CustomerID == CustomerRelateID).Select(c => c.GroupOfProductVENID).ToList();
                    }
                    result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == objContract.CustomerID && (objContract.CompanyID == null ? true : listGOPMapping.Contains(c.ID))).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                    }).ToList();

                    //result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == objTerm.CAT_Contract.CustomerID.Value).Select(c => new DTOCUSGroupOfProduct
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    GroupName = c.GroupName,
                    //}).ToList();

                    if (objTerm.IsClosed)
                    {
                        var lstRoutingID = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == objTerm.ID).Select(c => c.ContractRoutingID).Distinct().ToList();

                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && lstRoutingID.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder
                        }).OrderBy(c => c.SortOrder).ToList();
                    }
                    else
                    {
                        result.ListRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName,
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();
                    }

                    result.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == priceid).Select(c => new DTOPriceDILevelGroupProduct
                    {
                        ID = c.ID,
                        RoutingID = c.ContractRoutingID,
                        LevelID = c.ContractLevelID,
                        GroupProductID = c.GroupOfProductID,
                        Price = c.Price
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceLevel_ExcelImport(List<DTOPriceDILevelImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == detail.LevelID && c.ContractRoutingID == row.RouteID && c.GroupOfProductID == detail.GroupProductID && c.PriceID == priceID);
                            if (obj == null)
                            {
                                obj = new CAT_PriceDILevelGroupProduct();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ContractLevelID = detail.LevelID;
                                obj.GroupOfProductID = detail.GroupProductID;
                                obj.ContractRoutingID = row.RouteID;
                                obj.PriceID = priceID;
                                model.CAT_PriceDILevelGroupProduct.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_PriceLevel_ExcelInit(int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        //cot tinh
                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                        //cot dong
                        int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                        var cellCols = new List<Cell>();
                        foreach (var level in lst.ListLevel)
                        {
                            cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            col += lst.ListGroupProduct.Count;
                            foreach (var pro in lst.ListGroupProduct)
                            {
                                cellCols.Add(HelperExcel.NewCell(collever++, pro.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                        }

                        // add cot vao row
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                        //merged cot
                        //merged cot tinh
                        col = 0;
                        ws.MergedCells = new List<string>(){ 
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                            HelperExcel.AddressRows(col++, 0, 1),
                        };

                        //merged cot dong
                        var mercol = 3;
                        foreach (var level in lst.ListLevel)
                        {
                            ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + lst.ListGroupProduct.Count - 1));
                            mercol += lst.ListGroupProduct.Count;
                        }

                        //du lieu vao
                        int stt = 1;
                        foreach (var route in lst.ListRoute)
                        {
                            cells = new List<Cell>();
                            cells.Add(HelperExcel.NewCell(stt));
                            cells.Add(HelperExcel.NewCell(route.Code));
                            cells.Add(HelperExcel.NewCell(route.RoutingName));
                            foreach (var level in lst.ListLevel)
                            {
                                foreach (var pro in lst.ListGroupProduct)
                                {
                                    var check = lst.ListDetail.Where(c => c.RoutingID == route.ID && c.LevelID == level.ID && c.GroupProductID == pro.ID).FirstOrDefault();
                                    if (check != null)
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    else
                                        cells.Add(HelperExcel.NewCell(0));
                                }
                            }
                            stt++;
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENPrice_DI_PriceLevel_ExcelChange(int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = VENPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lst.ListGroupProduct.Count * lst.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lst.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_DI_PriceLevel_OnExcelImport(int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;
                        colData = 1;
                        string dataCodeRouting = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataCodeRouting, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 250);
                        indexError++;
                        if (flag && lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).Count() < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRoute.Where(c => c.Code == dataCodeRouting).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckRoute, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError++;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataPrice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataPrice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENPrice_DI_PriceLevel_ExcelApprove(int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_DI_PriceLevel_ExcelData(priceID, contractTermID);
                    int ColEnd = lstRoute.ListGroupProduct.Count * lstRoute.ListLevel.Count;

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colCheckRoute = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        foreach (var eRow in lstRow)
                        {
                            if (eRow.Index == 0) continue;
                            colData = 3;
                            string routeID = HelperExcel.GetString(eRow, colCheckRoute);
                            int getrouteID = Int32.Parse(routeID);
                            foreach (var level in lstRoute.ListLevel)
                            {
                                foreach (var pro in lstRoute.ListGroupProduct)
                                {
                                    string price = "0";
                                    if (colData < eRow.Cells.Count)
                                        price = HelperExcel.GetString(eRow, colData++);
                                    int getprice = Int32.Parse(price);
                                    if (getprice > 0)
                                    {
                                        var obj = model.CAT_PriceDILevelGroupProduct.FirstOrDefault(c => c.ContractLevelID == level.ID && c.ContractRoutingID == getrouteID && c.GroupOfProductID == pro.ID && c.PriceID == priceID);
                                        if (obj == null)
                                        {
                                            obj = new CAT_PriceDILevelGroupProduct();
                                            obj.CreatedBy = Account.UserName;
                                            obj.CreatedDate = DateTime.Now;
                                            obj.ContractLevelID = level.ID;
                                            obj.GroupOfProductID = pro.ID;
                                            obj.ContractRoutingID = getrouteID;
                                            obj.PriceID = priceID;
                                            model.CAT_PriceDILevelGroupProduct.Add(obj);
                                        }
                                        else
                                        {
                                            obj.ModifiedBy = Account.UserName;
                                            obj.ModifiedDate = DateTime.Now;
                                        }
                                        obj.Price = getprice;
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq new

        #region info
        public DTOResult VENPrice_DI_PriceMOQ_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID).Select(c => new DTOCATPriceDIMOQ
                    {
                        ID = c.ID,
                        PriceID = c.PriceID,
                        MOQName = c.MOQName,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQSumID = c.DIMOQSumID,
                        DIMOQSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATPriceDIMOQ>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATPriceDIMOQ VENPrice_DI_PriceMOQ_Get(int id)
        {
            try
            {
                DTOCATPriceDIMOQ result = new DTOCATPriceDIMOQ();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQ.Where(c => c.ID == id).Select(c => new DTOCATPriceDIMOQ
                        {
                            ID = c.ID,
                            PriceID = c.PriceID,
                            MOQName = c.MOQName,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQSumID = c.DIMOQSumID,
                            DIMOQSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOCATPriceDIMOQ();
                        result.ID = 0;
                        result.DIMOQSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQSum).FirstOrDefault();
                        if (obj != null) result.DIMOQSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENPrice_DI_PriceMOQ_Save(DTOCATPriceDIMOQ item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQ();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIMOQ.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQSumID = item.DIMOQSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQ.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == obj.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == priceID))
                    {
                        foreach (var item in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                            model.CAT_PriceDIMOQRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQ.Remove(moq);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult VENPrice_DI_PriceMOQ_GroupLocation_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_GroupLocation_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_GroupLocation_GroupNotInList(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq GroupProduct
        public DTOResult VENPrice_DI_PriceMOQ_GroupProduct_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == priceMOQID).Select(c => new DTOPriceDIMOQGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQGroupProduct VENPrice_DI_PriceMOQ_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQGroupProduct result = new DTOPriceDIMOQGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQID = c.PriceDIMOQID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_GroupProduct_Save(DTOPriceDIMOQGroupProduct item, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        model.CAT_PriceDIMOQGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq Location
        public DTOResult VENPrice_DI_PriceMOQ_Location_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLocation VENPrice_DI_PriceMOQ_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLocation result = new DTOPriceDIMOQLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Location_Save(DTOPriceDIMOQLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Location_LocationNotInSaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_Location_LocationNotInList(string request, int priceMOQID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (priceMOQID > 0)
                    {
                        var objContract = model.CAT_PriceDIMOQ.Where(c => c.ID == priceMOQID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult VENPrice_DI_PriceMOQ_Route_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Route_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_Route_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult VENPrice_DI_PriceMOQ_ParentRoute_List(string request, int priceMOQID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQParentRouting
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_ParentRoute_SaveList(List<int> lst, int priceMOQID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceMOQID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_ParentRoute_RouteNotInList(string request, int priceMOQID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceMOQID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();
                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI partner MOQ
        public DTOResult VENPrice_DI_PriceMOQ_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIMOQPartner
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID;
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceDIMOQPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult VENPrice_DI_PriceMOQ_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        PriceDIMOQID = c.PriceDIMOQID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQ_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQ_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region price ex new

        #region info
        public DTOResult VENPrice_DI_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceDIEx
                    {
                        ID = c.ID,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                        ExprCBM = c.ExprCBM,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        ExprTon = c.ExprTon,
                        Note = c.Note,
                        DIExSumID = c.DIExSumID,
                        DIExSumName = c.SYS_Var.ValueOfVar
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIEx VENPrice_DI_Ex_Get(int id)
        {
            try
            {
                DTOPriceDIEx result = new DTOPriceDIEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIEx.Where(c => c.ID == id).Select(c => new DTOPriceDIEx
                        {
                            ID = c.ID,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            ExprCBM = c.ExprCBM,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            ExprTon = c.ExprTon,
                            Note = c.Note,
                            DIExSumID = c.DIExSumID,
                            DIExSumName = c.SYS_Var.ValueOfVar,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        result.TypeOfPriceDIExID = 0;
                        if (typeEx != null) result.TypeOfPriceDIExID = typeEx.ID;
                        var diExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIExSum).FirstOrDefault();
                        result.DIExSumID = 0;
                        if (diExSum != null) result.DIExSumID = diExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENPrice_DI_Ex_Save(DTOPriceDIEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceDIEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;
                    obj.DIExSumID = item.DIExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == obj.ID))
                            model.CAT_PriceDIExRouting.Remove(item);

                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIExID == obj.ID))
                            model.FIN_Temp.Remove(item);

                        model.CAT_PriceDIEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupLocation
        public DTOResult VENPrice_DI_Ex_GroupLocation_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_GroupLocation_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIExGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIExGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_GroupLocation_GroupNotInList(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == priceExID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex GroupProduct
        public DTOResult VENPrice_DI_Ex_GroupProduct_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == priceExID).Select(c => new DTOPriceDIExGroupProduct
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExGroupProduct VENPrice_DI_Ex_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIExGroupProduct result = new DTOPriceDIExGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIExGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIExGroupProduct
                        {
                            ID = c.ID,
                            PriceDIExID = c.PriceDIExID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIExID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_GroupProduct_Save(DTOPriceDIExGroupProduct item, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIExGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIExGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        model.CAT_PriceDIExGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex Location
        public DTOResult VENPrice_DI_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIExLocation VENPrice_DI_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceDIExLocation result = new DTOPriceDIExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIExRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Location_Save(DTOPriceDIExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_Location_LocationNotInList(string request, int priceExID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (priceExID > 0)
                    {
                        var objContract = model.CAT_PriceDIEx.Where(c => c.ID == priceExID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.CAT_Location.Location,
                            Address = c.CAT_Location.Address,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex ruote
        public DTOResult VENPrice_DI_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceDIExRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di ex parent route
        public DTOResult VENPrice_DI_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIExParentRouting
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI partner
        public DTOResult VENPrice_DI_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceDIExPartner
                    {
                        ID = c.ID,
                        PriceDIExID = c.PriceDIExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID;
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceDIExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Ex MOQ
        public DTOResult VENPrice_DI_Ex_Province_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Ex_Province_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIExID = priceExID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_Ex_Province_NotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == priceExID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Loading Up

        #region common
        public void VENPrice_DI_Load_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Load_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_Load_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> VENPrice_DI_LoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_LoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_LocationNotIn_List(model, Account, request, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_LoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadLocation_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> VENPrice_DI_LoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_LoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_LoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadRoute_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_LoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> VENPrice_DI_LoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_LoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_LoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, true);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> VENPrice_DI_LoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadParner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_LoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_LoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_LoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region Unload

        #region common
        public void VENPrice_DI_UnLoad_Delete(int id)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                            model.CAT_PriceDILoadDetail.Remove(detail);

                        model.CAT_PriceDILoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoad_DeleteList(List<int> data)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in data)
                    {
                        var obj = model.CAT_PriceDILoad.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == obj.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);

                            model.CAT_PriceDILoad.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoad_DeleteAllList(int priceID)
        {
            try
            {
                DTOError result = new DTOError();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        foreach (var diload in model.CAT_PriceDILoad.Where(c => c.PriceID == objPrice.ID && !c.IsLoading))
                        {
                            foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == diload.ID))
                                model.CAT_PriceDILoadDetail.Remove(detail);
                            model.CAT_PriceDILoad.Remove(diload);
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không thấy bảng giá");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Location
        public List<DTOPriceTruckDILoad> VENPrice_DI_UnLoadLocation_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadLocation_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_UnLoadLocation_LocationNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_LocationNotIn_List(model, Account, request, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadLocation_LocationNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_LocationNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadLocation_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadLocation_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_UnLoadLocation_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadLocation_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadLocation_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 1, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Route
        public List<DTOPriceTruckDILoad> VENPrice_DI_UnLoadRoute_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadRoute_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_UnLoadRoute_RouteNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_RouteNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadRoute_RouteNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_RouteNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadRoute_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadRoute_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_UnLoadRoute_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadRoute_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadRoute_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 2, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region TypeOfPartner
        public List<DTOPriceTruckDILoad> VENPrice_DI_UnLoadPartner_List(int priceID)
        {
            try
            {
                List<DTOPriceTruckDILoad> result = new List<DTOPriceTruckDILoad>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_SaveList(List<DTOPriceTruckDILoad> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_UnLoadPartner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Excel
        public DTOPriceTruckDILoad_Export VENPrice_DI_UnLoadPartner_Export(int contractTermID, int priceID)
        {
            try
            {
                DTOPriceTruckDILoad_Export result = new DTOPriceTruckDILoad_Export();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Export(model, Account, contractTermID, priceID, true);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_Import(List<DTOPriceTruckDILoad_Import> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_Load_Import(model, Account, data, priceID, 3, false);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Partner
        public List<DTOPriceDILoadPartner> VENPrice_DI_UnLoadPartner_Partner_List(int priceID)
        {
            try
            {
                List<DTOPriceDILoadPartner> result = new List<DTOPriceDILoadPartner>();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_List(model, Account, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_Partner_SaveList(List<DTOPriceDILoadPartner> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_SaveList(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_UnLoadPartner_Partner_PartnerNotIn_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    result = HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_List(model, Account, request, priceID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(List<int> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_PartnerNotIn_SaveList(model, Account, data, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_UnLoadPartner_Partner_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Price_DI_UnLoadPartner_Partner_DeleteList(model, Account, priceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion
        #endregion

        #region MOQ Load & Unload

        #region Load

        #region info
        public DTOResult VENPrice_DI_PriceMOQLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad VENPrice_DI_PriceMOQLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                        {
                            ID = c.ID,
                            MOQName = c.MOQName,
                            PriceID = c.PriceID,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQLoadSumID = c.DIMOQLoadSumID,
                            DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENPrice_DI_PriceMOQLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = true;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();

                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Group Location
        public DTOResult VENPrice_DI_PriceMOQLoad_GroupLocation_List(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfLocationID = c.GroupOfLocationID,
                        GroupOfLocationCode = c.CAT_GroupOfLocation.Code,
                        GroupOfLocationName = c.CAT_GroupOfLocation.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_GroupLocation_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupLocation.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupLocation.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_GroupLocation_SaveList(List<int> lst, int priceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var group in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadGroupLocation();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = priceMOQLoadID;
                        obj.GroupOfLocationID = group;
                        model.CAT_PriceDIMOQLoadGroupLocation.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_GroupLocation_GroupNotInList(string request, int priceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstGroupLocationID = model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == priceMOQLoadID).Select(c => c.GroupOfLocationID).Distinct().ToList();
                    var query = model.CAT_GroupOfLocation.Where(c => !lstGroupLocationID.Contains(c.ID)).Select(c => new DTOCATGroupOfLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATGroupOfLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load GroupProduct
        public DTOResult VENPrice_DI_PriceMOQLoad_GroupProduct_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID).Select(c => new DTOPriceDIMOQLoadGroupProduct
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        GroupOfProductID = c.GroupOfProductID,
                        ExprPrice = c.ExprPrice,
                        ExprQuantity = c.ExprQuantity,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductCode = c.CUS_GroupOfProduct.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoadGroupProduct VENPrice_DI_PriceMOQLoad_GroupProduct_Get(int id, int cusID)
        {
            try
            {
                DTOPriceDIMOQLoadGroupProduct result = new DTOPriceDIMOQLoadGroupProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadGroupProduct
                        {
                            ID = c.ID,
                            PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                            GroupOfProductID = c.GroupOfProductID,
                            ExprPrice = c.ExprPrice,
                            ExprQuantity = c.ExprQuantity
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = 0;
                        result.PriceDIMOQLoadID = 0;
                        result.GroupOfProductID = 0;
                        var obj = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).FirstOrDefault();
                        if (obj != null) result.GroupOfProductID = obj.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_GroupProduct_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadGroupProduct.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_GroupProduct_Save(DTOPriceDIMOQLoadGroupProduct item, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.CAT_PriceDIMOQLoadGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoadGroupProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        model.CAT_PriceDIMOQLoadGroupProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }

                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.ExprQuantity = item.ExprQuantity;
                    obj.ExprPrice = item.ExprPrice;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_GroupProduct_GOPList(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price moq load Location
        public DTOResult VENPrice_DI_PriceMOQLoad_Location_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        LocationID = c.LocationID.Value,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Location_LocationNotInSaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.LocationID = locationID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_Location_LocationNotInList(string request, int PriceMOQLoadID, int customerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (PriceMOQLoadID > 0)
                    {
                        var objContract = model.CAT_PriceDIMOQLoad.Where(c => c.ID == PriceMOQLoadID).FirstOrDefault().CAT_Price.CAT_ContractTerm.CAT_Contract;
                        int CompanyID = objContract.CompanyID > 0 ? objContract.CUS_Company.CustomerRelateID : -1;
                        var lst = new List<int>();

                        if (CompanyID > 0)
                        {
                            lst.Add(CompanyID);
                        }
                        else
                        {
                            lst = model.CUS_Company.Where(c => c.CustomerOwnID == customerID).Select(c => c.CustomerRelateID).Distinct().ToList();
                        }

                        var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CUS_Location.Where(c => lst.Contains(c.CustomerID) && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Code = c.Code,
                            Location = c.LocationName,
                            Address = c.CAT_Location.Address,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        }).Distinct().ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOPriceDIMOQLoadLocation VENPrice_DI_PriceMOQLoad_Location_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoadLocation result = new DTOPriceDIMOQLoadLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == id).Select(c => new DTOPriceDIMOQLoadLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENPrice_DI_PriceMOQLoad_Location_Save(DTOPriceDIMOQLoadLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoadRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq ruote
        public DTOResult VENPrice_DI_PriceMOQLoad_Route_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Route_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_Route_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.RoutingID.HasValue).Select(c => c.RoutingID).Distinct().ToList();

                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price di moq parent route
        public DTOResult VENPrice_DI_PriceMOQLoad_ParentRoute_List(string request, int PriceMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceDIMOQLoadParentRoute
                    {
                        ID = c.ID,
                        PriceDIMOQLoadID = c.PriceDIMOQLoadID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoadParentRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_ParentRoute_SaveList(List<int> lst, int PriceMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceMOQLoadID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_ParentRoute_RouteNotInList(string request, int PriceMOQLoadID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceMOQLoadID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price DI Province MOQ
        public DTOResult VENPrice_DI_PriceMOQLoad_Province_List(string request, int PriceDIMOQLoadID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID.HasValue).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceID = c.ProvinceID.Value,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        ProvinceCode = c.CAT_Province.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Province_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceDIMOQLoadRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceDIMOQLoadRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQLoad_Province_SaveList(List<int> lst, int PriceDIMOQLoadID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ProvinceID in lst)
                    {
                        var obj = new CAT_PriceDIMOQLoadRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceDIMOQLoadID = PriceDIMOQLoadID;
                        obj.ProvinceID = ProvinceID;
                        model.CAT_PriceDIMOQLoadRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_DI_PriceMOQLoad_Province_NotInList(string request, int PriceDIMOQLoadID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == PriceDIMOQLoadID && c.ProvinceID > 0).Select(c => c.ProvinceID).Distinct().ToList();
                    var query = model.CAT_Province.Where(c => !lstID.Contains(c.ID)).Select(c => new DTOPriceDIMOQProvince
                    {
                        ID = c.ID,
                        ProvinceCode = c.Code,
                        ProvinceName = c.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQProvince>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #region Unload

        #region info
        public DTOResult VENPrice_DI_PriceMOQUnLoad_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading).Select(c => new DTOPriceDIMOQLoad
                    {
                        ID = c.ID,
                        MOQName = c.MOQName,
                        PriceID = c.PriceID,
                        ExprInput = c.ExprInput,
                        ExprCBM = c.ExprCBM,
                        ExprTon = c.ExprTon,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        DIMOQLoadSumID = c.DIMOQLoadSumID,
                        DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                        TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                        TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceDIMOQLoad>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceDIMOQLoad VENPrice_DI_PriceMOQUnLoad_Get(int id)
        {
            try
            {
                DTOPriceDIMOQLoad result = new DTOPriceDIMOQLoad();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id && c.IsLoading == false).Select(c => new DTOPriceDIMOQLoad
                        {
                            ID = c.ID,
                            MOQName = c.MOQName,
                            PriceID = c.PriceID,
                            ExprInput = c.ExprInput,
                            ExprCBM = c.ExprCBM,
                            ExprTon = c.ExprTon,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            DIMOQLoadSumID = c.DIMOQLoadSumID,
                            DIMOQLoadSumName = c.SYS_Var.ValueOfVar,
                            TypeOfPriceDIExID = c.TypeOfPriceDIExID,
                            TypeOfPriceDIExName = c.CAT_TypeOfPriceDIEx.TypeName,
                            TermClosed = c.CAT_Price.CAT_ContractTerm.IsClosed,
                        }).FirstOrDefault();

                    }
                    else
                    {
                        result = new DTOPriceDIMOQLoad();
                        result.ID = 0;
                        result.DIMOQLoadSumID = 0;
                        var obj = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.DIMOQLoadSum).FirstOrDefault();
                        if (obj != null) result.DIMOQLoadSumID = obj.ID;
                        result.TypeOfPriceDIExID = 0;
                        var objType = model.CAT_TypeOfPriceDIEx.FirstOrDefault();
                        if (objType != null) result.TypeOfPriceDIExID = objType.ID;
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENPrice_DI_PriceMOQUnLoad_Save(DTOPriceDIMOQLoad item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceDIMOQLoad();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        obj.IsLoading = false;
                        model.CAT_PriceDIMOQLoad.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.MOQName = item.MOQName;
                    obj.ExprInput = item.ExprInput;
                    obj.ExprCBM = item.ExprCBM;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.ExprTon = item.ExprTon;
                    obj.DIMOQLoadSumID = item.DIMOQLoadSumID;
                    obj.TypeOfPriceDIExID = item.TypeOfPriceDIExID;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQUnLoad_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceDIMOQLoad.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == obj.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_DI_PriceMOQUnLoad_DeleteList(int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var moqload in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == priceID && !c.IsLoading))
                    {
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(item);
                        foreach (var item in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.CAT_PriceDIMOQLoadRouting.Remove(item);
                        foreach (var item in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moqload.ID))
                            model.FIN_Temp.Remove(item);
                        model.CAT_PriceDIMOQLoad.Remove(moqload);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion

        #endregion

        #region CAT_PriceCOContainer
        public DTOPriceCOContainerData VENPrice_CO_COContainer_Data(int priceID)
        {
            try
            {
                DTOPriceCOContainerData result = new DTOPriceCOContainerData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");
                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        PackingID = c.PackingID,
                        Price = c.Price,
                        PriceMax = c.PriceMax,
                        PriceMin = c.PriceMin,
                        PriceID = c.PriceID,
                        ContractRoutingID = c.ContractRoutingID.Value
                    }).ToList();
                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    }).Distinct().ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_COContainer_SaveList(List<DTOPriceCOContainer> data, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var priceNew in data)
                    {
                        var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == priceNew.ContractRoutingID && c.PackingID == priceNew.PackingID && c.PriceID == priceID).FirstOrDefault();
                        if (obj == null)
                        {
                            obj = new CAT_PriceCOContainer();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.PriceID = priceID;
                            obj.ContractRoutingID = priceNew.ContractRoutingID;
                            obj.PackingID = priceNew.PackingID;
                            model.CAT_PriceCOContainer.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Price = priceNew.Price;
                        obj.PriceMax = priceNew.PriceMax;
                        obj.PriceMin = priceNew.PriceMin;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_COContainer_ContainerList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_COContainer_ContainerDelete(List<int> lstPacking, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    foreach (var packing in lstPacking)
                    {
                        foreach (var priceGov in model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID && c.PackingID == packing))
                        {
                            model.CAT_PriceCOContainer.Remove(priceGov);
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_COContainer_ContainerNotInList(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceID).Select(c => c.PackingID).Distinct().ToList();
                    var query = model.CAT_Packing.Where(c => !lisGOV.Contains(c.ID) && (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATPacking>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_COContainer_ContainerNotInSave(List<int> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objPrice = model.CAT_Price.FirstOrDefault(c => c.ID == priceID);
                    if (objPrice != null)
                    {
                        var listRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objPrice.CAT_ContractTerm.ContractID).Select(c => c.ID).ToList();
                        foreach (var route in listRoute)
                        {
                            foreach (var packing in lst)
                            {
                                var obj = model.CAT_PriceCOContainer.FirstOrDefault(c => c.PriceID == priceID && c.PackingID == packing);
                                if (obj == null)
                                {
                                    obj = new CAT_PriceCOContainer();
                                    obj.PackingID = packing;
                                    obj.PriceID = priceID;
                                    obj.ContractRoutingID = route;
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    model.CAT_PriceCOContainer.Add(obj);
                                }
                                else
                                {
                                    obj.ModifiedBy = Account.UserName;
                                    obj.ModifiedDate = DateTime.Now;
                                }
                                obj.Price = 0;
                            }
                        }
                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOContainerExcelData VENPrice_CO_COContainer_ExcelData(int priceid, int termID)
        {
            try
            {
                DTOPriceCOContainerExcelData result = new DTOPriceCOContainerExcelData();
                result.ListDetail = new List<DTOPriceCOContainer>();
                result.ListPacking = new List<CATPacking>();
                result.ListRouting = new List<DTOCATRouting>();
                using (var model = new DataEntities())
                {
                    var price = model.CAT_Price.FirstOrDefault(c => c.ID == priceid);
                    if (price == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy bảng giá");

                    result.ListDetail = model.CAT_PriceCOContainer.Where(c => c.PriceID == priceid).Select(c => new DTOPriceCOContainer
                    {
                        ID = c.ID,
                        ContractRoutingID = c.ContractRoutingID.Value,
                        PriceMin = c.PriceMin,
                        PriceMax = c.PriceMax,
                        PackingID = c.PackingID,
                        Price = c.Price
                    }).ToList();

                    result.ListPacking = model.CAT_ContractCODefault.Where(c => c.ContractID == price.CAT_ContractTerm.ContractID).Select(c => new CATPacking
                    {
                        ID = c.PackingID,
                        Code = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                    }).Distinct().ToList();

                    result.ListRouting = model.CAT_ContractRouting.Where(c => c.ContractTermID == termID).Select(c => new DTOCATRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_COContainer_ExcelImport(List<DTOPriceCOContainerImport> lst, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var row in lst.Where(c => c.ExcelSuccess))
                    {
                        foreach (var detail in row.ListDetail.Where(d => d.IsSuccess))
                        {
                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == detail.ContractRoutingID && c.PackingID == detail.PackingID && c.PriceID == priceID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new CAT_PriceCOContainer();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.PriceID = priceID;
                                obj.PackingID = detail.PackingID;
                                obj.ContractRoutingID = row.RouteID;
                                model.CAT_PriceCOContainer.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Price = detail.Price;
                            obj.PriceMax = detail.PriceMax;
                            obj.PriceMin = detail.PriceMin;
                        }
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public SYSExcel VENPrice_CO_GroupContainer_ExcelInit(bool isFrame, int priceID, int contractTermID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = VENPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        double[] arrColumnWidth = new double[50];
                        arrColumnWidth[0] = 30;
                        for (int i = 1; i < 50; i++)
                        {
                            arrColumnWidth[i] = 80;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);
                        var cells = new List<Cell>();

                        if (isFrame)
                        {
                            //cot tinh
                            int col = 0;
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            int collever = 3; // cot dong bat dau (co 3 cot tinh o tren)
                            var cellCols = new List<Cell>();
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                col += 2;
                                cellCols.Add(HelperExcel.NewCell(collever++, "Giá từ", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                cellCols.Add(HelperExcel.NewCell(collever++, "Đến giá", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }

                            // add cot vao row
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cellCols));

                            //merged cot
                            //merged cot tinh
                            col = 0;
                            ws.MergedCells = new List<string>(){ 
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                                HelperExcel.AddressRows(col++, 0, 1),
                            };

                            //merged cot dong
                            var mercol = 3;
                            foreach (var level in lst.ListPacking)
                            {
                                ws.MergedCells.Add(HelperExcel.AddressColumns(0, mercol, mercol + 1));
                                mercol += 2;
                            }
                        }
                        else
                        {
                            int col = 0;
                            ws.MergedCells = new List<string>();
                            cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Mã cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            cells.Add(HelperExcel.NewCell(col++, "Tên cung đường", HelperExcel.ColorWhite, HelperExcel.ColorGreen));

                            //cot dong
                            foreach (var level in lst.ListPacking)
                            {
                                cells.Add(HelperExcel.NewCell(col++, level.Code, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                            }
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                        }

                        //du lieu vao
                        if (isFrame)
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {
                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.PriceMin));
                                        cells.Add(HelperExcel.NewCell(check.PriceMax));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        else
                        {
                            int stt = 1;
                            foreach (var route in lst.ListRouting)
                            {
                                cells = new List<Cell>();
                                cells.Add(HelperExcel.NewCell(stt));
                                cells.Add(HelperExcel.NewCell(route.Code));
                                cells.Add(HelperExcel.NewCell(route.RoutingName));
                                foreach (var level in lst.ListPacking)
                                {

                                    var check = lst.ListDetail.Where(c => c.ContractRoutingID == route.ID && c.PackingID == level.ID).FirstOrDefault();
                                    if (check != null)
                                    {
                                        cells.Add(HelperExcel.NewCell(check.Price));
                                    }
                                    else
                                    {
                                        cells.Add(HelperExcel.NewCell(0));
                                    }
                                }
                                stt++;
                                ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));
                            }
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENPrice_CO_GroupContainer_ExcelChange(bool isFrame, int priceID, int contractTermID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lst = VENPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lst.ListPacking.Count;
                    }
                    else
                    {
                        ColEnd = lst.ListPacking.Count;
                    }

                    int rowStart = 2;
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    List<Worksheet> lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = new Row();
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString());
                                failCurrent = 0;
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lst.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lst.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENPrice_CO_GroupContainer_ExcelOnImport(bool isFrame, int priceID, int contractTermID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    var lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool flag = true;
                        int indexError = 0;

                        colData = 1;
                        string dataRoute = HelperExcel.GetString(checkRow, colData++);
                        if (flag)
                            flag = HelperExcel.Valid(dataRoute, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true);
                        if (flag && lstRoute.ListRouting.Where(c => c.Code == dataRoute).Count() < 1)
                        {
                            indexError++;
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }
                        if (flag)
                        {
                            string valID = "0";
                            var obj = lstRoute.ListRouting.Where(c => c.Code == dataRoute).FirstOrDefault();
                            if (obj != null)
                                valID = obj.ID.ToString();
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colRoutingID, valID);
                        }
                        if (flag)
                        {
                            colData = 3;
                            indexError = 2;
                            for (int i = 0; i < ColEnd; i++)
                            {
                                string dataprice = HelperExcel.GetString(checkRow, colData++);
                                if (flag)
                                    flag = HelperExcel.Valid(dataprice, HelperExcel.ValidType.Double, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError);
                                if (!flag)
                                    break;
                            }
                            if (flag)
                            {
                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckrow, checkRow.Index.ToString());
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);
                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENPrice_CO_GroupContainer_ExcelApprove(bool isFrame, int priceID, int contractTermID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var lstRoute = VENPrice_CO_COContainer_ExcelData(priceID, contractTermID);

                    int ColEnd = 0;
                    int rowStart = 0;
                    if (isFrame)
                    {
                        ColEnd = 2 * lstRoute.ListPacking.Count;
                        rowStart = 2;
                    }
                    else
                    {
                        ColEnd = lstRoute.ListPacking.Count;
                        rowStart = 1;
                    }
                    int colData = ColEnd + 3;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckrow = colData++;
                    int colRoutingID = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        if (isFrame)
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String priceMin = HelperExcel.GetString(eRow, colData++);
                                            String priceMax = HelperExcel.GetString(eRow, colData++);
                                            decimal? getpriceMin = null;
                                            decimal? getpriceMax = null;
                                            try
                                            {
                                                getpriceMin = decimal.Parse(priceMin);
                                            }
                                            catch
                                            {
                                                getpriceMin = null;
                                            }
                                            try
                                            {
                                                getpriceMax = decimal.Parse(priceMax);
                                            }
                                            catch
                                            {
                                                getpriceMax = null;
                                            }

                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.PriceMax = getpriceMax;
                                            obj.PriceMin = getpriceMin;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        else
                        {
                            foreach (var eRow in lstRow)
                            {
                                colData = 3;
                                string RoutingID = HelperExcel.GetString(eRow, colRoutingID);
                                int getRoutingID = Int32.Parse(RoutingID);

                                foreach (var route in lstRoute.ListRouting)
                                {
                                    if (route.ID == getRoutingID)
                                    {
                                        foreach (var level in lstRoute.ListPacking)
                                        {
                                            String price = HelperExcel.GetString(eRow, colData++);
                                            decimal getprice = 0;
                                            try
                                            {
                                                getprice = decimal.Parse(price);
                                            }
                                            catch
                                            {
                                                getprice = 0;
                                            }
                                            var obj = model.CAT_PriceCOContainer.Where(c => c.ContractRoutingID == getRoutingID && c.PackingID == level.ID && c.PriceID == priceID).FirstOrDefault();
                                            if (obj == null)
                                            {
                                                obj = new CAT_PriceCOContainer();
                                                obj.CreatedBy = Account.UserName;
                                                obj.CreatedDate = DateTime.Now;
                                                obj.PriceID = priceID;
                                                obj.PackingID = level.ID;
                                                obj.ContractRoutingID = getRoutingID;
                                                model.CAT_PriceCOContainer.Add(obj);
                                            }
                                            else
                                            {
                                                obj.ModifiedBy = Account.UserName;
                                                obj.ModifiedDate = DateTime.Now;
                                            }
                                            obj.Price = getprice;
                                        }
                                    }
                                }
                            }
                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region VENPrice_CO_Ex
        #region info
        public DTOResult VENPrice_CO_Ex_List(string request, int priceID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOEx.Where(c => c.PriceID == priceID).Select(c => new DTOPriceCOEx
                    {
                        ID = c.ID,
                        TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                        TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                        COExSumID = c.COExSumID,
                        COExSumName = c.SYS_Var.ValueOfVar,
                        ExprPrice = c.ExprPrice,
                        ExprPriceFix = c.ExprPriceFix,
                        ExprQuan = c.ExprQuan,
                        Note = c.Note,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOEx>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOEx VENPrice_CO_Ex_Get(int id)
        {
            try
            {
                DTOPriceCOEx result = new DTOPriceCOEx();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_PriceCOEx.Where(c => c.ID == id).Select(c => new DTOPriceCOEx
                        {
                            ID = c.ID,
                            TypeOfPriceCOExID = c.TypeOfPriceCOExID,
                            TypeOfPriceCOExName = c.CAT_TypeOfPriceCOEx.TypeName,
                            COExSumID = c.COExSumID,
                            COExSumName = c.SYS_Var.ValueOfVar,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            ExprPriceFix = c.ExprPriceFix,
                            ExprQuan = c.ExprQuan,
                            Note = c.Note,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result = new DTOPriceCOEx();
                        result.ID = 0;
                        var typeEx = model.CAT_TypeOfPriceCOEx.FirstOrDefault();
                        result.TypeOfPriceCOExID = 0;
                        if (typeEx != null) result.TypeOfPriceCOExID = typeEx.ID;
                        var COExSum = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.COExSum).FirstOrDefault();
                        result.COExSumID = 0;
                        if (COExSum != null) result.COExSumID = COExSum.ID;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int VENPrice_CO_Ex_Save(DTOPriceCOEx item, int priceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj == null)
                    {
                        obj = new CAT_PriceCOEx();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceID = priceID;
                        model.CAT_PriceCOEx.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.ExprInput = item.ExprInput;
                    obj.ExprPrice = item.ExprPrice;
                    obj.ExprPriceFix = item.ExprPriceFix;
                    obj.ExprQuan = item.ExprQuan;
                    obj.TypeOfPriceCOExID = item.TypeOfPriceCOExID;
                    obj.COExSumID = item.COExSumID;
                    obj.Note = item.Note;

                    model.SaveChanges();
                    return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOEx.Where(c => c.ID == id).FirstOrDefault();
                    if (obj != null)
                    {
                        foreach (var item in model.CAT_PriceCOExContainer.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExContainer.Remove(item);
                        foreach (var item in model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == obj.ID))
                            model.CAT_PriceCOExRouting.Remove(item);

                        model.CAT_PriceCOEx.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price co ex Location
        public DTOResult VENPrice_CO_Ex_Location_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        LocationID = c.LocationID.Value,
                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                        TypeOfTOLocationName = c.TypeOfTOLocationID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Location_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOPriceCOExLocation VENPrice_CO_Ex_Location_Get(int id)
        {
            try
            {
                DTOPriceCOExLocation result = new DTOPriceCOExLocation();
                using (var model = new DataEntities())
                {
                    result = model.CAT_PriceCOExRouting.Where(c => c.ID == id).Select(c => new DTOPriceCOExLocation
                    {
                        ID = c.ID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        TypeOfTOLocationID = c.TypeOfTOLocationID.HasValue ? c.TypeOfTOLocationID : -1
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Location_Save(DTOPriceCOExLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_PriceCOExRouting.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.TypeOfTOLocationID = item.TypeOfTOLocationID > 0 ? item.TypeOfTOLocationID : null;
                        model.SaveChanges();
                    }


                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Location_LocationNotInSaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var locationID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.LocationID = locationID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_Ex_Location_LocationNotInList(string request, int priceExID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.LocationID.HasValue).Select(c => c.LocationID).Distinct().ToList();
                    var query = model.CUS_Location.Where(c => c.CustomerID == CustomerID && !lstID.Contains(c.LocationID)).Select(c => new DTOCATLocation
                    {
                        ID = c.LocationID,
                        Code = c.Code,
                        Location = c.CAT_Location.Location,
                        Address = c.CAT_Location.Address,
                    }).Distinct().ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex ruote
        public DTOResult VENPrice_CO_Ex_Route_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID.HasValue).Select(c => new DTOPriceCOExRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        RoutingID = c.RoutingID.Value,
                        RoutingName = c.CAT_Routing1.RoutingName,
                        RoutingCode = c.CAT_Routing1.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Route_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Route_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.RoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_Ex_Route_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.RoutingID > 0).Select(c => c.RoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var query = model.CAT_ContractRouting.Where(c => c.ContractTermID == contractTermID && !lstID.Contains(c.RoutingID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => new DTOCATRouting
                        {
                            ID = c.CAT_Routing.ID,
                            Code = c.Code,
                            RoutingName = c.RoutingName
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO ex parent route
        public DTOResult VENPrice_CO_Ex_ParentRoute_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => new DTOPriceCOExParentRouting
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        ParentRoutingID = c.ParentRoutingID.Value,
                        ParentRoutingName = c.CAT_Routing.RoutingName,
                        ParentRoutingCode = c.CAT_Routing.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExParentRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_ParentRoute_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_ParentRoute_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var routeID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.ParentRoutingID = routeID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_Ex_ParentRoute_RouteNotInList(string request, int priceExID, int contractTermID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.ParentRoutingID.HasValue).Select(c => c.ParentRoutingID).Distinct().ToList();
                    if (objTerm.IsAllRouting)
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                    else
                    {
                        var lstParentRoute = model.CAT_ContractRouting.Where(c => c.ContractID == objTerm.ContractID && c.CAT_Routing.ParentID.HasValue && !lstID.Contains(c.CAT_Routing.ParentID) && c.ContractRoutingTypeID == -(int)SYSVarType.ContractRoutingTypePrice).Select(c => c.CAT_Routing.ParentID).ToList();

                        var query = model.CAT_Routing.Where(c => lstParentRoute.Contains(c.ID)).Select(c => new DTOCATRouting
                        {
                            ID = c.ID,
                            RoutingName = c.RoutingName,
                            Code = c.Code
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATRouting>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region price CO partner
        public DTOResult VENPrice_CO_Ex_Partner_List(string request, int priceExID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID.HasValue).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.ID,
                        PriceCOExID = c.PriceCOExID,
                        PartnerID = c.PartnerID.Value,
                        PartnerName = c.CAT_Partner.PartnerName,
                        PartnerCode = c.CAT_Partner.Code
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Partner_DeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_PriceCOExRouting.FirstOrDefault(c => c.ID == item);
                        if (obj != null) model.CAT_PriceCOExRouting.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENPrice_CO_Ex_Partner_SaveList(List<int> lst, int priceExID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var PartnerID in lst)
                    {
                        var obj = new CAT_PriceCOExRouting();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.PriceCOExID = priceExID;
                        obj.PartnerID = PartnerID;
                        model.CAT_PriceCOExRouting.Add(obj);
                    }

                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENPrice_CO_Ex_Partner_PartnerNotInList(string request, int priceExID, int contractTermID, int CustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                    var CusRelateID = -1;
                    if (objTerm.CAT_Contract.CompanyID > 0)
                    {
                        CusRelateID = objTerm.CAT_Contract.CUS_Company.CustomerRelateID; 
                    }
                    if (objTerm == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy phụ lục");
                    var lstID = model.CAT_PriceCOExRouting.Where(c => c.PriceCOExID == priceExID && c.PartnerID > 0).Select(c => c.PartnerID).Distinct().ToList();
                    var query = model.CUS_Partner.Where(c => c.CustomerID == CusRelateID && !lstID.Contains(c.PartnerID)).Select(c => new DTOPriceCOExPartner
                    {
                        ID = c.CAT_Partner.ID,
                        PartnerCode = c.CAT_Partner.Code,
                        PartnerName = c.CAT_Partner.PartnerName,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPriceCOExPartner>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #endregion
        #endregion

        #region GroupOfProduct
        public DTOResult VENContract_GroupOfProduct_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupOfProduct
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Expression = c.Expression,
                        GroupOfProductID = c.GroupOfProductID,
                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupOfProductIDChange = c.GroupOfProductIDChange,
                        GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                        ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                        ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                        ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                        ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                        IsChoose = false
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATContractGroupOfProduct VENContract_GroupOfProduct_Get(int id, int contractID)
        {
            try
            {
                DTOCATContractGroupOfProduct result = new DTOCATContractGroupOfProduct();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractGroupOfProduct.Where(c => c.ID == id).Select(c => new DTOCATContractGroupOfProduct
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Expression = c.Expression,
                            ExpressionInput = c.ExpressionInput,
                            GroupOfProductID = c.GroupOfProductID,
                            GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                            GroupOfProductIDChange = c.GroupOfProductIDChange,
                            GroupOfProductIDChangeName = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.GroupName : string.Empty,
                            ProductID = c.ProductID > 0 ? c.ProductID.Value : -1,
                            ProductName = c.ProductID > 0 ? c.CUS_Product.ProductName : string.Empty,
                            ProductIDChange = c.ProductIDChange > 0 ? c.ProductIDChange.Value : -1,
                            ProductIDChangeName = c.ProductIDChange > 0 ? c.CUS_Product1.ProductName : string.Empty,
                            IsChoose = false
                        }).FirstOrDefault();
                    }
                    else
                    {
                        var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                        if (contract != null)
                        {
                            var group = model.CUS_GroupOfProduct.FirstOrDefault(c => c.CustomerID == contract.CustomerID);
                            if (group != null)
                                result.GroupOfProductID = group.ID;
                            result.ContractID = contractID;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_GroupOfProduct_Save(DTOCATContractGroupOfProduct item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (item.GroupOfProductID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Vui lòng chọn nhóm hàng!");

                    var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractGroupOfProduct();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractGroupOfProduct.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupOfProductID = item.GroupOfProductID;
                    obj.Expression = item.Expression;
                    obj.ExpressionInput = item.ExpressionInput;
                    obj.GroupOfProductIDChange = item.GroupOfProductIDChange > 0 ? item.GroupOfProductIDChange : null;
                    obj.ProductID = item.ProductID > 0 ? item.ProductID : null;
                    obj.ProductIDChange = item.ProductIDChange > 0 ? item.ProductIDChange : null;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_GroupOfProduct_Delete(List<int> lstid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (lstid.Count > 0)
                    {
                        foreach (var item in lstid)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public double? VENContract_GroupOfProduct_Check(DTOCATContractGroupOfProduct item)
        {
            try
            {
                double? result = null;

                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";
                Dictionary<string, string> dicEx = new Dictionary<string, string>();

                string strExp = item.Expression;

                row++;
                worksheet.Cells[row, col].Value = item.OrderTon;
                strExp = strExp.Replace("[OrderTon]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.OrderCBM;
                strExp = strExp.Replace("[OrderCBM]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.OrderQuantity;
                strExp = strExp.Replace("[OrderQuantity]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Ton;
                strExp = strExp.Replace("[Ton]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.CBM;
                strExp = strExp.Replace("[CBM]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Quantity;
                strExp = strExp.Replace("[Quantity]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp;
                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();
                //package.Save();

                try
                {
                    result = Convert.ToDouble(val);
                }
                catch (Exception ex)
                {
                    throw FaultHelper.BusinessFault(null, null, "Công thức lỗi: " + val);
                }

                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public SYSExcel VENContract_GroupOfProduct_ExcelInit(int contractID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    functionkey = functionkey + contractID.ToString();
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var data = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => new
                        {
                            GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                            GroupOfProductIDChangeCode = c.GroupOfProductIDChange.HasValue ? c.CUS_GroupOfProduct1.Code : string.Empty,
                            ProductCode = c.ProductID > 0 ? c.CUS_Product.Code : string.Empty,
                            ProductIDChangeCode = c.ProductIDChange > 0 ? c.CUS_Product1.Code : string.Empty,
                            ExpressionInput = c.ExpressionInput,
                            Expression = c.Expression,

                        }).ToList();

                        List<Worksheet> lstWorkSheet = HelperExcel.GetWorksheetByID(model, id);
                        var ws = lstWorkSheet[0];
                        ws.Rows.Clear();

                        var cells = new List<Cell>();
                        int col = 0;
                        cells.Add(HelperExcel.NewCell(col++, "STT", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã nhóm hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Mã mặt hàng quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức kiểm tra", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        cells.Add(HelperExcel.NewCell(col++, "Công thức quy đổi", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                        ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                        double[] arrColumnWidth = new double[col];
                        for (int i = 0; i < col; i++)
                        {
                            arrColumnWidth[i] = 100;
                        }
                        ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                        int stt = 1;
                        foreach (var item in data)
                        {
                            cells = new List<Cell>();
                            col = 0;
                            cells.Add(HelperExcel.NewCell(col++, stt));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductCode));
                            cells.Add(HelperExcel.NewCell(col++, item.GroupOfProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.ProductIDChangeCode));
                            cells.Add(HelperExcel.NewCell(col++, item.Expression));
                            cells.Add(HelperExcel.NewCell(col++, item.ExpressionInput));
                            ws.Rows.Add(HelperExcel.NewRow(ws.Rows.Count, cells));

                            stt++;
                        }
                        result = HelperExcel.GetByKey(model, functionid, functionkey);
                        result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(lstWorkSheet);
                        result = HelperExcel.Save(model, Account, result);

                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row VENContract_GroupOfProduct_ExcelChange(int contractID, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 2;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    int cusRelateID = 0;
                    if (contract != null)
                    {
                        customerid = contract.CustomerID.Value;
                        var company = model.CUS_Company.FirstOrDefault(c => c.ID == contract.CompanyID);
                        if (company != null)
                            cusRelateID = company.CustomerRelateID;
                    }
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var lstMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == customerid && c.CustomerID == cusRelateID).Select(c => new
                    {
                        c.GroupOfProductCUSID,
                        c.GroupOfProductVENID
                    }).ToList();

                    var lstCusGroupID = lstMapping.Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstCusGroupID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var ListProduct = new List<CUSProduct>();
                    foreach (var item in ListGroupOfProduct)
                    {
                        var lstMyMap = lstMapping.Where(c => c.GroupOfProductVENID == item.ID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        ListProduct.AddRange(lstProduct.Where(c => lstMyMap.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                        {
                            ID = c.ID,
                            GroupOfProductID = item.ID,
                            ProductName = c.ProductName,
                            Code = c.Code,
                        }).ToList());
                    }

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);
                    List<string> lstCode = new List<string>();
                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                                break;
                            else
                                failCurrent++;
                        }
                    }

                    int GroupOfProductID = -1;
                    int ProductID = -1;
                    int GroupOfProductChangeID = -1;
                    int ProductChangeID = -1;
                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductIDChangeCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }
                    return result;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel VENContract_GroupOfProduct_ExcelImport(int contractID, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = lst.Count;

                    var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    int customerid = 0;
                    int cusRelateID = 0;
                    if (contract != null)
                    {
                        customerid = contract.CustomerID.Value;
                        var company = model.CUS_Company.FirstOrDefault(c => c.ID == contract.CompanyID);
                        if (company != null)
                            cusRelateID = company.CustomerRelateID;
                    }
                    var ListGroupOfProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    var lstMapping = model.CUS_GroupOfProductMapping.Where(c => c.VendorID == customerid && c.CustomerID == cusRelateID).Select(c => new
                    {
                        c.GroupOfProductCUSID,
                        c.GroupOfProductVENID
                    }).ToList();

                    var lstCusGroupID = lstMapping.Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                    var lstProduct = model.CUS_Product.Where(c => lstCusGroupID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        Code = c.Code
                    }).ToList();

                    var ListProduct = new List<CUSProduct>();
                    foreach (var item in ListGroupOfProduct)
                    {
                        var lstMyMap = lstMapping.Where(c => c.GroupOfProductVENID == item.ID).Select(c => c.GroupOfProductCUSID).Distinct().ToList();
                        ListProduct.AddRange(lstProduct.Where(c => lstMyMap.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                        {
                            ID = c.ID,
                            GroupOfProductID = item.ID,
                            ProductName = c.ProductName,
                            Code = c.Code,
                        }).ToList());
                    }

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    List<string> lstCode = new List<string>();

                    failCurrent = 0;
                    colData = 1;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            if (eRow.Cells[colData].Value != null && !string.IsNullOrEmpty(eRow.Cells[colData].Value.ToString()))
                            {
                                lstCode.Add(eRow.Cells[colData].Value.ToString().Trim());
                            }
                            else if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                            else
                                failCurrent++;
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;
                        int GroupOfProductID = -1;
                        int ProductID = -1;
                        int GroupOfProductChangeID = -1;
                        int ProductChangeID = -1;

                        colData = 1;
                        string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                        string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                        string dataExpression = HelperExcel.GetString(checkRow, colData++);
                        string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                        bool flag = true;
                        int indexError = 0;
                        if (flag)
                            flag = HelperExcel.Valid(dataGroupOfProductCode, HelperExcel.ValidType.String, checkRow, colCheckChange, colCheckNote, indexError, lstMessageError, true, 50);

                        indexError++;
                        if (flag && ListGroupOfProduct.Count(c => c.Code == dataGroupOfProductCode) < 1)
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            var valid = "-1";
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductCode);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                GroupOfProductID = obj.ID;
                            }
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProduct, valid);
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataProductCode))
                        {
                            var valid = "-1";
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductCode && c.GroupOfProductID == GroupOfProductID);
                            if (obj != null)
                            {
                                valid = obj.ID.ToString();
                                ProductID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }
                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode))
                        {
                            var obj = ListGroupOfProduct.FirstOrDefault(c => c.Code == dataGroupOfProductIDChangeCode);
                            if (obj != null)
                            {
                                GroupOfProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && !string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            var obj = ListProduct.FirstOrDefault(c => c.Code == dataProductIDChangeCode && c.GroupOfProductID == GroupOfProductChangeID);
                            if (obj != null)
                            {
                                ProductChangeID = obj.ID;
                            }
                            else
                            {
                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                                flag = false;
                            }

                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataGroupOfProductIDChangeCode) && !string.IsNullOrEmpty(dataProductIDChangeCode))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        indexError++;
                        if (flag && string.IsNullOrEmpty(dataExpressionInput))
                        {
                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(indexError, lstMessageError));
                            flag = false;
                        }

                        if (flag)
                        {
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProduct, ProductID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckGroupOfProductIDChange, GroupOfProductChangeID.ToString());
                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCheckProductIDChange, ProductChangeID.ToString());
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool VENContract_GroupOfProduct_ExcelApprove(int contractID, long id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    int rowStart = 1;
                    int colData = 7;
                    int colCheckChange = colData++;
                    int colCheckNote = colData++;
                    int colCheckGroupOfProduct = colData++;
                    int colCheckProduct = colData++;
                    int colCheckGroupOfProductIDChange = colData++;
                    int colCheckProductIDChange = colData++;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);
                    if (lstRow.Count > 0)
                    {
                        var lstIDRemove = model.CAT_ContractGroupOfProduct.Where(c => c.ContractID == contractID).Select(c => c.ID).ToList();
                        foreach (var item in lstIDRemove)
                        {
                            var obj = model.CAT_ContractGroupOfProduct.FirstOrDefault(c => c.ID == item);
                            if (obj != null)
                                model.CAT_ContractGroupOfProduct.Remove(obj);
                        }
                        model.SaveChanges();

                        foreach (var checkRow in lstRow)
                        {
                            colData = 1;
                            string dataGroupOfProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductCode = HelperExcel.GetString(checkRow, colData++);
                            string dataGroupOfProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataProductIDChangeCode = HelperExcel.GetString(checkRow, colData++);
                            string dataExpression = HelperExcel.GetString(checkRow, colData++);
                            string dataExpressionInput = HelperExcel.GetString(checkRow, colData++);

                            int GroupOfProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProduct));
                            int ProductID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProduct));
                            int GroupOfProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckGroupOfProductIDChange));
                            int ProductIDChangeID = Convert.ToInt32(HelperExcel.GetString(checkRow, colCheckProductIDChange));


                            var obj = new CAT_ContractGroupOfProduct();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractID = contractID;
                            model.CAT_ContractGroupOfProduct.Add(obj);

                            obj.GroupOfProductID = GroupOfProductID;
                            obj.Expression = dataExpression;
                            obj.ExpressionInput = dataExpressionInput;
                            if (GroupOfProductIDChangeID > 0)
                                obj.GroupOfProductIDChange = GroupOfProductIDChangeID;
                            else obj.GroupOfProductIDChange = null;

                            if (ProductID > 0)
                                obj.ProductID = ProductID;
                            else obj.ProductID = null;

                            if (ProductIDChangeID > 0)
                                obj.ProductIDChange = ProductIDChangeID;
                            else obj.ProductIDChange = null;

                            model.SaveChanges();
                        }
                        return true;
                    }
                    else
                        return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Cuscontract_material
        public DTOCUSPrice_MaterialData VENContract_MaterialChange_Data(int contractMaterialID)
        {
            try
            {
                DTOCUSPrice_MaterialData result = new DTOCUSPrice_MaterialData();

                using (var model = new DataEntities())
                {
                    result = HelperContract.Term_Change_Data(model, Account, contractMaterialID);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_MaterialChange_Save(DTOCUSPrice_MaterialData item, int contractMaterialID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Change_Save(model, Account, item, contractMaterialID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Contract term(phụ lục hợp đồng)
        public DTOResult VENContract_ContractTerm_List(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTerm.Where(c => c.ContractID == contractID).Select(c => new DTOContractTerm
                    {
                        ID = c.ID,
                        ContractID = c.ContractID,
                        Code = c.Code,
                        TermName = c.TermName,
                        DisplayName = c.DisplayName,
                        Note = c.Note,
                        MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                        MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                        MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                        PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                        PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                        PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                        DEM = c.DEM,
                        DET = c.DET,
                        ExprETA = c.ExprETA,
                        ExprETARequest = c.ExprETARequest,
                        DateEffect = c.DateEffect,
                        DateExpire = c.DateExpire,
                        DatePrice = c.DatePrice,
                        ExprDatePrice = c.ExprDatePrice,
                        ExprInput = c.ExprInput,
                        ExprPrice = c.ExprPrice,
                        DateWarning = c.DateWarning,
                        IsAllRouting = c.IsAllRouting,
                        IsWarning = c.IsWarning,
                        IsClosed = c.IsClosed,
                        ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.SYS_Var.ValueOfVar : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));

                    var list = query.Data.Cast<DTOContractTerm>().ToList();

                    foreach (var item in list)
                    {
                        item.RateMaterial = 0;
                        item.RatePrice = 0;

                        if (item.PriceContract > 0 && item.PriceCurrent > 0)
                        {
                            item.RateMaterial = Math.Round(((double)item.PriceCurrent - (double)item.PriceContract) / (double)item.PriceContract * 100, 2);

                            if (!string.IsNullOrEmpty(item.ExprPrice))
                            {
                                // Lấy 1 cung đường ra tính giá
                                var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                if (itemPrice == null)
                                    itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == item.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                if (itemPrice != null)
                                {
                                    DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                    itemCheck.Price = itemPrice.Price;
                                    itemCheck.PriceContract = item.PriceContract;
                                    itemCheck.PriceCurrent = item.PriceCurrent;
                                    itemCheck.PriceWarning = item.PriceWarning;

                                    decimal? newPrice = PriceChange_GetPrice(itemCheck, item.ExprPrice);
                                    if (newPrice > 0)
                                        item.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                }
                            }
                        }
                    }

                    result.Total = query.Total;
                    result.Data = list;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private decimal? PriceChange_GetPrice(DTOMaterialChecking item, string strExp)
        {
            try
            {
                decimal? result = null;
                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";

                row++;
                worksheet.Cells[row, col].Value = item.PriceContract;
                strExp = strExp.Replace("[PriceContract]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceCurrent;
                strExp = strExp.Replace("[PriceCurrent]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.PriceWarning;
                strExp = strExp.Replace("[PriceWarning]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.Price;
                strExp = strExp.Replace("[Price]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp;

                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();

                try
                {
                    result = Convert.ToDecimal(val);
                }
                catch { }

                return result;
            }
            catch
            {
                return null;
            }
        }


        public DTOContractTerm VENContract_ContractTerm_Get(int id, int contractID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null)
                    {
                        throw new Exception("Không tìm thấy hợp đồng.");
                    }
                    if (id > 0)
                    {
                        result = model.CAT_ContractTerm.Where(c => c.ID == id).Select(c => new DTOContractTerm
                        {
                            ID = c.ID,
                            ContractID = c.ContractID,
                            Code = c.Code,
                            TermName = c.TermName,
                            DisplayName = c.DisplayName,
                            Note = c.Note,
                            MaterialID = c.MaterialID > 0 ? c.MaterialID.Value : -1,
                            MaterialCode = c.MaterialID > 0 ? c.FLM_Material.Code : string.Empty,
                            MaterialName = c.MaterialID > 0 ? c.FLM_Material.MaterialName : string.Empty,
                            PriceContract = c.PriceContract > 0 ? c.PriceContract.Value : 0,
                            PriceCurrent = c.PriceCurrent > 0 ? c.PriceCurrent.Value : 0,
                            PriceWarning = c.PriceWarning > 0 ? c.PriceWarning.Value : 0,
                            DEM = c.DEM,
                            DET = c.DET,
                            ExprETA = c.ExprETA,
                            ExprETARequest = c.ExprETARequest,
                            ExprETD = c.ExprETD,
                            ExprETDRequest = c.ExprETDRequest,
                            DateEffect = c.DateEffect,
                            DateExpire = c.DateExpire,
                            DatePrice = c.DatePrice,
                            ExprDatePrice = c.ExprDatePrice,
                            ExprInput = c.ExprInput,
                            ExprPrice = c.ExprPrice,
                            DateWarning = c.DateWarning,
                            IsAllRouting = c.IsAllRouting,
                            IsWarning = c.IsWarning,
                            IsEditAllRouting = c.CAT_Price.Count() > 0 ? false : true,
                            IsClosed = c.IsClosed,
                            SortConfigDateStart = c.SortConfigDateStart,
                            ServiceOfOrderID = c.ServiceOfOrderID.HasValue ? c.ServiceOfOrderID : -1,
                            ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.CAT_ServiceOfOrder.SYS_Var.ValueOfVar : string.Empty,
                        }).FirstOrDefault();

                        if (result != null)
                        {
                            result.RateMaterial = 0;
                            result.RatePrice = 0;

                            if (result.PriceContract > 0 && result.PriceCurrent > 0)
                            {
                                result.RateMaterial = Math.Round(((double)result.PriceCurrent - (double)result.PriceContract) / (double)result.PriceContract * 100, 2);

                                if (!string.IsNullOrEmpty(result.ExprPrice))
                                {
                                    // Lấy 1 cung đường ra tính giá
                                    var itemPrice = model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();
                                    if (itemPrice == null)
                                        itemPrice = model.CAT_PriceCOContainer.Where(c => c.CAT_Price.ContractTermID == result.ID && c.Price > 0).Select(c => new { c.ID, c.Price }).FirstOrDefault();

                                    if (itemPrice != null)
                                    {
                                        DTOMaterialChecking itemCheck = new DTOMaterialChecking();
                                        itemCheck.Price = itemPrice.Price;
                                        itemCheck.PriceContract = result.PriceContract;
                                        itemCheck.PriceCurrent = result.PriceCurrent;
                                        itemCheck.PriceWarning = result.PriceWarning;

                                        decimal? newPrice = PriceChange_GetPrice(itemCheck, result.ExprPrice);
                                        if (newPrice > 0)
                                            result.RatePrice = Math.Round(((double)newPrice - (double)itemPrice.Price) / (double)itemPrice.Price * 100, 2);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ID = -1;
                        result.MaterialID = -1;
                        result.DateEffect = DateTime.Now.Date;
                        result.DateExpire = DateTime.Now.Date.AddDays(1);
                        result.IsEditAllRouting = true;
                        result.ServiceOfOrderID = -1;
                    }
                    var transportMode = objContract.TransportModeID.HasValue ? HelperContract.GetTransportMode(model, objContract.TransportModeID.Value) : -1;
                    result.TypeOfMode = transportMode == iFCL ? 1 : transportMode == iFTL ? 2 : transportMode == iLTL ? 3 : 0;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int VENContract_ContractTerm_Save(DTOContractTerm item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int result = -1;
                    result = HelperContract.Term_Save(model, Account, item, contractID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_Delete(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Delete(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_ContractTerm_Price_List(string request, int contractTermID)
        {
            try
            {
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Price.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOPrice
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        EffectDate = c.EffectDate,
                        TypeOfOrderID = c.TypeOfOrderID,
                        ContractNo = c.CAT_ContractTerm.CAT_Contract.ContractNo,
                        TypeOfOrderName = c.SYS_Var.ValueOfVar,
                        TypeOfPrice = c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderDirect ? 1 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderHot ? 2 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn ? 3 : c.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot ? 4 : 0,
                        TypeOfMode = c.CAT_ContractTerm.CAT_Contract.TransportModeID.HasValue ? (c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFCL ? 1 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iFTL ? 2 : c.CAT_ContractTerm.CAT_Contract.CAT_TransportMode.TransportModeID == iLTL ? 3 : 0) : 0,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOPrice>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_Open(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Open(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_ContractTerm_Close(int id)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Close(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENTerm_Change_RemoveWarning(int termID)
        {
            try
            {
                DTOContractTerm result = new DTOContractTerm();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperContract.Term_Change_RemoveWarning(model, Account, termID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region KPI Term
        public DTOResult VENContract_ContractTerm_KPITime_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPITime
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        Expression = c.Expression,
                        CompareField = c.CompareField

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPITime>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_KPITime_SaveExpr(DTOContractTerm_KPITime item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Expression = item.Expression;
                        obj.CompareField = item.CompareField;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_ContractTerm_KPITime_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPITimeDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DateTime? VENContract_KPITime_Check_Expression(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckDate(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? VENContract_KPITime_Check_Hit(KPITimeDate item, List<KPITimeDate> lst)
        {
            try
            {
                return HelperKPI.KPITime_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_KPITime_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPITimeDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPITimeDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPITimeDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.Expression = "";
                        obj.CompareField = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_ContractTerm_KPIQuantity_List(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => new DTOContractTerm_KPIQuantity
                    {
                        ID = c.ID,
                        ContractTermID = c.ContractTermID,
                        TypeOfKPIID = c.TypeOfKPIID,
                        Code = c.KPI_TypeOfKPI.Code,
                        TypeName = c.KPI_TypeOfKPI.TypeName,
                        ExpressionTon = c.ExpressionTon,
                        ExpressionCBM = c.ExpressionCBM,
                        ExpressionQuantity = c.ExpressionQuantity,
                        CompareFieldTon = c.CompareFieldTon,
                        CompareFieldCBM = c.CompareFieldCBM,
                        CompareFieldQuantity = c.CompareFieldQuantity,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_KPIQuantity>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_KPIQuantity_SaveExpr(DTOContractTerm_KPIQuantity item)
        {
            try
            {

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ExpressionTon = item.ExpressionTon;
                        obj.ExpressionCBM = item.ExpressionCBM;
                        obj.ExpressionQuantity = item.ExpressionQuantity;
                        obj.CompareFieldTon = item.CompareFieldTon;
                        obj.CompareFieldCBM = item.CompareFieldCBM;
                        obj.CompareFieldQuantity = item.CompareFieldQuantity;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult VENContract_ContractTerm_KPIQuantity_NotInList(string request, int contractTermID)
        {
            try
            {

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var InList = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ContractTermID == contractTermID).Select(c => c.TypeOfKPIID).ToList();
                    var query = model.KPI_TypeOfKPI.Where(c => !InList.Contains(c.ID) && (c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPIQuantityDateCustomer || c.KPITypeOfKPIID == -(int)SYSVarType.KPITypeOfKPITimeDateCustomer)).Select(c => new DTOContractTerm_TypeOfKPI
                    {
                        ID = c.ID,
                        Code = c.Code,
                        IsChoose = false,
                        TypeName = c.TypeName,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOContractTerm_TypeOfKPI>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void VENContract_ContractTerm_KPIQuantity_SaveNotInList(List<DTOContractTerm_TypeOfKPI> lst, int contractTermID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_ContractTermKPIQuantityDate.FirstOrDefault(c => c.TypeOfKPIID == item.ID && c.ContractTermID == contractTermID);
                        if (obj == null)
                        {
                            obj = new CAT_ContractTermKPIQuantityDate();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContractTermID = contractTermID;
                            obj.TypeOfKPIID = item.ID;
                            model.CAT_ContractTermKPIQuantityDate.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.ExpressionTon = "";
                        obj.ExpressionCBM = "";
                        obj.ExpressionQuantity = "";
                        obj.CompareFieldTon = "";
                        obj.CompareFieldCBM = "";
                        obj.CompareFieldQuantity = "";
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<KPIQuantityDate> VENContract_KPIQuantity_Get(int id)
        {
            try
            {
                List<KPIQuantityDate> result = new List<KPIQuantityDate>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractTermKPIQuantityDate.Where(c => c.ID != id).Select(c => new KPIQuantityDate
                    {
                        TypeOfKPICode = c.KPI_TypeOfKPI.Code,
                        KPITon = 0,
                        KPIQuantity = 0,
                        KPICBM = 0,
                        IsKPI = false,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public KPIQuantityDate VENContract_KPIQuantity_Check_Expression(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckQuantity(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool? VENContract_KPIQuantity_Check_Hit(KPIQuantityDate item, List<KPIQuantityDate> lst)
        {
            try
            {
                return HelperKPI.KPIQuantity_CheckBool(item, lst);
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion
        #endregion

        #region VenContract Setting

        public void VenContractSetting_Save(string setting, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        objContract.ExprFCLAllocationPrice = setting;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public void VENContract_Setting_TypeOfSGroupProductChangeSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                    if (objContract == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;

                        if (typeID > 0)
                        {
                            objContract.TypeOfSGroupProductChangeID = typeID;
                        }
                        else
                        {
                            objContract.TypeOfSGroupProductChangeID = null;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
        }

        public void VENContract_Setting_TypeOfRunLevelSave(int typeID, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng ID:" + contractID);
                    else
                    {
                        objContract.ModifiedBy = Account.UserName;
                        objContract.ModifiedDate = DateTime.Now;
                        if (objContract.TypeOfRunLevelID != typeID)
                        {
                            foreach (var term in model.CAT_ContractTerm.Where(c => c.ContractID == objContract.ID))
                            {
                                //xoa bảng giá của term
                                foreach (var price in model.CAT_Price.Where(c => c.ContractTermID == term.ID))
                                {
                                    #region xoa service và giá container
                                    foreach (var service in model.CAT_PriceCOService.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOService.Remove(service);
                                    foreach (var con in model.CAT_PriceCOContainer.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceCOContainer.Remove(con);
                                    #endregion

                                    #region xoa phu thu
                                    foreach (var service in model.CAT_PriceDIEx.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var group in model.CAT_PriceDIExGroupLocation.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupLocation.Remove(group);
                                        foreach (var gop in model.CAT_PriceDIExGroupProduct.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExGroupProduct.Remove(gop);
                                        foreach (var group in model.CAT_PriceDIExRouting.Where(c => c.PriceDIExID == service.ID))
                                            model.CAT_PriceDIExRouting.Remove(group);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIExID == service.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIEx.Remove(service);
                                    }
                                    #endregion

                                    //xoa bang gia thuong
                                    foreach (var priceltl in model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDIGroupProduct.Remove(priceltl);
                                    foreach (var priceftl in model.CAT_PriceGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGroupVehicle.Remove(priceftl);

                                    //xoa bang gia bac thang
                                    foreach (var detail in model.CAT_PriceDILevelGroupProduct.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceDILevelGroupProduct.Remove(detail);
                                    foreach (var detail in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.PriceID == price.ID))
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(detail);

                                    //xoa moq
                                    foreach (var moq in model.CAT_PriceDIMOQ.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQGroupLocation.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQGroupProduct.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQRouting.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.CAT_PriceDIMOQRouting.Remove(detail);


                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQ.Remove(moq);
                                    }

                                    //xóa boc xếp
                                    foreach (var load in model.CAT_PriceDILoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDILoadDetail.Where(c => c.PriceDILoadID == load.ID))
                                            model.CAT_PriceDILoadDetail.Remove(detail);

                                        model.CAT_PriceDILoad.Remove(load);
                                    }

                                    //xoa moq boc xep
                                    foreach (var moq in model.CAT_PriceDIMOQLoad.Where(c => c.PriceID == price.ID))
                                    {
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupLocation.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupLocation.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadGroupProduct.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadGroupProduct.Remove(detail);
                                        foreach (var detail in model.CAT_PriceDIMOQLoadRouting.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.CAT_PriceDIMOQLoadRouting.Remove(detail);

                                        //xóa fin_temp
                                        foreach (var fin in model.FIN_Temp.Where(c => c.PriceDIMOQLoadID == moq.ID))
                                            model.FIN_Temp.Remove(fin);

                                        model.CAT_PriceDIMOQLoad.Remove(moq);
                                    }

                                    model.CAT_Price.Remove(price);
                                }
                            }

                            //xóa thiết lập level

                            foreach (var setting in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID))
                            {
                                model.CAT_ContractLevel.Remove(setting);
                            }
                        }
                        if (typeID > 0)
                            objContract.TypeOfRunLevelID = typeID;
                        else objContract.TypeOfRunLevelID = null;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult VENContract_Setting_GOVList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractGroupVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractGroupVehicle VENContract_Setting_GOVGet(int id)
        {
            try
            {
                DTOCATContractGroupVehicle result = new DTOCATContractGroupVehicle();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ID == id).Select(c => new DTOCATContractGroupVehicle
                    {
                        ID = c.ID,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.CAT_GroupOfVehicle.Code,
                        GroupOfVehicleName = c.CAT_GroupOfVehicle.GroupName,
                        SortOrder = c.SortOrder
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Setting_GOVSave(DTOCATContractGroupVehicle item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập ID:" + item.ID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.SortOrder = item.SortOrder;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Setting_GOVDeleteList(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
                    if (objContract == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy hợp đồng");
                    foreach (var govID in lst)
                    {
                        var obj = model.CAT_ContractGroupVehicle.FirstOrDefault(c => c.ID == govID);
                        if (obj != null)
                        {
                            //bang gia bac thang
                            if (objContract.TypeOfRunLevelID > 0)
                            {
                                foreach (var level in model.CAT_ContractLevel.Where(c => c.ContractID == objContract.ID && c.GroupOfVehicleID > 0 && c.GroupOfVehicleID == obj.ID))
                                {
                                    foreach (var price in model.CAT_PriceGVLevelGroupVehicle.Where(c => c.ContractLevelID == level.ID && c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID))
                                    {
                                        model.CAT_PriceGVLevelGroupVehicle.Remove(price);
                                    }
                                    model.CAT_ContractLevel.Remove(level);
                                }
                            }
                            else // bang gia thường
                            {
                                foreach (var price in model.CAT_PriceGroupVehicle.Where(c => c.CAT_Price.CAT_ContractTerm.ContractID == objContract.ID && c.GroupOfVehicleID == obj.ID))
                                {
                                    model.CAT_PriceGroupVehicle.Remove(price);
                                }
                            }

                            model.CAT_ContractGroupVehicle.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult VENContract_Setting_GOVNotInList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lisGOV = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => c.GroupOfVehicleID).Distinct().ToList();
                    var query = model.CAT_GroupOfVehicle.Where(c => !lisGOV.Contains(c.ID)).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Ton = c.Ton,
                        GroupName = c.GroupName
                    }).OrderBy(c => c.Ton).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<CATGroupOfVehicle>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Setting_GOVNotInSave(List<int> lst, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var gov in lst)
                    {
                        CAT_ContractGroupVehicle obj = new CAT_ContractGroupVehicle();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        obj.GroupOfVehicleID = gov;
                        obj.SortOrder = 1;
                        model.CAT_ContractGroupVehicle.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult VENContract_Setting_LevelList(string request, int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractLevel.Where(c => c.ContractID == contractID).Select(c => new DTOCATContractLevel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LevelName = c.LevelName,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        Quantity = c.Quantity,
                        GroupOfVehicleID = c.GroupOfVehicleID,
                        GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                        GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        DateEnd = c.DateEnd,
                        DateStart = c.DateStart,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOCATContractLevel>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATContractLevel VENContract_Setting_LevelGet(int id)
        {
            try
            {
                DTOCATContractLevel result = new DTOCATContractLevel();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.CAT_ContractLevel.Where(c => c.ID == id).Select(c => new DTOCATContractLevel
                        {
                            ID = c.ID,
                            Code = c.Code,
                            LevelName = c.LevelName,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            GroupOfVehicleID = c.GroupOfVehicleID,
                            GroupOfVehicleCode = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.Code : string.Empty,
                            GroupOfVehicleName = c.GroupOfVehicleID > 0 ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                            DateEnd = c.DateEnd,
                            DateStart = c.DateStart,
                            SortOrder = c.SortOrder
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Setting_LevelSave(DTOCATContractLevel item, int contractID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    if (model.CAT_ContractLevel.Count(c => c.ID != item.ID && c.Code == item.Code && c.ContractID == contractID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã bậc giá đã sử dụng");
                    var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_ContractLevel();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.ContractID = contractID;
                        model.CAT_ContractLevel.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.LevelName = item.LevelName;
                    obj.Ton = item.Ton;
                    obj.CBM = item.CBM;
                    obj.Quantity = item.Quantity;
                    obj.GroupOfVehicleID = item.GroupOfVehicleID;
                    obj.DateEnd = item.DateEnd;
                    obj.DateStart = item.DateStart;
                    obj.SortOrder = item.SortOrder;
                    model.SaveChanges();

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void VENContract_Setting_LevelDeleteList(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var levelID in lst)
                    {
                        var obj = model.CAT_ContractLevel.FirstOrDefault(c => c.ID == levelID);
                        if (obj != null) model.CAT_ContractLevel.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<CATGroupOfVehicle> VENContract_Setting_Level_GOVList(int contractID)
        {
            try
            {
                List<CATGroupOfVehicle> result = new List<CATGroupOfVehicle>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_ContractGroupVehicle.Where(c => c.ContractID == contractID).Select(c => new CATGroupOfVehicle
                    {
                        ID = c.GroupOfVehicleID,
                        GroupName = c.CAT_GroupOfVehicle.GroupName,
                        Code = c.CAT_GroupOfVehicle.Code,
                        Ton = c.CAT_GroupOfVehicle.Ton
                    }).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region PriceHistory

        public DTOCUSPrice_HistoryData PriceHistory_CheckPrice(List<int> lstVenId, int transportModeID)
        {
            try
            {
                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                //result.ListPriceOfCustomer = new List<DTOCUSPriceHistory_OfCustomer>();
                //result.hasLevel = false;
                //result.hasNomal = false;

                using (var model = new DataEntities())
                {
                    //foreach (int cusID in lstVenId)
                    //{
                    //    DTOCUSPriceHistory_OfCustomer priceOfCustomer = new DTOCUSPriceHistory_OfCustomer();
                    //    priceOfCustomer.CustomerID = cusID;
                    //    priceOfCustomer.CustomerName = model.CUS_Customer.Where(c => c.ID == cusID).FirstOrDefault().CustomerName;

                    //    DateTime now = DateTime.Now.Date;

                    //    var contract = model.CAT_Contract.Where(c => c.CustomerID == cusID && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();


                    //    if (contract != null)
                    //    {
                    //        var lstPrice = model.CAT_Price.Where(c => c.ContractID == contract.ID).OrderByDescending(c => c.CreatedDate).ToList();

                    //        foreach (var objPrice in lstPrice)
                    //        {
                    //            if (objPrice != null)
                    //            {
                    //                var hasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                    //                if (hasNormal == true)
                    //                {
                    //                    result.hasNomal = true;
                    //                }
                    //                var hasLevel = model.CAT_PriceDILevel.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceGVLevel.Count(c => c.PriceID == objPrice.ID) > 0;
                    //                if (hasLevel == true)
                    //                {
                    //                    result.hasLevel = true;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCUSPrice_HistoryData PriceHistory_GetDataOneUser(int cusId, int venId, int transportModeID, int typePrice)
        {
            try
            {
                int iHot = -(int)SYSVarType.TypeOfOrderHot;
                int iDirect = -(int)SYSVarType.TypeOfOrderDirect;
                int iReturn = -(int)SYSVarType.TypeOfOrderReturn;
                int iReturnHot = -(int)SYSVarType.TypeOfOrderReturnHot;

                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                int iMain = -(int)SYSVarType.TypeOfContractMain;
                int iFrame = -(int)SYSVarType.TypeOfContractFrame;

                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                //result.ListPriceOfCustomer = new List<DTOCUSPriceHistory_OfCustomer>();
                //result.ListPrice = new List<DTOCUSPriceHistory_Price>();
                //result.ListRoute = new List<DTOCATRouting>();

                using (var model = new DataEntities())
                {
                    //DTOCUSPriceHistory_OfCustomer customer = new DTOCUSPriceHistory_OfCustomer();

                    //customer.CustomerID = venId;
                    //customer.CustomerName = model.CUS_Customer.Where(c => c.ID == venId).FirstOrDefault().CustomerName;
                    //DateTime now = DateTime.Now.Date;

                    //var listGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == venId).Select(c => new DTOCUSGroupOfProduct
                    //{
                    //    ID = c.ID,
                    //    Code = c.Code,
                    //    GroupName = c.GroupName,
                    //    PriceOfGOPID = c.PriceOfGOPID,
                    //    PriceOfGOPName = c.SYS_Var.ValueOfVar
                    //}).ToList();

                    //CAT_Contract contract = new CAT_Contract();
                    //if (cusId > 0)
                    //{
                    //    contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate == null && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    if (contract == null)
                    //    {
                    //        contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    }
                    //}
                    //else
                    //{
                    //    contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.TransportModeID == transportModeID && c.ExpiredDate == null && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    if (contract == null)
                    //    {
                    //        contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //    }
                    //}


                    //if (contract != null)
                    //{
                    //    var ListAllRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contract.ID).Select(c => new DTOCUSContractRouting
                    //    {
                    //        ID = c.ID,
                    //        Code = c.Code,
                    //        RoutingName = c.RoutingName,
                    //        CATCode = c.CAT_Routing.Code,
                    //        CATName = c.CAT_Routing.RoutingName,
                    //        SortOrder = c.SortOrder
                    //    }).OrderBy(c => c.SortOrder).ToList();

                    //    customer.ListGroupOfProduct = new List<DTOCUSGroupOfProduct>();
                    //    if (listGOP != null)
                    //    {
                    //        customer.ListGroupOfProduct.AddRange(listGOP);
                    //    }

                    //    customer.ListRouting = new List<DTOCUSContractRouting>();
                    //    if (ListAllRouting != null)
                    //    {
                    //        customer.ListRouting.AddRange(ListAllRouting);
                    //    }

                    //    var listRouteSys = ListAllRouting.Select(c => new DTOCATRouting
                    //    {
                    //        Code = c.CATCode,
                    //        RoutingName = c.CATName,
                    //    }).OrderBy(c => c.SortOrder).ToList();

                    //    result.ListRoute.AddRange(listRouteSys);

                    //    var lstPrice = model.CAT_Price.Where(c => c.ContractID == contract.ID).OrderByDescending(c => c.EffectDate).ToList();

                    //    foreach (var objPrice in lstPrice)
                    //    {
                    //        if (objPrice != null)
                    //        {

                    //            DTOCUSPriceHistory_Price history = new DTOCUSPriceHistory_Price();
                    //            history.ItemPrice = new DTOCUSPrice();
                    //            #region ItemPrice
                    //            history.ItemPrice.ID = objPrice.ID;
                    //            history.ItemPrice.ContractID = objPrice.ID;
                    //            history.ItemPrice.Code = objPrice.Code;
                    //            history.ItemPrice.Name = objPrice.Name;
                    //            history.ItemPrice.CustomerName = objPrice.CAT_Contract.CUS_Customer.CustomerName;
                    //            history.ItemPrice.EffectDate = objPrice.EffectDate;
                    //            history.ItemPrice.TypeOfOrderID = objPrice.TypeOfOrderID;
                    //            history.ItemPrice.ContractNo = objPrice.CAT_Contract.ContractNo;
                    //            history.ItemPrice.TypeOfOrderName = objPrice.SYS_Var.ValueOfVar;
                    //            history.ItemPrice.TypeOfPrice = objPrice.TypeOfOrderID == iDirect ? 1 : objPrice.TypeOfOrderID == iHot ? 2 : objPrice.TypeOfOrderID == iReturn ? 3 : objPrice.TypeOfOrderID == iReturnHot ? 4 : 0;
                    //            history.ItemPrice.TypeOfMode = objPrice.CAT_Contract.TransportModeID == iFCL ? 1 : objPrice.CAT_Contract.TransportModeID == iFTL ? 2 : objPrice.CAT_Contract.TransportModeID == iLTL ? 3 : 0;
                    //            history.ItemPrice.TypeOfContract = objPrice.CAT_Contract.TypeOfContractID == iMain ? 1 : objPrice.CAT_Contract.TypeOfContractID == iFrame ? 2 : 0;
                    //            history.ItemPrice.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                    //            history.ItemPrice.CheckPrice = new DTOPriceCheck();

                    //            history.ItemPrice.CheckPrice.HasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            history.ItemPrice.CheckPrice.HasLevel = model.CAT_PriceDILevel.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceGVLevel.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            #endregion

                    //            #region FCL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFCL)
                    //            {
                    //                var lstDetailFCL = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceCOContainer
                    //                {
                    //                    ID = c.ID,
                    //                    PackingID = c.PackingID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    PriceID = c.PriceID,
                    //                    ContractRoutingID = c.ContractRoutingID.Value
                    //                }).ToList();
                    //                var ListPacking = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new CATPacking
                    //                {
                    //                    ID = c.PackingID,
                    //                    Code = c.CAT_Packing.Code,
                    //                    PackingName = c.CAT_Packing.PackingName,
                    //                    TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    //                }).Distinct().ToList();

                    //                history.FCLData = new DTOPriceCOContainerData();
                    //                history.FCLData.ListDetail = new List<DTOPriceCOContainer>();
                    //                history.FCLData.ListPacking = new List<CATPacking>();

                    //                history.FCLData.ListDetail.AddRange(lstDetailFCL);
                    //                history.FCLData.ListPacking.AddRange(ListPacking);
                    //            }
                    //            #endregion

                    //            #region FTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFTL)
                    //            {
                    //                #region FTL Normal
                    //                history.FTLNormal = new DTOPriceGroupVehicleData();
                    //                history.FTLNormal.ListDetail = new List<DTOPriceGroupVehicle>();
                    //                history.FTLNormal.ListGOV = new List<CATGroupOfVehicle>();
                    //                history.FTLNormal.ListRoute = new List<DTOCATRouting>();


                    //                var ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGroupVehicle
                    //                {
                    //                    RouteID = c.ContractRoutingID,
                    //                    GroupOfVehicleID = c.GroupOfVehicleID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin
                    //                }).ToList();
                    //                var ListGOV = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new CATGroupOfVehicle
                    //                {
                    //                    ID = c.CAT_GroupOfVehicle.ID,
                    //                    Code = c.CAT_GroupOfVehicle.Code,
                    //                    Ton = c.CAT_GroupOfVehicle.Ton,
                    //                    GroupName = c.CAT_GroupOfVehicle.GroupName,
                    //                    SortOrder = c.CAT_GroupOfVehicle.SortOrder
                    //                }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    //                history.FTLNormal.ListDetail.AddRange(ListDetail);
                    //                history.FTLNormal.ListGOV.AddRange(ListGOV);
                    //                #endregion

                    //                #region FTL Level
                    //                history.FTLLevel = new DTOPriceGVLevelDetail();
                    //                history.FTLLevel.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                    //                history.FTLLevel.ListLevel = new List<DTOPriceGVLevel>();
                    //                var ListFTLLevelDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_PriceGVLevel.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevelGroupVehicle
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceGVLevelID,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    Price = c.Price
                    //                }).ToList();
                    //                var ListFTLLevel = model.CAT_PriceGVLevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.FTLLevel.ListDetail.AddRange(ListFTLLevelDetail);
                    //                history.FTLLevel.ListLevel.AddRange(ListFTLLevel);
                    //                #endregion
                    //            }

                    //            #endregion

                    //            #region LTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iLTL)
                    //            {
                    //                #region LTL Normal
                    //                var dataRouting = contract.CAT_ContractRouting.Select(c => new DTOCUSPriceRouting
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    RoutingName = c.RoutingName,
                    //                    CATID = c.CAT_Routing.ID,
                    //                    CATCode = c.CAT_Routing.Code,
                    //                    CATName = c.CAT_Routing.RoutingName,
                    //                    SortOrder = c.SortOrder
                    //                }).ToList();

                    //                foreach (var item in dataRouting)
                    //                {
                    //                    item.ListGroupProductPrice = new List<DTOCATPriceDIGroupProduct>();
                    //                    var lstGroupProductPrice = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == objPrice.ID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceDIGroupProduct
                    //                    {
                    //                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                    //                        CustomerName = c.CUS_GroupOfProduct.CUS_Customer.CustomerName,
                    //                        GroupOfProductID = c.GroupOfProductID,
                    //                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                    //                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                    //                        ID = c.ID,
                    //                        Price = c.Price,
                    //                        PriceMax = c.PriceMax,
                    //                        PriceMin = c.PriceMin,
                    //                        ContractRoutingID = c.ContractRoutingID,
                    //                    }).ToList();
                    //                    item.ListGroupProductPrice.AddRange(lstGroupProductPrice);
                    //                }

                    //                history.LTLNormal = dataRouting;
                    //                #endregion

                    //                #region LTL Level
                    //                history.LTLLevel = new DTOPriceDILevelDetail();
                    //                history.LTLLevel.ListLevel = new List<DTOPriceDILevel>();
                    //                history.LTLLevel.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                    //                history.LTLLevel.ListLevel = model.CAT_PriceDILevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceDILevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.LTLLevel.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_PriceDILevel.PriceID == objPrice.ID).Select(c => new DTOPriceDILevelGroupProduct
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceDILevelID,
                    //                    GroupProductID = c.GroupOfProductID,
                    //                    Price = c.Price,
                    //                }).ToList();
                    //                #endregion
                    //            }
                    //            #endregion

                    //            result.ListPrice.Add(history);
                    //        }
                    //    }
                    //    result.ListPriceOfCustomer.Add(customer);
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSPrice_HistoryData PriceHistory_GetDataMulUser(int cusId, List<int> lstVenId, int transportModeID, int typePrice)
        {
            try
            {
                int iHot = -(int)SYSVarType.TypeOfOrderHot;
                int iDirect = -(int)SYSVarType.TypeOfOrderDirect;
                int iReturn = -(int)SYSVarType.TypeOfOrderReturn;
                int iReturnHot = -(int)SYSVarType.TypeOfOrderReturnHot;

                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iFTL = -(int)SYSVarType.TransportModeFTL;
                int iLTL = -(int)SYSVarType.TransportModeLTL;

                int iMain = -(int)SYSVarType.TypeOfContractMain;
                int iFrame = -(int)SYSVarType.TypeOfContractFrame;

                DTOCUSPrice_HistoryData result = new DTOCUSPrice_HistoryData();
                //result.ListPriceOfCustomer = new List<DTOCUSPriceHistory_OfCustomer>();
                //result.ListPrice = new List<DTOCUSPriceHistory_Price>();
                //result.ListRoute = new List<DTOCATRouting>();

                using (var model = new DataEntities())
                {
                    //List<int> listContractId = new List<int>();
                    //foreach (var venId in lstVenId)
                    //{
                    //    DTOCUSPriceHistory_OfCustomer priceOfCustomer = new DTOCUSPriceHistory_OfCustomer();
                    //    DTOCUSPrice_HistoryData data = new DTOCUSPrice_HistoryData();
                    //    priceOfCustomer.CustomerID = venId;
                    //    priceOfCustomer.CustomerName = model.CUS_Customer.Where(c => c.ID == venId).FirstOrDefault().CustomerName;

                    //    DateTime now = DateTime.Now.Date;

                    //    var listGOP = model.CUS_GroupOfProduct.Where(c => c.CustomerID == venId).Select(c => new DTOCUSGroupOfProduct
                    //    {
                    //        ID = c.ID,
                    //        Code = c.Code,
                    //        GroupName = c.GroupName,
                    //        PriceOfGOPID = c.PriceOfGOPID,
                    //        PriceOfGOPName = c.SYS_Var.ValueOfVar
                    //    }).ToList();

                    //    CAT_Contract contract = new CAT_Contract();
                    //    if (cusId > 0)
                    //    {
                    //        contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate == null && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //        if (contract == null)
                    //        {
                    //            contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.CUS_Company.CustomerRelateID == cusId && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //        }
                    //    }
                    //    else
                    //    {
                    //        contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.TransportModeID == transportModeID && c.EffectDate == null && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //        if (contract == null)
                    //        {
                    //            contract = model.CAT_Contract.Where(c => c.CustomerID == venId && c.TransportModeID == transportModeID && c.ExpiredDate >= now && c.EffectDate <= now).OrderByDescending(c => c.EffectDate).FirstOrDefault();
                    //        }
                    //    }
                    //    if (contract != null)
                    //    {
                    //        listContractId.Add(contract.ID);
                    //        var ListAllRouting = model.CAT_ContractRouting.Where(c => c.ContractID == contract.ID).Select(c => new DTOCUSContractRouting
                    //        {
                    //            ID = c.ID,
                    //            Code = c.Code,
                    //            RoutingName = c.RoutingName,
                    //            CATID = c.CAT_Routing.ID,
                    //            CATCode = c.CAT_Routing.Code,
                    //            CATName = c.CAT_Routing.RoutingName,
                    //            SortOrder = c.SortOrder
                    //        }).OrderBy(c => c.SortOrder).ToList();

                    //        priceOfCustomer.ListGroupOfProduct = new List<DTOCUSGroupOfProduct>();
                    //        if (listGOP != null)
                    //        {
                    //            priceOfCustomer.ListGroupOfProduct.AddRange(listGOP);
                    //        }

                    //        priceOfCustomer.ListRouting = new List<DTOCUSContractRouting>();
                    //        if (ListAllRouting != null)
                    //        {
                    //            priceOfCustomer.ListRouting.AddRange(ListAllRouting);
                    //        }

                    //        var objPrice = model.CAT_Price.Where(c => c.ContractID == contract.ID).OrderByDescending(c => c.EffectDate).FirstOrDefault();

                    //        if (objPrice != null)
                    //        {

                    //            DTOCUSPriceHistory_Price history = new DTOCUSPriceHistory_Price();
                    //            history.ItemPrice = new DTOCUSPrice();
                    //            #region ItemPrice
                    //            history.ItemPrice.ID = objPrice.ID;
                    //            history.ItemPrice.ContractID = objPrice.ID;
                    //            history.ItemPrice.Code = objPrice.Code;
                    //            history.ItemPrice.Name = objPrice.Name;
                    //            history.ItemPrice.CustomerName = objPrice.CAT_Contract.CUS_Customer.CustomerName;
                    //            history.ItemPrice.CustomerID = objPrice.CAT_Contract.CUS_Customer.ID;
                    //            history.ItemPrice.EffectDate = objPrice.EffectDate;
                    //            history.ItemPrice.TypeOfOrderID = objPrice.TypeOfOrderID;
                    //            history.ItemPrice.ContractNo = objPrice.CAT_Contract.ContractNo;
                    //            history.ItemPrice.TypeOfOrderName = objPrice.SYS_Var.ValueOfVar;
                    //            history.ItemPrice.TypeOfPrice = objPrice.TypeOfOrderID == iDirect ? 1 : objPrice.TypeOfOrderID == iHot ? 2 : objPrice.TypeOfOrderID == iReturn ? 3 : objPrice.TypeOfOrderID == iReturnHot ? 4 : 0;
                    //            history.ItemPrice.TypeOfMode = objPrice.CAT_Contract.TransportModeID == iFCL ? 1 : objPrice.CAT_Contract.TransportModeID == iFTL ? 2 : objPrice.CAT_Contract.TransportModeID == iLTL ? 3 : 0;
                    //            history.ItemPrice.TypeOfContract = objPrice.CAT_Contract.TypeOfContractID == iMain ? 1 : objPrice.CAT_Contract.TypeOfContractID == iFrame ? 2 : 0;
                    //            history.ItemPrice.TypeOfRunLevelID = objPrice.TypeOfRunLevelID;

                    //            history.ItemPrice.CheckPrice = new DTOPriceCheck();

                    //            history.ItemPrice.CheckPrice.HasNormal = model.CAT_PriceGroupVehicle.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceDIGroupProduct.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            history.ItemPrice.CheckPrice.HasLevel = model.CAT_PriceDILevel.Count(c => c.PriceID == objPrice.ID) > 0 || model.CAT_PriceGVLevel.Count(c => c.PriceID == objPrice.ID) > 0;
                    //            #endregion

                    //            #region FCL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFCL)
                    //            {
                    //                var lstDetailFCL = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceCOContainer
                    //                {
                    //                    ID = c.ID,
                    //                    PackingID = c.PackingID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    PriceID = c.PriceID,
                    //                    ContractRoutingID = c.ContractRoutingID.Value
                    //                }).ToList();
                    //                var ListPacking = model.CAT_PriceCOContainer.Where(c => c.PriceID == objPrice.ID).Select(c => new CATPacking
                    //                {
                    //                    ID = c.PackingID,
                    //                    Code = c.CAT_Packing.Code,
                    //                    PackingName = c.CAT_Packing.PackingName,
                    //                    TypeOfPackageID = c.CAT_Packing.TypeOfPackageID
                    //                }).Distinct().ToList();

                    //                history.FCLData = new DTOPriceCOContainerData();
                    //                history.FCLData.ListDetail = new List<DTOPriceCOContainer>();
                    //                history.FCLData.ListPacking = new List<CATPacking>();

                    //                history.FCLData.ListDetail.AddRange(lstDetailFCL);
                    //                history.FCLData.ListPacking.AddRange(ListPacking);
                    //            }
                    //            #endregion

                    //            #region FTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iFTL)
                    //            {
                    //                #region FTL Normal
                    //                history.FTLNormal = new DTOPriceGroupVehicleData();
                    //                history.FTLNormal.ListDetail = new List<DTOPriceGroupVehicle>();
                    //                history.FTLNormal.ListGOV = new List<CATGroupOfVehicle>();
                    //                history.FTLNormal.ListRoute = new List<DTOCATRouting>();


                    //                var ListDetail = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGroupVehicle
                    //                {
                    //                    RouteID = c.ContractRoutingID,
                    //                    GroupOfVehicleID = c.GroupOfVehicleID,
                    //                    Price = c.Price,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin
                    //                }).ToList();
                    //                var ListGOV = model.CAT_PriceGroupVehicle.Where(c => c.PriceID == objPrice.ID).Select(c => new CATGroupOfVehicle
                    //                {
                    //                    ID = c.CAT_GroupOfVehicle.ID,
                    //                    Code = c.CAT_GroupOfVehicle.Code,
                    //                    Ton = c.CAT_GroupOfVehicle.Ton,
                    //                    GroupName = c.CAT_GroupOfVehicle.GroupName,
                    //                    SortOrder = c.CAT_GroupOfVehicle.SortOrder
                    //                }).Distinct().OrderBy(c => c.SortOrder).ToList();

                    //                history.FTLNormal.ListDetail.AddRange(ListDetail);
                    //                history.FTLNormal.ListGOV.AddRange(ListGOV);
                    //                #endregion

                    //                #region FTL Level
                    //                history.FTLLevel = new DTOPriceGVLevelDetail();
                    //                history.FTLLevel.ListDetail = new List<DTOPriceGVLevelGroupVehicle>();
                    //                history.FTLLevel.ListLevel = new List<DTOPriceGVLevel>();
                    //                var ListFTLLevelDetail = model.CAT_PriceGVLevelGroupVehicle.Where(c => c.CAT_PriceGVLevel.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevelGroupVehicle
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceGVLevelID,
                    //                    PriceMax = c.PriceMax,
                    //                    PriceMin = c.PriceMin,
                    //                    Price = c.Price
                    //                }).ToList();
                    //                var ListFTLLevel = model.CAT_PriceGVLevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceGVLevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.FTLLevel.ListDetail.AddRange(ListFTLLevelDetail);
                    //                history.FTLLevel.ListLevel.AddRange(ListFTLLevel);
                    //                #endregion
                    //            }

                    //            #endregion

                    //            #region LTL
                    //            if (objPrice.CAT_Contract.TransportModeID == iLTL)
                    //            {
                    //                #region LTL Normal
                    //                var dataRouting = contract.CAT_ContractRouting.Select(c => new DTOCUSPriceRouting
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    RoutingName = c.RoutingName,
                    //                    CATID = c.CAT_Routing.ID,
                    //                    CATCode = c.CAT_Routing.Code,
                    //                    CATName = c.CAT_Routing.RoutingName,
                    //                    SortOrder = c.SortOrder
                    //                }).ToList();

                    //                foreach (var item in dataRouting)
                    //                {
                    //                    item.ListGroupProductPrice = new List<DTOCATPriceDIGroupProduct>();
                    //                    var lstGroupProductPrice = model.CAT_PriceDIGroupProduct.Where(c => c.PriceID == objPrice.ID && c.ContractRoutingID == item.ID).Select(c => new DTOCATPriceDIGroupProduct
                    //                    {
                    //                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                    //                        CustomerName = c.CUS_GroupOfProduct.CUS_Customer.CustomerName,
                    //                        GroupOfProductID = c.GroupOfProductID,
                    //                        GroupOfProductName = c.CUS_GroupOfProduct.GroupName,
                    //                        GroupOfProductCode = c.CUS_GroupOfProduct.Code,
                    //                        ID = c.ID,
                    //                        Price = c.Price,
                    //                        PriceMax = c.PriceMax,
                    //                        PriceMin = c.PriceMin,
                    //                        ContractRoutingID = c.ContractRoutingID,
                    //                    }).ToList();
                    //                    item.ListGroupProductPrice.AddRange(lstGroupProductPrice);
                    //                }

                    //                history.LTLNormal = dataRouting;
                    //                #endregion

                    //                #region LTL Level
                    //                history.LTLLevel = new DTOPriceDILevelDetail();
                    //                history.LTLLevel.ListLevel = new List<DTOPriceDILevel>();
                    //                history.LTLLevel.ListDetail = new List<DTOPriceDILevelGroupProduct>();
                    //                history.LTLLevel.ListLevel = model.CAT_PriceDILevel.Where(c => c.PriceID == objPrice.ID).Select(c => new DTOPriceDILevel
                    //                {
                    //                    ID = c.ID,
                    //                    Code = c.Code,
                    //                    PriceID = c.PriceID,
                    //                    LevelName = c.LevelName
                    //                }).ToList();

                    //                history.LTLLevel.ListDetail = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_PriceDILevel.PriceID == objPrice.ID).Select(c => new DTOPriceDILevelGroupProduct
                    //                {
                    //                    ID = c.ID,
                    //                    RoutingID = c.ContractRoutingID,
                    //                    LevelID = c.PriceDILevelID,
                    //                    GroupProductID = c.GroupOfProductID,
                    //                    Price = c.Price,
                    //                }).ToList();
                    //                #endregion
                    //            }
                    //            #endregion

                    //            result.ListPrice.Add(history);
                    //        }
                    //    }
                    //    result.ListPriceOfCustomer.Add(priceOfCustomer);
                    //}
                    //if (listContractId != null)
                    //{
                    //    var listRouteID = model.CAT_ContractRouting.Where(c => listContractId.Contains(c.ContractID)).Select(c => c.RoutingID).Distinct().ToList();

                    //    var listRoute = model.CAT_Routing.Where(c => listRouteID.Contains(c.ID)).Select(c => new DTOCATRouting()
                    //    {
                    //        RoutingID = c.ID,
                    //        Code = c.Code,
                    //        RoutingName = c.RoutingName,
                    //    }).ToList();

                    //    result.ListRoute.AddRange(listRoute);
                    //}
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<int> PriceHistory_GetListVendor(int cusID)
        {
            try
            {
                List<int> result = new List<int>();
                using (var model = new DataEntities())
                {
                    int type2 = -(int)SYSVarType.TypeOfCustomerBOTH;
                    int type1 = -(int)SYSVarType.TypeOfCustomerVEN;
                    result = model.CUS_Company.Where(c => c.CustomerRelateID == cusID && (c.CUS_Customer.TypeOfCustomerID == type1 || c.CUS_Customer.TypeOfCustomerID == type2)).Select(c => c.CustomerOwnID).Distinct().ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        public void Account_Setting()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstId = model.CUS_Customer.Select(c => c.ID);
                    Account.ListCustomerID = lstId.ToArray();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
    }
}

