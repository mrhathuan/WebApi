using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.Data.Entity;
using System.ServiceModel;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using System.Data.Objects;
using System.Data.Entity.SqlServer;
using OfficeOpenXml;
using System.Globalization;

namespace Business
{
    public class BLOrder : Base, IBase
    {
        #region Variables
        const string DICodePrefix = "DI";
        const string DICodeNum = "0000000";
        const string COCodePrefix = "CO";
        const string COCodeNum = "0000000";

        const int SortCOTOContainerAdd = 20;
        const int iLO = -(int)SYSVarType.ServiceOfOrderLocal;
        const int iLOEmpty = -(int)SYSVarType.ServiceOfOrderLocalEmpty;
        const int iLOLaden = -(int)SYSVarType.ServiceOfOrderLocalLaden;
        const int iIM = -(int)SYSVarType.ServiceOfOrderImport;
        const int iEx = -(int)SYSVarType.ServiceOfOrderExport;
        const int iFCL = -(int)SYSVarType.TransportModeFCL;
        const int iFTL = -(int)SYSVarType.TransportModeFTL;
        const int iLTL = -(int)SYSVarType.TransportModeLTL;

        const double HourMatrixDefault = 1;
        const double HourInStockDefault = 1;
        #endregion

        #region Data
        public DTOResult ORDOrder_CustomerList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    bool IsAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && (IsAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new CUSCustomer
                        {
                            ID = c.ID,
                            Code = c.Code,
                            CustomerName = c.ShortName
                        }).ToList();
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_VendorList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    bool IsAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var query = model.CUS_Customer.Where(c => !c.IsSystem && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && (IsAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_Contract_List(int cusID, int serID, int transID, bool isExpired)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var transportID = HelperContract.GetTransportMode(model, transID);
                    var serviceID = HelperContract.GetServiceOfOrder(model, serID);
                    if (isExpired)
                    {
                        var toDay = DateTime.Now.Date;
                        if (transportID == -(int)SYSVarType.TransportModeFCL)
                        {
                            var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID && c.TransportModeID > 0 && c.TransportModeID == transID
                                && c.EffectDate <= toDay && (c.ExpiredDate == null || c.ExpiredDate >= toDay) && c.CAT_ContractTerm.Count(o => o.ServiceOfOrderID == serID) > 0).Select(c => new DTOCATContract
                                {
                                    ID = c.ID,
                                    CustomerID = c.CustomerID,
                                    ContractNo = c.ContractNo,
                                    EffectDate = c.EffectDate,
                                    ExpiredDate = c.ExpiredDate,
                                    SignDate = c.SignDate,
                                    SignBy = c.SignBy,
                                    PostionName = c.PostionName,
                                    Content = c.Content,
                                    DisplayName = c.DisplayName,
                                    IsSKU = c.IsSKU,
                                    UseRegion = c.UseRegion,
                                    TypeOfContractDateID = c.TypeOfContractDateID,
                                    TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                                    TypeOfCustomerID = c.TypeOfCustomerID,
                                    SYSCustomerID = c.SYSCustomerID,
                                    CompanyID = c.CompanyID,
                                    CustomerName = c.CUS_Customer.CustomerName,
                                    CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                                    //ServiceOfOrderID = c.ServiceOfOrderID,
                                    TransportModeID = c.TransportModeID,
                                    TypeOfContractID = c.TypeOfContractID,
                                    UseLoadLocation = c.UseLoadLocation,
                                    TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                    //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                    TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                                    TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                                    LeadTime = c.LeadTime,
                                    AllowCoLoad = c.AllowCoLoad
                                }).ToList();
                            var objNull = new DTOCATContract();
                            objNull.DisplayName = string.Empty;
                            objNull.ID = -1;
                            query.Insert(0, objNull);
                            result.Data = query;
                        }
                        else
                        {
                            var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID && c.TransportModeID == transID
                              && c.EffectDate <= toDay && (c.ExpiredDate == null || c.ExpiredDate >= toDay)).Select(c => new DTOCATContract
                              {
                                  ID = c.ID,
                                  CustomerID = c.CustomerID,
                                  ContractNo = c.ContractNo,
                                  EffectDate = c.EffectDate,
                                  ExpiredDate = c.ExpiredDate,
                                  SignDate = c.SignDate,
                                  SignBy = c.SignBy,
                                  PostionName = c.PostionName,
                                  Content = c.Content,
                                  DisplayName = c.DisplayName,
                                  IsSKU = c.IsSKU,
                                  UseRegion = c.UseRegion,
                                  TypeOfContractDateID = c.TypeOfContractDateID,
                                  TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                                  TypeOfCustomerID = c.TypeOfCustomerID,
                                  SYSCustomerID = c.SYSCustomerID,
                                  CompanyID = c.CompanyID,
                                  CustomerName = c.CUS_Customer.CustomerName,
                                  CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                                  //ServiceOfOrderID = c.ServiceOfOrderID,
                                  TransportModeID = c.TransportModeID,
                                  TypeOfContractID = c.TypeOfContractID,
                                  UseLoadLocation = c.UseLoadLocation,
                                  TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                  //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                  TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                                  TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                                  LeadTime = c.LeadTime,
                                  AllowCoLoad = c.AllowCoLoad
                              }).ToList();
                            var objNull = new DTOCATContract();
                            objNull.DisplayName = string.Empty;
                            objNull.ID = -1;
                            query.Insert(0, objNull);
                            result.Data = query;
                        }
                    }
                    else
                    {
                        if (transportID == -(int)SYSVarType.TransportModeFCL)
                        {
                            var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID
                                && c.TransportModeID == transID && c.CAT_ContractTerm.Count(o => o.ServiceOfOrderID == serID) > 0).Select(c => new DTOCATContract
                            {
                                ID = c.ID,
                                CustomerID = c.CustomerID,
                                ContractNo = c.ContractNo,
                                EffectDate = c.EffectDate,
                                ExpiredDate = c.ExpiredDate,
                                SignDate = c.SignDate,
                                SignBy = c.SignBy,
                                PostionName = c.PostionName,
                                Content = c.Content,
                                DisplayName = c.DisplayName,
                                IsSKU = c.IsSKU,
                                UseRegion = c.UseRegion,
                                TypeOfContractDateID = c.TypeOfContractDateID,
                                TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                                TypeOfCustomerID = c.TypeOfCustomerID,
                                SYSCustomerID = c.SYSCustomerID,
                                CompanyID = c.CompanyID,
                                CustomerName = c.CUS_Customer.CustomerName,
                                CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                                //ServiceOfOrderID = c.ServiceOfOrderID,
                                TransportModeID = c.TransportModeID,
                                TypeOfContractID = c.TypeOfContractID,
                                UseLoadLocation = c.UseLoadLocation,
                                TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                                TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                                AllowCoLoad = c.AllowCoLoad,
                                LeadTime = c.LeadTime
                            }).ToList();
                            result.Total = query.Count;
                            result.Data = query;
                        }
                        else
                        {
                            var query = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID && c.TransportModeID == transID).Select(c => new DTOCATContract
                            {
                                ID = c.ID,
                                CustomerID = c.CustomerID,
                                ContractNo = c.ContractNo,
                                EffectDate = c.EffectDate,
                                ExpiredDate = c.ExpiredDate,
                                SignDate = c.SignDate,
                                SignBy = c.SignBy,
                                PostionName = c.PostionName,
                                Content = c.Content,
                                DisplayName = c.DisplayName,
                                IsSKU = c.IsSKU,
                                UseRegion = c.UseRegion,
                                TypeOfContractDateID = c.TypeOfContractDateID,
                                TypeOfContractDateName = c.SYS_Var1.ValueOfVar,
                                TypeOfCustomerID = c.TypeOfCustomerID,
                                SYSCustomerID = c.SYSCustomerID,
                                CompanyID = c.CompanyID,
                                CustomerName = c.CUS_Customer.CustomerName,
                                CompanyName = c.CUS_Company.CUS_Customer.CustomerName,
                                //ServiceOfOrderID = c.ServiceOfOrderID,
                                TransportModeID = c.TransportModeID,
                                TypeOfContractID = c.TypeOfContractID,
                                UseLoadLocation = c.UseLoadLocation,
                                TypeOfContractName = c.TypeOfContractID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                //ServiceOfOrderName = c.ServiceOfOrderID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                TransportModeName = c.TransportModeID.HasValue ? c.CAT_TransportMode.Name : string.Empty,
                                TypeOfCustomerName = c.SYS_Var2.ValueOfVar,
                                AllowCoLoad = c.AllowCoLoad,
                                LeadTime = c.LeadTime
                            }).ToList();
                            result.Total = query.Count;
                            result.Data = query;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_ContractTemp_List(int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractTerm.Where(c => c.ContractID == contractID && !c.IsAllRouting).Select(c => new DTOCATContract
                    {
                        ID = c.ID,
                        DisplayName = c.DisplayName
                    }).ToList();
                    var objNull = new DTOCATContract();
                    objNull.DisplayName = string.Empty;
                    objNull.ID = -1;
                    query.Insert(0, objNull);
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_GroupOfProduct_List(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        ParentID = c.ParentID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        Level = c.Level,
                        PriceOfGOPID = c.PriceOfGOPID,
                        BiddingGroupOfProductID = c.BiddingGroupOfProductID
                    }).ToList();
                    result.Total = query.Count();
                    result.Data = query as IEnumerable<CUSGroupOfProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_Stock_List(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == cusID).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Location = c.LocationName,
                        Address = c.CAT_Location.Address,
                        WardID = c.CAT_Location.WardID,
                        DistrictID = c.CAT_Location.DistrictID,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName,
                        ProvinceID = c.CAT_Location.ProvinceID,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        CountryID = c.CAT_Location.CountryID,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        CusPartID = c.CusPartID
                    });
                    result.Total = query.Count();
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_CusLocation_List(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOORDData_Location>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_CusStock_List(int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID == null).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOORDData_Location>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_ContainerService_List(int? contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOCATService> data = new List<DTOCATService>();
                using (var model = new DataEntities())
                {
                    var isMain = contractID.HasValue ? true : false;
                    if (contractID.HasValue)
                    {
                        var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID.Value);
                        if (objContract != null && objContract.TypeOfContractID == -(int)SYSVarType.TypeOfContractFrame)
                            isMain = false;
                    }
                    var dataS = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName,
                        PackingID = 0,
                        PackingName = string.Empty
                    }).ToList();
                    if (!isMain)
                    {
                        var dataPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).ToList();
                        foreach (var item in dataS as IEnumerable<DTOCATService>)
                        {
                            if (item.TypeOfPackingID == -(int)SYSVarType.TypeOfPackingServiceCO)
                            {
                                foreach (var packing in dataPacking)
                                {
                                    var service = new DTOCATService();
                                    service.ID = item.ID;
                                    service.Code = item.Code;
                                    service.ServiceName = item.ServiceName;
                                    service.PackingID = packing.ID;
                                    service.PackingName = packing.PackingName;
                                    service.TypeOfPackingID = item.TypeOfPackingID;
                                    service.TypeOfPackingName = item.TypeOfPackingName; ;
                                    data.Add(service);
                                }
                            }
                            else
                            {
                                item.PackingID = 0;
                                item.PackingName = string.Empty;
                                data.Add(item);
                            }
                        }
                    }

                    result.Total = data.Count;
                    result.Data = data as IEnumerable<DTOCATService>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_ContractCODefault_List(int contractID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_ContractCODefault.Where(c => c.ContractID == contractID).Select(c => new CATContractCODefault
                    {
                        ContractID = c.ContractID,
                        PackingID = c.PackingID,
                        Ton = c.Ton
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATContractCODefault>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDCATTransportMode> ORDOrder_TransportMode_List()
        {
            try
            {
                List<DTOORDCATTransportMode> result = new List<DTOORDCATTransportMode>();

                using (var model = new DataEntities())
                {
                    result = model.CAT_TransportMode.Select(c => new DTOORDCATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        IsTruck = (c.TransportModeID == -(int)SYSVarType.TransportModeFTL || c.TransportModeID == -(int)SYSVarType.TransportModeLTL)
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Common

        public DTOORDTruckLocalData ORDOrder_TruckLocal_Data(int cusID, int termID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new DTOORDTruckLocalData();

                    var objCus = model.CUS_Customer.FirstOrDefault(c => c.ID == cusID);
                    if (objCus != null)
                    {
                        result.IsCusCreatePartner = objCus.IsCreatePartner ?? false;
                        result.IsCusCreateLocation = objCus.IsCreateLocation ?? false;
                    }

                    result.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == cusID).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.LocationName,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    result.ListGroupProduct = model.CUS_GroupOfProductInStock.Where(c => c.CUS_GroupOfProduct.CustomerID == cusID).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.ID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupID = c.GroupOfProductID,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        StockID = c.CUS_Location.LocationID
                    }).ToList();

                    var dataProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == cusID).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        SortOrder = c.SortOrder
                    }).ToList();
                    foreach (var item in result.ListGroupProduct)
                    {
                        item.Products = dataProduct.Where(c => c.GroupOfProductID == item.GroupID).ToList();
                    }

                    result.ListDistributor = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerDistributor).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListLocation = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    result.ListGroupVehicle = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName,
                        Ton = c.Ton
                    }).ToList();

                    var dataRoute = model.CAT_ContractRouting.Where(c => c.ContractTermID == termID).Select(c => new DTOCUSRouting
                    {
                        ID = c.RoutingID,
                        Code = c.Code,
                        RoutingName = c.RoutingName
                    }).ToList();
                    result.ListContractRouting = new List<DTOCUSRouting>();
                    foreach (var item in dataRoute)
                    {
                        var objCusRouting = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == item.ID);
                        if (objCusRouting != null)
                        {
                            result.ListContractRouting.Add(new DTOCUSRouting
                            {
                                ID = objCusRouting.ID,
                                Code = objCusRouting.Code,
                                RoutingName = objCusRouting.RoutingName
                            });
                        }
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDIMEXData ORDOrder_IMEX_Data(int cusID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    var result = new DTOORDIMEXData();

                    result.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == cusID).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    result.ListVessel = model.CAT_Vessel.Select(c => new DTOCATVessel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PartnerID = c.PartnerID,
                        VesselName = c.VesselName,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();
                    result.ListVessel.Insert(0, new DTOCATVessel { ID = -1, Code = string.Empty, VesselName = string.Empty, PartnerID = -1, PartnerName = string.Empty });


                    result.ListSeaPort = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    result.ListCarrier = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName,
                        DetentionTime = c.RateGetEmpty > 0 ? c.RateGetEmpty.Value : 0,
                        DemurrageTime = c.RateReturnEmpty > 0 ? c.RateReturnEmpty.Value : 0
                    }).ToList();

                    result.ListGroupProduct = model.CUS_GroupOfProduct.Where(c => c.CustomerID == cusID).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListDepot = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    result.ListTypeOfDoc = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfWAInspection).Select(c => new SYSVar
                    {
                        ID = c.ID,
                        ValueOfVar = c.ValueOfVar
                    }).ToList();

                    //  var lstGroupProductID = result.ListGroupProduct.Select(c => c.ID).ToList();

                    result.ListProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == cusID).Select(c => new DTOCUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName
                    }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOORDLadenEmptyData ORDOrder_LadenEmpty_Data(int cusID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    var result = new DTOORDLadenEmptyData();

                    result.ListSeaPort = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName,
                        DetentionTime = c.RateGetEmpty > 0 ? c.RateGetEmpty.Value : 0,
                        DemurrageTime = c.RateReturnEmpty > 0 ? c.RateReturnEmpty.Value : 0
                    }).ToList();

                    result.ListLocation = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CusPartID > 0 && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng
                    }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Tạo mới đơn hàng theo param truyền vào
        /// </summary>
        /// <param name="cusID"></param>
        /// <param name="serID"></param>
        /// <param name="transID"></param>
        /// <param name="contractID"></param>
        /// <returns></returns>
        public DTOORDOrder ORDOrder_GetItem(int orderID, int cusID, int? serID, int transID, int? contractID, int? contractTermID)
        {
            try
            {
                bool IsAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                if (!IsAdmin && !Account.ListCustomerID.Contains(cusID))
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền xem đơn hàng này.");

                var result = new DTOORDOrder();
                result.ListContainer = new List<DTOORDContainer>();
                result.ListContainerPrice = new List<DTOORDContainerPrice>();
                result.ListGroupProduct = new List<DTOORDGroupProduct>();
                result.ListGroupProductPrice = new List<DTOORDGroupProductPrice>();
                result.ListProduct = new List<DTOORDProduct>();
                result.ListService = new List<DTOORDService>();

                int iImport = -(int)SYSVarType.ServiceOfOrderImport;
                int iExport = -(int)SYSVarType.ServiceOfOrderExport;
                int iMain = -(int)SYSVarType.TypeOfContractMain;

                using (var model = new DataEntities())
                {
                    var transportID = HelperContract.GetTransportMode(model, transID);
                    var serviceID = HelperContract.GetServiceOfOrder(model, serID);

                    if (orderID > 0)
                    {
                        var obj = model.ORD_Order.FirstOrDefault(c => c.ID == orderID);
                        if (obj != null)
                        {
                            result.AllowCoLoad = obj.AllowCoLoad;
                            result.ID = obj.ID;
                            result.ParentID = obj.ParentID;
                            result.OrderRefID = obj.OrderRefID;
                            result.SYSCustomerID = obj.SYSCustomerID;
                            result.Code = obj.Code;
                            result.CustomerID = obj.CustomerID;
                            result.ServiceOfOrderID = obj.ServiceOfOrderID;
                            result.TransportModeID = obj.TransportModeID;
                            result.TypeOfContractID = obj.TypeOfContractID;
                            result.ContractID = obj.ContractID;
                            result.TypeOfOrderID = obj.TypeOfOrderID;
                            result.StatusOfOrderID = obj.StatusOfOrderID;
                            result.StatusOfPlanID = obj.StatusOfPlanID;
                            result.RequestDate = obj.RequestDate;
                            result.LocationFromID = obj.LocationFromID;
                            result.ETD = obj.ETD;
                            result.LocationToID = obj.LocationToID;
                            result.ETA = obj.ETA;
                            result.DateConfig = obj.DateConfig;
                            result.CutOffTime = obj.CutOffTime;
                            result.LoadingTime = obj.LoadingTime;
                            result.LocationDepotID = obj.LocationDepotID;
                            result.LocationDepotReturnID = obj.LocationDepotReturnID;
                            result.VesselNo = obj.VesselNo;
                            result.VesselName = obj.VesselName;
                            result.TripNo = obj.TripNo;
                            result.IsOPS = obj.IsOPS;
                            result.IsClosed = obj.IsClosed;
                            result.IsHot = obj.IsHot;
                            result.BiddingNo = obj.BiddingNo;
                            result.Note = obj.Note;
                            result.ExternalCode = obj.ExternalCode;
                            result.ExternalDate = obj.ExternalDate;
                            result.PartnerID = obj.PartnerID;
                            result.GroupOfVehicleID = obj.GroupOfVehicleID;
                            result.RoutePrice = obj.RoutePrice;
                            result.UserDefine1 = obj.UserDefine1;
                            result.UserDefine2 = obj.UserDefine2;
                            result.UserDefine3 = obj.UserDefine3;
                            result.UserDefine4 = obj.UserDefine4;
                            result.UserDefine5 = obj.UserDefine5;
                            result.UserDefine6 = obj.UserDefine6;
                            result.UserDefine7 = obj.UserDefine7;
                            result.UserDefine8 = obj.UserDefine8;
                            result.UserDefine9 = obj.UserDefine9;
                            result.LocationFrom = obj.LocationFromID.HasValue ? obj.CUS_Location2.LocationName : string.Empty;
                            result.LocationFromAddress = obj.LocationFromID.HasValue ? obj.CUS_Location2.CAT_Location.Address : string.Empty;
                            result.LocationFromProvince = obj.LocationFromID.HasValue ? obj.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty;
                            result.LocationFromDistrict = obj.LocationFromID.HasValue ? obj.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty;
                            result.LocationFromWard = obj.LocationFromID.HasValue ? (obj.CUS_Location2.CAT_Location.WardID.HasValue ? obj.CUS_Location2.CAT_Location.CAT_Ward.WardName : string.Empty) : string.Empty;
                            result.LocationTo = obj.LocationToID.HasValue ? obj.CUS_Location3.LocationName : string.Empty;
                            result.LocationToAddress = obj.LocationToID.HasValue ? obj.CUS_Location3.CAT_Location.Address : string.Empty;
                            result.LocationToProvince = obj.LocationToID.HasValue ? obj.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty;
                            result.LocationToDistrict = obj.LocationToID.HasValue ? obj.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty;
                            result.LocationToWard = obj.LocationToID.HasValue ? (obj.CUS_Location3.CAT_Location.WardID.HasValue ? obj.CUS_Location3.CAT_Location.CAT_Ward.WardName : string.Empty) : string.Empty;
                            result.StatusOfOrderName = obj.SYS_Var.ValueOfVar;
                            result.StatusOfPlanName = obj.SYS_Var1.ValueOfVar;
                            result.TypeOfView = ORDOrder_GetView(serviceID, transportID);
                            result.ViewID = obj.ServiceOfOrderID > 0 ? obj.CAT_ServiceOfOrder.ServiceOfOrderID == iImport ? 1 : obj.CAT_ServiceOfOrder.ServiceOfOrderID == iExport ? 2 : 3 : 3;
                            result.CustomerName = obj.CUS_Customer.ShortName;
                            result.TypeOfContractName = obj.SYS_Var2.ValueOfVar;
                            result.TransportModeName = obj.CAT_TransportMode.Name;
                            result.ServiceOfOrderName = obj.ServiceOfOrderID > 0 ? obj.CAT_ServiceOfOrder.Name : string.Empty;
                            result.TypeOfOrderName = obj.SYS_Var3.ValueOfVar;
                            result.CreatedDate = obj.CreatedDate;
                            result.IsMain = obj.TypeOfContractID == iMain;
                            result.URL = string.Empty;
                            result.ContractName = obj.ContractID.HasValue ? obj.CAT_Contract.DisplayName : string.Empty;
                            result.IsSplit = obj.ORD_Order1.Count > 0;
                            result.DateShipCome = obj.DateShipCome;
                            result.DateDocument = obj.DateDocument;
                            result.DateInspect = obj.DateInspect;
                            result.DateGetEmpty = obj.DateGetEmpty;
                            result.DateReturnEmpty = obj.DateReturnEmpty;
                            result.DateLoading = obj.DateLoading;
                            result.DateUnloading = obj.DateUnloading;
                            result.TextFrom = obj.TextFrom;
                            result.TextTo = obj.TextTo;
                            result.LeadTime = obj.LeadTime;
                            result.ETARequest = obj.ETARequest;
                            result.ETDRequest = obj.ETDRequest;
                            result.TypeOfWAInspectionID = obj.TypeOfWAInspectionID > 0 ? obj.TypeOfWAInspectionID : -1;
                            result.ContractTermID = obj.ContractTermID;
                            result.UnLoadingTime = obj.UnLoadingTime;

                            if (obj.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL || obj.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL)
                            {
                                //if (obj.ServiceOfOrderID > 0 && obj.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                //{
                                result.ListGroupProductPrice = model.ORD_GroupProduct.Where(c => c.OrderID == result.ID && c.GroupOfProductID.HasValue && c.LocationFromID.HasValue)
                                .GroupBy(c => new { GroupOfProductID = c.GroupOfProductID.Value, LocationFromID = c.LocationFromID.Value })
                                .Select(c => new DTOORDGroupProductPrice
                                {
                                    GroupOfProductID = c.Key.GroupOfProductID,
                                    GroupOfProductName = c.FirstOrDefault().CUS_GroupOfProduct.GroupName,
                                    LocationFromID = c.Key.LocationFromID,
                                    LocationFromName = c.FirstOrDefault().CUS_Location.LocationName,
                                    Price = c.FirstOrDefault().Price
                                }).Distinct().ToList();
                                //}

                                result.ListProduct = model.ORD_Product.Where(c => c.ORD_GroupProduct.OrderID == result.ID).Select(c => new DTOORDProduct
                                {
                                    ID = c.ID,
                                    GroupProductID = c.GroupProductID,
                                    ProductID = c.ProductID,
                                    PackingID = c.PackingID,
                                    ProductName = c.CUS_Product.ProductName,
                                    PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                                    BaseCBM = c.ExchangeCBM.HasValue ? c.ExchangeCBM.Value : 0,
                                    BaseWeight = c.ExchangeTon.HasValue ? c.ExchangeTon.Value : 0,
                                    PackageID = c.PackingID.HasValue ? (c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3) : 0,
                                    Price = c.ORD_GroupProduct.Price,
                                    LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                                    LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETDRequest = c.ORD_GroupProduct.ETDRequest,
                                    GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                                    GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                    PartnerID = c.ORD_GroupProduct.PartnerID,
                                    PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "Kho khách hàng",
                                    PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                    LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                    LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    DNCode = c.ORD_GroupProduct.DNCode,
                                    CBM = c.ORD_GroupProduct.CBM,
                                    Weight = c.ORD_GroupProduct.Ton,
                                    WeightKG = c.ORD_GroupProduct.Ton * 1000,
                                    IsKg = c.CUS_Product.IsKg,
                                    Quantity = c.ORD_GroupProduct.Quantity,
                                    ExchangeTon = c.ExchangeTon,
                                    ExchangeCBM = c.ExchangeCBM,
                                    ExchangeQuantity = c.ExchangeQuantity,
                                    Description = c.ORD_GroupProduct.Description,
                                    IsReturn = c.ORD_GroupProduct.IsReturn,
                                    TempMax = c.ORD_GroupProduct.TempMax,
                                    TempMin = c.ORD_GroupProduct.TempMin,
                                    CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                    CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                    CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty
                                }).ToList();
                            }
                            else if (obj.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL)
                            {
                                result.ListContainer = obj.ORD_Container.Select(c => new DTOORDContainer
                                {
                                    ID = c.ID,
                                    OrderID = c.OrderID,
                                    PackingID = c.PackingID,
                                    ContainerNo = c.ContainerNo,
                                    SealNo1 = c.SealNo1,
                                    SealNo2 = c.SealNo2,
                                    Ton = c.Ton,
                                    Note = c.Note,
                                    RomoocID = c.RomoocID,
                                    StatusOfContainerID = c.StatusOfContainerID,
                                    LocationToID = c.LocationToID,
                                    ETD = c.ETD,
                                    LocationFromID = c.LocationFromID,
                                    ETA = c.ETA,
                                    ETDRequest = c.ETDRequest,
                                    ETARequest = c.ETARequest,
                                    DateGetEmpty = c.DateGetEmpty,
                                    DateReturnEmpty = c.DateReturnEmpty,
                                    DateDocument = c.DateDocument,
                                    DateInspect = c.DateInspect,
                                    DateLoading = c.DateLoading,
                                    DateShipCome = c.DateShipCome,
                                    DateUnloading = c.DateUnloading,
                                    CutOffTime = c.CutOffTime,
                                    LoadingTime = c.LoadingTime,
                                    LocationDepotID = c.LocationDepotID,
                                    LocationDepotReturnID = c.LocationDepotReturnID,
                                    PackingName = c.CAT_Packing.PackingName,
                                    StatusOfContainerName = c.StatusOfContainerID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                    LocationFromCode = c.LocationFromID.HasValue ? c.CUS_Location2.Code : string.Empty,
                                    LocationFromName = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                                    LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                                    LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    LocationFromWard = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.WardID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                                    LocationToCode = c.LocationToID.HasValue ? c.CUS_Location3.Code : string.Empty,
                                    LocationToName = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                                    LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    LocationToWard = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.WardID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                                    LocationDepotCode = c.LocationDepotID.HasValue ? c.CUS_Location.Code : string.Empty,
                                    LocationDepotName = c.LocationDepotID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                                    LocationDepotReturnCode = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.Code : string.Empty,
                                    LocationDepotReturnName = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.LocationName : string.Empty,
                                    ServiceOrderID = c.ORD_Order.ServiceOfOrderID,
                                    IsFloor = c.IsFloor.HasValue ? c.IsFloor.Value : false,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    UnLoadingTime = c.UnLoadingTime,
                                    VesselID = c.VesselID > 0 ? c.VesselID.Value : -1,
                                    VesselCode = c.VesselID > 0 ? c.CAT_Vessel.Code : string.Empty,
                                    VesselMasterCode = c.VesselMasterCode
                                }).ToList();

                                result.ListService = model.ORD_Service.Where(c => c.OrderID == result.ID).Select(c => new DTOORDService
                                {
                                    ID = c.ID,
                                    ServiceID = c.ServiceID,
                                    OrderID = c.OrderID,
                                    PackingID = c.PackingID,
                                    PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                                    Price = c.Price,
                                    ServiceName = c.CAT_Service.ServiceName,
                                    Note = c.Note
                                }).ToList();

                                result.ListContainerPrice = model.ORD_ContainerPrice.Where(c => c.OrderID == result.ID).Select(c => new DTOORDContainerPrice
                                {
                                    ID = c.ID,
                                    OrderID = c.OrderID,
                                    LocationFromID = c.LocationFromID,
                                    LocationToID = c.LocationToID,
                                    PackingID = c.PackingID,
                                    Price = c.Price,
                                    LocationFromCode = c.CUS_Location.Code,
                                    LocationFromName = c.CUS_Location.LocationName,
                                    LocationToCode = c.CUS_Location1.Code,
                                    LocationToName = c.CUS_Location1.LocationName,
                                    PackingName = c.CAT_Packing.PackingName
                                }).ToList();

                                result.ListGroupProduct = model.ORD_GroupProduct.Where(c => c.OrderID == result.ID).Select(c => new DTOORDGroupProduct
                                {
                                    ID = c.ID,
                                    ContainerID = c.ContainerID,
                                    GroupOfProductID = c.GroupOfProductID,
                                    Description = c.Description,
                                    Ton = c.Ton,
                                    CBM = c.CBM,
                                    Quantity = c.Quantity,
                                    PriceOfGOPID = c.PriceOfGOPID,
                                    PackingID = c.PackingID,
                                    LocationToID = c.LocationToID,
                                    ETD = c.ETD,
                                    LocationFromID = c.LocationFromID,
                                    ETA = c.ETA,
                                    ETARequest = c.ETARequest,
                                    ETDRequest = c.ETDRequest,
                                    Price = c.Price,
                                    SOCode = c.SOCode,
                                    DNCode = c.DNCode,
                                    GroupOfProductName = c.GroupOfProductID.HasValue ? c.CUS_GroupOfProduct.GroupName : string.Empty
                                }).ToList();

                                result.ListProduct = model.ORD_Product.Where(c => c.ORD_GroupProduct.OrderID == result.ID).Select(c => new DTOORDProduct
                                {
                                    ID = c.ID,
                                    GroupProductID = c.GroupProductID,
                                    ProductID = c.ProductID,
                                    PackingID = c.PackingID,
                                    ProductName = c.CUS_Product.ProductName,
                                    PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                                    BaseCBM = c.ExchangeCBM.HasValue ? c.ExchangeCBM.Value : 0,
                                    BaseWeight = c.ExchangeTon.HasValue ? c.ExchangeTon.Value : 0,
                                    PackageID = c.PackingID.HasValue ? (c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3) : 0,
                                    Price = c.ORD_GroupProduct.Price,
                                    LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                                    LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETDRequest = c.ORD_GroupProduct.ETDRequest,
                                    GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                                    GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                    PartnerID = c.ORD_GroupProduct.PartnerID,
                                    PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "Kho khách hàng",
                                    PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                    LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                    LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    DNCode = c.ORD_GroupProduct.DNCode,
                                    CBM = c.ORD_GroupProduct.CBM,
                                    Weight = c.ORD_GroupProduct.Ton,
                                    WeightKG = c.ORD_GroupProduct.Ton * 1000,
                                    IsKg = c.CUS_Product.IsKg,
                                    Quantity = c.ORD_GroupProduct.Quantity,
                                    ExchangeTon = c.ExchangeTon,
                                    ExchangeCBM = c.ExchangeCBM,
                                    ExchangeQuantity = c.ExchangeQuantity,
                                    Description = c.ORD_GroupProduct.Description,
                                    IsReturn = c.ORD_GroupProduct.IsReturn,
                                    TempMax = c.ORD_GroupProduct.TempMax,
                                    TempMin = c.ORD_GroupProduct.TempMin,
                                    CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                    CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                    CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty,
                                    ContainerID = c.ORD_GroupProduct.ContainerID > 0 ? c.ORD_GroupProduct.ContainerID.Value : -1,
                                    ContainerNo = c.ORD_GroupProduct.ContainerID > 0 ? c.ORD_GroupProduct.ORD_Container.ContainerNo : string.Empty,
                                }).ToList();
                            }
                            else if (obj.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL)
                            {
                                result.ListContainer = obj.ORD_Container.Select(c => new DTOORDContainer
                                {
                                    ID = c.ID,
                                    OrderID = c.OrderID,
                                    PackingID = c.PackingID,
                                    ContainerNo = c.ContainerNo,
                                    SealNo1 = c.SealNo1,
                                    SealNo2 = c.SealNo2,
                                    Ton = c.Ton,
                                    Note = c.Note,
                                    RomoocID = c.RomoocID,
                                    StatusOfContainerID = c.StatusOfContainerID,
                                    LocationToID = c.LocationToID,
                                    ETD = c.ETD,
                                    LocationFromID = c.LocationFromID,
                                    ETA = c.ETA,
                                    ETDRequest = c.ETDRequest,
                                    ETARequest = c.ETARequest,
                                    DateGetEmpty = c.DateGetEmpty,
                                    DateReturnEmpty = c.DateReturnEmpty,
                                    DateDocument = c.DateDocument,
                                    DateInspect = c.DateInspect,
                                    DateLoading = c.DateLoading,
                                    DateShipCome = c.DateShipCome,
                                    DateUnloading = c.DateUnloading,
                                    CutOffTime = c.CutOffTime,
                                    LoadingTime = c.LoadingTime,
                                    LocationDepotID = c.LocationDepotID,
                                    LocationDepotReturnID = c.LocationDepotReturnID,
                                    PackingName = c.CAT_Packing.PackingName,
                                    StatusOfContainerName = c.StatusOfContainerID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                                    LocationFromCode = c.LocationFromID.HasValue ? c.CUS_Location2.Code : string.Empty,
                                    LocationFromName = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                                    LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                                    LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    LocationFromWard = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.WardID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                                    LocationToCode = c.LocationToID.HasValue ? c.CUS_Location3.Code : string.Empty,
                                    LocationToName = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                                    LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    LocationToWard = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.WardID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                                    LocationDepotCode = c.LocationDepotID.HasValue ? c.CUS_Location.Code : string.Empty,
                                    LocationDepotName = c.LocationDepotID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                                    LocationDepotReturnCode = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.Code : string.Empty,
                                    LocationDepotReturnName = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.LocationName : string.Empty,
                                    ServiceOrderID = c.ORD_Order.ServiceOfOrderID,
                                    IsFloor = c.IsFloor.HasValue ? c.IsFloor.Value : false,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2
                                }).ToList();

                                result.ListProduct = model.ORD_Product.Where(c => c.ORD_GroupProduct.OrderID == result.ID).Select(c => new DTOORDProduct
                                {
                                    ID = c.ID,
                                    GroupProductID = c.GroupProductID,
                                    ProductID = c.ProductID,
                                    PackingID = c.PackingID,
                                    ProductName = c.CUS_Product.ProductName,
                                    PackingName = c.PackingID.HasValue ? c.CAT_Packing.PackingName : string.Empty,
                                    BaseCBM = c.ExchangeCBM.HasValue ? c.ExchangeCBM.Value : 0,
                                    BaseWeight = c.ExchangeTon.HasValue ? c.ExchangeTon.Value : 0,
                                    PackageID = c.PackingID.HasValue ? (c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3) : 0,
                                    Price = c.ORD_GroupProduct.Price,
                                    LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                                    LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                    ETA = c.ORD_GroupProduct.ETA,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETDRequest = c.ORD_GroupProduct.ETDRequest,
                                    GroupOfProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                                    GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                                    PartnerID = c.ORD_GroupProduct.PartnerID,
                                    PartnerName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : "Kho khách hàng",
                                    PartnerCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                                    LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                    LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    SOCode = c.ORD_GroupProduct.SOCode,
                                    DNCode = c.ORD_GroupProduct.DNCode,
                                    CBM = c.ORD_GroupProduct.CBM,
                                    Weight = c.ORD_GroupProduct.Ton,
                                    WeightKG = c.ORD_GroupProduct.Ton * 1000,
                                    IsKg = c.CUS_Product.IsKg,
                                    Quantity = c.ORD_GroupProduct.Quantity,
                                    ExchangeTon = c.ExchangeTon,
                                    ExchangeCBM = c.ExchangeCBM,
                                    ExchangeQuantity = c.ExchangeQuantity,
                                    Description = c.ORD_GroupProduct.Description,
                                    IsReturn = c.ORD_GroupProduct.IsReturn,
                                    TempMax = c.ORD_GroupProduct.TempMax,
                                    TempMin = c.ORD_GroupProduct.TempMin,
                                    CUSRoutingID = c.ORD_GroupProduct.CUSRoutingID,
                                    CUSRoutingCode = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                    CUSRoutingName = c.ORD_GroupProduct.CUSRoutingID.HasValue ? c.ORD_GroupProduct.CUS_Routing.RoutingName : string.Empty
                                }).ToList();
                            }
                        }
                    }
                    else
                    {
                        var typeOfContracID = -(int)SYSVarType.TypeOfContractSpotRate;

                        var objCus = model.CUS_Customer.FirstOrDefault(c => c.ID == cusID);
                        var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);

                        if (objContract != null && objContract.TypeOfContractID.HasValue)
                        {
                            typeOfContracID = objContract.TypeOfContractID.Value;
                            result.AllowCoLoad = objContract.AllowCoLoad;
                        }

                        if (objCus != null)
                        {
                            result.CustomerID = objCus.ID;
                            result.CustomerName = objCus.ShortName;
                            result.ServiceOfOrderID = serID;
                            result.TransportModeID = transID;
                            result.TypeOfContractID = typeOfContracID;
                            result.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                            result.TypeOfView = ORDOrder_GetView(serviceID, transportID);
                            result.TypeOfContractName = model.SYS_Var.FirstOrDefault(c => c.ID == typeOfContracID).ValueOfVar;
                            result.TransportModeName = model.CAT_TransportMode.FirstOrDefault(c => c.ID == transID).Name;
                            result.ServiceOfOrderName = transportID == -(int)SYSVarType.TransportModeFCL ? model.CAT_ServiceOfOrder.FirstOrDefault(c => c.ID == serID).Name : string.Empty;

                            result.TypeOfOrderName = model.SYS_Var.FirstOrDefault(c => c.ID == result.TypeOfOrderID).ValueOfVar;
                            result.RequestDate = DateTime.Now;
                            result.ETD = DateTime.Now;
                            result.ETA = DateTime.Now.AddDays(1);
                            result.CutOffTime = result.ETD.Value.AddDays(5);
                            result.IsMain = typeOfContracID == iMain;
                            result.ViewID = serviceID == iImport ? 1 : serviceID == iExport ? 2 : 3;
                            result.TypeOfWAInspectionID = -1;
                            result.URL = string.Empty;
                            if (result.ViewID == 2)
                                result.CutOffTime = result.ETA;
                            if (result.TypeOfView == 4)
                                result.ETARequest = result.ETA;
                            if (contractID > 0)
                                result.ContractID = contractID;
                            if (contractTermID > 0)
                                result.ContractTermID = contractTermID;
                            result.ContractName = objContract != null ? objContract.DisplayName : string.Empty;

                            //STMS-2396 
                            result.IsOPS = true;

                            result.HasSettingGenCode = false;
                            result.IsGenCode = false;

                            string strKey = CUSSettingKey.OrderCode.ToString();

                            var objSetting = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == cusID && c.Key == strKey);
                            if (objSetting == null)
                                objSetting = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID && c.Key == strKey);
                            if (objSetting != null)
                            {
                                var setting = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(objSetting.Setting);
                                if (setting != null && setting.ActionType > 0)
                                {
                                    result.HasSettingGenCode = true;
                                }
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FTLLO_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    item.ServiceOfOrderID = null;
                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;
                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var group in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var detail in model.ORD_Product.Where(c => c.GroupProductID == group.ID))
                                model.ORD_Product.Remove(detail);
                            model.ORD_GroupProduct.Remove(group);
                        }
                        model.SaveChanges();

                        item.ListGroupProduct = new List<DTOORDGroupProduct>();
                        if (item.ListGroupProductPrice == null) item.ListGroupProductPrice = new List<DTOORDGroupProductPrice>();

                        var dataCUSGroup = model.CUS_GroupOfProductInStock.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.StockID, c.GroupOfProductID, c.CUS_GroupOfProduct.PriceOfGOPID }).ToList();
                        var dataCUSProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.PackingID, c.CAT_Packing.TypeOfPackageID, c.Weight, c.CBM, c.IsKg }).ToList();

                        foreach (var group in item.ListProduct)
                        {
                            if (group.LocationFromID == 0 || group.LocationToID == 0)
                                throw FaultHelper.BusinessFault(null, null, "Vui lòng nhập Điểm giao - Nhận hàng");

                            var objGroup = new DTOORDGroupProduct();
                            var cusGroup = dataCUSGroup.FirstOrDefault(c => c.GroupOfProductID == group.GroupOfProductID);
                            if (cusGroup != null)
                            {
                                objGroup.PriceOfGOPID = cusGroup.PriceOfGOPID;
                                objGroup.GroupOfProductID = cusGroup.GroupOfProductID;
                            }
                            else
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng hóa " + group);
                            objGroup.LocationFromID = group.LocationFromID;
                            objGroup.LocationToID = group.LocationToID;
                            objGroup.ETA = group.ETA;
                            objGroup.ETD = group.ETD;
                            objGroup.ETARequest = group.ETARequest;
                            objGroup.SOCode = group.SOCode;
                            objGroup.DNCode = group.DNCode;
                            objGroup.PartnerID = group.PartnerID > 0 ? group.PartnerID : null;
                            objGroup.TempMin = group.TempMin;
                            objGroup.TempMax = group.TempMax;
                            objGroup.CUSRoutingID = group.CUSRoutingID > 0 ? group.CUSRoutingID : null;

                            var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == objGroup.LocationFromID);
                            if (fObj != null)
                            {
                                objGroup.CATLocationFromID = fObj.LocationID;
                            }
                            var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == objGroup.LocationToID);
                            if (tObj != null)
                            {
                                objGroup.CATLocationToID = tObj.LocationID;
                            }

                            objGroup.Price = 0;
                            objGroup.ListProduct = new List<DTOORDProduct>();
                            var objPrice = item.ListGroupProductPrice.FirstOrDefault(c => c.GroupOfProductID == objGroup.GroupOfProductID && c.LocationFromID == objGroup.LocationFromID);
                            if (objPrice != null)
                                objGroup.Price = objPrice.Price;
                            item.ListGroupProduct.Add(objGroup);

                            objGroup.Ton = objGroup.CBM = objGroup.Quantity = 0;

                            var cusProduct = dataCUSProduct.FirstOrDefault(c => c.ID == group.ProductID);
                            if (cusProduct == null)
                                throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại!");

                            objGroup.PackingID = cusProduct.PackingID;

                            var objProduct = new DTOORDProduct();
                            objProduct.ProductID = group.ProductID;
                            objProduct.PackingID = cusProduct.PackingID.Value;
                            objProduct.PackageID = cusProduct.PackingID.Value;

                            #region Qui đổi
                            if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 1;
                                objProduct.ExchangeCBM = 0;
                                objProduct.ExchangeQuantity = 0;

                                if (objGroup.Ton > 0)
                                {
                                    objProduct.ExchangeCBM = Math.Round(group.CBM / group.Weight, 3);
                                    objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.Weight, 3);
                                }
                                objProduct.Quantity = objGroup.Ton;
                            }
                            else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 0;
                                objProduct.ExchangeCBM = 1;
                                objProduct.ExchangeQuantity = 0;
                                if (objGroup.Quantity > 0)
                                {
                                    objProduct.ExchangeTon = Math.Round(group.Weight / group.CBM, 3);
                                    objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.CBM, 3);
                                }
                                objProduct.Quantity = objGroup.CBM;
                            }
                            else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 0;
                                objProduct.ExchangeCBM = 0;
                                objProduct.ExchangeQuantity = 1;
                                if (objGroup.Quantity > 0)
                                {
                                    objProduct.ExchangeTon = Math.Round(group.Weight / group.Quantity, 3);
                                    objProduct.ExchangeCBM = Math.Round(group.CBM / group.Quantity, 3);
                                }
                                objProduct.Quantity = objGroup.Quantity;
                            }
                            #endregion

                            objGroup.ListProduct.Add(objProduct);
                        }
                    }

                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_LTLLO_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    item.ServiceOfOrderID = null;
                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;
                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.SYSCustomerID = Account.SYSCustomerID;
                        item.IsOPS = true;

                        foreach (var group in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var detail in model.ORD_Product.Where(c => c.GroupProductID == group.ID))
                                model.ORD_Product.Remove(detail);
                            model.ORD_GroupProduct.Remove(group);
                        }
                        model.SaveChanges();

                        item.ListGroupProduct = new List<DTOORDGroupProduct>();
                        var dataCUSGroup = model.CUS_GroupOfProductInStock.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.StockID, c.GroupOfProductID, c.CUS_GroupOfProduct.PriceOfGOPID }).ToList();
                        var dataCUSProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.PackingID, c.CAT_Packing.TypeOfPackageID, c.Weight, c.CBM, c.IsKg }).ToList();

                        foreach (var group in item.ListProduct)
                        {
                            var objGroup = new DTOORDGroupProduct();
                            var cusGroup = dataCUSGroup.FirstOrDefault(c => c.GroupOfProductID == group.GroupOfProductID);
                            if (cusGroup != null)
                            {
                                objGroup.PriceOfGOPID = cusGroup.PriceOfGOPID;
                                objGroup.GroupOfProductID = cusGroup.GroupOfProductID;
                            }
                            else
                                throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng hóa " + group);
                            objGroup.LocationFromID = group.LocationFromID;
                            objGroup.LocationToID = group.LocationToID;
                            objGroup.ETA = group.ETA;
                            objGroup.ETD = group.ETD;
                            objGroup.ETARequest = group.ETARequest;
                            objGroup.Price = 0;
                            objGroup.SOCode = group.SOCode;
                            objGroup.DNCode = group.DNCode;
                            objGroup.PartnerID = group.PartnerID > 0 ? group.PartnerID : null;
                            objGroup.TempMin = group.TempMin;
                            objGroup.TempMax = group.TempMax;
                            objGroup.CUSRoutingID = group.CUSRoutingID > 0 ? group.CUSRoutingID : null;

                            var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == objGroup.LocationFromID);
                            if (fObj != null)
                            {
                                objGroup.CATLocationFromID = fObj.LocationID;
                            }
                            var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == objGroup.LocationToID);
                            if (tObj != null)
                            {
                                objGroup.CATLocationToID = tObj.LocationID;
                            }

                            objGroup.ListProduct = new List<DTOORDProduct>();
                            var objPrice = item.ListGroupProductPrice.FirstOrDefault(c => c.GroupOfProductID == objGroup.GroupOfProductID && c.LocationFromID == objGroup.LocationFromID);
                            if (objPrice != null)
                                objGroup.Price = objPrice.Price;
                            item.ListGroupProduct.Add(objGroup);

                            objGroup.Ton = objGroup.CBM = objGroup.Quantity = 0;
                            var cusProduct = dataCUSProduct.FirstOrDefault(c => c.ID == group.ProductID);
                            if (cusProduct == null)
                                throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại!");

                            objGroup.PackingID = cusProduct.PackingID;

                            var objProduct = new DTOORDProduct();
                            objProduct.ProductID = group.ProductID;
                            objProduct.PackingID = cusProduct.PackingID.Value;
                            objProduct.PackageID = cusProduct.PackingID.Value;

                            #region Qui đổi
                            if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 1;
                                objProduct.ExchangeCBM = 0;
                                objProduct.ExchangeQuantity = 0;
                                if (objGroup.Quantity > 0)
                                {
                                    objProduct.ExchangeCBM = Math.Round(group.CBM / group.Weight, 3);
                                    objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.Weight, 3);
                                }
                                objProduct.Quantity = objGroup.Ton;
                            }
                            else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 0;
                                objProduct.ExchangeCBM = 1;
                                objProduct.ExchangeQuantity = 0;
                                if (objGroup.CBM > 0)
                                {
                                    objProduct.ExchangeTon = Math.Round(group.Weight / group.CBM, 3);
                                    objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.CBM, 3);
                                }
                                objProduct.Quantity = objGroup.CBM;
                            }
                            else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                            {
                                objGroup.Ton += group.Weight;
                                objGroup.Quantity += group.Quantity;
                                objGroup.CBM += group.CBM;

                                objProduct.ExchangeTon = 0;
                                objProduct.ExchangeCBM = 0;
                                objProduct.ExchangeQuantity = 1;
                                if (objGroup.Quantity > 0)
                                {
                                    objProduct.ExchangeTon = Math.Round(group.Weight / group.Quantity, 3);
                                    objProduct.ExchangeCBM = Math.Round(group.CBM / group.Quantity, 3);
                                }
                                objProduct.Quantity = objGroup.Quantity;
                            }
                            #endregion

                            objGroup.ListProduct.Add(objProduct);
                        }
                    }

                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FCLLO_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;
                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var detail in model.ORD_Service.Where(c => c.OrderID == item.ID))
                            model.ORD_Service.Remove(detail);
                        foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                            model.ORD_GroupProduct.Remove(detail);
                        foreach (var detail in model.ORD_Container.Where(c => c.OrderID == item.ID))
                            model.ORD_Container.Remove(detail);
                        foreach (var detail in model.ORD_ContainerPrice.Where(c => c.OrderID == item.ID))
                            model.ORD_ContainerPrice.Remove(detail);
                        foreach (var document in model.ORD_Document.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var service in model.ORD_DocumentService.Where(c => c.DocumentID == document.ID))
                            {
                                foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == service.ID))
                                    model.ORD_DocumentDetail.Remove(detail);
                                model.ORD_DocumentService.Remove(service);
                            }
                            foreach (var detail in model.ORD_DocumentContainer.Where(c => c.DocumentID == document.ID))
                                model.ORD_DocumentContainer.Remove(detail);
                            model.ORD_Document.Remove(document);
                        }
                        model.SaveChanges();
                    }

                    var objDep = model.CUS_Location.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier);
                    if (objDep == null)
                        throw FaultHelper.BusinessFault(null, null, "Khách hàng chưa có bãi container.");
                    foreach (var con in item.ListContainer)
                    {
                        if (!con.LocationDepotID.HasValue || con.LocationDepotID < 1)
                        {
                            con.LocationDepotID = objDep.ID;
                        }
                        if (!con.LocationDepotReturnID.HasValue || con.LocationDepotReturnID < 1)
                        {
                            con.LocationDepotReturnID = objDep.ID;
                        }

                        var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationFromID);
                        if (fObj != null)
                        {
                            con.CATLocationFromID = fObj.LocationID;
                        }
                        var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationToID);
                        if (tObj != null)
                        {
                            con.CATLocationToID = tObj.LocationID;
                        }
                        var dObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationDepotID);
                        if (dObj != null)
                        {
                            con.CATLocationDepotID = dObj.LocationID;
                        }
                        var rObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationDepotReturnID);
                        if (rObj != null)
                        {
                            con.CATLocationDepotReturnID = rObj.LocationID;
                        }
                        if (con.CATLocationFromID == con.CATLocationToID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm nhận-giao hàng hệ thống!");
                        if (con.CATLocationFromID == con.CATLocationDepotID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm depot-nhận hàng hệ thống!");
                        if (con.CATLocationToID == con.CATLocationDepotReturnID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm giao hàng-depot trả hệ thống!");
                    }
                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FCLLOEmpty_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;
                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var detail in model.ORD_Service.Where(c => c.OrderID == item.ID))
                            model.ORD_Service.Remove(detail);
                        foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                            model.ORD_GroupProduct.Remove(detail);
                        foreach (var detail in model.ORD_Container.Where(c => c.OrderID == item.ID))
                            model.ORD_Container.Remove(detail);
                        foreach (var detail in model.ORD_ContainerPrice.Where(c => c.OrderID == item.ID))
                            model.ORD_ContainerPrice.Remove(detail);
                        foreach (var document in model.ORD_Document.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var service in model.ORD_DocumentService.Where(c => c.DocumentID == document.ID))
                            {
                                foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == service.ID))
                                    model.ORD_DocumentDetail.Remove(detail);
                                model.ORD_DocumentService.Remove(service);
                            }
                            foreach (var detail in model.ORD_DocumentContainer.Where(c => c.DocumentID == document.ID))
                                model.ORD_DocumentContainer.Remove(detail);
                            model.ORD_Document.Remove(document);
                        }
                        model.SaveChanges();
                    }

                    foreach (var con in item.ListContainer)
                    {
                        var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationFromID);
                        if (fObj != null)
                        {
                            con.CATLocationFromID = fObj.LocationID;
                        }
                        var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationToID);
                        if (tObj != null)
                        {
                            con.CATLocationToID = tObj.LocationID;
                        }
                        if (con.CATLocationFromID == con.CATLocationToID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm nhận-giao hàng hệ thống!");
                    }

                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FCLLOLaden_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();

                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;
                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var detail in model.ORD_Service.Where(c => c.OrderID == item.ID))
                            model.ORD_Service.Remove(detail);
                        foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                            model.ORD_GroupProduct.Remove(detail);
                        foreach (var detail in model.ORD_Container.Where(c => c.OrderID == item.ID))
                            model.ORD_Container.Remove(detail);
                        foreach (var detail in model.ORD_ContainerPrice.Where(c => c.OrderID == item.ID))
                            model.ORD_ContainerPrice.Remove(detail);
                        foreach (var document in model.ORD_Document.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var service in model.ORD_DocumentService.Where(c => c.DocumentID == document.ID))
                            {
                                foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == service.ID))
                                    model.ORD_DocumentDetail.Remove(detail);
                                model.ORD_DocumentService.Remove(service);
                            }
                            foreach (var detail in model.ORD_DocumentContainer.Where(c => c.DocumentID == document.ID))
                                model.ORD_DocumentContainer.Remove(detail);
                            model.ORD_Document.Remove(document);
                        }
                        model.SaveChanges();
                    }

                    foreach (var con in item.ListContainer)
                    {
                        var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationFromID);
                        if (fObj != null)
                        {
                            con.CATLocationFromID = fObj.LocationID;
                        }
                        var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationToID);
                        if (tObj != null)
                        {
                            con.CATLocationToID = tObj.LocationID;
                        }
                        if (con.CATLocationFromID == con.CATLocationToID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm nhận-giao hàng hệ thống!");
                    }

                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FCLIMEX_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    if (item.PartnerID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Chưa chọn hãng tàu!");
                    if (model.CUS_Location.Count(c => c.CusPartID == item.PartnerID && c.CustomerID == item.CustomerID) == 0)
                        throw FaultHelper.BusinessFault(null, null, "Hãng tàu không có thông tin depot!");
                    if (item.CutOffTime == null && item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                        throw FaultHelper.BusinessFault(null, null, "Chưa nhập hạn Cut-Off time!");
                    if (item.CutOffTime == null && item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                        throw FaultHelper.BusinessFault(null, null, "Chưa nhập hạn trả container!");

                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;

                    #region du lieu nhóm hàng
                    item.ListGroupProduct = new List<DTOORDGroupProduct>();
                    var dataCUSGroup = model.CUS_GroupOfProduct.Where(c => c.CustomerID == item.CustomerID).Select(c => new { c.ID, c.PriceOfGOPID }).ToList();
                    var dataCUSProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.PackingID, c.CAT_Packing.TypeOfPackageID, c.Weight, c.CBM, c.IsKg }).ToList();

                    foreach (var group in item.ListProduct)
                    {
                        var objGroup = new DTOORDGroupProduct();
                        var cusGroup = dataCUSGroup.FirstOrDefault(c => c.ID == group.GroupOfProductID);
                        if (cusGroup != null)
                        {
                            objGroup.PriceOfGOPID = cusGroup.PriceOfGOPID;
                            objGroup.GroupOfProductID = cusGroup.ID;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng hóa " + group);
                        objGroup.LocationFromID = item.LocationFromID;
                        objGroup.LocationToID = item.LocationToID;
                        objGroup.ETA = item.ETA;
                        objGroup.ETD = item.ETD;
                        objGroup.ETARequest = item.ETARequest;
                        objGroup.Price = 0;
                        objGroup.SOCode = group.SOCode;
                        objGroup.DNCode = group.DNCode;
                        objGroup.PartnerID = null;
                        objGroup.TempMin = group.TempMin;
                        objGroup.TempMax = group.TempMax;
                        objGroup.CUSRoutingID = null;
                        objGroup.ContainerID = group.ContainerID > 0 ? group.ContainerID : null;


                        objGroup.ListProduct = new List<DTOORDProduct>();
                        var objPrice = item.ListGroupProductPrice.FirstOrDefault(c => c.GroupOfProductID == objGroup.GroupOfProductID && c.LocationFromID == objGroup.LocationFromID);
                        if (objPrice != null)
                            objGroup.Price = objPrice.Price;
                        item.ListGroupProduct.Add(objGroup);

                        objGroup.Ton = objGroup.CBM = objGroup.Quantity = 0;
                        var cusProduct = dataCUSProduct.FirstOrDefault(c => c.ID == group.ProductID);
                        if (cusProduct == null)
                            throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại!");

                        objGroup.PackingID = cusProduct.PackingID;

                        var objProduct = new DTOORDProduct();
                        objProduct.ProductID = group.ProductID;
                        objProduct.PackingID = cusProduct.PackingID.Value;
                        objProduct.PackageID = cusProduct.PackingID.Value;

                        #region Qui đổi
                        if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 1;
                            objProduct.ExchangeCBM = 0;
                            objProduct.ExchangeQuantity = 0;
                            if (objGroup.Quantity > 0)
                            {
                                objProduct.ExchangeCBM = Math.Round(group.CBM / group.Weight, 3);
                                objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.Weight, 3);
                            }
                            objProduct.Quantity = objGroup.Ton;
                        }
                        else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 0;
                            objProduct.ExchangeCBM = 1;
                            objProduct.ExchangeQuantity = 0;
                            if (objGroup.CBM > 0)
                            {
                                objProduct.ExchangeTon = Math.Round(group.Weight / group.CBM, 3);
                                objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.CBM, 3);
                            }
                            objProduct.Quantity = objGroup.CBM;
                        }
                        else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 0;
                            objProduct.ExchangeCBM = 0;
                            objProduct.ExchangeQuantity = 1;
                            if (objGroup.Quantity > 0)
                            {
                                objProduct.ExchangeTon = Math.Round(group.Weight / group.Quantity, 3);
                                objProduct.ExchangeCBM = Math.Round(group.CBM / group.Quantity, 3);
                            }
                            objProduct.Quantity = objGroup.Quantity;
                        }
                        #endregion

                        objGroup.ListProduct.Add(objProduct);
                    }
                    #endregion

                    foreach (var con in item.ListContainer)
                    {
                        con.CutOffTime = item.CutOffTime;
                        switch (item.ServiceOfOrderID)
                        {
                            default:
                            case -(int)SYSVarType.ServiceOfOrderImport:
                                con.LocationFromID = item.LocationFromID;
                                con.ETD = item.ETD;
                                break;
                            case -(int)SYSVarType.ServiceOfOrderExport:
                                con.LocationToID = item.LocationToID;
                                con.ETA = item.ETA;
                                break;
                        }

                        var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationFromID);
                        if (fObj != null)
                        {
                            con.CATLocationFromID = fObj.LocationID;
                        }
                        var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationToID);
                        if (tObj != null)
                        {
                            con.CATLocationToID = tObj.LocationID;
                        }
                        var dObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationDepotID);
                        if (dObj != null && item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                        {
                            con.CATLocationDepotID = dObj.LocationID;
                        }
                        var rObj = model.CUS_Location.FirstOrDefault(c => c.ID == con.LocationDepotReturnID);
                        if (rObj != null && item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                        {
                            con.CATLocationDepotReturnID = rObj.LocationID;
                        }
                        if (con.CATLocationFromID == con.CATLocationToID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm nhận-giao hàng hệ thống!");
                        if (con.CATLocationFromID == con.CATLocationDepotID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm depot-nhận hàng hệ thống!");
                        if (con.CATLocationToID == con.CATLocationDepotReturnID)
                            throw FaultHelper.BusinessFault(null, null, "Có container trùng điểm giao hàng-depot trả hệ thống!");
                    }

                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var detail in model.ORD_Service.Where(c => c.OrderID == item.ID))
                            model.ORD_Service.Remove(detail);
                        foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var detail1 in model.ORD_Product.Where(c => c.GroupProductID == detail.ID))
                                model.ORD_Product.Remove(detail1);
                            model.ORD_GroupProduct.Remove(detail);
                        }
                        foreach (var detail in model.ORD_Container.Where(c => c.OrderID == item.ID))
                            model.ORD_Container.Remove(detail);
                        foreach (var detail in model.ORD_ContainerPrice.Where(c => c.OrderID == item.ID))
                            model.ORD_ContainerPrice.Remove(detail);
                        foreach (var document in model.ORD_Document.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var service in model.ORD_DocumentService.Where(c => c.DocumentID == document.ID))
                            {
                                foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == service.ID))
                                    model.ORD_DocumentDetail.Remove(detail);
                                model.ORD_DocumentService.Remove(service);
                            }

                            foreach (var detail in model.ORD_DocumentContainer.Where(c => c.DocumentID == document.ID))
                                model.ORD_DocumentContainer.Remove(detail);

                            model.ORD_Document.Remove(document);
                        }
                        model.SaveChanges();
                    }
                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_LCLIMEX_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    if (!string.IsNullOrEmpty(item.Code))
                        item.Code = item.Code.Trim();
                    if (item.IsGenCode)
                        item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                    // Check mã đơn hàng
                    ORDOrder_CheckCode(model, item);

                    if (item.PartnerID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Chưa chọn hãng tàu!");
                    if (model.CUS_Location.Count(c => c.CusPartID == item.PartnerID && c.CustomerID == item.CustomerID) == 0)
                        throw FaultHelper.BusinessFault(null, null, "Hãng tàu không có thông tin depot!");
                    if (item.ETD == null || item.ETA == null)
                        throw FaultHelper.BusinessFault(null, null, "Thiếu thông tin ETD, ETA");
                    if (item.ETD >= item.ETA)
                        throw FaultHelper.BusinessFault(null, null, "ETD, ETA không chính xác");

                    int? loFromID = null;
                    int? loToID = null;

                    var fObj = model.CUS_Location.FirstOrDefault(c => c.ID == item.LocationFromID);
                    if (fObj != null)
                    {
                        loFromID = fObj.LocationID;
                    }
                    var tObj = model.CUS_Location.FirstOrDefault(c => c.ID == item.LocationToID);
                    if (tObj != null)
                    {
                        loToID = tObj.LocationID;
                    }

                    if (loFromID == loToID)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng trùng điểm nhận-giao hàng hệ thống!");

                    item.DateConfig = item.RequestDate;
                    item.SYSCustomerID = Account.SYSCustomerID;

                    foreach (var con in item.ListContainer)
                    {
                        con.ETD = item.ETD;
                        con.ETA = item.ETA;
                        con.LocationFromID = item.LocationFromID;
                        con.LocationToID = item.LocationToID;
                    }

                    #region du lieu nhóm hàng
                    item.ListGroupProduct = new List<DTOORDGroupProduct>();
                    var dataCUSGroup = model.CUS_GroupOfProduct.Where(c => c.CustomerID == item.CustomerID).Select(c => new { c.ID,   c.PriceOfGOPID }).ToList();
                    var dataCUSProduct = model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == item.CustomerID).Select(c => new { c.ID, c.PackingID, c.CAT_Packing.TypeOfPackageID, c.Weight, c.CBM, c.IsKg }).ToList();

                    foreach (var group in item.ListProduct)
                    {
                        var objGroup = new DTOORDGroupProduct();
                        var cusGroup = dataCUSGroup.FirstOrDefault(c => c.ID == group.GroupOfProductID);
                        if (cusGroup != null)
                        {
                            objGroup.PriceOfGOPID = cusGroup.PriceOfGOPID;
                            objGroup.GroupOfProductID = cusGroup.ID;
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy nhóm hàng hóa " + group);
                        objGroup.LocationFromID = item.LocationFromID;
                        objGroup.LocationToID = item.LocationToID;
                        objGroup.ETA = item.ETA;
                        objGroup.ETD = item.ETD;
                        objGroup.ETARequest = item.ETARequest;
                        objGroup.Price = 0;
                        objGroup.SOCode = group.SOCode;
                        objGroup.DNCode = group.DNCode;
                        objGroup.PartnerID = null;
                        objGroup.TempMin = group.TempMin;
                        objGroup.TempMax = group.TempMax;
                        objGroup.CUSRoutingID = null;


                        objGroup.ListProduct = new List<DTOORDProduct>();
                        var objPrice = item.ListGroupProductPrice.FirstOrDefault(c => c.GroupOfProductID == objGroup.GroupOfProductID && c.LocationFromID == objGroup.LocationFromID);
                        if (objPrice != null)
                            objGroup.Price = objPrice.Price;
                        item.ListGroupProduct.Add(objGroup);

                        objGroup.Ton = objGroup.CBM = objGroup.Quantity = 0;
                        var cusProduct = dataCUSProduct.FirstOrDefault(c => c.ID == group.ProductID);
                        if (cusProduct == null)
                            throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại!");

                        objGroup.PackingID = cusProduct.PackingID;

                        var objProduct = new DTOORDProduct();
                        objProduct.ProductID = group.ProductID;
                        objProduct.PackingID = cusProduct.PackingID.Value;
                        objProduct.PackageID = cusProduct.PackingID.Value;

                        #region Qui đổi
                        if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 1;
                            objProduct.ExchangeCBM = 0;
                            objProduct.ExchangeQuantity = 0;
                            if (objGroup.Quantity > 0)
                            {
                                objProduct.ExchangeCBM = Math.Round(group.CBM / group.Weight, 3);
                                objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.Weight, 3);
                            }
                            objProduct.Quantity = objGroup.Ton;
                        }
                        else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 0;
                            objProduct.ExchangeCBM = 1;
                            objProduct.ExchangeQuantity = 0;
                            if (objGroup.CBM > 0)
                            {
                                objProduct.ExchangeTon = Math.Round(group.Weight / group.CBM, 3);
                                objProduct.ExchangeQuantity = Math.Round(group.Quantity / group.CBM, 3);
                            }
                            objProduct.Quantity = objGroup.CBM;
                        }
                        else if (cusProduct.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                        {
                            objGroup.Ton += group.Weight;
                            objGroup.Quantity += group.Quantity;
                            objGroup.CBM += group.CBM;

                            objProduct.ExchangeTon = 0;
                            objProduct.ExchangeCBM = 0;
                            objProduct.ExchangeQuantity = 1;
                            if (objGroup.Quantity > 0)
                            {
                                objProduct.ExchangeTon = Math.Round(group.Weight / group.Quantity, 3);
                                objProduct.ExchangeCBM = Math.Round(group.CBM / group.Quantity, 3);
                            }
                            objProduct.Quantity = objGroup.Quantity;
                        }
                        #endregion

                        objGroup.ListProduct.Add(objProduct);
                    }
                    #endregion

                    if (item.ID < 1 || model.ORD_Order.Where(c => c.ID == item.ID && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() == 1)
                    {
                        item.IsOPS = true;
                        foreach (var detail in model.ORD_Service.Where(c => c.OrderID == item.ID))
                            model.ORD_Service.Remove(detail);
                        foreach (var detail in model.ORD_GroupProduct.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var detail1 in model.ORD_Product.Where(c => c.GroupProductID == detail.ID))
                                model.ORD_Product.Remove(detail1);
                            model.ORD_GroupProduct.Remove(detail);
                        }
                        foreach (var detail in model.ORD_Container.Where(c => c.OrderID == item.ID))
                            model.ORD_Container.Remove(detail);
                        foreach (var detail in model.ORD_ContainerPrice.Where(c => c.OrderID == item.ID))
                            model.ORD_ContainerPrice.Remove(detail);
                        foreach (var document in model.ORD_Document.Where(c => c.OrderID == item.ID))
                        {
                            foreach (var service in model.ORD_DocumentService.Where(c => c.DocumentID == document.ID))
                            {
                                foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == service.ID))
                                    model.ORD_DocumentDetail.Remove(detail);
                                model.ORD_DocumentService.Remove(service);
                            }

                            foreach (var detail in model.ORD_DocumentContainer.Where(c => c.DocumentID == document.ID))
                                model.ORD_DocumentContainer.Remove(detail);

                            model.ORD_Document.Remove(document);
                        }
                        model.SaveChanges();
                    }
                    var orderID = ORDOrder_Save(model, item);
                    if (item.IsGenCode == true)
                        ORDOrder_UpdateSettingOrderCode(model, Account, item);

                    return orderID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_LTLIMEX_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                return -1;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_FTLIMEX_Save(DTOORDOrder item)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString()) || Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                return -1;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_GetView(int? serID, int transID)
        {
            int iImport = -(int)SYSVarType.ServiceOfOrderImport;
            int iExport = -(int)SYSVarType.ServiceOfOrderExport;
            int iLocal = -(int)SYSVarType.ServiceOfOrderLocal;
            int iLocalEmp = -(int)SYSVarType.ServiceOfOrderLocalEmpty;
            int iLocalLad = -(int)SYSVarType.ServiceOfOrderLocalLaden;
            int iFCL = -(int)SYSVarType.TransportModeFCL;
            int iFTL = -(int)SYSVarType.TransportModeFTL;
            int iLTL = -(int)SYSVarType.TransportModeLTL;
            int iLCL = -(int)SYSVarType.TransportModeLCL;
            int iMC = -(int)SYSVarType.TransportModeMC;
            int iML = -(int)SYSVarType.TransportModeML;

            if (transID == iFCL && (serID == iImport || serID == iExport))
                return 1; //FCLIMEX
            else if (transID == iFCL && serID == iLocal)
                return 2;//FCLLO
            else if (transID == iFTL)
                return 3;//FTLLO
            else if (transID == iLTL)
                return 4;//LTLLO
            else if (transID == iFCL && serID == iLocalEmp)
                return 5;//FCLLOEM
            else if (transID == iFCL && serID == iLocalLad)
                return 6;//FCLLOLD
            else if (transID == iFTL && (serID == iImport || serID == iExport))
                return 7;//FTLIMEX
            else if (transID == iLTL && (serID == iImport || serID == iExport))
                return 8;//LTLLIMEX
            else if (transID == iLCL && (serID == iImport || serID == iExport))
                return 9;//LCLIMEX
            return 0;
        }

        public int ORDOrder_GetViewFromCAT(int? ser, int trans)
        {
            int iImport = -(int)SYSVarType.ServiceOfOrderImport;
            int iExport = -(int)SYSVarType.ServiceOfOrderExport;
            int iLocal = -(int)SYSVarType.ServiceOfOrderLocal;
            int iLocalEmp = -(int)SYSVarType.ServiceOfOrderLocalEmpty;
            int iLocalLad = -(int)SYSVarType.ServiceOfOrderLocalLaden;
            int iFCL = -(int)SYSVarType.TransportModeFCL;
            int iFTL = -(int)SYSVarType.TransportModeFTL;
            int iLTL = -(int)SYSVarType.TransportModeLTL;
            int iLCL = -(int)SYSVarType.TransportModeLCL;
            int iMC = -(int)SYSVarType.TransportModeMC;
            int iML = -(int)SYSVarType.TransportModeML;

            using (var model = new DataEntities())
            {
                model.EventAccount = Account; model.EventRunning = false;

                int transID = HelperContract.GetTransportMode(model, trans);

                int serID = HelperContract.GetServiceOfOrder(model, ser);

                if (transID == iFCL && (serID == iImport || serID == iExport))
                    return 1; //FCLIMEX
                else if (transID == iFCL && serID == iLocal)
                    return 2;//FCLLO
                else if (transID == iFTL)
                    return 3;//FTLLO
                else if (transID == iLTL)
                    return 4;//LTLLO
                else if (transID == iFCL && serID == iLocalEmp)
                    return 5;//FCLLOEM
                else if (transID == iFCL && serID == iLocalLad)
                    return 6;//FCLLOLD
                else if (transID == iFTL && (serID == iImport || serID == iExport))
                    return 7;//FTLIMEX
                else if (transID == iLTL && (serID == iImport || serID == iExport))
                    return 8;//LTLLIMEX
                else if (transID == iLCL && (serID == iImport || serID == iExport))
                    return 9;//LCLIMEX
            }
            return 0;
        }

        public int ORDOrder_Contract_Change(int orderID, int? contractID)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActEdit.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.ORD_Order.FirstOrDefault(c => c.ID == orderID);
                    if (obj != null)
                    {
                        obj.ContractID = contractID > 0 ? contractID : null;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        if (obj.ContractID.HasValue)
                        {
                            var contract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID.Value);
                            if (contract == null || contract.TypeOfContractID == null)
                                throw FaultHelper.BusinessFault(null, null, "Hợp đồng không tồn tại!");

                            obj.TypeOfContractID = contract.TypeOfContractID.Value;
                            obj.AllowCoLoad = contract.AllowCoLoad;

                            if (obj.TypeOfContractID == -(int)SYSVarType.TypeOfContractMain)
                            {
                                foreach (var conPrice in obj.ORD_ContainerPrice.ToList())
                                {
                                    model.ORD_ContainerPrice.Remove(conPrice);
                                }

                                foreach (var group in obj.ORD_GroupProduct.ToList())
                                {
                                    group.Price = null;
                                    group.ModifiedBy = Account.UserName;
                                    group.ModifiedDate = DateTime.Now;
                                }
                            }
                        }
                        else
                        {
                            obj.TypeOfContractID = -(int)SYSVarType.TypeOfContractSpotRate;
                        }

                        model.SaveChanges();
                        return ORDOrder_GetView(obj.ServiceOfOrderID == null ? -1 : obj.CAT_ServiceOfOrder.ServiceOfOrderID, obj.CAT_TransportMode.TransportModeID);
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại!");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public decimal ORDOrder_PriceGroupVehicle(int contractID, int fID, int tID, int groupOfVehicleID, int typeOfOrderID)
        {
            try
            {
                decimal result = 0;
                using (var model = new DataEntities())
                {
                    DateTime dtNow = DateTime.Now.Date;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public decimal ORDOrder_PriceGroupProduct(int contractID, int fID, int tID, int groupOfProductID, int typeOfOrderID)
        {
            try
            {
                decimal result = 0;
                using (var model = new DataEntities())
                {
                    DateTime dtNow = DateTime.Now.Date;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public decimal ORDOrder_PriceContainer(int contractID, int fID, int tID, int typeOfContainerID, int typeOfOrderID)
        {
            try
            {
                decimal result = 0;
                using (var model = new DataEntities())
                {
                    DateTime dtNow = DateTime.Now.Date;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder ORDOrder_GetDate(DTOORDOrder item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int? contractTermID = item.ContractTermID;
                    var transportID = HelperContract.GetTransportMode(model, item.TransportModeID);
                    if (item.ContractID > 0 && item.ContractTermID < 1)
                    {
                        var term = model.CAT_ContractTerm.Where(c => c.CAT_Contract.TransportModeID == item.TransportModeID && (transportID == -(int)SYSVarType.TransportModeFCL ? c.ServiceOfOrderID == item.ServiceOfOrderID : true) &&
                            c.ContractID == item.ContractID.Value && c.CAT_Contract.CustomerID == item.CustomerID && (c.ExprETA != null || c.ExprETARequest != null || c.ExprETD != null || c.ExprETDRequest != null) &&
                            ((c.DateEffect <= item.RequestDate && c.DateExpire == null) || (c.DateEffect <= item.RequestDate && c.DateExpire > item.RequestDate))).OrderByDescending(c => c.DateEffect).Select(c => new { c.ContractID, c.ID }).FirstOrDefault();
                        if (term != null)
                            contractTermID = term.ID;
                    }
                    var contractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);

                    // Tự tính ETD, ETDRequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETD))
                    {
                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                        itemCheck.ETD = item.ETD;
                        itemCheck.ETDRequest = item.ETDRequest;
                        itemCheck.RequestDate = item.RequestDate;
                        item.ETD = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETD);
                    }
                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETDRequest))
                    {
                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                        itemCheck.ETD = item.ETD;
                        itemCheck.ETDRequest = item.ETDRequest;
                        itemCheck.RequestDate = item.RequestDate;
                        item.ETDRequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETDRequest);
                    }

                    // Tự tính ETA, ETARequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETA))
                    {
                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                        itemCheck.ETD = item.ETD;
                        itemCheck.ETDRequest = item.ETDRequest;
                        itemCheck.RequestDate = item.RequestDate;
                        item.ETA = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETA);
                    }
                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETARequest))
                    {
                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                        itemCheck.ETD = item.ETD;
                        itemCheck.ETDRequest = item.ETDRequest;
                        itemCheck.RequestDate = item.RequestDate;
                        item.ETARequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETARequest);
                    }
                }
                return item;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_Delete(int id)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActDel.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.ORD_Order.FirstOrDefault(c => c.ID == id);
                    if (obj != null)
                    {
                        if (obj.StatusOfOrderID >= -(int)SYSVarType.StatusOfOrderPlaning || obj.StatusOfPlanID >= -(int)SYSVarType.StatusOfPlanPlaning)
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã được lập kế hoạch, không thể xóa");
                        if (obj.IsOPS == false)
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã được lập kế hoạch multimode, không thể xóa");

                        foreach (var o in model.ORD_Container.Where(c => c.OrderID == obj.ID))
                        {
                            model.ORD_Container.Remove(o);
                        }
                        foreach (var o in model.ORD_ContainerPrice.Where(c => c.OrderID == obj.ID))
                        {
                            model.ORD_ContainerPrice.Remove(o);
                        }
                        foreach (var o in model.ORD_Service.Where(c => c.OrderID == obj.ID))
                        {
                            model.ORD_Service.Remove(o);
                        }
                        foreach (var o in model.ORD_GroupProduct.Where(c => c.OrderID == obj.ID))
                        {
                            foreach (var p in model.ORD_Product.Where(c => c.GroupProductID == o.ID))
                            {
                                model.ORD_Product.Remove(p);
                            }
                            model.ORD_GroupProduct.Remove(o);
                        }
                        foreach (var o in model.FIN_PLCosting.Where(c => c.OrderID == obj.ID))
                        {
                            model.FIN_PLCosting.Remove(o);
                        }
                        foreach (var o in model.FIN_PL.Where(c => c.OrderID == obj.ID))
                        {
                            foreach (var oD in model.FIN_PLDetails.Where(c => c.PLID == o.ID))
                            {
                                foreach (var p in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == oD.ID))
                                {
                                    model.FIN_PLGroupOfProduct.Remove(p);
                                }
                                model.FIN_PLDetails.Remove(oD);
                            }
                            model.FIN_PL.Remove(o);
                        }
                        foreach (var o in model.WFL_PacketDetail.Where(c => c.ORDGroupProductID > 0 && c.ORD_GroupProduct.OrderID == obj.ID))
                        {
                            model.WFL_PacketDetail.Remove(o);
                        }
                        foreach (var o in model.ORD_OrderStatus.Where(c => c.OrderID == obj.ID))
                        {
                            model.ORD_OrderStatus.Remove(o);
                        }

                        model.ORD_Order.Remove(obj);
                    }

                    model.SaveChanges();

                    HelperStatus.ORDOrder_Status(model, Account, new List<int> { id });
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_CheckCode(DataEntities model, DTOORDOrder item)
        {
            var setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
            if (setting.IsUniqueOrderCode)
            {
                if (model.ORD_Order.Count(c => c.ID != item.ID && c.Code == item.Code && c.CustomerID == item.CustomerID && c.SYSCustomerID == Account.SYSCustomerID) > 0)
                    throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng không được trùng!");
            }
            else
            {
                if (model.ORD_Order.Count(c => c.ID != item.ID && c.Code == item.Code && c.CustomerID == item.CustomerID && c.SYSCustomerID == Account.SYSCustomerID && c.RequestDate == item.RequestDate) > 0)
                    throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng, ngày yêu cầu không được trùng!");
            }
        }

        private int ORDOrder_Save(DataEntities model, DTOORDOrder item)
        {
            try
            {
                var transportID = HelperContract.GetTransportMode(model, item.TransportModeID);
                var serviceID = HelperContract.GetServiceOfOrder(model, item.ServiceOfOrderID);
                var setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                #region Kiểm tra điều kiện đầu vào
                if (string.IsNullOrEmpty(item.Code))
                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng thiếu mã");

                if (item.ServiceOfOrderID < 1)
                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu loại dịch vụ");

                if (item.TransportModeID < 1)
                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu loại vận chuyển");

                if (item.TypeOfContractID < 1)
                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu loại hợp đồng");

                if (transportID == -(int)SYSVarType.TransportModeFTL && item.GroupOfVehicleID < 1)
                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu loại xe");

                if (transportID == -(int)SYSVarType.TransportModeFCL)
                {
                    if ((item.PartnerID == null || item.PartnerID < 1) && (serviceID == -(int)SYSVarType.ServiceOfOrderImport || serviceID == -(int)SYSVarType.ServiceOfOrderExport))
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu thông tin Hãng tàu/Cảng biển");
                    if (item.LocationFromID == null || item.LocationFromID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu thông tin điểm đi");
                    if (item.LocationToID == null || item.LocationToID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu thông tin điểm đến");

                    // Task STMS-1816
                    if (serviceID == -(int)SYSVarType.ServiceOfOrderExport && item.CutOffTime == null)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu thông tin Cut off time");

                    // Task STMS-1816
                    if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                    {
                        if (item.CutOffTime == null)
                        {
                            if (item.ETA != null)
                                item.CutOffTime = item.ETA.Value.Date.AddHours(1);
                            else
                                item.CutOffTime = item.RequestDate.AddDays(1);
                        }
                    }

                    // Task STMS-1816
                    if (item.ETA == null || item.ETD == null)
                    {
                        if (serviceID == -(int)SYSVarType.ServiceOfOrderImport || serviceID == -(int)SYSVarType.ServiceOfOrderExport)
                        {
                            if (item.RequestDate > item.CutOffTime)
                                item.CutOffTime = item.RequestDate.AddHours(1);
                        }

                        if (item.ETD == null)
                            item.ETD = item.RequestDate;
                        if (item.ETA == null)
                            item.ETA = item.CutOffTime != null ? item.CutOffTime : item.RequestDate.AddHours(6);
                    }

                    // Task STMS-1816
                    if (serviceID == -(int)SYSVarType.ServiceOfOrderExport)
                    {
                        if (item.DateGetEmpty == null)
                            item.DateGetEmpty = item.ETD;
                    }

                    // Task STMS-1816
                    if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                    {
                        if (item.DateReturnEmpty == null)
                            item.DateReturnEmpty = item.ETA.Value.AddHours(1);
                    }

                    //--STMS-2485
                    if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                    {
                        if (item.ETD == null || item.ETA == null)
                            throw FaultHelper.BusinessFault(null, null, "Thiếu dữ liệu ETD, ETA ");
                        TimeSpan time = item.ETA.Value - item.ETD.Value;
                        if (time.Seconds > 1800)
                            throw FaultHelper.BusinessFault(null, null, "ETD phải nhỏ hơn ETA ít nhất 30 phút ");
                        //--end STMS-2485
                    }
                }


                #endregion

                var obj = model.ORD_Order.FirstOrDefault(c => c.ID == item.ID);
                if (obj == null)
                {
                    obj = new ORD_Order();
                    obj.CreatedBy = Account.UserName;
                    obj.CreatedDate = DateTime.Now;
                    obj.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                    obj.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                    obj.CustomerID = item.CustomerID;
                    obj.SYSCustomerID = item.SYSCustomerID;
                    obj.IsOPS = item.IsOPS;
                }
                else
                {
                    obj.ModifiedBy = Account.UserName;
                    obj.ModifiedDate = DateTime.Now;
                }

                obj.TypeOfOrderID = item.TypeOfOrderID;
                obj.AllowCoLoad = item.AllowCoLoad;
                obj.Code = item.Code;
                obj.ServiceOfOrderID = item.ServiceOfOrderID > 0 ? item.ServiceOfOrderID : null;
                obj.TransportModeID = item.TransportModeID;
                obj.TypeOfContractID = item.TypeOfContractID;
                obj.ContractID = item.ContractID;
                obj.ContractTermID = item.ContractTermID;
                obj.RequestDate = item.RequestDate;
                obj.LocationFromID = item.LocationFromID;
                obj.ETD = item.ETD;
                obj.LocationToID = item.LocationToID;
                obj.ETA = item.ETA;
                obj.ETARequest = item.ETARequest;
                obj.ETDRequest = item.ETDRequest;
                obj.DateConfig = item.DateConfig;
                obj.CutOffTime = item.CutOffTime;
                obj.LoadingTime = item.LoadingTime;
                obj.LocationDepotID = item.LocationDepotID;
                obj.LocationDepotReturnID = item.LocationDepotReturnID;
                obj.VesselNo = item.VesselNo;
                obj.VesselName = item.VesselName;
                obj.TripNo = item.TripNo;
                obj.IsClosed = item.IsClosed;
                obj.IsHot = item.IsHot;
                obj.BiddingNo = item.BiddingNo;
                obj.Note = item.Note;
                obj.ExternalCode = item.ExternalCode;
                obj.ExternalDate = item.ExternalDate;
                obj.UserDefine1 = item.UserDefine1;
                obj.UserDefine2 = item.UserDefine2;
                obj.UserDefine3 = item.UserDefine3;
                obj.UserDefine4 = item.UserDefine4;
                obj.UserDefine5 = item.UserDefine5;
                obj.UserDefine6 = item.UserDefine6;
                obj.UserDefine7 = item.UserDefine7;
                obj.UserDefine8 = item.UserDefine8;
                obj.UserDefine9 = item.UserDefine9;
                obj.PartnerID = item.PartnerID;
                obj.GroupOfVehicleID = item.GroupOfVehicleID;
                obj.RoutePrice = item.RoutePrice;
                obj.CUSRoutingID = item.CUSRoutingID;
                obj.LeadTime = item.LeadTime;
                obj.DateShipCome = item.DateShipCome;
                obj.DateDocument = item.DateDocument;
                obj.DateInspect = item.DateInspect;
                obj.DateGetEmpty = item.DateGetEmpty;
                obj.DateReturnEmpty = item.DateReturnEmpty;
                obj.DateLoading = item.DateLoading;
                obj.DateUnloading = item.DateUnloading;
                obj.PacketID = item.PacketID;
                obj.UnLoadingTime = item.UnLoadingTime;

                obj.TypeOfWAInspectionID = item.TypeOfWAInspectionID > 0 ? item.TypeOfWAInspectionID : null;

                if (obj.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionYes)
                    obj.TypeOfWAInspectionStatusID = -(int)SYSVarType.TypeOfWAInspectionStatusWait;
                else obj.TypeOfWAInspectionStatusID = null;

                if (obj.ID < 1)
                    model.ORD_Order.Add(obj);

                if (obj.ContractID > 0 && (obj.ContractTermID < 1 || obj.ContractTermID == null) && (transportID == -(int)SYSVarType.TransportModeFCL || transportID == -(int)SYSVarType.TransportModeLCL))
                {
                    // Tìm phụ lục
                    var term = model.CAT_ContractTerm.Where(c => c.ContractID == obj.ContractID && (obj.ServiceOfOrderID > 0 ? c.ServiceOfOrderID == obj.ServiceOfOrderID : true) && c.DateEffect <= obj.RequestDate).OrderByDescending(c => c.DateEffect).FirstOrDefault();
                    if (term != null)
                        obj.ContractTermID = term.ID;
                }

                if (obj.ID < 1 || obj.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew)
                {
                    // Container
                    
                    //dict ordcontid old -objcont
                    Dictionary<int, ORD_Container> dict = new Dictionary<int, ORD_Container>();

                    if (item.ListContainer != null)
                    {
                        foreach (var con in item.ListContainer)
                        {
                            if (con.LocationFromID == null || con.LocationFromID < 1)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin điểm đi");
                            if (con.LocationToID == null || con.LocationToID < 1)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin điểm đến");
                            //if (con.CATLocationFromID == con.CATLocationToID)
                            //    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thông tin điểm đi trùng đến");
                            if (con.LocationDepotID != null && con.LocationDepotID < 1)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " sai thông tin lấy rờ mooc");
                            if (con.LocationDepotReturnID != null && con.LocationDepotReturnID < 1)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " sai thông tin trả rờ mooc");
                            if (con.CATLocationFromID > 0 && con.CATLocationDepotID > 0 && con.CATLocationFromID == con.CATLocationDepotID)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thông tin lấy rờ mooc trùng điểm lấy hàng");
                            if (con.CATLocationToID > 0 && con.CATLocationDepotReturnID > 0 && con.CATLocationToID == con.CATLocationDepotReturnID)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thông tin trả rờ mooc trùng điểm giao hàng");

                            // Task STMS-1816
                            if (serviceID == -(int)SYSVarType.ServiceOfOrderExport && con.CutOffTime == null)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + item.Code + " thiếu thông tin Cut off time");

                            // Task STMS-1816
                            if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                            {
                                if (con.CutOffTime == null)
                                {
                                    if (con.ETA != null)
                                        con.CutOffTime = con.ETA.Value.Date.AddHours(1);
                                    else
                                        con.CutOffTime = item.RequestDate.AddDays(1);
                                }
                            }

                            // Task STMS-1816
                            if (con.ETA == null || con.ETD == null)
                            {
                                if (serviceID == -(int)SYSVarType.ServiceOfOrderImport || serviceID == -(int)SYSVarType.ServiceOfOrderExport)
                                {
                                    if (item.RequestDate > con.CutOffTime)
                                        con.CutOffTime = item.RequestDate.AddHours(1);
                                }

                                if (con.ETD == null)
                                    con.ETD = item.RequestDate;
                                if (con.ETA == null)
                                    con.ETA = con.CutOffTime != null ? con.CutOffTime : item.RequestDate.AddHours(6);
                            }

                            // Task STMS-1816
                            if (serviceID == -(int)SYSVarType.ServiceOfOrderExport)
                            {
                                if (con.DateGetEmpty == null)
                                    con.DateGetEmpty = con.ETD;
                            }

                            // Task STMS-1816
                            if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                            {
                                if (con.DateReturnEmpty == null)
                                    con.DateReturnEmpty = con.ETA.Value.AddHours(1);
                            }

                            var objCon = new ORD_Container();
                            objCon.CreatedBy = Account.UserName;
                            objCon.CreatedDate = DateTime.Now;

                            objCon.PackingID = con.PackingID;
                            objCon.ContainerNo = con.ContainerNo;
                            objCon.SealNo1 = con.SealNo1;
                            objCon.SealNo2 = con.SealNo2;
                            objCon.Ton = con.Ton;
                            objCon.Note = con.Note;
                            objCon.RomoocID = con.RomoocID;
                            objCon.LocationToID = con.LocationToID;
                            objCon.ETD = con.ETD;
                            objCon.ETDOld = con.ETD;
                            objCon.LocationFromID = con.LocationFromID;
                            objCon.ETA = con.ETA;
                            objCon.ETAOld = con.ETA;
                            objCon.ETDRequest = con.ETDRequest;
                            objCon.ETARequest = con.ETARequest;
                            objCon.CutOffTime = con.CutOffTime;
                            objCon.LoadingTime = con.LoadingTime;
                            objCon.LocationDepotID = con.LocationDepotID;
                            objCon.LocationDepotReturnID = con.LocationDepotReturnID;
                            objCon.DateGetEmpty = con.DateGetEmpty;
                            objCon.DateReturnEmpty = con.DateReturnEmpty;
                            objCon.DateLoading = con.DateLoading;
                            objCon.DateUnloading = con.DateUnloading;
                            objCon.IsFloor = con.IsFloor;
                            objCon.Note1 = con.Note1;
                            objCon.Note2 = con.Note2;
                            objCon.UnLoadingTime = con.UnLoadingTime;
                            objCon.VesselID = con.VesselID > 0 ? con.VesselID : null;
                            objCon.VesselMasterCode = con.VesselMasterCode;

                            obj.ORD_Container.Add(objCon);

                            if (!dict.ContainsKey(con.ID))
                            {
                                dict.Add(con.ID, objCon);
                            }
                        }
                        var fData = item.ListContainer.Where(c => c.LocationFromID.HasValue).Select(c => c.LocationFromID.Value).Distinct().ToList();
                        var tData = item.ListContainer.Where(c => c.LocationToID.HasValue).Select(c => c.LocationToID.Value).Distinct().ToList();
                        var txtFrom = model.CUS_Location.Where(c => fData.Contains(c.ID)).Select(c => c.LocationName).Distinct().ToList();
                        var txtTo = model.CUS_Location.Where(c => tData.Contains(c.ID)).Select(c => c.LocationName).Distinct().ToList();
                        obj.TextFrom = string.Join(", ", txtFrom);
                        obj.TextTo = string.Join(", ", txtTo);
                    }

                    if (item.ListContainerPrice != null)
                    {
                        foreach (var con in item.ListContainerPrice)
                        {
                            var conPrice = new ORD_ContainerPrice();
                            conPrice.CreatedBy = Account.UserName;
                            conPrice.CreatedDate = DateTime.Now;
                            conPrice.LocationFromID = con.LocationFromID;
                            conPrice.LocationToID = con.LocationToID;
                            conPrice.PackingID = con.PackingID;
                            conPrice.Price = con.Price;
                            obj.ORD_ContainerPrice.Add(conPrice);
                        }
                    }

                    if (item.ListService != null)
                    {
                        foreach (var ser in item.ListService)
                        {
                            var objSer = new ORD_Service();
                            objSer.CreatedBy = Account.UserName;
                            objSer.CreatedDate = DateTime.Now;
                            objSer.ServiceID = ser.ServiceID;
                            objSer.PackingID = ser.PackingID > 0 ? ser.PackingID : null;
                            objSer.Price = ser.Price;
                            objSer.Note = ser.Note;
                            obj.ORD_Service.Add(objSer);
                        }
                    }

                    if (item.ListGroupProduct != null)
                    {
                        foreach (var gop in item.ListGroupProduct)
                        {
                            //Chỉ kiểm tra hàng hóa đơn hàng xe tải.
                            if (transportID == -(int)SYSVarType.TransportModeFTL || transportID == -(int)SYSVarType.TransportModeLTL)
                            {
                                if (gop.PartnerID == null || gop.PartnerID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin Nhà phân phối");
                                if (gop.LocationFromID == null || gop.LocationFromID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin kho");
                                if (gop.LocationToID == null || gop.LocationToID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin điểm giao");
                                //if (gop.CATLocationFromID == gop.CATLocationToID)
                                //    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thông tin điểm lấy trùng giao");

                                if (gop.GroupOfProductID == null || gop.GroupOfProductID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin nhóm hàng");

                                if (gop.PriceOfGOPID == null || gop.PriceOfGOPID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " thiếu thông tin loại tính giá");

                                if (item.ETD != null && item.ETA != null)
                                    if (item.ETD > item.ETA)
                                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng chi tiết của " + item.Code + " ETA phải lớn hơn ETD ít nhất 30 phút");
                                    else
                                        if (item.ETD == item.ETA || item.ETD >= item.ETA.Value.AddHours(-0.5))
                                            item.ETA = item.ETA.Value.AddHours(0.5);
                            }

                            var objGop = new ORD_GroupProduct();
                            objGop.CreatedBy = Account.UserName;
                            objGop.CreatedDate = DateTime.Now;

                            objGop.SOCode = gop.SOCode;

                            objGop.ContainerID = null;
                            if (gop.ContainerID > 0)
                            {
                                if(dict.ContainsKey(gop.ContainerID.Value))
                                {
                                    objGop.ORD_Container = dict[gop.ContainerID.Value];
                                }
                            }

                            objGop.GroupOfProductID = gop.GroupOfProductID;
                            objGop.Description = gop.Description;
                            objGop.Ton = Math.Round(gop.Ton, 5, MidpointRounding.AwayFromZero);
                            objGop.CBM = Math.Round(gop.CBM, 5, MidpointRounding.AwayFromZero);
                            objGop.Quantity = Math.Round(gop.Quantity, 5, MidpointRounding.AwayFromZero);
                            objGop.PriceOfGOPID = gop.PriceOfGOPID;
                            objGop.PackingID = gop.PackingID;
                            objGop.LocationToID = gop.LocationToID;
                            objGop.ETD = gop.ETD;
                            objGop.LocationFromID = gop.LocationFromID;
                            objGop.HasCashCollect = gop.HasCashCollect;
                            objGop.ETA = gop.ETA;
                            if (objGop.ETD.HasValue)
                                objGop.ETDStart = objGop.ETD.Value.AddHours(-2);
                            if (objGop.ETA.HasValue)
                                objGop.ETAStart = objGop.ETA.Value.AddHours(-2);
                            objGop.Price = gop.Price;
                            objGop.DNCode = gop.DNCode;
                            objGop.ETARequest = gop.ETARequest;
                            objGop.ETDRequest = gop.ETDRequest;
                            objGop.DateConfig = obj.DateConfig;
                            objGop.CUSRoutingID = gop.CUSRoutingID > 0 ? gop.CUSRoutingID : null;
                            objGop.TempMax = gop.TempMax;
                            objGop.TempMin = gop.TempMin;
                            objGop.Note1 = gop.Note1;
                            objGop.Note2 = gop.Note2;
                            objGop.PartnerID = gop.PartnerID;
                            objGop.SortConfig = gop.SortConfig;
                            if (obj.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturn || obj.TypeOfOrderID == -(int)SYSVarType.TypeOfOrderReturnHot)
                                objGop.IsReturn = true;
                            obj.ORD_GroupProduct.Add(objGop);

                            if (gop.ListProduct != null)
                            {
                                foreach (var product in gop.ListProduct)
                                {
                                    var objProduct = new ORD_Product();
                                    objProduct.CreatedBy = Account.UserName;
                                    objProduct.CreatedDate = DateTime.Now;
                                    objProduct.ExchangeTon = product.ExchangeTon > 0 && product.ExchangeTon != double.PositiveInfinity ? product.ExchangeTon.Value : 0;
                                    objProduct.ExchangeCBM = product.ExchangeCBM > 0 && product.ExchangeCBM != double.PositiveInfinity ? product.ExchangeCBM.Value : 0;
                                    objProduct.ExchangeQuantity = product.ExchangeQuantity > 0 && product.ExchangeQuantity != double.PositiveInfinity ? product.ExchangeQuantity.Value : 0;
                                    objProduct.ProductID = product.ProductID;
                                    objProduct.Quantity = Math.Round(product.Quantity, 5, MidpointRounding.AwayFromZero);
                                    objProduct.PackingID = product.PackingID;
                                    objGop.ORD_Product.Add(objProduct);
                                }
                            }

                        }
                        var fData = item.ListGroupProduct.Where(c => c.LocationFromID.HasValue).Select(c => c.LocationFromID.Value).Distinct().Take(2).ToList();
                        var tData = item.ListGroupProduct.Where(c => c.LocationToID.HasValue).Select(c => c.LocationToID.Value).Distinct().Take(3).ToList();
                        var txtFrom = model.CUS_Location.Where(c => fData.Contains(c.ID)).Select(c => c.LocationName).Distinct().ToList();
                        var txtTo = model.CUS_Location.Where(c => tData.Contains(c.ID)).Select(c => c.LocationName).Distinct().ToList();
                        obj.TextFrom = string.Join(", ", txtFrom);
                        obj.TextTo = string.Join(", ", txtTo.Distinct().ToList());
                    }
                }

                model.SaveChanges();

                //Check Note: Đưa vào comment
                try
                {
                    if (!string.IsNullOrEmpty(item.Note.Trim()))
                    {
                        if (model.CAT_Comment.Count(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfCommentID == (int)CATTypeOfCommentCode.ORD && c.ReferID == obj.ID && c.Comment.Trim().ToLower() == item.Note.Trim().ToLower()) == 0)
                        {
                            CAT_Comment objCmt = new CAT_Comment();
                            objCmt.CreatedBy = Account.UserName;
                            objCmt.CreatedDate = DateTime.Now;
                            objCmt.SYSCustomerID = Account.SYSCustomerID;
                            objCmt.Comment = item.Note;
                            objCmt.UserID = Account.UserID.HasValue ? Account.UserID.Value : 0;
                            objCmt.ReferID = obj.ID;
                            objCmt.TypeOfCommentID = (int)CATTypeOfCommentCode.ORD;
                            objCmt.Date = DateTime.Now;
                            model.CAT_Comment.Add(objCmt);
                            model.SaveChanges();
                        }
                    }
                }
                catch (Exception)
                {

                }

                //Đơn có khai báo kiểm hóa và có thiết lập 1 ĐH FCL = 1 phiếu kiểm hóa
                if (item.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionYes && item.TransportModeID == -(int)SYSVarType.TransportModeFCL)
                {
                    string sKey = SYSSettingKey.System.ToString();
                    var objSetting = model.SYS_Setting.FirstOrDefault(c => c.Key == sKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (objSetting != null && !string.IsNullOrEmpty(objSetting.Setting))
                    {
                        var dataSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(objSetting.Setting);
                        if (dataSet != null && dataSet.Count > 0 && dataSet.FirstOrDefault().OneFCLAsOneDocumentInspect)
                        {
                            ORDOrder_Document_AutoGenerate(new List<int> { obj.ID });
                        }
                    }
                }

                if (transportID == -(int)SYSVarType.TransportModeFCL)
                {
                    if (obj.ContractID > 0 && (obj.ContractTermID < 1 || obj.ContractTermID == null))
                    {
                        var contract = model.CAT_ContractTerm.Where(c => c.CAT_Contract.TransportModeID == obj.TransportModeID && c.ServiceOfOrderID == obj.ServiceOfOrderID &&
                            c.ContractID == obj.ContractID.Value && c.CAT_Contract.CustomerID == obj.CustomerID &&
                            ((c.DateEffect <= obj.RequestDate && c.DateExpire == null) || (c.DateEffect <= obj.RequestDate && c.DateExpire > obj.RequestDate))).Select(c => new { c.ContractID, c.ID }).FirstOrDefault();
                        if (contract != null)
                        {
                            obj.ContractTermID = contract.ID;
                            model.SaveChanges();
                        }
                    }
                }

                HelperStatus.ORDOrder_Status(model, Account, new List<int> { obj.ID });
                return obj.ID;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private string ORDOrder_AutoGenerateCode(DataEntities model, AccountItem Account, DTOORDOrder itemOrder)
        {
            try
            {
                string strOrderCode = string.Empty;
                string strKey = CUSSettingKey.OrderCode.ToString();
                var objCustomer = model.CUS_Customer.FirstOrDefault(c => c.ID == itemOrder.CustomerID);
                if (objCustomer == null)
                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy khách hàng");
                var objTrans = model.CAT_TransportMode.FirstOrDefault(c => c.ID == itemOrder.TransportModeID);
                if (objTrans == null)
                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy loại vận chuyển");

                var objSetting = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == itemOrder.CustomerID && c.Key == strKey);
                if (objSetting == null)
                    objSetting = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID && c.Key == strKey);
                if (objSetting == null)
                    throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thiết lập");
                else
                {
                    var setting = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(objSetting.Setting);
                    if (setting != null && setting.ActionType > 0)
                    {
                        int idx = 1;
                        string exp = setting.Expr;

                        if (setting.DicCounter == null)
                            setting.DicCounter = new Dictionary<DateTime, int>();

                        // Tất cả
                        if (setting.ActionReset == 0)
                        {
                            idx = setting.SortOrder + 1;
                            setting.SortOrder = idx;
                        }
                        else
                        {
                            // Theo thứ tự trong ngày
                            if (setting.ActionReset == 1)
                            {
                                if (exp.Contains("ETD") && itemOrder.ETD.HasValue)
                                {
                                    if (setting.DicCounter.ContainsKey(itemOrder.ETD.Value.Date))
                                    {
                                        var dic = setting.DicCounter.FirstOrDefault(c => c.Key == itemOrder.ETD.Value.Date);
                                        idx = dic.Value + 1;
                                        setting.DicCounter.Remove(itemOrder.ETD.Value.Date);
                                        setting.DicCounter.Add(itemOrder.ETD.Value.Date, idx);
                                    }
                                    else
                                    {
                                        setting.DicCounter.Add(itemOrder.ETD.Value.Date, idx);
                                    }
                                }
                                else
                                {
                                    if (setting.DicCounter.ContainsKey(DateTime.Now.Date))
                                    {
                                        var dic = setting.DicCounter.FirstOrDefault(c => c.Key == DateTime.Now.Date);
                                        idx = dic.Value + 1;
                                        setting.DicCounter.Remove(DateTime.Now.Date);
                                        setting.DicCounter.Add(DateTime.Now.Date, idx);
                                    }
                                    else
                                    {
                                        setting.DicCounter.Add(DateTime.Now.Date, idx);
                                    }
                                }
                            }
                        }
                        strOrderCode = string.Empty;
                        strOrderCode = exp;
                        strOrderCode = strOrderCode.Replace("[Day-D]", DateTime.Now.Day.ToString());
                        strOrderCode = strOrderCode.Replace("[Day-DD]", DateTime.Now.Day.ToString("00"));
                        strOrderCode = strOrderCode.Replace("[Month-M]", DateTime.Now.Month.ToString());
                        strOrderCode = strOrderCode.Replace("[Month-MM]", DateTime.Now.Month.ToString("00"));
                        strOrderCode = strOrderCode.Replace("[Year-YY]", (DateTime.Now.Year % 100).ToString("00"));
                        strOrderCode = strOrderCode.Replace("[Year-YYYY]", DateTime.Now.Year.ToString("0000"));
                        if (itemOrder.ETD.HasValue)
                        {
                            strOrderCode = strOrderCode.Replace("[DayETD-D]", itemOrder.ETD.Value.Day.ToString());
                            strOrderCode = strOrderCode.Replace("[DayETD-DD]", itemOrder.ETD.Value.Day.ToString("00"));
                            strOrderCode = strOrderCode.Replace("[MonthETD-M]", itemOrder.ETD.Value.Month.ToString());
                            strOrderCode = strOrderCode.Replace("[MonthETD-MM]", itemOrder.ETD.Value.Month.ToString("00"));
                            strOrderCode = strOrderCode.Replace("[YearETD-YY]", (itemOrder.ETD.Value.Year % 100).ToString("00"));
                            strOrderCode = strOrderCode.Replace("[YearETD-YYYY]", itemOrder.ETD.Value.Year.ToString("0000"));
                        }
                        strOrderCode = strOrderCode.Replace("[CustomerCode]", objCustomer.Code);
                        strOrderCode = strOrderCode.Replace("[TypeOrder]", objTrans.Name.ToUpper());
                        strOrderCode = strOrderCode.Replace("[UserDefine1]", itemOrder.UserDefine1);
                        strOrderCode = strOrderCode.Replace("[UserDefine2]", itemOrder.UserDefine2);
                        strOrderCode = strOrderCode.Replace("[UserDefine3]", itemOrder.UserDefine3);
                        strOrderCode = strOrderCode.Replace("[UserDefine4]", itemOrder.UserDefine4);
                        strOrderCode = strOrderCode.Replace("[UserDefine5]", itemOrder.UserDefine5);
                        strOrderCode = strOrderCode.Replace("[UserDefine6]", itemOrder.UserDefine6);
                        strOrderCode = strOrderCode.Replace("[UserDefine7]", itemOrder.UserDefine7);
                        strOrderCode = strOrderCode.Replace("[UserDefine8]", itemOrder.UserDefine8);
                        strOrderCode = strOrderCode.Replace("[UserDefine9]", itemOrder.UserDefine9);
                        switch (itemOrder.ServiceOfOrderID)
                        {
                            case iIM:
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderEng]", "IM");
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderVi]", "T");
                                break;
                            case iEx:
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderEng]", "EX");
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderVi]", "D");
                                break;
                            case iLO:
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderEng]", "LO");
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderVi]", "C");
                                break;
                            case iLOEmpty:
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderEng]", "LOEmpty");
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderVi]", "CR");
                                break;
                            case iLOLaden:
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderEng]", "LOLaden");
                                strOrderCode = strOrderCode.Replace("[ServiceOfOrderVi]", "CD");
                                break;
                        }

                        // Tất cả theo đúng mã
                        // [CustomerCode][ServiceOfOrderEng][Sort-000]
                        // BIAEX-001
                        // BIAIM-001
                        string temp = strOrderCode.Replace("[Sort-000]", "");
                        temp = strOrderCode.Replace("[Sort-00000]", "");
                        temp = strOrderCode.Replace("[Sort-0000000]", "");
                        if (setting.ActionReset == 2)
                        {
                            // Áp dụng tất cả khách hàng
                            var lstCode = model.ORD_Order.Where(c => c.Code.ToLower().StartsWith(temp.ToLower())).Select(c => new { c.ID, c.Code, c.CustomerID }).ToList();
                            // Áp dụng cho từng khách hàng
                            if (itemOrder.CustomerID != Account.SYSCustomerID)
                                lstCode = lstCode.Where(c => c.CustomerID == itemOrder.CustomerID).OrderByDescending(c => c.Code).ToList();
                            if (lstCode != null && lstCode.Count() > 0)
                            {
                                var last = lstCode.FirstOrDefault();
                                // Lấy index 
                                string strIndex = last.Code.Split('-')[last.Code.Split('-').Length - 1];
                                if (!string.IsNullOrEmpty(strIndex))
                                {
                                    try
                                    {
                                        idx = Convert.ToInt32(strIndex);
                                        idx += 1;
                                    }
                                    catch { }
                                }
                            }
                        }

                        strOrderCode = strOrderCode.Replace("[Sort-000]", "-" + idx.ToString("000"));
                        strOrderCode = strOrderCode.Replace("[Sort-00000]", "-" + idx.ToString("00000"));
                        strOrderCode = strOrderCode.Replace("[Sort-0000000]", "-" + idx.ToString("0000000"));
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Không có thiết lập tự tạo mã");
                }

                return strOrderCode;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        private void ORDOrder_UpdateSettingOrderCode(DataEntities model, AccountItem Account, DTOORDOrder itemOrder)
        {
            try
            {
                var objSettingCode = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString() && c.Setting != null && c.CustomerID == itemOrder.CustomerID);
                if (objSettingCode == null)
                    objSettingCode = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString() && c.Setting != null && c.CustomerID == Account.SYSCustomerID);
                if (objSettingCode != null)
                {
                    DTOCUSSettingOrderCode objSet = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(objSettingCode.Setting);
                    if (objSet.DicCounter == null) objSet.DicCounter = new Dictionary<DateTime, int>();
                    if (objSet.ActionReset == 1)
                    {
                        if (objSet.Expr.Contains("ETD"))
                        {
                            if (itemOrder.ETD.HasValue)
                            {
                                if (objSet.DicCounter.ContainsKey(itemOrder.ETD.Value.Date))
                                {
                                    var dic = objSet.DicCounter.FirstOrDefault(c => c.Key == itemOrder.ETD.Value.Date);
                                    var val = dic.Value + 1;
                                    objSet.DicCounter.Remove(itemOrder.ETD.Value.Date);
                                    objSet.DicCounter.Add(itemOrder.ETD.Value.Date, val);
                                }
                                else
                                {
                                    objSet.DicCounter.Add(itemOrder.ETD.Value.Date, 1);
                                }
                            }
                        }
                        else
                        {
                            if (objSet.DicCounter.ContainsKey(DateTime.Now.Date))
                            {
                                var dic = objSet.DicCounter.FirstOrDefault(c => c.Key == DateTime.Now.Date);
                                var val = dic.Value + 1;
                                objSet.DicCounter.Remove(DateTime.Now.Date);
                                objSet.DicCounter.Add(DateTime.Now.Date, val);
                            }
                            else
                            {
                                objSet.DicCounter.Add(DateTime.Now.Date, 1);
                            }
                        }
                        objSettingCode.ModifiedDate = DateTime.Now;
                        objSettingCode.ModifiedBy = Account.UserName;
                        objSettingCode.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(objSet);
                        model.SaveChanges();
                    }
                    else
                    {
                        objSet.SortOrder = objSet.SortOrder + 1;
                        objSettingCode.ModifiedDate = DateTime.Now;
                        objSettingCode.ModifiedBy = Account.UserName;
                        objSettingCode.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(objSet);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        private DateTime? ORDOrder_DateExpression(DTOORDOrder_ExprCheck item, string strExpr)
        {
            DateTime? result = null;
            try
            {
                ExcelPackage package = new ExcelPackage();
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Sheet 1");
                int row = 0, col = 1;
                string strCol = "A", strRow = "";
                StringBuilder strExp = new StringBuilder(strExpr);

                row++;
                worksheet.Cells[row, col].Value = item.ETD;
                strExp.Replace("[ETD]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.ETDRequest;
                strExp.Replace("[ETDRequest]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Value = item.RequestDate;
                strExp.Replace("[RequestDate]", strCol + row);
                strRow = strCol + row; row++;

                worksheet.Cells[row, col].Formula = strExp.ToString();

                package.Workbook.Calculate();
                var val = worksheet.Cells[row, col].Value.ToString().Trim();

                try
                { result = DateTime.FromOADate(Convert.ToDouble(val)); }
                catch { }
                if (result == null)
                {
                    try
                    { result = Convert.ToDateTime(val, new CultureInfo("en-US")).Date; }
                    catch { }
                }

                if (result != null)
                {
                    if (result.Value.Year == 1900)
                        result = null;
                }

                return result;
            }
            catch
            {
                return null;
            }
        }

        public AddressSearchItem AddressSearch_List(int id)
        {
            try
            {
                var result = new AddressSearchItem();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Location.Where(c => c.ID == id).Select(c => new AddressSearchItem
                    {
                        CUSLocationID = c.ID,
                        CustomerID = c.CustomerID,
                        CUSPartnerID = c.CusPartID,
                        PartnerCode = c.CusPartID > 0 ? c.CUS_Partner.PartnerCode : "",
                        LocationCode = c.Code,
                        Address = c.CAT_Location.Address,
                        EconomicZone = c.CAT_Location.EconomicZone
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOORDData_Location ORDOrder_NewLocation_Save(DTOORDOrderNewLocation item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.ORDOrder_NewLocation_Save(model, Account, item);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ORDOrder
        public int ORDOrder_GetStatus(bool isCO, int? toMasterID, int sttTOMaster, int sttTO, int sttPOD)
        {
            if (isCO)
            {
                if (sttTO == -(int)SYSVarType.TypeOfStatusContainerCancel)
                    return -1;
                if (sttPOD == -(int)SYSVarType.TypeOfStatusContainerPODComplete)
                    return 6;
                if (toMasterID < 1 || !toMasterID.HasValue)
                    return 1;
                if (sttTOMaster == -(int)SYSVarType.StatusOfCOTOMasterApproved)
                    return 2;
                if (sttTOMaster == -(int)SYSVarType.StatusOfCOTOMasterTendered)
                    return 2; //return 3;
                if (sttTOMaster == -(int)SYSVarType.StatusOfCOTOMasterDelivery)
                    return 4;
                if (sttTOMaster == -(int)SYSVarType.StatusOfCOTOMasterReceived)
                    return 5;
            }
            else
            {
                if (sttTO == -(int)SYSVarType.DITOGroupProductStatusCancel)
                    return -1;
                if (sttPOD == -(int)SYSVarType.DITOGroupProductStatusPODComplete)
                    return 6;
                if (toMasterID < 1 || !toMasterID.HasValue)
                    return 1;
                if (sttTOMaster == -(int)SYSVarType.StatusOfDITOMasterApproved)
                    return 2;
                if (sttTOMaster == -(int)SYSVarType.StatusOfDITOMasterTendered)
                    return 2; // return 3;
                if (sttTOMaster == -(int)SYSVarType.StatusOfDITOMasterDelivery)
                    return 4;
                if (sttTOMaster == -(int)SYSVarType.StatusOfDITOMasterReceived)
                    return 5;
            }
            return 1;
        }
        public DTOResult ORDOrderNew_List(string request, List<int> dataStatus, DateTime fDate, DateTime tDate, bool aDate)
        {
            try
            {
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objSetting = ORD_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;
                    if (objSetting != null)
                        dtWarning = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    int iLCL = -(int)SYSVarType.TransportModeLCL, iFCL = -(int)SYSVarType.TransportModeFCL,
                        iComment = (int)CATTypeOfCommentCode.ORD, iMain = -(int)SYSVarType.TypeOfContractMain,
                        iImport = -(int)SYSVarType.ServiceOfOrderImport, iExport = -(int)SYSVarType.ServiceOfOrderExport,
                        iRequest = -(int)SYSVarType.StatusOfOrderRequest;

                    fDate = fDate.Date; tDate = tDate.Date;

                    var dataStatusPln = new List<int>();
                    var dataStatusOrd = new List<int>();
                    if (dataStatus.Contains(0)) //Mới tạo
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderNew);
                    if (dataStatus.Contains(1)) //Đang kế hoạch
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderPlaning);
                    if (dataStatus.Contains(2)) //Đã lập chuyến
                        dataStatusPln.Add(-(int)SYSVarType.StatusOfPlanComplete);
                    if (dataStatus.Contains(4)) //Đang vận chuyển
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderTranfer);
                    if (dataStatus.Contains(5)) //Đã giao hàng
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderReceived);
                    if (dataStatus.Contains(6)) //Nhận chứng từ
                    {
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderInvoicePart);
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderInvoiceComplete);
                    }
                    if (dataStatus.Contains(-1)) //Hủy
                    {
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderClosed);
                        dataStatusOrd.Add(-(int)SYSVarType.StatusOfOrderClosedPart);
                    }

                    var query = model.ORD_Order.Where(c => c.ORD_OrderStatus.Any(o => o.StatusOfPlanID.HasValue && o.StatusOfOrderID.HasValue && (dataStatusOrd.Contains(o.StatusOfOrderID.Value) || dataStatusPln.Contains(o.StatusOfPlanID.Value)))
                        && c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfOrderID != iRequest && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.CustomerID) && c.ParentID == null && c.OrderRefID == null : isAdmin == true ? true : false)
                        && (aDate ? true : DbFunctions.TruncateTime(c.RequestDate) >= fDate && DbFunctions.TruncateTime(c.RequestDate) <= tDate) && c.CustomerID != Account.SYSCustomerID).Select(c => new DTOORDOrder
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        OrderRefID = c.OrderRefID,
                        SYSCustomerID = c.SYSCustomerID,
                        Code = c.Code,
                        CustomerID = c.CustomerID,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        TypeOfContractID = c.TypeOfContractID,
                        ContractID = c.ContractID,
                        TypeOfOrderID = c.TypeOfOrderID,
                        StatusOfOrderID = c.StatusOfOrderID,
                        StatusOfPlanID = c.StatusOfPlanID,
                        RequestDate = c.RequestDate,
                        LocationFromID = c.LocationFromID,
                        ETD = c.ETD,
                        LocationToID = c.LocationToID,
                        ShortName = c.CUS_Customer.ShortName,
                        CreatedBy = c.CreatedBy,
                        ETA = c.ETA,
                        ETDRequest = c.ETDRequest,
                        ETARequest = c.ETARequest,
                        DateConfig = c.DateConfig,
                        CutOffTime = c.CutOffTime,
                        LoadingTime = c.LoadingTime,
                        LocationDepotID = c.LocationDepotID,
                        LocationDepotReturnID = c.LocationDepotReturnID,
                        VesselNo = c.VesselNo,
                        VesselName = c.VesselName,
                        TripNo = c.TripNo,
                        IsOPS = c.IsOPS,
                        IsClosed = c.IsClosed,
                        IsHot = c.IsHot,
                        BiddingNo = c.BiddingNo,
                        Note = c.Note,
                        ExternalCode = c.ExternalCode,
                        ExternalDate = c.ExternalDate,
                        UserDefine1 = c.UserDefine1,
                        UserDefine2 = c.UserDefine2,
                        UserDefine3 = c.UserDefine3,
                        UserDefine4 = c.UserDefine4,
                        UserDefine5 = c.UserDefine5,
                        UserDefine6 = c.UserDefine6,
                        UserDefine7 = c.UserDefine7,
                        UserDefine8 = c.UserDefine8,
                        UserDefine9 = c.UserDefine9,
                        LocationFrom = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                        LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                        LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationTo = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                        LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                        LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                        StatusOfOrderName = c.SYS_Var.ValueOfVar,
                        StatusOfPlanName = c.SYS_Var1.ValueOfVar,
                        TypeOfView = 0,
                        CustomerName = c.CUS_Customer.ShortName,
                        TypeOfContractName = c.SYS_Var2.ValueOfVar,
                        TypeOfOrderName = c.SYS_Var3.ValueOfVar,
                        ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,
                        TransportModeName = c.CAT_TransportMode.Name,
                        ViewID = c.ServiceOfOrderID < 0 ? 3 : c.CAT_ServiceOfOrder.ServiceOfOrderID == iImport ? 1 : c.CAT_ServiceOfOrder.ServiceOfOrderID == iExport ? 2 : 3,
                        CreatedDate = c.CreatedDate,
                        IsMain = c.TypeOfContractID == iMain,
                        IsSent = model.ORD_Order.Count(d => d.OrderRefID == c.ID) > 0,
                        URL = string.Empty,
                        CATLocationFromID = c.LocationFromID.HasValue ? c.CUS_Location2.LocationID : 0,
                        CATLocationToID = c.LocationToID.HasValue ? c.CUS_Location3.LocationID : 0,
                        GroupOfVehicleName = c.GroupOfVehicleID.HasValue ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        RoutePrice = c.RoutePrice,
                        IsContainer = c.CAT_TransportMode.TransportModeID == iFCL || c.CAT_TransportMode.TransportModeID == iLCL,
                        AllowCoLoad = c.AllowCoLoad,
                        TextFrom = c.TextFrom,
                        TextTo = c.TextTo,
                        TotalTon = c.CAT_TransportMode.TransportModeID == iFCL ? (c.ORD_Container.Count > 0 ? c.ORD_Container.Sum(o => o.Ton) : 0) : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.Ton) : 0),
                        TotalCBM = c.CAT_TransportMode.TransportModeID == iFCL ? 0 : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.CBM) : 0),
                        TotalQuantity = c.CAT_TransportMode.TransportModeID == iFCL ? 0 : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.Quantity) : 0),
                        TotalContainer20 = c.CAT_TransportMode.TransportModeID == iFCL ? c.ORD_Container.Count(o => o.CAT_Packing.PackingName.StartsWith("20")) : 0,
                        TotalContainer40 = c.CAT_TransportMode.TransportModeID == iFCL ? c.ORD_Container.Count(o => o.CAT_Packing.PackingName.StartsWith("40")) : 0,
                        TypeOfWAInspectionName = c.TypeOfWAInspectionID > 0 ? c.SYS_Var5.ValueOfVar : string.Empty,
                        TypeOfWAInspectionStatusName = c.TypeOfWAInspectionStatusID > 0 ? c.SYS_Var6.ValueOfVar : string.Empty,
                        SYSTransportModeID = c.CAT_TransportMode.TransportModeID,
                        SYSServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                        ContractTermID = c.ContractTermID,
                        WarningText = c.WarningTimeText,
                        WarningTime = c.WarningTime > 0 ? c.WarningTime.Value : 0,
                        TotalComment = model.CAT_Comment.Count(o => o.ReferID == c.ID && o.SYSCustomerID == Account.SYSCustomerID && o.TypeOfCommentID == iComment)
                    }).ToDataSourceResult(CreateRequest(request));
                    foreach (DTOORDOrder item in query.Data as IEnumerable<DTOORDOrder>)
                    {
                        item.TypeOfView = ORDOrder_GetView(item.SYSServiceOfOrderID, item.SYSTransportModeID);
                        item.ListShipmentStatus = new List<DTOORD_ShipmentStatus>();
                        var dataORDStatus = model.ORD_OrderStatus.Where(c => c.OrderID == item.ID && c.TotalDetail > 0).ToList();
                        foreach (var s in dataORDStatus)
                        {
                            if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew)
                            {
                                item.TotalStatusNew = s.TotalDetail;
                            }
                            else
                            {
                                DTOORD_ShipmentStatus o = new DTOORD_ShipmentStatus();
                                o.OrderID = item.ID;
                                o.TOMasterCode = string.Empty;
                                o.TOMasterID = null;
                                o.StatusTOMaster = -1;
                                o.ShipmentNo = string.Empty;
                                if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderPlaning)
                                    o.Status = 1;
                                else if (s.StatusOfPlanID == -(int)SYSVarType.StatusOfPlanPlaning)
                                    o.Status = 2;
                                //else if (s.StatusOfPlanID == -(int)SYSVarType.StatusOfPlanComplete)
                                //    o.Status = 3;
                                else if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderTranfer)
                                    o.Status = 4;
                                else if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderReceived)
                                    o.Status = 5;
                                else if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoicePart || s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderInvoiceComplete)
                                    o.Status = 6;
                                else if (s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderClosed || s.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderClosedPart)
                                    o.Status = -1;
                                for (var i = 0; i < s.TotalDetail; i++)
                                {
                                    item.ListShipmentStatus.Add(o);
                                }
                            }
                        }

                        if (item.IsContainer)
                        {
                            if (objSetting.WarningETD)
                            {
                                if (item.TotalStatusNew > 0 || item.ListShipmentStatus.Any(c => c.TOMasterID == null))
                                {
                                    if (item.ETD.HasValue && item.ETD < dtWarning)
                                    {
                                        if (item.ETD < DateTime.Now)
                                        {
                                            item.IsWarning = true;
                                            item.WarningType = 1;
                                            var tmpTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                            item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ để lập chuyến";
                                        }
                                        else
                                        {
                                            item.IsWarning = true;
                                            item.WarningType = 1;
                                            var tmpTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                            item.WarningMsg = "Còn " + Math.Round(tmpTime, 1) + " giờ để lập chuyến";
                                        }
                                    }
                                }
                                else if (item.ETDRequest.HasValue && item.ETD.HasValue && item.ETD > item.ETDRequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 3;
                                    var tmpTime = item.ETD.Value.Subtract(item.ETDRequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ yêu cầu đến kho của khách hàng";
                                }
                            }
                            if (objSetting.WarningETA && item.IsWarning != true)
                            {
                                if (item.ETA.HasValue && item.CutOffTime.HasValue && item.ETA > item.CutOffTime)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 2;
                                    var tmpTime = item.ETA.Value.Subtract(item.CutOffTime.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ ra cảng / trả container";
                                }
                            }
                        }
                        else
                        {
                            if (objSetting.WarningETD)
                            {
                                if (item.TotalStatusNew > 0 || item.ListShipmentStatus.Any(c => c.TOMasterID == null))
                                {
                                    if (item.ETD.HasValue && item.ETD < dtWarning)
                                    {
                                        if (item.ETD < DateTime.Now)
                                        {
                                            item.IsWarning = true;
                                            item.WarningType = 1;
                                            var tmpTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                            item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ để lập chuyến";
                                        }
                                        else
                                        {
                                            item.IsWarning = true;
                                            item.WarningType = 1;
                                            var tmpTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                            item.WarningMsg = "Còn " + Math.Round(tmpTime, 1) + " giờ để lập chuyến";
                                        }
                                    }
                                }
                                else if (item.ETDRequest.HasValue && item.ETD.HasValue && item.ETD > item.ETDRequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 12;
                                    var tmpTime = item.ETD.Value.Subtract(item.ETDRequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ yêu cầu đến kho của khách hàng";
                                }
                            }
                            if (objSetting.WarningETA && item.IsWarning != true)
                            {
                                if (item.ETARequest.HasValue && item.ETA.HasValue && item.ETA > item.ETARequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 13;
                                    var tmpTime = item.ETA.Value.Subtract(item.ETARequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ yêu cầu giao hàng của khách hàng";
                                }
                                else if (item.ETA.HasValue && item.ETA < dtWarning)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 1;
                                    var tmpTime = dtWarning.Subtract(item.ETA.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(tmpTime, 1) + " giờ để giao hàng";
                                }
                            }
                        }
                    }
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private DTOSYSSetting ORD_SystemSetting_Get(DataEntities model)
        {
            var objSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
            if (objSetting != null)
            {
                var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                if (objCheck == null)
                    objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
                objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                if (objCheck != null)
                    objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
            }
            else
            {
                objSetting = new DTOSYSSetting();
                objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
                objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
            }
            return objSetting;
        }

        public void ORDOrder_Copy(List<DTOORDOrder_Copy> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActAdd.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    List<string> dataErrors = new List<string>();
                    foreach (var item in data)
                    {
                        if (data.Count(c => c.Value == item.Value) > 1)
                            dataErrors.Add("'" + item.Value + "'");
                    }
                    dataErrors = dataErrors.Distinct().ToList();
                    if (dataErrors.Count > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng " + string.Join(", ", dataErrors) + " trùng!");

                    foreach (var temp in data)
                    {
                        var item = model.ORD_Order.FirstOrDefault(c => c.ID == temp.ID);
                        if (item == null)
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại!");

                        if (model.ORD_Order.Count(c => c.CustomerID == item.CustomerID && c.Code == temp.Value && c.SYSCustomerID == Account.SYSCustomerID) > 0)
                            throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng '" + temp.Value + "' trùng!");

                        var obj = new ORD_Order();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                        obj.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;
                        obj.CustomerID = item.CustomerID;
                        obj.TypeOfOrderID = item.TypeOfOrderID;
                        obj.IsOPS = true;
                        obj.Code = temp.Value;
                        obj.ServiceOfOrderID = item.ServiceOfOrderID;
                        obj.TransportModeID = item.TransportModeID;
                        obj.TypeOfContractID = item.TypeOfContractID;
                        obj.ContractID = item.ContractID;
                        obj.RequestDate = item.RequestDate;
                        obj.LocationFromID = item.LocationFromID;
                        obj.ETD = item.ETD;
                        obj.LocationToID = item.LocationToID;
                        obj.ETA = item.ETA;
                        obj.ETARequest = item.ETARequest;
                        obj.DateConfig = item.DateConfig;
                        obj.CutOffTime = item.CutOffTime;
                        obj.LoadingTime = item.LoadingTime;
                        obj.LocationDepotID = item.LocationDepotID;
                        obj.LocationDepotReturnID = item.LocationDepotReturnID;
                        obj.VesselNo = item.VesselNo;
                        obj.VesselName = item.VesselName;
                        obj.TripNo = item.TripNo;
                        obj.IsClosed = item.IsClosed;
                        obj.IsHot = item.IsHot;
                        obj.BiddingNo = item.BiddingNo;
                        obj.Note = string.Empty;
                        obj.ExternalCode = string.Empty;
                        obj.UserDefine1 = string.Empty;
                        obj.UserDefine2 = string.Empty;
                        obj.UserDefine3 = string.Empty;
                        obj.UserDefine4 = string.Empty;
                        obj.UserDefine5 = string.Empty;
                        obj.UserDefine6 = string.Empty;
                        obj.UserDefine7 = string.Empty;
                        obj.UserDefine8 = string.Empty;
                        obj.UserDefine9 = string.Empty;
                        obj.PartnerID = item.PartnerID;
                        obj.GroupOfVehicleID = item.GroupOfVehicleID;
                        obj.RoutePrice = item.RoutePrice;
                        obj.ContractTermID = item.ContractTermID;
                        model.ORD_Order.Add(obj);

                        foreach (var con in item.ORD_Container.ToList())
                        {
                            var objCon = new ORD_Container();
                            objCon.CreatedBy = Account.UserName;
                            objCon.CreatedDate = DateTime.Now;
                            objCon.PackingID = con.PackingID;
                            objCon.ContainerNo = con.ContainerNo;
                            objCon.SealNo1 = con.SealNo1;
                            objCon.SealNo2 = con.SealNo2;
                            objCon.Ton = con.Ton;
                            objCon.Note = con.Note;
                            objCon.RomoocID = con.RomoocID;
                            objCon.LocationToID = con.LocationToID;
                            objCon.ETD = con.ETD;
                            objCon.LocationFromID = con.LocationFromID;
                            objCon.ETA = con.ETA;
                            objCon.CutOffTime = con.CutOffTime;
                            objCon.LoadingTime = con.LoadingTime;
                            objCon.LocationDepotID = con.LocationDepotID;
                            objCon.LocationDepotReturnID = con.LocationDepotReturnID;
                            objCon.CUSRoutingID = con.CUSRoutingID;
                            objCon.GroupSort = con.GroupSort;
                            objCon.DateShipCome = con.DateShipCome;
                            objCon.DateDocument = con.DateDocument;
                            objCon.DateInspect = con.DateInspect;
                            objCon.DateGetEmpty = con.DateGetEmpty;
                            objCon.DateReturnEmpty = con.DateReturnEmpty;
                            objCon.DateLoading = con.DateLoading;
                            objCon.DateUnloading = con.DateUnloading;
                            objCon.DateConfig = con.DateConfig;
                            objCon.ETDStart = con.ETDStart;
                            objCon.ETAStart = con.ETAStart;
                            objCon.ETDRequest = con.ETDRequest;
                            objCon.ETARequest = con.ETARequest;
                            objCon.ETAOld = con.ETAOld;
                            objCon.ETDOld = con.ETDOld;

                            objCon.PayUserNote = con.PayUserNote;
                            objCon.WarningTime = con.WarningTime;
                            objCon.PayCustomerNote = con.PayCustomerNote;
                            objCon.WarningTimeText = con.WarningTimeText;
                            objCon.SortConfig = con.SortConfig;
                            objCon.Note1 = con.Note1;
                            objCon.Note2 = con.Note2;
                            objCon.PartnerID = con.PartnerID;
                            objCon.VesselID = con.VesselID;
                            objCon.VesselMasterCode = con.VesselMasterCode;
                            objCon.DEM = con.DEM;
                            objCon.DET = con.DET;
                            objCon.OfferETA = con.OfferETA;
                            objCon.OfferETARequest = con.OfferETARequest;
                            objCon.DateVesselCome = con.DateVesselCome;
                            objCon.UnLoadingTime = con.UnLoadingTime;

                            obj.ORD_Container.Add(objCon);
                        }

                        foreach (var conPrice in item.ORD_ContainerPrice.ToList())
                        {
                            var objConPrice = new ORD_ContainerPrice();
                            objConPrice.CreatedBy = Account.UserName;
                            objConPrice.CreatedDate = DateTime.Now;
                            objConPrice.LocationFromID = conPrice.LocationFromID;
                            objConPrice.LocationToID = conPrice.LocationToID;
                            objConPrice.PackingID = conPrice.PackingID;
                            objConPrice.Price = conPrice.Price;
                            obj.ORD_ContainerPrice.Add(objConPrice);
                        }

                        foreach (var service in item.ORD_Service.ToList())
                        {
                            var objService = new ORD_Service();
                            objService.CreatedBy = Account.UserName;
                            objService.CreatedDate = DateTime.Now;
                            objService.ServiceID = service.ServiceID;
                            objService.PackingID = service.PackingID;
                            objService.Price = service.Price;
                            objService.Note = service.Note;
                            obj.ORD_Service.Add(objService);
                        }

                        foreach (var group in item.ORD_GroupProduct.ToList())
                        {
                            var objGroup = new ORD_GroupProduct();
                            objGroup.CreatedBy = Account.UserName;
                            objGroup.CreatedDate = DateTime.Now;
                            objGroup.GroupOfProductID = group.GroupOfProductID;
                            objGroup.Description = group.Description;
                            objGroup.Ton = group.Ton;
                            objGroup.CBM = group.CBM;
                            objGroup.Quantity = group.Quantity;
                            objGroup.PriceOfGOPID = group.PriceOfGOPID;
                            objGroup.PackingID = group.PackingID;
                            objGroup.LocationToID = group.LocationToID;
                            objGroup.ETD = group.ETD;
                            objGroup.LocationFromID = group.LocationFromID;
                            objGroup.ETA = group.ETA;
                            objGroup.Price = group.Price;
                            objGroup.SOCode = group.SOCode;
                            objGroup.DNCode = group.DNCode;
                            objGroup.ETARequest = group.ETARequest;
                            objGroup.PartnerID = group.PartnerID;
                            objGroup.CUSRoutingID = group.CUSRoutingID;

                            objGroup.IsReturn = group.IsReturn;
                            objGroup.DateConfig = group.DateConfig;
                            objGroup.TempMin = group.TempMin;
                            objGroup.TempMax = group.TempMax;
                            objGroup.ETDRequest = group.ETDRequest;

                            obj.ORD_GroupProduct.Add(objGroup);
                            // Lưu Product
                            foreach (var product in group.ORD_Product.ToList())
                            {
                                var objProduct = new ORD_Product();
                                objProduct.CreatedBy = Account.UserName;
                                objProduct.CreatedDate = DateTime.Now;
                                objProduct.ProductID = product.ProductID;
                                objProduct.Quantity = product.Quantity;
                                objProduct.PackingID = product.PackingID;
                                objProduct.ExchangeCBM = product.ExchangeCBM;
                                objProduct.ExchangeQuantity = product.ExchangeQuantity;
                                objProduct.ExchangeTon = product.ExchangeTon;
                                objProduct.TempMax = product.TempMax;
                                objProduct.TempMin = product.TempMin;
                                objGroup.ORD_Product.Add(objProduct);
                            }
                        }

                        model.SaveChanges();

                        HelperStatus.ORDOrder_Status(model, Account, new List<int> { obj.ID });
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DeleteList(List<int> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActDel.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        var obj = model.ORD_Order.FirstOrDefault(c => c.ID == item);
                        if (obj == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy đơn hàng.");
                        if (obj != null)
                        {
                            if (obj.IsOPS == false)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.Code + " đã được lập kế hoạch multimode, không thể xóa");

                            if (obj.StatusOfOrderID >= -(int)SYSVarType.StatusOfOrderPlaning || obj.StatusOfPlanID >= -(int)SYSVarType.StatusOfPlanPlaning)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã gửi điều phối, không thể xóa.");

                            if (model.OPS_Container.Count(c => c.ORD_Container.OrderID == item) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã gửi điều phối, không thể xóa.");


                            foreach (var o in model.ORD_Container.Where(c => c.OrderID == obj.ID))
                            {
                                model.ORD_Container.Remove(o);
                            }
                            foreach (var o in model.ORD_ContainerPrice.Where(c => c.OrderID == obj.ID))
                            {
                                model.ORD_ContainerPrice.Remove(o);
                            }
                            foreach (var o in model.ORD_Service.Where(c => c.OrderID == obj.ID))
                            {
                                model.ORD_Service.Remove(o);
                            }
                            foreach (var o in model.ORD_GroupProduct.Where(c => c.OrderID == obj.ID))
                            {
                                foreach (var p in model.ORD_Product.Where(c => c.GroupProductID == o.ID))
                                {
                                    model.ORD_Product.Remove(p);
                                }
                                model.ORD_GroupProduct.Remove(o);
                            }
                            foreach (var o in model.FIN_PLCosting.Where(c => c.OrderID == obj.ID))
                            {
                                model.FIN_PLCosting.Remove(o);
                            }
                            foreach (var o in model.FIN_PL.Where(c => c.OrderID == obj.ID))
                            {
                                foreach (var oD in model.FIN_PLDetails.Where(c => c.PLID == o.ID))
                                {
                                    foreach (var p in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == oD.ID))
                                    {
                                        model.FIN_PLGroupOfProduct.Remove(p);
                                    }
                                    model.FIN_PLDetails.Remove(oD);
                                }
                                model.FIN_PL.Remove(o);
                            }
                            foreach (var o in model.WFL_PacketDetail.Where(c => c.ORDGroupProductID > 0 && c.ORD_GroupProduct.OrderID == obj.ID))
                            {
                                model.WFL_PacketDetail.Remove(o);
                            }
                            foreach (var o in model.ORD_OrderStatus.Where(c => c.OrderID == obj.ID))
                            {
                                model.ORD_OrderStatus.Remove(o);
                            }

                            model.ORD_Order.Remove(obj);
                        }
                    }
                    model.SaveChanges();

                    HelperStatus.ORDOrder_Status(model, Account, data);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDContainer_ToOPS> ORDOrderContainer_ToOPSCheck(List<int> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActOPS.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                var result = new List<DTOORDContainer_ToOPS>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataCon = model.ORD_Container.Where(c => c.ORD_Order.ServiceOfOrderID > 0 && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && data.Contains(c.OrderID)).ToList();
                    foreach (var item in dataCon)
                    {
                        if (item.ORD_Order.ServiceOfOrderID > 0 && item.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                        {
                            if (item.LocationDepotID == null && item.LocationDepotReturnID == null)
                            {
                                DTOORDContainer_ToOPS o = new DTOORDContainer_ToOPS();
                                o.ID = item.ID;
                                o.OrderCode = item.ORD_Order.Code;
                                o.OrderID = item.OrderID;
                                o.CustomerCode = item.ORD_Order.CUS_Customer.ShortName;
                                o.PartnerID = -1;
                                o.PartnerCode = string.Empty;
                                o.PartnerName = string.Empty;
                                o.ServiceOfOrderName = item.ORD_Order.CAT_ServiceOfOrder.Name;
                                o.DataLocation = model.CUS_Location.Where(c => c.CustomerID == item.ORD_Order.CustomerID && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new DTOORDData_Location
                                {
                                    CUSLocationID = c.ID,
                                    LocationCode = c.Code,
                                    CusPartID = c.CusPartID,
                                    LocationName = c.LocationName
                                }).ToList();
                                o.DataPartner = model.CUS_Partner.Where(c => c.CustomerID == item.ORD_Order.CustomerID && c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerCarrier).Select(c => new DTOORDData_Partner
                                {
                                    CUSPartnerID = c.ID,
                                    PartnerCode = c.PartnerCode
                                }).ToList();
                                o.DataPartner.Insert(0, new DTOORDData_Partner
                                {
                                    CUSPartnerID = -1,
                                    PartnerCode = " "
                                });
                                o.DataPartnerLocation = o.DataLocation.Where(c => c.CusPartID == o.PartnerID).ToList();
                                var objDef = o.DataLocation.FirstOrDefault();
                                if (objDef != null)
                                {
                                    o.LocationDepotID = objDef.CUSLocationID;
                                    o.LocationDepotCode = objDef.LocationCode;
                                }
                                result.Add(o);
                            }
                            else if (item.LocationDepotID == null)
                            {
                                item.LocationDepotID = item.LocationDepotReturnID;
                            }
                            else if (item.LocationDepotReturnID == null)
                            {
                                item.LocationDepotReturnID = item.LocationDepotID;
                            }
                            if (item.DateGetEmpty == null && item.ETD.HasValue)
                            {
                                item.DateGetEmpty = item.ETD.Value.AddHours(-12);
                            }
                            if (item.DateReturnEmpty == null && item.ETA.HasValue)
                            {
                                item.DateReturnEmpty = item.ETA.Value.AddHours(12);
                            }
                        }
                        if (item.ORD_Order.ServiceOfOrderID > 0 && item.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                        {
                            if (item.LocationDepotReturnID == null)
                            {
                                if (item.ORD_Order.PartnerID.HasValue)
                                {
                                    DTOORDContainer_ToOPS o = new DTOORDContainer_ToOPS();
                                    o.ID = item.ID;
                                    o.OrderCode = item.ORD_Order.Code;
                                    o.OrderID = item.OrderID;
                                    o.CustomerCode = item.ORD_Order.CUS_Customer.ShortName;
                                    o.PartnerID = item.ORD_Order.PartnerID.Value;
                                    o.PartnerCode = item.ORD_Order.CUS_Partner.PartnerCode;
                                    o.PartnerName = item.ORD_Order.CUS_Partner.CAT_Partner.PartnerName;
                                    o.ServiceOfOrderName = item.ORD_Order.CAT_ServiceOfOrder.Name;
                                    o.DataPartnerLocation = model.CUS_Location.Where(c => c.CusPartID == o.PartnerID).Select(c => new DTOORDData_Location
                                    {
                                        CUSLocationID = c.ID,
                                        LocationCode = c.Code,
                                        LocationName = c.LocationName
                                    }).ToList();
                                    var objDef = o.DataPartnerLocation.FirstOrDefault();
                                    if (objDef != null)
                                    {
                                        o.LocationDepotID = objDef.CUSLocationID;
                                        o.LocationDepotCode = objDef.LocationCode;
                                    }
                                    result.Add(o);
                                }
                            }
                            if (item.DateReturnEmpty == null && item.ETA.HasValue)
                            {
                                item.DateReturnEmpty = item.ETA.Value.AddHours(12);
                            }
                        }
                        if (item.ORD_Order.ServiceOfOrderID > 0 && item.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                        {
                            if (item.LocationDepotID == null)
                            {
                                if (item.ORD_Order.PartnerID.HasValue)
                                {
                                    DTOORDContainer_ToOPS o = new DTOORDContainer_ToOPS();
                                    o.ID = item.ID;
                                    o.OrderCode = item.ORD_Order.Code;
                                    o.OrderID = item.OrderID;
                                    o.CustomerCode = item.ORD_Order.CUS_Customer.ShortName;
                                    o.PartnerID = item.ORD_Order.PartnerID.Value;
                                    o.PartnerCode = item.ORD_Order.CUS_Partner.PartnerCode;
                                    o.PartnerName = item.ORD_Order.CUS_Partner.CAT_Partner.PartnerName;
                                    o.ServiceOfOrderName = item.ORD_Order.CAT_ServiceOfOrder.Name;
                                    o.DataPartnerLocation = model.CUS_Location.Where(c => c.CusPartID == o.PartnerID).Select(c => new DTOORDData_Location
                                    {
                                        CUSLocationID = c.ID,
                                        LocationCode = c.Code,
                                        LocationName = c.LocationName
                                    }).ToList();
                                    var objDef = o.DataPartnerLocation.FirstOrDefault();
                                    if (objDef != null)
                                    {
                                        o.LocationDepotID = objDef.CUSLocationID;
                                        o.LocationDepotCode = objDef.LocationCode;
                                    }
                                    result.Add(o);
                                }
                            }
                            if (item.DateGetEmpty == null && item.ETD.HasValue)
                            {
                                item.DateGetEmpty = item.ETD.Value.AddHours(-12);
                            }
                        }
                    }
                    model.SaveChanges();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrderContainer_ToOPSUpdate(List<DTOORDContainer_ToOPS> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActOPS.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;
                    foreach (var item in data)
                    {
                        var obj = model.ORD_Container.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            if (obj.ORD_Order.ServiceOfOrderID > 0 && obj.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                            {
                                obj.LocationDepotID = item.LocationDepotID;
                            }
                            else if (obj.ORD_Order.ServiceOfOrderID > 0 && obj.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                            {
                                obj.LocationDepotReturnID = item.LocationDepotID;
                            }
                            else if (obj.ORD_Order.ServiceOfOrderID > 0 && obj.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                            {
                                obj.LocationDepotID = item.LocationDepotID;
                                obj.LocationDepotReturnID = item.LocationDepotID;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDRoutingRefresh> ORDOrder_ToOPSCheck(List<int> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActOPS.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                var result = new List<DTOORDRoutingRefresh>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    //Kiểm tra điểm lấy rống, trả rỗng, tgian lấy rỗng, trả rỗng
                    var error = new List<string>();
                    var dataCON = model.ORD_Container.Where(c => c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && data.Contains(c.OrderID)).Select(c => new
                    {
                        c.ORD_Order.Code,
                        c.ContainerNo,
                        ServiceOfOrderID = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                        c.ORD_Order.CAT_TransportMode.TransportModeID,
                        c.LocationDepotID,
                        c.LocationDepotReturnID,
                        c.DateGetEmpty,
                        c.DateReturnEmpty,
                        c.ORD_Order.PartnerID,
                        c.LocationFromID,
                        c.LocationToID,
                        c.ETA,
                        c.ETD,
                        c.CutOffTime,
                        CATLocationDeportID = c.LocationDepotID > 0 ? c.CUS_Location.LocationID : -1,
                        CATLocationDeportReturnID = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationID : -1,
                        CATLocationFromID = c.LocationFromID > 0 ? c.CUS_Location2.LocationID : -1,
                        CATLocationToID = c.LocationToID > 0 ? c.CUS_Location3.LocationID : -1
                    }).GroupBy(c => new { c.Code, c.ServiceOfOrderID }).ToList();
                    var dataGOP = model.ORD_GroupProduct.Where(c => c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && data.Contains(c.OrderID) && (c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL || c.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL)).Select(c => new
                    {
                        c.ORD_Order.Code,
                        c.CUS_GroupOfProduct.GroupName,
                        ServiceOfOrderID = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                        c.ORD_Order.CAT_TransportMode.TransportModeID,
                        c.ORD_Order.PartnerID,
                        c.LocationFromID,
                        c.LocationToID,
                        c.ETA,
                        c.ETD,
                        CATLocationFromID = c.LocationFromID > 0 ? c.CUS_Location.LocationID : -1,
                        CATLocationToID = c.LocationToID > 0 ? c.CUS_Location1.LocationID : -1
                    }).GroupBy(c => new { c.Code, c.ServiceOfOrderID }).ToList();
                    foreach (var item in dataCON)
                    {
                        var errorETA = new List<string>();
                        var errorETD = new List<string>();
                        var errorCutOffTime = new List<string>();
                        var errorPartner = new List<string>();
                        var errorLocationTo = new List<string>();
                        var errorLocationFrom = new List<string>();
                        var errorTimeGet = new List<string>();
                        var errorDepotGet = new List<string>();
                        var errorTimeReturn = new List<string>();
                        var errorDepotReturn = new List<string>();
                        var errorDepotFrom = new List<string>();
                        var errorDepotReturnTo = new List<string>();
                        var errorDepotFromTo = new List<string>();
                        foreach (var con in item)
                        {
                            if (con.ETA == null) errorETA.Add(con.ContainerNo);
                            if (con.ETD == null) errorETD.Add(con.ContainerNo);
                            if (con.CutOffTime == null) errorCutOffTime.Add(con.ContainerNo);
                            if (con.LocationFromID == null) errorLocationFrom.Add(con.ContainerNo);
                            if (con.LocationToID == null) errorLocationTo.Add(con.ContainerNo);
                            if (con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                            {
                                if (con.PartnerID == null)
                                    errorPartner.Add(con.ContainerNo);
                            }
                            if (con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                            {
                                if (con.LocationDepotID == null)
                                {
                                    errorDepotGet.Add(con.ContainerNo);
                                }
                                if (con.DateGetEmpty == null)
                                {
                                    errorTimeGet.Add(con.ContainerNo);
                                }
                            }
                            if (con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport || con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                            {
                                if (con.LocationDepotReturnID == null)
                                {
                                    errorDepotReturn.Add(con.ContainerNo);
                                }
                                if (con.DateReturnEmpty == null && con.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                {
                                    errorTimeReturn.Add(con.ContainerNo);
                                }
                            }
                            if (con.CATLocationDeportID == con.CATLocationFromID && con.ServiceOfOrderID != -(int)SYSVarType.ServiceOfOrderImport) errorDepotFrom.Add(con.ContainerNo);
                            if (con.CATLocationDeportReturnID == con.CATLocationToID && con.ServiceOfOrderID != -(int)SYSVarType.ServiceOfOrderExport) errorDepotReturnTo.Add(con.ContainerNo);
                            if (con.CATLocationFromID == con.CATLocationToID) errorDepotFromTo.Add(con.ContainerNo);
                        }
                        if (errorETD.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin ETD");
                        }
                        if (errorETA.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin ETA");
                        }
                        if (errorCutOffTime.Count > 0)
                        {
                            if (item.Key.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                error.Add("ĐH: " + item.Key.Code + " thiếu thông tin hạn trả container");
                            else if (item.Key.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                error.Add("ĐH: " + item.Key.Code + " thiếu thông tin hạn Cut-Off time");
                        }
                        if (errorPartner.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin hãng tàu");
                        }
                        if (errorLocationFrom.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin điểm nhận");
                        }
                        if (errorLocationTo.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin điểm giao");
                        }
                        if (errorDepotGet.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin điểm lấy rỗng");
                        }
                        if (errorTimeGet.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin thời gian lấy rỗng");
                        }
                        if (errorDepotReturn.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin điểm trả rỗng");
                        }
                        if (errorTimeReturn.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " thiếu thông tin thời gian trả rỗng");
                        }
                        if (errorDepotFrom.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " điểm lấy rỗng trùng với điểm lấy hàng của hệ thống");
                        }
                        if (errorDepotReturnTo.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " điểm trả rỗng trùng với điểm giao của hệ thống");
                        }
                        if (errorDepotFromTo.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " điểm lấy và giao trùng vị trí hệ thống");
                        }
                    }
                    foreach (var item in dataGOP)
                    {
                        var errorDepotFromTo = new List<string>();
                        foreach (var gop in item)
                        {
                            if (gop.CATLocationFromID == gop.CATLocationToID) errorDepotFromTo.Add(gop.GroupName);
                        }
                        if (errorDepotFromTo.Count > 0)
                        {
                            error.Add("ĐH: " + item.Key.Code + " điểm lấy và giao trùng vị trí hệ thống");
                        }
                    }
                    if (error.Count > 0)
                        throw FaultHelper.BusinessFault(null, null, string.Join(", ", error));
                    HelperRouting.ORDOrder_CUSRouting_Check(model, Account, data);

                    #region Kiểm tra CUSRouting
                    Dictionary<int, int> dicContainer = new Dictionary<int, int>();
                    Dictionary<int, int> dicGroupProduct = new Dictionary<int, int>();

                    var dataConChecking = model.ORD_Container.Where(c => c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && data.Contains(c.OrderID) &&
                        c.CUSRoutingID == null && c.LocationFromID.HasValue && c.LocationToID.HasValue).Select(c => new DTOORDRoutingRefresh
                        {
                            ID = c.ID,
                            OrderCode = c.ORD_Order.Code,
                            CustomerID = c.ORD_Order.CustomerID,
                            ContractID = c.ORD_Order.ContractID,
                            LocationFromID = c.CUS_Location2.LocationID,
                            LocationToID = c.CUS_Location3.LocationID,
                            LocationFromName = c.CUS_Location2.LocationName,
                            LocationToName = c.CUS_Location3.LocationName,
                            LocationFromAddress = c.CUS_Location2.CAT_Location.Address,
                            LocationToAddress = c.CUS_Location3.CAT_Location.Address,
                            ProvinceFromID = c.CUS_Location2.CAT_Location.ProvinceID,
                            DistrictFromID = c.CUS_Location2.CAT_Location.DistrictID,
                            ProvinceToID = c.CUS_Location3.CAT_Location.ProvinceID,
                            DistrictToID = c.CUS_Location3.CAT_Location.DistrictID,
                            ProvinceFromName = c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName,
                            DistrictFromName = c.CUS_Location2.CAT_Location.CAT_District.DistrictName,
                            ProvinceToName = c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName,
                            DistrictToName = c.CUS_Location3.CAT_Location.CAT_District.DistrictName,
                            SOCode = string.Empty,
                        }).ToList();
                    foreach (var item in dataConChecking.GroupBy(c => new { c.OrderCode, c.CustomerID, c.ContractID, c.LocationFromID, c.LocationFromName, c.LocationToID, c.LocationToName, c.LocationFromAddress, c.LocationToAddress, c.ProvinceFromID, c.ProvinceToID, c.DistrictFromID, c.DistrictToID }))
                    {
                        List<int> dataArea = new List<int>();
                        int cusRoutingID = ORDOrder_ToOPS_Routing_Check(model, item.Key.CustomerID, item.Key.ContractID, item.Key.LocationFromID, item.Key.LocationToID, item.Key.ProvinceFromID, item.Key.ProvinceToID, item.Key.DistrictFromID, item.Key.DistrictToID, out dataArea);
                        if (cusRoutingID > 0)
                        {
                            foreach (var o in item)
                                dicContainer.Add(o.ID, cusRoutingID);
                        }
                        else
                        {
                            var objCheck = item.FirstOrDefault();
                            objCheck.ListArea = dataArea;
                            result.Add(objCheck);
                        }
                    }

                    var dataGopChecking = model.ORD_GroupProduct.Where(c => (c.ORD_Order.TransportModeID == -(int)SYSVarType.TransportModeFTL || c.ORD_Order.TransportModeID == -(int)SYSVarType.TransportModeLTL) && c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && data.Contains(c.OrderID) &&
                        c.CUSRoutingID == null && c.LocationFromID.HasValue && c.LocationToID.HasValue).Select(c => new DTOORDRoutingRefresh
                        {
                            ID = c.ID,
                            OrderCode = c.ORD_Order.Code,
                            CustomerID = c.ORD_Order.CustomerID,
                            ContractID = c.ORD_Order.ContractID,
                            LocationFromID = c.CUS_Location.LocationID,
                            LocationToID = c.CUS_Location1.LocationID,
                            LocationFromName = c.LocationFromID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CUS_Location1.LocationName : string.Empty,
                            LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location.CAT_Location.Address : string.Empty,
                            LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location1.CAT_Location.Address : string.Empty,
                            ProvinceFromID = c.CUS_Location.CAT_Location.ProvinceID,
                            DistrictFromID = c.CUS_Location.CAT_Location.DistrictID,
                            ProvinceToID = c.CUS_Location1.CAT_Location.ProvinceID,
                            DistrictToID = c.CUS_Location1.CAT_Location.DistrictID,
                            ProvinceFromName = c.CUS_Location.CAT_Location.CAT_Province.ProvinceName,
                            DistrictFromName = c.CUS_Location.CAT_Location.CAT_District.DistrictName,
                            ProvinceToName = c.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            DistrictToName = c.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            SOCode = string.Empty,
                        }).ToList();
                    foreach (var item in dataGopChecking.GroupBy(c => new { c.OrderCode, c.CustomerID, c.ContractID, c.LocationFromID, c.LocationFromName, c.LocationToID, c.LocationToName, c.LocationFromAddress, c.LocationToAddress, c.ProvinceFromID, c.ProvinceToID, c.DistrictFromID, c.DistrictToID }))
                    {
                        List<int> dataArea = new List<int>();
                        int cusRoutingID = ORDOrder_ToOPS_Routing_Check(model, item.Key.CustomerID, item.Key.ContractID, item.Key.LocationFromID, item.Key.LocationToID, item.Key.ProvinceFromID, item.Key.ProvinceToID, item.Key.DistrictFromID, item.Key.DistrictToID, out dataArea);
                        if (cusRoutingID > 0)
                        {
                            foreach (var o in item)
                                dicGroupProduct.Add(o.ID, cusRoutingID);
                        }
                        else
                        {
                            var objCheck = item.FirstOrDefault();
                            objCheck.ListArea = dataArea;
                            result.Add(objCheck);
                        }
                    }

                    foreach (var item in dicContainer)
                    {
                        var obj = model.ORD_Container.FirstOrDefault(c => c.ID == item.Key);
                        if (obj != null)
                            obj.CUSRoutingID = item.Value;
                    }
                    foreach (var item in dicGroupProduct)
                    {
                        var obj = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item.Key);
                        if (obj != null)
                            obj.CUSRoutingID = item.Value;
                    }
                    model.SaveChanges();
                    #endregion
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_RoutingArea_Refresh(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in data)
                    {
                        RoutingAreaLocation_Update(model, item);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDContainer_ToTender> ORDOrder_ToOPS(List<int> data)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActOPS.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                List<DTOORDContainer_ToTender> result = new List<DTOORDContainer_ToTender>();

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var dataRouting = new List<CATRouting>();
                    //Tìm kiềm và tạo mới cung đường container.
                    foreach (var item in model.ORD_Container.Where(c => data.Contains(c.OrderID) && c.ORD_Order.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Select(c => new
                    {
                        LocationFromID = c.LocationFromID.HasValue ? c.CUS_Location2.LocationID : c.LocationFromID,
                        LocationToID = c.LocationToID.HasValue ? c.CUS_Location3.LocationID : c.LocationToID,
                        LocationDepotID = c.LocationDepotID.HasValue ? c.CUS_Location.LocationID : c.LocationDepotID,
                        LocationDepotReturnID = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.LocationID : c.LocationDepotReturnID
                    }).ToList())
                    {
                        if (item.LocationDepotID != null)
                        {
                            if (dataRouting.Where(c => c.LocationFromID == item.LocationDepotID && c.LocationToID == item.LocationFromID).Count() == 0)
                                dataRouting.Add(ORDOrder_ToOPS_Routing_Create(model, item.LocationDepotID.Value, item.LocationFromID.Value));
                        }
                        if (dataRouting.Where(c => c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID).Count() == 0)
                            dataRouting.Add(ORDOrder_ToOPS_Routing_Create(model, item.LocationFromID.Value, item.LocationToID.Value));
                        if (item.LocationDepotReturnID != null)
                        {
                            if (dataRouting.Where(c => c.LocationFromID == item.LocationToID && c.LocationToID == item.LocationDepotReturnID).Count() == 0)
                                dataRouting.Add(ORDOrder_ToOPS_Routing_Create(model, item.LocationToID.Value, item.LocationDepotReturnID.Value));
                        }
                    }

                    var dataFTL = new List<DTOOPSDITOMaster>();
                    var dataFTLOrder = model.ORD_Order.Where(c => data.Contains(c.ID) && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew && c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL).Select(c => new
                        {
                            c.ID,
                            c.ETA,
                            c.ETD,
                            c.GroupOfVehicleID,
                            c.ServiceOfOrderID,
                            c.TransportModeID,
                            c.TypeOfOrderID,
                            c.AllowCoLoad
                        }).ToList();
                    foreach (var objOrder in dataFTLOrder)
                    {
                        var objMaster = new DTOOPSDITOMaster();
                        objMaster.ID = objOrder.ID;
                        objMaster.SortOrder = 1;
                        objMaster.IsRouteVendor = false;
                        objMaster.IsRouteCustomer = false;
                        objMaster.IsLoading = false;
                        objMaster.IsBidding = false;
                        objMaster.KM = 0;
                        objMaster.ListLocation = new List<DTOOPSDITOLocation>();
                        objMaster.ListGroupProduct = model.ORD_GroupProduct.Where(c => c.CUSRoutingID != null && c.OrderID == objOrder.ID).Select(c => new DTOOPSDITOGroupProduct
                        {
                            //LockedBy = objOrder.ID + "_",
                            GroupSort = objOrder.ID + "_",
                            OrderGroupProductID = c.ID,
                            CATLocationFromID = c.CUS_Location.LocationID,
                            CATLocationToID = c.CUS_Location1.LocationID,
                            ETD = c.ETD,
                            ETA = c.ETA,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            TonTranfer = c.Ton,
                            CBMTranfer = c.CBM,
                            QuantityTranfer = c.Quantity,
                            TonBBGN = c.Ton,
                            CBMBBGN = c.CBM,
                            QuantityBBGN = c.Quantity,
                            QuantityLoading = 0,
                            DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting,
                            DNCode = string.IsNullOrEmpty(c.DNCode) ? null : c.DNCode,
                            DateDN = c.ORD_Order.RequestDate
                        }).ToList();
                        objMaster.ListProduct = model.ORD_Product.Where(c => c.ORD_GroupProduct.OrderID == objOrder.ID).Select(c => new DTOORDProduct
                            {
                                ID = c.ID,
                                GroupOfProductID = c.GroupProductID,
                                Quantity = c.Quantity
                            }).ToList();

                        var dataFrom = objMaster.ListGroupProduct.Select(c => c.CATLocationFromID).Distinct().ToList();
                        var dataTo = objMaster.ListGroupProduct.Select(c => c.CATLocationToID).Distinct().ToList();

                        foreach (var item in dataFrom)
                        {
                            var objLocation = new DTOOPSDITOLocation();
                            objLocation.LocationID = item;
                            objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            objMaster.ListLocation.Add(objLocation);
                        }
                        foreach (var item in dataTo)
                        {
                            var objLocation = new DTOOPSDITOLocation();
                            objLocation.LocationID = item;
                            objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            objMaster.ListLocation.Add(objLocation);
                        }

                        objMaster.ETA = objOrder.ETA;
                        objMaster.ETD = objOrder.ETD;
                        objMaster.AllowCoLoad = objOrder.AllowCoLoad;
                        objMaster.GroupOfVehicleID = objOrder.GroupOfVehicleID;
                        objMaster.TransportModeID = objOrder.TransportModeID;
                        objMaster.TypeOfOrderID = objOrder.TypeOfOrderID;

                        dataFTL.Add(objMaster);
                    }

                    if (model.ORD_Order.Where(c => data.Contains(c.ID) && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew).Count() > 0)
                    {
                        foreach (var id in data)
                        {
                            var objOrder = model.ORD_Order.FirstOrDefault(c => c.ID == id && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew);
                            if (objOrder != null && objOrder.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL)
                            {
                                model.OPS_Container.RemoveRange(model.OPS_Container.Where(c => c.ORD_Container.OrderID == objOrder.ID).ToList());
                                foreach (var con in model.ORD_Container.Where(c => c.OrderID == objOrder.ID))
                                {
                                    OPS_Container objCon = new OPS_Container();
                                    objCon.CreatedBy = Account.UserName;
                                    objCon.CreatedDate = DateTime.Now;
                                    objCon.ContainerID = con.ID;
                                    objCon.ContainerNo = con.ContainerNo;
                                    objCon.SealNo1 = con.SealNo1;
                                    objCon.SealNo2 = con.SealNo2;
                                    objCon.Ton = con.Ton;
                                    objCon.Note = con.Note;
                                    if (con.LocationDepotID.HasValue)
                                        objCon.LocationDepotID = con.CUS_Location.LocationID;
                                    if (con.LocationDepotReturnID.HasValue)
                                        objCon.LocationDepotReturnID = con.CUS_Location1.LocationID;
                                    objCon.OPSContainerTypeID = -(int)SYSVarType.OPSContainerTypeOpen;
                                    model.OPS_Container.Add(objCon);
                                }
                                model.SaveChanges();
                            }
                        }

                        foreach (var id in data)
                        {
                            var objOrder = model.ORD_Order.FirstOrDefault(c => c.ID == id && c.StatusOfOrderID == -(int)SYSVarType.StatusOfOrderNew);
                            if (objOrder != null)
                            {
                                #region FCL
                                if (objOrder.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL)
                                {
                                    int crIndex = 1, crContainerID = -1, crRoutingID = -1;
                                    Dictionary<int, string> dicGroupSort = new Dictionary<int, string>();
                                    var dataCon = model.ORD_Container.Where(c => c.OrderID == objOrder.ID).Select(c => new
                                    {
                                        c.ID,
                                        c.ETA,
                                        c.ETD,
                                        c.Ton,
                                        c.DateGetEmpty,
                                        c.DateReturnEmpty,
                                        LocationFromID = c.LocationFromID.HasValue ? c.CUS_Location2.LocationID : c.LocationFromID,
                                        LocationToID = c.LocationToID.HasValue ? c.CUS_Location3.LocationID : c.LocationToID,
                                        LocationDepotID = c.LocationDepotID.HasValue ? c.CUS_Location.LocationID : c.LocationDepotID,
                                        LocationDepotReturnID = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.LocationID : c.LocationDepotReturnID,
                                        c.CUSRoutingID,
                                        c.CAT_Packing.NoOfDelivery
                                    }).ToList();
                                    foreach (var item in dataCon.OrderBy(c => c.CUSRoutingID).ThenBy(c => c.NoOfDelivery))
                                    {
                                        var oSort = 2;
                                        var coStatus = SYSVarType.None;
                                        var objRouting = dataRouting.FirstOrDefault();
                                        double? RateGetEmpty = 0;
                                        if (objOrder.CUS_Partner != null)
                                            RateGetEmpty = objOrder.CUS_Partner.RateGetEmpty;
                                        double? RateReturnEmpty = 0;
                                        if (objOrder.CUS_Partner != null)
                                            RateReturnEmpty = objOrder.CUS_Partner.RateReturnEmpty;
                                        var dtfrom = item.ETD.Value;

                                        if (objOrder.ServiceOfOrderID > 0 && objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                        {
                                            coStatus = SYSVarType.StatusOfCOContainerLOGetEmpty;
                                            if (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                                coStatus = SYSVarType.StatusOfCOContainerEXEmpty;

                                            objRouting = dataRouting.FirstOrDefault(c => c.LocationFromID == item.LocationDepotID && c.LocationToID == item.LocationFromID);

                                            if (objRouting != null)
                                            {
                                                dtfrom = ORDOrder_ToOPS_COTOContainer_Create(model, item.ID, objRouting.ID, coStatus, oSort, dtfrom, item.ETA, item.DateGetEmpty, item.DateReturnEmpty, RateGetEmpty, RateReturnEmpty, objRouting.LocationFromID.Value, objRouting.LocationToID.Value);
                                            }
                                            else
                                                throw FaultHelper.BusinessFault(null, null, "Không lấy được cung đường trong container");
                                            oSort += SortCOTOContainerAdd;
                                        }

                                        coStatus = SYSVarType.StatusOfCOContainerLOLaden;
                                        if (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                            coStatus = SYSVarType.StatusOfCOContainerLOEmpty;
                                        else if (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                            coStatus = SYSVarType.StatusOfCOContainerEXLaden;
                                        else if (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                            coStatus = SYSVarType.StatusOfCOContainerIMLaden;

                                        if (coStatus == SYSVarType.StatusOfCOContainerEXLaden || coStatus == SYSVarType.StatusOfCOContainerLOLaden)
                                        {
                                            dtfrom = ORDOrder_ToOPS_COTOContainer_Create_Load(model, item.ID, SYSVarType.StatusOfCOContainerLoad, oSort, dtfrom, item.LocationFromID.Value);
                                            oSort += SortCOTOContainerAdd;
                                        }

                                        objRouting = dataRouting.FirstOrDefault(c => c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID);
                                        if (objRouting != null)
                                        {
                                            dtfrom = ORDOrder_ToOPS_COTOContainer_Create(model, item.ID, objRouting.ID, coStatus, oSort, dtfrom, item.ETA, item.DateGetEmpty, item.DateReturnEmpty, RateGetEmpty, RateReturnEmpty, objRouting.LocationFromID.Value, objRouting.LocationToID.Value);
                                        }
                                        else
                                            throw FaultHelper.BusinessFault(null, null, "Không lấy được cung đường trong container");
                                        oSort += SortCOTOContainerAdd;

                                        if (coStatus == SYSVarType.StatusOfCOContainerIMLaden || coStatus == SYSVarType.StatusOfCOContainerLOLaden)
                                        {
                                            dtfrom = ORDOrder_ToOPS_COTOContainer_Create_Load(model, item.ID, SYSVarType.StatusOfCOContainerUnLoad, oSort, dtfrom, item.LocationToID.Value);
                                            oSort += SortCOTOContainerAdd;
                                        }

                                        //if (objOrder.ServiceOfOrderID > 0 && (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport || objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal))
                                        if (objOrder.ServiceOfOrderID > 0 && objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                        {
                                            coStatus = SYSVarType.StatusOfCOContainerLOReturnEmpty;
                                            if (objOrder.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                                coStatus = SYSVarType.StatusOfCOContainerIMEmpty;

                                            objRouting = dataRouting.FirstOrDefault(c => c.LocationFromID == item.LocationToID && c.LocationToID == item.LocationDepotReturnID);
                                            if (objRouting != null)
                                            {
                                                dtfrom = ORDOrder_ToOPS_COTOContainer_Create(model, item.ID, objRouting.ID, coStatus, oSort, dtfrom, item.ETA, item.DateGetEmpty, item.DateReturnEmpty, RateGetEmpty, RateReturnEmpty, objRouting.LocationFromID.Value, objRouting.LocationToID.Value);
                                            }
                                            else
                                                throw FaultHelper.BusinessFault(null, null, "Không lấy được cung đường trong container");

                                            oSort += SortCOTOContainerAdd;
                                        }

                                        if (item.CUSRoutingID > 0)
                                        {
                                            if (item.NoOfDelivery == 2)
                                            {
                                                if (crContainerID > 0)
                                                {
                                                    if (crRoutingID == item.CUSRoutingID)
                                                    {
                                                        dicGroupSort.Add(crContainerID, objOrder.ID + "_" + crRoutingID + "_" + crIndex);
                                                        dicGroupSort.Add(item.ID, objOrder.ID + "_" + crRoutingID + "_" + crIndex);

                                                        crIndex++;
                                                        crRoutingID = -1;
                                                        crContainerID = -1;
                                                    }
                                                    else
                                                    {
                                                        dicGroupSort.Add(crContainerID, objOrder.ID + "_" + crRoutingID + "_" + crIndex);

                                                        crIndex++;
                                                        crContainerID = item.ID;
                                                        crRoutingID = item.CUSRoutingID.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    crContainerID = item.ID;
                                                    crRoutingID = item.CUSRoutingID.Value;
                                                }
                                            }
                                            else
                                            {
                                                dicGroupSort.Add(item.ID, objOrder.ID + "_" + item.CUSRoutingID + "_" + crIndex);
                                                crIndex++;
                                            }
                                        }
                                        else
                                            dicGroupSort.Add(item.ID, objOrder.ID + "_");
                                    }
                                    if (crRoutingID > 0)
                                        dicGroupSort.Add(crContainerID, objOrder.ID + "_" + crRoutingID + "_" + crIndex);

                                    if (dicGroupSort.Count > 0)
                                    {
                                        foreach (var item in dicGroupSort)
                                        {
                                            var objCon = model.ORD_Container.FirstOrDefault(c => c.ID == item.Key);
                                            if (objCon != null)
                                                objCon.GroupSort = item.Value;
                                        }
                                        model.SaveChanges();
                                    }
                                }
                                #endregion

                                #region FTL
                                else if (objOrder.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL)
                                {
                                    var objMaster = dataFTL.FirstOrDefault(c => c.ID == objOrder.ID);
                                    if (objMaster != null)
                                    {
                                        objMaster.ID = -1;
                                        DI_TOMasterCreate(model, objMaster);
                                    }
                                }
                                #endregion

                                #region LTL
                                else if (objOrder.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL)
                                {
                                    var dataGop = model.ORD_GroupProduct.Where(c => c.OrderID == objOrder.ID && c.CUSRoutingID > 0).Select(c => new { c.ID, c.Ton, c.CBM, c.Quantity, c.CUSRoutingID, c.DNCode }).ToList();
                                    var dataProduct = model.ORD_Product.Where(c => c.ORD_GroupProduct.OrderID == objOrder.ID).Select(c => new { c.ID, c.GroupProductID, c.ProductID, c.Quantity }).ToList();
                                    foreach (var group in dataGop)
                                    {
                                        var objGroup = new OPS_DITOGroupProduct();
                                        objGroup.CreatedBy = Account.UserName;
                                        objGroup.CreatedDate = DateTime.Now;

                                        objGroup.IsInput = true;
                                        objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                        objGroup.GroupSort = objOrder.ID + "_" + group.CUSRoutingID.Value + "_" + group.ID;
                                        objGroup.OrderGroupProductID = group.ID;
                                        objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = group.Ton;
                                        objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = group.CBM;
                                        objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = group.Quantity;
                                        objGroup.QuantityLoading = 0;
                                        objGroup.Note = string.Empty;
                                        objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                        objGroup.DNCode = string.IsNullOrEmpty(group.DNCode) ? null : group.DNCode;
                                        objGroup.DateDN = objOrder.RequestDate;
                                        objGroup.DateConfig = objOrder.RequestDate;
                                        foreach (var product in dataProduct.Where(c => c.GroupProductID == group.ID))
                                        {
                                            var objProduct = new OPS_DITOProduct();
                                            objProduct.CreatedBy = Account.UserName;
                                            objProduct.CreatedDate = DateTime.Now;

                                            objProduct.OrderProductID = product.ID;
                                            objProduct.Quantity = objProduct.QuantityTranfer = objProduct.QuantityBBGN = product.Quantity;
                                            objProduct.Note = string.Empty;

                                            objGroup.OPS_DITOProduct.Add(objProduct);
                                        }
                                        model.OPS_DITOGroupProduct.Add(objGroup);
                                    }
                                }
                                #endregion

                                objOrder.ModifiedBy = Account.UserName;
                                objOrder.ModifiedDate = DateTime.Now;
                                objOrder.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderPlaning;
                                objOrder.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanPlaning;
                                if (objOrder.DateConfig == null)
                                    objOrder.DateConfig = objOrder.RequestDate;
                            }
                        }

                        model.SaveChanges();
                    }

                    HelperKPI.KPITime_SendOPS(model, Account, data);
                    model.SaveChanges();
                    HelperStatus.ORDOrder_Status(model, Account, data);


                    var lstOrderFCLID = model.ORD_Order.Where(c => data.Contains(c.ID) && c.TransportModeID == -(int)SYSVarType.TransportModeFCL).Select(c => c.ID).Distinct().ToList();
                    if (lstOrderFCLID.Count > 0)
                    {
                        string sKey = CUSSettingKey.TenderFCL.ToString();
                        List<CUSSettingsTenderFCL> lstSetting = new List<CUSSettingsTenderFCL>();

                        const int OPSFunctionID = 124;
                        var dataUse = new List<int>();
                        var objUserSetting = model.SYS_UserSetting.FirstOrDefault(c => c.UserID == Account.UserID && c.Key == sKey && c.ReferID == OPSFunctionID);
                        if (objUserSetting != null && !string.IsNullOrEmpty(objUserSetting.Setting))
                        {
                            dataUse = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(objUserSetting.Setting);
                        }
                        var lstObjSetting = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID && c.Key == sKey).Select(c => new { c.ID, c.Setting }).ToList();
                        foreach (var item in lstObjSetting)
                        {
                            var temp = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsTenderFCL>(item.Setting);
                            if (temp.ListVendor != null && temp.ListVendor.Count > 0 && dataUse.Contains(item.ID))
                            {
                                temp.ID = item.ID;
                                lstSetting.Add(temp);
                            }
                        }

                        result = model.ORD_Container.Where(c => data.Contains(c.OrderID) && c.ORD_Order.TransportModeID == -(int)SYSVarType.TransportModeFCL).Select(c => new DTOORDContainer_ToTender
                        {
                            ID = c.ID,
                            OrderID = c.OrderID,
                            OrderCode = c.ORD_Order.Code,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            PackingID = c.PackingID,
                            ContainerNo = c.ContainerNo,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            Ton = c.Ton,
                            Note = c.Note,
                            RomoocID = c.RomoocID,
                            StatusOfContainerID = c.StatusOfContainerID,
                            LocationToID = c.LocationToID,
                            ETD = c.ETD,
                            LocationFromID = c.LocationFromID,
                            ETA = c.ETA,
                            ETDRequest = c.ETDRequest,
                            ETARequest = c.ETARequest,
                            DateGetEmpty = c.DateGetEmpty,
                            DateReturnEmpty = c.DateReturnEmpty,
                            DateDocument = c.DateDocument,
                            DateInspect = c.DateInspect,
                            DateLoading = c.DateLoading,
                            DateShipCome = c.DateShipCome,
                            DateUnloading = c.DateUnloading,
                            CutOffTime = c.CutOffTime,
                            LoadingTime = c.LoadingTime,
                            LocationDepotID = c.LocationDepotID,
                            LocationDepotReturnID = c.LocationDepotReturnID,
                            PackingName = c.CAT_Packing.PackingName,
                            StatusOfContainerName = c.StatusOfContainerID.HasValue ? c.SYS_Var.ValueOfVar : string.Empty,
                            LocationFromCode = c.LocationFromID.HasValue ? c.CUS_Location2.Code : string.Empty,
                            LocationFromName = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                            LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                            LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                            LocationFromWard = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.WardID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                            LocationToCode = c.LocationToID.HasValue ? c.CUS_Location3.Code : string.Empty,
                            LocationToName = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                            LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                            LocationToWard = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.WardID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Ward.WardName : string.Empty : string.Empty,
                            LocationDepotCode = c.LocationDepotID.HasValue ? c.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.LocationDepotID.HasValue ? c.CUS_Location.LocationName : string.Empty,
                            LocationDepotReturnCode = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.LocationDepotReturnID.HasValue ? c.CUS_Location1.LocationName : string.Empty,
                            ServiceOrderID = c.ORD_Order.ServiceOfOrderID,
                            IsFloor = c.IsFloor.HasValue ? c.IsFloor.Value : false,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            UnLoadingTime = c.UnLoadingTime,
                            VesselID = c.VesselID > 0 ? c.VesselID.Value : -1,
                            VesselCode = c.VesselID > 0 ? c.CAT_Vessel.Code : string.Empty,
                            VesselMasterCode = c.VesselMasterCode,
                            CUSRoutingID = c.CUSRoutingID,
                            SettingID = -1,
                            OrderCustomerID = c.ORD_Order.CustomerID
                        }).ToList();

                        foreach (var item in result)
                        {
                            var objCus = lstSetting.Where(c => c.ListCustomer != null && c.ListCustomer.Count(d => d.CustomerID == item.OrderCustomerID) > 0).FirstOrDefault();
                            var objRoute = lstSetting.Where(c => c.ListRouting != null && c.ListRouting.Count(d => d.RoutingID == item.CUSRoutingID) > 0).FirstOrDefault();
                            var objService = lstSetting.Where(c => c.ListService != null && c.ListService.Count(d => d.ServiceOfOrderID == item.ServiceOrderID) > 0).FirstOrDefault();
                            if (objCus != null)
                                item.SettingID = objCus.ID;
                            else if (objRoute != null)
                                item.SettingID = objRoute.ID;
                            else if (objService != null)
                                item.SettingID = objService.ID;
                        }
                        result = result.Where(c => c.SettingID > 0).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_ToTender(List<DTOORDContainer_ToTender> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    string sKey = CUSSettingKey.TenderFCL.ToString();
                    List<CUSSettingsTenderFCL> dataSetting = new List<CUSSettingsTenderFCL>();
                    foreach (var item in model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID == Account.SYSCustomerID && c.Key == sKey).Select(c => new { c.ID, c.Setting }).ToList())
                    {
                        var obj = Newtonsoft.Json.JsonConvert.DeserializeObject<CUSSettingsTenderFCL>(item.Setting);
                        if (obj.ListVendor != null && obj.ListVendor.Count > 0)
                        {
                            obj.ID = item.ID;
                            dataSetting.Add(obj);
                        }
                    }
                    var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => c.ID).ToList();
                    foreach (var item in data)
                    {
                        if (item.SettingID > 0)
                        {
                            var objSetting = dataSetting.FirstOrDefault(c => c.ID == item.SettingID);
                            if (objSetting != null && objSetting.ListVendor != null && objSetting.ListVendor.Count > 0)
                            {
                                var dataRate = new List<OPSCOTORate>();
                                var dataContainer = model.OPS_COTOContainer.Where(c => c.OPS_Container.ContainerID == item.ID && c.COTOMasterID == null).Select(c => new { c.ID, c.OPS_Container.ORD_Container.OrderID }).ToList();
                                if (dataContainer != null || dataContainer.Count > 0)
                                {
                                    foreach (var o in objSetting.ListVendor.OrderBy(c => c.SortOrder).ToList())
                                    {
                                        var objVendor = dataVend.FirstOrDefault(c => c == o.VendorID);
                                        if (objVendor != null)
                                        {
                                            var objR = new OPSCOTORate();
                                            objR.VendorID = o.VendorID;
                                            objR.SortOrder = o.SortOrder;
                                            dataRate.Add(objR);
                                        }
                                    }
                                    if (dataRate.Count > 0)
                                    {
                                        HelperTOMaster.OPSCO_CreateItemSendVendor(model, Account, dataRate, dataContainer.Select(c => c.ID).ToList());
                                    }
                                }                                
                            }
                        }
                    }
                    using (var newmodel = new DataEntities())
                    {
                        HelperStatus.ORDOrder_Status(newmodel, Account, data.Select(c => c.OrderID).Distinct().ToList());
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private int ORDOrder_ToOPS_Routing_Check(DataEntities model, int cusID, int? contractID, int fID, int tID, int fProvinceID, int tProvinceID, int fDistrictID, int tDistrictID, out List<int> dataArea)
        {
            var result = -1;
            dataArea = new List<int>();
            var objContract = model.CAT_Contract.FirstOrDefault(c => c.ID == contractID);
            if (contractID > 0 && objContract != null && objContract.TypeOfContractID == -(int)SYSVarType.TypeOfContractMain)
            {
                var dataRoutingID = model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.CAT_Routing.LocationFromID == fID && c.CAT_Routing.LocationToID == tID).Select(c => c.RoutingID).ToList();
                foreach (var objRouteArea in model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null
                    && c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == fProvinceID) && c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == tProvinceID))
                    .OrderByDescending(c => c.CAT_Routing.ParentID.HasValue).ThenByDescending(c => c.CAT_Routing.ParentID).Select(c => new
                    {
                        c.RoutingID,
                        RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value
                    }))
                {
                    if (model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaFromID && c.LocationID == fID).Count() > 0 && model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaToID && c.LocationID == tID).Count() > 0)
                    {
                        dataRoutingID.Add(objRouteArea.RoutingID);
                    }
                }

                if (dataRoutingID.Count > 0)
                {
                    var objRoutePrice = model.CAT_PriceDIGroupProduct.Where(c => c.CAT_Price.CAT_ContractTerm.ContractID == contractID && dataRoutingID.Contains(c.CAT_ContractRouting.RoutingID) && c.Price > 0).Select(c => new { c.CAT_ContractRouting.RoutingID, Sort = c.CAT_ContractRouting.CAT_Routing.IsLocation ? 1 : 2 }).OrderBy(c => c.Sort).FirstOrDefault();
                    if (objRoutePrice == null)
                        objRoutePrice = model.CAT_PriceDILevelGroupProduct.Where(c => c.CAT_ContractLevel.ContractID == contractID && dataRoutingID.Contains(c.CAT_ContractRouting.RoutingID) && c.Price > 0).Select(c => new { c.CAT_ContractRouting.RoutingID, Sort = c.CAT_ContractRouting.CAT_Routing.IsLocation ? 1 : 2 }).OrderBy(c => c.Sort).FirstOrDefault();
                    if (objRoutePrice != null)
                    {
                        var objCusRouting = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == objRoutePrice.RoutingID);
                        if (objCusRouting != null)
                            result = objCusRouting.ID;
                    }
                    else
                    {
                        int rID = dataRoutingID[0];
                        var objCusRouting = model.CUS_Routing.FirstOrDefault(c => c.CustomerID == cusID && c.RoutingID == rID);
                        if (objCusRouting != null)
                            result = objCusRouting.ID;
                    }
                }

                // Kiểm tra cung đường khác.
                if (result < 0)
                {
                    foreach (var objRouteArea in model.CAT_ContractRouting.Where(c => c.ContractID == contractID && c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null
                        && c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == fProvinceID) && c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == tProvinceID))
                        .OrderByDescending(c => c.CAT_Routing.ParentID.HasValue).ThenByDescending(c => c.CAT_Routing.ParentID).Select(c => new
                        {
                            c.RoutingID,
                            RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                            RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value,
                            DetailFrom = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Select(d => d.DistrictID),
                            DetailTo = c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Select(d => d.DistrictID),
                            IsProvinceFromOnly = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Count(d => d.DistrictID != null) == 0,
                            IsProvinceToOnly = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Count(d => d.DistrictID != null) == 0,
                        }))
                    {
                        if (objRouteArea.DetailFrom != null && objRouteArea.DetailTo != null)
                        {
                            // Cung đường chỉ thiết lập theo tỉnh - tỉnh
                            if (objRouteArea.IsProvinceFromOnly && objRouteArea.IsProvinceToOnly)
                            {
                                dataArea.Add(objRouteArea.RoutingAreaFromID);
                                dataArea.Add(objRouteArea.RoutingAreaToID);
                            }
                            else
                                // Cung đường thiết lập theo tỉnh, quận - tỉnh
                                if (!objRouteArea.IsProvinceFromOnly && objRouteArea.DetailFrom.Contains(fDistrictID) && objRouteArea.IsProvinceToOnly)
                                {
                                    dataArea.Add(objRouteArea.RoutingAreaFromID);
                                    dataArea.Add(objRouteArea.RoutingAreaToID);
                                }
                                else
                                    // Cung đường thiết lập theo tỉnh - tỉnh, quận
                                    if (objRouteArea.IsProvinceFromOnly && !objRouteArea.IsProvinceToOnly && objRouteArea.DetailTo.Contains(tDistrictID))
                                    {
                                        dataArea.Add(objRouteArea.RoutingAreaFromID);
                                        dataArea.Add(objRouteArea.RoutingAreaToID);
                                    }
                                    else
                                        // Cung đường thiết lập theo tỉnh, quận - tỉnh, quận
                                        if (!objRouteArea.IsProvinceFromOnly && objRouteArea.DetailFrom.Contains(fDistrictID) && !objRouteArea.IsProvinceToOnly && objRouteArea.DetailTo.Contains(tDistrictID))
                                        {
                                            dataArea.Add(objRouteArea.RoutingAreaFromID);
                                            dataArea.Add(objRouteArea.RoutingAreaToID);
                                        }
                            if (dataArea.Count > 0)
                                break;
                        }
                    }
                }
            }
            else
            {
                var objRoute = model.CUS_Routing.Where(c => c.CustomerID == cusID &&
                    c.CAT_Routing.LocationFromID == fID && c.CAT_Routing.LocationToID == tID).Select(c => new { c.ID }).FirstOrDefault();
                if (objRoute != null)
                {
                    result = objRoute.ID;
                }
                else
                {
                    foreach (var objRouteArea in model.CUS_Routing.Where(c => c.CustomerID == cusID && c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null
                        && c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == fProvinceID) && c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == tProvinceID))
                        .OrderByDescending(c => c.CAT_Routing.ParentID.HasValue).ThenByDescending(c => c.CAT_Routing.ParentID).Select(c => new
                        {
                            c.ID,
                            RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                            RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value
                        }))
                    {
                        if (model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaFromID && c.LocationID == fID).Count() > 0
                            && model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == objRouteArea.RoutingAreaToID && c.LocationID == tID).Count() > 0)
                        {
                            result = objRouteArea.ID;
                            break;
                        }
                    }
                }
                if (result < 0)
                {
                    foreach (var objRouteArea in model.CUS_Routing.Where(c => c.CustomerID == cusID && c.CAT_Routing.RoutingAreaFromID != null && c.CAT_Routing.RoutingAreaToID != null
                        && c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == fProvinceID) && c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Any(d => d.ProvinceID == tProvinceID))
                        .OrderByDescending(c => c.CAT_Routing.ParentID.HasValue).ThenByDescending(c => c.CAT_Routing.ParentID).Select(c => new
                        {
                            c.RoutingID,
                            RoutingAreaFromID = c.CAT_Routing.RoutingAreaFromID.Value,
                            RoutingAreaToID = c.CAT_Routing.RoutingAreaToID.Value,
                            DetailFrom = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Select(d => d.DistrictID),
                            DetailTo = c.CAT_Routing.CAT_RoutingArea1.CAT_RoutingAreaDetail.Select(d => d.DistrictID),
                            IsProvinceFromOnly = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Count(d => d.DistrictID != null) == 0,
                            IsProvinceToOnly = c.CAT_Routing.CAT_RoutingArea.CAT_RoutingAreaDetail.Count(d => d.DistrictID != null) == 0,
                        }))
                    {
                        if (objRouteArea.DetailFrom != null && objRouteArea.DetailTo != null)
                        {
                            // Cung đường chỉ thiết lập theo tỉnh - tỉnh
                            if (objRouteArea.IsProvinceFromOnly && objRouteArea.IsProvinceToOnly)
                            {
                                dataArea.Add(objRouteArea.RoutingAreaFromID);
                                dataArea.Add(objRouteArea.RoutingAreaToID);
                            }
                            else
                                // Cung đường thiết lập theo tỉnh, quận - tỉnh
                                if (!objRouteArea.IsProvinceFromOnly && objRouteArea.DetailFrom.Contains(fDistrictID) && objRouteArea.IsProvinceToOnly)
                                {
                                    dataArea.Add(objRouteArea.RoutingAreaFromID);
                                    dataArea.Add(objRouteArea.RoutingAreaToID);
                                }
                                else
                                    // Cung đường thiết lập theo tỉnh - tỉnh, quận
                                    if (objRouteArea.IsProvinceFromOnly && !objRouteArea.IsProvinceToOnly && objRouteArea.DetailTo.Contains(tDistrictID))
                                    {
                                        dataArea.Add(objRouteArea.RoutingAreaFromID);
                                        dataArea.Add(objRouteArea.RoutingAreaToID);
                                    }
                                    else
                                        // Cung đường thiết lập theo tỉnh, quận - tỉnh, quận
                                        if (!objRouteArea.IsProvinceFromOnly && objRouteArea.DetailFrom.Contains(fDistrictID) && !objRouteArea.IsProvinceToOnly && objRouteArea.DetailTo.Contains(tDistrictID))
                                        {
                                            dataArea.Add(objRouteArea.RoutingAreaFromID);
                                            dataArea.Add(objRouteArea.RoutingAreaToID);
                                        }
                            if (dataArea.Count > 0)
                                break;
                        }
                    }
                }
            }
            return result;
        }

        private DateTime ORDOrder_ToOPS_COTOContainer_Create(DataEntities model, int containerID, int? routingID, SYSVarType status, int sortOrder, DateTime? ETD, DateTime? ETA, DateTime? getEmpty, DateTime? returnEmpty, double? demurrageTime, double? detentionTime, int fromID, int toID)
        {
            DateTime result = ETD.Value;
            var objCon = model.OPS_Container.FirstOrDefault(c => c.ContainerID == containerID);
            if (objCon != null)
            {
                var obj = new OPS_COTOContainer();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.OPSContainerID = objCon.ID;
                obj.IsClosed = false;
                obj.HasUpload = false;

                //switch (status)
                //{
                //    case SYSVarType.StatusOfCOContainerLOGetEmpty:
                //    case SYSVarType.StatusOfCOContainerEXEmpty:
                //        if (ETD != null && getEmpty != null)
                //        {
                //            obj.ETD = getEmpty;
                //            obj.ETDStart = obj.ETD.Value.AddHours(-2);
                //            //obj.ETA = ETD.Value.AddHours(-2);
                //            //obj.ETAStart = obj.ETA.Value.AddHours(-2);
                //        }
                //        break;
                //    case SYSVarType.StatusOfCOContainerLOLaden:
                //    case SYSVarType.StatusOfCOContainerLOEmpty:
                //    case SYSVarType.StatusOfCOContainerEXLaden:
                //    case SYSVarType.StatusOfCOContainerIMLaden:
                //        if (ETA != null && ETD != null)
                //        {
                //            obj.ETD = ETD;
                //            obj.ETDStart = obj.ETD.Value.AddHours(-2);
                //            //obj.ETA = ETA;
                //            //obj.ETAStart = obj.ETA.Value.AddHours(-2);
                //        }
                //        break;
                //    case SYSVarType.StatusOfCOContainerLOReturnEmpty:
                //    case SYSVarType.StatusOfCOContainerIMEmpty:
                //        if (returnEmpty != null && ETA != null)
                //        {
                //            obj.ETDStart = ETA;
                //            obj.ETD = obj.ETDStart.Value.AddHours(2);
                //            //obj.ETA = returnEmpty;
                //            //obj.ETAStart = obj.ETA.Value.AddHours(-2);
                //        }
                //        break;
                //}

                obj.ETD = ETD;
                obj.ETDStart = obj.ETD.Value.AddHours(-0.1);

                if (obj.ETD != null)
                {
                    obj.ETA = obj.ETD.Value.AddHours(HourMatrixDefault);
                    var matrix = model.CAT_LocationMatrix.Where(c => c.LocationFromID == fromID && c.LocationToID == toID).Select(c => new { c.Hour }).FirstOrDefault();
                    if (matrix != null && matrix.Hour > 0)
                    {
                        obj.ETA = obj.ETD.Value.AddHours(matrix.Hour);
                    }
                    obj.ETAStart = obj.ETA.Value.AddHours(-0.1);
                    result = obj.ETA.Value.AddHours(0.1);

                    obj.DateFromCome = obj.ETD.Value;
                    obj.DateToCome = obj.ETA.Value;
                }


                obj.SortOrder = sortOrder;
                obj.StatusOfCOContainerID = -(int)status;
                obj.LocationFromID = fromID;
                obj.LocationToID = toID;
                obj.IsInput = true;
                obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                obj.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODWait;
                model.OPS_COTOContainer.Add(obj);
            }
            return result;
        }

        private DateTime ORDOrder_ToOPS_COTOContainer_Create_Load(DataEntities model, int containerID, SYSVarType status, int sortOrder, DateTime? ETD, int locationid)
        {
            DateTime result = ETD.Value;
            var objCon = model.OPS_Container.FirstOrDefault(c => c.ContainerID == containerID);
            if (objCon != null)
            {
                var obj = new OPS_COTOContainer();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.OPSContainerID = objCon.ID;
                obj.IsClosed = false;
                obj.HasUpload = false;
                obj.IsSplit = true;
                obj.ETD = ETD;
                obj.ETDStart = obj.ETD.Value.AddHours(-0.1);
                obj.LocationFromID = locationid;
                obj.LocationToID = locationid;

                if (obj.ETD != null)
                {
                    var loc = model.CAT_Location.Where(c => c.ID == locationid).Select(c => new { c.LoadTimeCO, c.UnLoadTimeCO }).FirstOrDefault();
                    if (status == SYSVarType.StatusOfCOContainerLoad)
                    {
                        var timeload = HourInStockDefault;
                        if (loc != null && loc.LoadTimeCO > 0)
                            timeload = loc.LoadTimeCO.Value;
                        obj.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerLoad;
                        obj.ETA = obj.ETD.Value.AddHours(timeload);
                        result = obj.ETA.Value.AddHours(0.1);
                    }
                    else if (status == SYSVarType.StatusOfCOContainerUnLoad)
                    {
                        var timeload = HourInStockDefault;
                        if (loc != null && loc.UnLoadTimeCO > 0)
                            timeload = loc.UnLoadTimeCO.Value;
                        obj.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerUnLoad;
                        obj.ETA = obj.ETD.Value.AddHours(timeload);
                        result = obj.ETA.Value.AddHours(0.1);
                    }
                }
                obj.DateFromCome = obj.ETD.Value;
                obj.DateToCome = obj.ETA.Value;
                obj.SortOrder = sortOrder;
                obj.LocationWaitID = locationid;
                obj.IsInput = true;
                obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                obj.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODWait;
                model.OPS_COTOContainer.Add(obj);
            }
            return result;
        }
        
        private CATRouting ORDOrder_ToOPS_Routing_Create(DataEntities model, int fID, int tID)
        {
            var result = new CATRouting();
            var obj = model.CAT_Routing.FirstOrDefault(c => c.LocationFromID == fID && c.LocationToID == tID);
            if (obj == null)
            {
                obj = new CAT_Routing();
                obj.CreatedBy = Account.UserName;
                obj.CreatedDate = DateTime.Now;
                obj.Code = obj.RoutingName = string.Empty;
                obj.LocationFromID = fID;
                obj.LocationToID = tID;
                obj.IsAreaLast = true;
                obj.IsUse = false;
                model.CAT_Routing.Add(obj);
                model.SaveChanges();
            }
            result.LocationFromID = fID;
            result.LocationToID = tID;
            result.ID = obj.ID;
            return result;
        }

        private DTOOPSDITOMaster DI_TOMasterCreate(DataEntities model, DTOOPSDITOMaster master)
        {
            if (master.ListGroupProduct == null || master.ListGroupProduct.Where(c => c.OrderGroupProductID > 0).Count() == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có dữ liệu nhóm sản phẩm");
            else if (master.ListGroupProduct.Where(c => c.OrderGroupProductID == null || c.OrderGroupProductID < 1).Count() > 0)
                throw FaultHelper.BusinessFault(null, null, "Không nhận dữ liệu nhóm sản phẩm rỗng");
            else if (master.ListLocation == null || master.ListLocation.Count == 0)
                throw FaultHelper.BusinessFault(null, null, "Không có dữ liệu tuyến đường");
            else
            {
                foreach (var item in model.OPS_DITODetail.Where(c => c.OPS_DITO.DITOMasterID == master.ID))
                    model.OPS_DITODetail.Remove(item);
                foreach (var item in model.OPS_DITO.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITO.Remove(item);
                foreach (var item in model.OPS_DITOLocation.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITOLocation.Remove(item);
                foreach (var item in model.OPS_DITOStation.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITOStation.Remove(item);
                foreach (var item in model.OPS_DITORate.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITORate.Remove(item);
                foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID))
                    model.OPS_DITOGroupProduct.Remove(item);
                model.SaveChanges();

                var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == master.ID);
                if (objMaster == null)
                {
                    objMaster = new OPS_DITOMaster();
                    objMaster.CreatedBy = Account.UserName;
                    objMaster.CreatedDate = DateTime.Now;
                    objMaster.SYSCustomerID = Account.SYSCustomerID;

                    objMaster.Code = DI_GetLastCode(model);
                    objMaster.IsHot = false;
                    objMaster.RateTime = 0;
                    objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterPlanning;
                    objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                }
                else
                {
                    objMaster.ModifiedBy = Account.UserName;
                    objMaster.ModifiedDate = DateTime.Now;
                }
                objMaster.SortOrder = master.SortOrder;
                objMaster.ETD = master.ETD;
                objMaster.ETA = master.ETA;
                objMaster.IsRouteVendor = master.IsRouteVendor;
                objMaster.IsRouteCustomer = master.IsRouteCustomer;
                objMaster.IsLoading = master.IsLoading;
                objMaster.IsBidding = master.IsBidding;
                objMaster.BiddingID = master.BiddingID;
                objMaster.Note = master.Note;
                objMaster.GroupOfVehicleID = master.GroupOfVehicleID;
                objMaster.KM = master.KM;
                objMaster.TransportModeID = master.TransportModeID;
                objMaster.TypeOfOrderID = master.TypeOfOrderID;
                objMaster.ContractID = master.ContractID;
                objMaster.DateConfig = master.ETD;
                objMaster.TotalLocation = master.ListGroupProduct.Select(c => c.CATLocationToID).Distinct().ToList().Count;
                if (objMaster.ID < 1)
                    model.OPS_DITOMaster.Add(objMaster);

                Dictionary<int, OPS_DITOGroupProduct> dicGroup = new Dictionary<int, OPS_DITOGroupProduct>();
                foreach (var gop in master.ListGroupProduct)
                {
                    var objGroup = new OPS_DITOGroupProduct();
                    objGroup.CreatedBy = Account.UserName;
                    objGroup.CreatedDate = DateTime.Now;

                    objGroup.IsInput = true;
                    objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    objGroup.GroupSort = gop.GroupSort;
                    objGroup.OPS_DITOMaster = objMaster;
                    objGroup.OrderGroupProductID = gop.OrderGroupProductID;
                    objGroup.Ton = gop.Ton;
                    objGroup.CBM = gop.CBM;
                    objGroup.Quantity = gop.Quantity;
                    objGroup.TonTranfer = gop.TonTranfer;
                    objGroup.CBMTranfer = gop.CBMTranfer;
                    objGroup.QuantityTranfer = gop.QuantityTranfer;
                    objGroup.TonBBGN = gop.TonBBGN;
                    objGroup.CBMBBGN = gop.CBMBBGN;
                    objGroup.QuantityBBGN = gop.QuantityBBGN;
                    objGroup.QuantityLoading = gop.QuantityLoading;
                    objGroup.Note = gop.Note;
                    objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    objGroup.DNCode = gop.DNCode;
                    objGroup.DateDN = gop.DateDN;
                    model.OPS_DITOGroupProduct.Add(objGroup);
                    if (!dicGroup.ContainsKey(objGroup.OrderGroupProductID.Value))
                        dicGroup.Add(objGroup.OrderGroupProductID.Value, objGroup);

                    // Tạo OPSProduct
                    foreach (var itemProduct in master.ListProduct.Where(c => c.GroupOfProductID == objGroup.OrderGroupProductID))
                    {
                        var objProduct = new OPS_DITOProduct();
                        objProduct.CreatedBy = Account.UserName;
                        objProduct.CreatedDate = DateTime.Now;

                        objProduct.OrderProductID = itemProduct.ID;
                        objProduct.Quantity = objProduct.QuantityTranfer = objProduct.QuantityBBGN = itemProduct.Quantity;
                        objProduct.Note = string.Empty;

                        objGroup.OPS_DITOProduct.Add(objProduct);
                    }
                }

                int sOrder = 1;
                int sLocation = 1;
                int soLocation = 1;
                var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                if (!string.IsNullOrEmpty(sSet))
                {
                    var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                    if (oSet != null)
                    {
                        var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                        if (objCheck != null)
                            sLocation = oSet.LocationFromID;
                        objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                        if (objCheck != null)
                            soLocation = oSet.LocationToID;
                    }
                }

                var oLocation = new OPS_DITOLocation();
                oLocation.CreatedBy = Account.UserName;
                oLocation.CreatedDate = DateTime.Now;
                oLocation.LocationID = sLocation;
                oLocation.SortOrder = sOrder++;
                oLocation.OPS_DITOMaster = objMaster;
                oLocation.DateComeEstimate = objMaster.ETD;
                oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                model.OPS_DITOLocation.Add(oLocation);

                int tmpID = -1;
                foreach (var oL in master.ListLocation)
                {
                    if (sOrder == oLocation.SortOrder + 1 && oL.LocationID == oLocation.LocationID)
                    {
                        oLocation.TypeOfTOLocationID = oL.TypeOfTOLocationID;
                    }
                    else
                    {
                        var objLo = new OPS_DITOLocation();
                        objLo.CreatedBy = Account.UserName;
                        objLo.CreatedDate = DateTime.Now;
                        objLo.LocationID = oL.LocationID;
                        objLo.SortOrder = sOrder++;
                        objLo.DateComeEstimate = oL.DateComeEstimate;
                        objLo.OPS_DITOMaster = objMaster;
                        objLo.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                        objLo.TypeOfTOLocationID = oL.TypeOfTOLocationID;
                        model.OPS_DITOLocation.Add(objLo);
                    }
                    tmpID = oL.LocationID.Value;
                }

                if (tmpID != soLocation)
                {
                    var osLocation = new OPS_DITOLocation();
                    osLocation.CreatedBy = Account.UserName;
                    osLocation.CreatedDate = DateTime.Now;
                    osLocation.LocationID = soLocation;
                    osLocation.SortOrder = sOrder++;
                    osLocation.OPS_DITOMaster = objMaster;
                    osLocation.DateComeEstimate = objMaster.ETA;
                    osLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                    osLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                    model.OPS_DITOLocation.Add(osLocation);
                }

                objMaster.TotalLocation = sOrder - 1;

                model.SaveChanges();
                objMaster.Code = DICodePrefix + objMaster.ID.ToString(DICodeNum);
                model.SaveChanges();

                master.ID = objMaster.ID;

                return master;
            }
        }

        private string DI_GetLastCode(DataEntities model)
        {
            long idx = 1;
            var last = model.OPS_DITOMaster.OrderByDescending(c => c.ID).Select(c => new { c.ID }).FirstOrDefault();
            if (last != null)
                idx = Convert.ToInt64(last.ID) + 1;
            else
                idx = 1;
            return DICodePrefix + idx.ToString(DICodeNum);
        }

        private void RoutingAreaLocation_Update(DataEntities model, int areaID)
        {
            try
            {
                if (model.CAT_RoutingAreaDetail.Count(c => c.RoutingAreaID == areaID) > 0)
                {
                    // Xóa AreaLocation cũ
                    foreach (var item in model.CAT_RoutingAreaLocation.Where(c => c.RoutingAreaID == areaID))
                        model.CAT_RoutingAreaLocation.Remove(item);

                    var lstWardID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.WardID.HasValue).Select(c => c.WardID.Value).Distinct().ToArray();
                    var lstDistrictID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.DistrictID.HasValue && c.WardID == null).Select(c => c.DistrictID.Value).Distinct().ToArray();
                    var lstProvinceID = model.CAT_RoutingAreaDetail.Where(c => c.RoutingAreaID == areaID && c.ProvinceID.HasValue && c.DistrictID == null && c.WardID == null).Select(c => c.ProvinceID.Value).Distinct().ToArray();

                    var lstLocation = model.CAT_Location.Where(c => (c.WardID.HasValue && lstWardID.Contains(c.WardID.Value)) || lstDistrictID.Contains(c.DistrictID) || lstProvinceID.Contains(c.ProvinceID)).Select(c => c.ID).ToArray();
                    foreach (var location in lstLocation)
                    {
                        CAT_RoutingAreaLocation objLocation = new CAT_RoutingAreaLocation();
                        objLocation.CreatedBy = Account.UserName;
                        objLocation.CreatedDate = DateTime.Now;
                        objLocation.LocationID = location;
                        objLocation.RoutingAreaID = areaID;
                        model.CAT_RoutingAreaLocation.Add(objLocation);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_UpdateWarning()
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                    var objSetting = ORD_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;

                    if (objSetting != null)
                        dtWarning = objSetting.TimeDelayWarning > 0 ? DateTime.Now.AddHours(objSetting.TimeDelayWarning) : DateTime.Now;
                    int iRequest = -(int)SYSVarType.StatusOfOrderRequest;
                    int iReceive = -(int)SYSVarType.StatusOfOrderReceived;
                    int iImport = -(int)SYSVarType.ServiceOfOrderImport;
                    int iExport = -(int)SYSVarType.ServiceOfOrderExport;
                    int iMain = -(int)SYSVarType.TypeOfContractMain;
                    int iLCL = -(int)SYSVarType.TransportModeLCL;
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    int iFTL = -(int)SYSVarType.TransportModeFTL;
                    int iLTL = -(int)SYSVarType.TransportModeLTL;

                    var dataOrder = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfOrderID > iRequest && c.StatusOfOrderID < iReceive
                        && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.CustomerID) && c.ParentID == null && c.OrderRefID == null : isAdmin == true ? true : false)).Select(c => new { c.ID, TransportModeID = c.CAT_TransportMode.TransportModeID, c.StatusOfOrderID }).ToList();
                    var dataOrderDI = dataOrder.Where(c => c.TransportModeID == iFTL || c.TransportModeID == iLTL).Select(c => c.ID).ToList();
                    var dataOrderCO = dataOrder.Where(c => c.TransportModeID == iFCL || c.TransportModeID == iLCL).Select(c => c.ID).ToList();
                    var dataOPSDI = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && dataOrderDI.Contains(c.ORD_GroupProduct.OrderID)).Select(c => new
                    {
                        ID = c.ID,
                        OrderGroupProductID = c.OrderGroupProductID,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        TOMasterID = c.DITOMasterID,
                        TOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                        StatusTOMaster = c.DITOMasterID > 0 ? c.OPS_DITOMaster.StatusOfDITOMasterID : -1,
                        ShipmentNo = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        StatusTO = c.DITOGroupProductStatusID,
                        StatusPOD = c.DITOGroupProductStatusPODID
                    }).ToList();

                    var dataOPSCO = model.OPS_COTOContainer.Where(c => dataOrderCO.Contains(c.OPS_Container.ORD_Container.OrderID) && c.ParentID == null).Select(c => new
                    {
                        ID = c.ID,
                        OrderID = c.OPS_Container.ORD_Container.OrderID,
                        ORDContainerID = c.OPS_Container.ContainerID,
                        TOMasterID = c.COTOMasterID,
                        TOMasterCode = c.COTOMasterID > 0 ? c.OPS_COTOMaster.Code : string.Empty,
                        StatusTOMaster = c.COTOMasterID > 0 ? c.OPS_COTOMaster.StatusOfCOTOMasterID : -1,
                        ShipmentNo = c.OPS_Container.ORD_Container.ContainerNo,
                        StatusTO = c.TypeOfStatusContainerID,
                        StatusPOD = c.TypeOfStatusContainerPODID
                    }).ToList();

                    foreach (var ordGroup in model.ORD_GroupProduct.Where(c => dataOrderDI.Contains(c.OrderID)))
                    {
                        var lstOPSGroup = dataOPSDI.Where(c => c.OrderGroupProductID == ordGroup.ID);
                        bool flag = false;
                        if (objSetting.WarningETD)
                        {
                            if (lstOPSGroup.Any(c => c.TOMasterID == null))
                            {
                                if (ordGroup.ETD.HasValue && ordGroup.ETD < dtWarning)
                                {
                                    if (ordGroup.ETD < DateTime.Now)
                                    {
                                        flag = true;
                                        ordGroup.WarningTime = DateTime.Now.Subtract(ordGroup.ETD.Value).TotalHours;
                                        ordGroup.WarningTimeText = "Trễ " + Math.Round(ordGroup.WarningTime.Value, 1) + " giờ để lập chuyến";
                                    }
                                    else
                                    {
                                        flag = true;
                                        ordGroup.WarningTime = ordGroup.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        ordGroup.WarningTimeText = "Còn " + Math.Round(ordGroup.WarningTime.Value, 1) + " giờ để lập chuyến";
                                    }
                                }
                            }
                            else if (ordGroup.ETDRequest.HasValue && ordGroup.ETD.HasValue && ordGroup.ETD > ordGroup.ETDRequest)
                            {
                                flag = true;
                                ordGroup.WarningTime = ordGroup.ETD.Value.Subtract(ordGroup.ETDRequest.Value).TotalHours;
                                ordGroup.WarningTimeText = "Trễ " + Math.Round(ordGroup.WarningTime.Value, 1) + " giờ yêu cầu đến kho của khách hàng";
                            }
                        }
                        if (objSetting.WarningETA && flag != true)
                        {
                            if (ordGroup.ETARequest.HasValue && ordGroup.ETA.HasValue && ordGroup.ETA > ordGroup.ETARequest)
                            {
                                flag = true;
                                ordGroup.WarningTime = ordGroup.ETA.Value.Subtract(ordGroup.ETARequest.Value).TotalHours;
                                ordGroup.WarningTimeText = "Trễ " + Math.Round(ordGroup.WarningTime.Value, 1) + " giờ yêu cầu giao hàng của khách hàng";
                            }
                            else if (ordGroup.ETA.HasValue && ordGroup.ETA < dtWarning)
                            {
                                flag = true;
                                ordGroup.WarningTime = dtWarning.Subtract(ordGroup.ETA.Value).TotalHours;
                                ordGroup.WarningTimeText = "Trễ " + Math.Round(ordGroup.WarningTime.Value, 1) + " giờ để giao hàng";
                            }
                        }
                    }

                    foreach (var ordCo in model.ORD_Container.Where(c => dataOrderCO.Contains(c.OrderID)))
                    {
                        var lstOPSCO = dataOPSCO.Where(c => c.ORDContainerID == ordCo.ID);
                        bool flag = false;
                        if (objSetting.WarningETD)
                        {
                            if (lstOPSCO.Any(c => c.TOMasterID == null))
                            {
                                if (ordCo.ETD.HasValue && ordCo.ETD < dtWarning)
                                {
                                    if (ordCo.ETD < DateTime.Now)
                                    {
                                        flag = true;
                                        ordCo.WarningTime = DateTime.Now.Subtract(ordCo.ETD.Value).TotalHours;
                                        ordCo.WarningTimeText = "Trễ " + Math.Round(ordCo.WarningTime.Value, 1) + " giờ để lập chuyến";
                                    }
                                    else
                                    {
                                        flag = true;
                                        ordCo.WarningTime = ordCo.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        ordCo.WarningTimeText = "Còn " + Math.Round(ordCo.WarningTime.Value, 1) + " giờ để lập chuyến";
                                    }
                                }
                            }
                            else if (ordCo.ETDRequest.HasValue && ordCo.ETD.HasValue && ordCo.ETD > ordCo.ETDRequest)
                            {
                                flag = true;
                                ordCo.WarningTime = ordCo.ETD.Value.Subtract(ordCo.ETDRequest.Value).TotalHours;
                                ordCo.WarningTimeText = "Trễ " + Math.Round(ordCo.WarningTime.Value, 1) + " giờ yêu cầu đến kho của khách hàng";
                            }
                        }
                        if (objSetting.WarningETA && flag != true)
                        {
                            if (ordCo.ETA.HasValue && ordCo.CutOffTime.HasValue && ordCo.ETA > ordCo.CutOffTime)
                            {
                                flag = true;
                                ordCo.WarningTime = ordCo.ETA.Value.Subtract(ordCo.CutOffTime.Value).TotalHours;
                                ordCo.WarningTimeText = "Trễ " + Math.Round(ordCo.WarningTime.Value, 1) + " giờ ra cảng / trả container";
                            }
                        }
                    }

                    model.SaveChanges();

                    foreach (var ordDI in model.ORD_Order.Where(c => dataOrderDI.Contains(c.ID)))
                    {
                        var check = model.ORD_GroupProduct.Where(c => c.OrderID == ordDI.ID && c.WarningTime > 0).FirstOrDefault();
                        if (check != null)
                        {
                            ordDI.WarningTime = check.WarningTime;
                            ordDI.WarningTimeText = check.WarningTimeText;
                        }
                    }
                    foreach (var ordCO in model.ORD_Order.Where(c => dataOrderCO.Contains(c.ID)))
                    {
                        var check = model.ORD_Container.Where(c => c.OrderID == ordCO.ID && c.WarningTime > 0).FirstOrDefault();
                        if (check != null)
                        {
                            ordCO.WarningTime = check.WarningTime;
                            ordCO.WarningTimeText = check.WarningTimeText;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region ORDOrder_DN

        public DTOResult ORDOrder_DN_List(string request, int cusID)
        {
            try
            {
                int iComplete = -(int)SYSVarType.DITOGroupProductStatusComplete;
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    using (var helper = new CopyHelper())
                    {
                        var query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                            && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : isAdmin == true ? true : false)
                            && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOORDOrderDN
                        {
                            ID = c.ID,
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            DNCode = c.DNCode == null ? string.Empty : c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETD = c.ORD_GroupProduct.ETD,
                            Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                            QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            MasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            MasterID = c.DITOMasterID,
                            RegNo = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            DriverName = c.DITOMasterID.HasValue && isAdmin ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            DriverTel = c.DITOMasterID.HasValue && isAdmin ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DriverCard = c.DITOMasterID.HasValue && isAdmin ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            IsComplete = c.DITOGroupProductStatusID == iComplete ? 1 : 0,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadEnd = c.DateToLoadEnd,
                            DateToLoadStart = c.DateToLoadStart,
                            DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            ETDMaster = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.ETD : null,
                            Weight = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.MaxWeight : null,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            ServiceOfOrderID = c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID,
                            TransportModeID = c.ORD_GroupProduct.ORD_Order.TransportModeID,
                            TypeOfView = 1,
                            StatusID = c.DITOGroupProductStatusID == iComplete ? 1 : c.DITOMasterID.HasValue ? 2 : 3,
                            ContractID = c.ORD_GroupProduct.ORD_Order.ContractID,
                            URL = string.Empty,
                            IsComment = model.CAT_Comment.Any(d => d.ReferID == c.ID),
                            Note = c.Note,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? true : false,
                            TransportModeIDTemp = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID,
                            ServiceOfOrderIDTemp = c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID : -1,
                        }).ToDataSourceResult(CreateRequest(request));

                        foreach (DTOORDOrderDN item in query.Data)
                        {
                            item.TypeOfView = ORDOrder_GetView(item.ServiceOfOrderIDTemp, item.TransportModeIDTemp);
                            var dataKpi = model.KPI_KPITime.Where(c => c.DITOGroupProductID == item.ID).Select(c => new
                            {
                                ID = c.ID,
                                KPIID = c.KPIID,
                                IsKPI = c.IsKPI,
                                KPIDate = c.KPIDate
                            }).ToList();
                            var objKpiOPS = dataKpi.Where(c => c.KPIID == (int)KPICode.OPS).FirstOrDefault();
                            if (objKpiOPS != null)
                            {
                                item.KPIOPS = objKpiOPS.KPIDate;
                            }
                            var objKpiPOD = dataKpi.Where(c => c.KPIID == (int)KPICode.POD).FirstOrDefault();
                            if (objKpiPOD != null)
                            {
                                item.KPIPOD = objKpiPOD.KPIDate;
                            }
                        }
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOORDOrderDN>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDOrderDN> ORDOrder_DN_SORest_List(int cusID, bool IsAll, DateTime? fromDate, DateTime? toDate)
        {
            try
            {
                List<DTOORDOrderDN> result = new List<DTOORDOrderDN>();
                using (var model = new DataEntities())
                {
                    if (IsAll || (fromDate == null && toDate == null))
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOORDOrderDN
                        {
                            ID = c.ID,
                            SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETD = c.ORD_GroupProduct.ETD,
                            Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                            QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            Note = c.ORD_GroupProduct.Description,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                        }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                    }
                    else
                    {
                        if (fromDate.HasValue && toDate.HasValue)
                        {
                            fromDate = fromDate.Value.Date;
                            toDate = toDate.Value.Date;
                            result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                            {
                                ID = c.ID,
                                SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                ETARequest = c.ORD_GroupProduct.ETARequest,
                                ETD = c.ORD_GroupProduct.ETD,
                                Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                Note = c.ORD_GroupProduct.Description,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                            }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                        }
                        else
                        {
                            if (fromDate.HasValue)
                            {
                                fromDate = fromDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                            else
                            {
                                toDate = toDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDOrderDN> ORDOrder_DN_DNRest_List(int cusID, bool IsAll, DateTime? fromDate, DateTime? toDate)
        {
            try
            {
                List<DTOORDOrderDN> result = new List<DTOORDOrderDN>();
                using (var model = new DataEntities())
                {
                    if (IsAll || (fromDate == null && toDate == null))
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && !string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOORDOrderDN
                        {
                            ID = c.ID,
                            SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                            DNCode = c.DNCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETD = c.ORD_GroupProduct.ETD,
                            Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                            QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            Note = c.ORD_GroupProduct.Description,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                        }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                    }
                    else
                    {
                        if (fromDate.HasValue && toDate.HasValue)
                        {
                            fromDate = fromDate.Value.Date;
                            toDate = toDate.Value.Date;
                            result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && !string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                            {
                                ID = c.ID,
                                SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                DNCode = c.DNCode,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                ETARequest = c.ORD_GroupProduct.ETARequest,
                                ETD = c.ORD_GroupProduct.ETD,
                                Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                Note = c.ORD_GroupProduct.Description,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                            }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                        }
                        else
                        {
                            if (fromDate.HasValue)
                            {
                                fromDate = fromDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && !string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    DNCode = c.DNCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                            else
                            {
                                toDate = toDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && !string.IsNullOrEmpty(c.DNCode) && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    DNCode = c.DNCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDOrderDN> ORDOrder_DN_AllRest_List(int cusID, bool IsAll, DateTime? fromDate, DateTime? toDate)
        {
            try
            {
                List<DTOORDOrderDN> result = new List<DTOORDOrderDN>();
                using (var model = new DataEntities())
                {
                    if (IsAll || (fromDate == null && toDate == null))
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => new DTOORDOrderDN
                        {
                            ID = c.ID,
                            SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                            DNCode = c.DNCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETD = c.ORD_GroupProduct.ETD,
                            Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                            QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            Note = c.ORD_GroupProduct.Description,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                        }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                    }
                    else
                    {
                        if (fromDate.HasValue && toDate.HasValue)
                        {
                            fromDate = fromDate.Value.Date;
                            toDate = toDate.Value.Date;
                            result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                            {
                                ID = c.ID,
                                SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                DNCode = c.DNCode,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                ETARequest = c.ORD_GroupProduct.ETARequest,
                                ETD = c.ORD_GroupProduct.ETD,
                                Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                Note = c.ORD_GroupProduct.Description,
                                Note1 = c.Note1,
                                Note2 = c.Note2,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                            }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                        }
                        else
                        {
                            if (fromDate.HasValue)
                            {
                                fromDate = fromDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) >= fromDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    DNCode = c.DNCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                            else
                            {
                                toDate = toDate.Value.Date;
                                result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.DITOMasterID == null && c.ORD_GroupProduct.ORD_Order.CustomerID == cusID && DbFunctions.TruncateTime(c.ORD_GroupProduct.ORD_Order.RequestDate) <= toDate).Select(c => new DTOORDOrderDN
                                {
                                    ID = c.ID,
                                    SOCode = c.ORD_GroupProduct.SOCode == null ? string.Empty : c.ORD_GroupProduct.SOCode,
                                    DNCode = c.DNCode,
                                    OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                    ETARequest = c.ORD_GroupProduct.ETARequest,
                                    ETD = c.ORD_GroupProduct.ETD,
                                    Quantity = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.Ton * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBM : c.Quantity,
                                    QuantityTransfer = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? c.TonTranfer * 1000 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? c.CBMTranfer : c.QuantityTranfer,
                                    LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                                    LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                                    LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                                    LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                                    LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                                    LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                                    CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                                    Note = c.ORD_GroupProduct.Description,
                                    Note1 = c.Note1,
                                    Note2 = c.Note2,
                                    RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                    EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty
                                }).OrderBy(c => c.RequestDate).ThenBy(c => c.OrderCode).ToList();
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Excel
        const int digitsOfRound = 6;
        public List<AddressSearchItem> ORDOrder_Excel_Location_Create(List<DTOORDOrder_Import_PartnerLocation> data)
        {
            try
            {
                List<AddressSearchItem> result = new List<AddressSearchItem>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    result = HelperRouting.ORDOrder_Excel_Location_Create(model, Account, data);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_Excel_Product_Create(List<DTOORDOrder_Import_ProductNew> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var itemGroup in data.GroupBy(c => c.GroupOfProductID))
                    {
                        var objGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == itemGroup.Key);
                        if (objGroup != null)
                        {
                            foreach (var item in itemGroup)
                            {
                                if (item.PackingID < 1)
                                    throw FaultHelper.BusinessFault(null, null, "Hàng hóa " + item.ProductCode + " chưa thiết lập loại UOM");
                                var obj = model.CUS_Product.FirstOrDefault(c => c.GroupOfProductID == objGroup.ID && c.Code.ToLower() == item.ProductCode.ToLower());
                                if (obj == null)
                                {
                                    obj = new CUS_Product();
                                    obj.CreatedBy = Account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.GroupOfProductID = objGroup.ID;
                                    obj.Code = item.ProductCode;
                                    obj.ProductName = item.ProductName;
                                    obj.PackingID = item.PackingID;
                                    obj.CBM = item.CBM > 0 ? item.CBM / 1000000 : 0;
                                    obj.Description = !string.IsNullOrEmpty(item.Description) ? item.Description : string.Empty;
                                    obj.Height = item.Height > 0 ? item.Height / 100 : 0;
                                    obj.Length = item.Length > 0 ? item.Length / 100 : 0;
                                    obj.PackingID = item.PackingID;
                                    obj.Weight = item.Weight > 0 ? item.Weight / 1000 : 0;
                                    obj.Width = item.Width > 0 ? item.Width / 100 : 0;
                                    obj.IsKg = item.IsKg;
                                    obj.IsDefault = item.IsDefault;
                                    obj.TempMax = item.TempMax;
                                    obj.TempMin = item.TempMin;
                                    model.CUS_Product.Add(obj);
                                }
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ImportCheck ORDOrder_Excel_Import_Data(int cusID)
        {
            try
            {
                int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;

                DTOORDOrder_ImportCheck result = new DTOORDOrder_ImportCheck();
                result.Setting = new DTOSYSSetting();
                result.CUSSetting = new CUSSettingsCutOffTimeSuggest();
                result.SYSCustomerID = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    result.Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    result.CUSSetting = HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Get(model, Account, cusID);
                    result.ListCode = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOORDOrder { Code = c.Code, CustomerID = c.CustomerID, RequestDate = c.RequestDate, SYSCustomerID = c.SYSCustomerID }).ToList();

                    result.ListCustomer = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS && (isAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName,
                        IsFindEconomicZone = c.IsFindEconomicZone,
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName,
                        PackingID = 0,
                        PackingName = string.Empty
                    }).ToList();

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToList();

                    result.ListDepot = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListDistributor = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProductInStock.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.GroupOfProductID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        StockID = c.CUS_Location.LocationID,
                        IsDefault = c.CUS_GroupOfProduct.IsDefault,
                        PackingType = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? 1 : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? 2 : 3,
                        DefaultPackingID = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.ID : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.ID : defTU.ID,
                        DefaultPackingName = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.PackingName : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.PackingName : defTU.PackingName
                    }).ToList();

                    result.ListSeaPort = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        CustomerID = c.CustomerID,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListCarrier = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    result.ListCUSLocation = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Ton = c.Ton.HasValue ? c.Ton.Value : 0,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListDistributorLocation = model.CUS_Location.Where(c => c.CusPartID != null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID
                    }).ToList();

                    result.ListRoute = model.CUS_Routing.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        CustomerID = c.CustomerID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID
                    }).ToList();

                    var lstRoutingAreaToID = result.ListRoute.Where(c => c.RoutingAreaToID > 0).Select(c => c.RoutingAreaToID.Value).Distinct().ToList();

                    result.ListRouteArea = model.CAT_RoutingAreaDetail.Where(c => lstRoutingAreaToID.Contains(c.RoutingAreaID)).Select(c => new CATRoutingAreaDetail
                        {
                            RoutingAreaID = c.RoutingAreaID,
                            ProvinceID = c.ProvinceID,
                            DistrictID = c.DistrictID,
                        }).ToList();

                    result.ListServiceOfOrder = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            ServiceOfOrderID = c.ServiceOfOrderID,
                            ServiceOfOrderName = c.SYS_Var.ValueOfVar
                        }).ToList();

                    result.ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    DateTime dtNow = DateTime.Now.Date;
                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.CAT_Contract.SYSCustomerID == Account.SYSCustomerID && c.CAT_Contract.CustomerID > 0 && c.CAT_Contract.CUS_Customer.IsSystem == false
                        && (c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                        && (isCus && isAdmin ? true : !isCus ? c.CAT_Contract.CustomerID == cusID : Account.ListCustomerID.Contains(c.CAT_Contract.CustomerID.Value))
                        && c.CAT_Contract.EffectDate <= dtNow && c.CAT_Contract.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                    {
                        ID = c.ContractID,
                        ContractTermID = c.ID,
                        ContractNo = c.DisplayName,
                        CustomerID = c.CAT_Contract.CustomerID.Value,
                        ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        TransportModeID = c.CAT_Contract.TransportModeID.Value
                    }).ToList();

                    result.ListContract = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID > 0 && c.CUS_Customer.IsSystem == false
                    && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                    && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID.Value))
                    && c.EffectDate <= dtNow && c.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                    {
                        ID = c.ID,
                        ContractTermID = -1,
                        ContractNo = c.DisplayName,
                        CustomerID = c.CustomerID.Value,
                        //ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        TransportModeID = c.TransportModeID.Value
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int ORDOrder_Excel_Import(int sID, CATFile file, List<DTOORDOrder_Import> data, bool isMon)
        {
            try
            {
                var isAllowed = Account.ListActionCode.Contains(SYSActionCode.ActExcel.ToString());
                if (!isAllowed)
                    throw FaultHelper.BusinessFault(null, null, "Tài khoản không có quyền thực hiện chức năng này.");

                using (var model = new DataEntities())
                {
                    #region Check data
                    model.EventAccount = Account; model.EventRunning = false;

                    var setting = ORDOrder_Excel_Setting_Get(sID);
                    var sysSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    //Order by CustomerID
                    data = data.OrderBy(c => c.CustomerID).ToList();

                    //Check code
                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        if (sysSetting.IsUniqueOrderCode)
                        {
                            if (model.ORD_Order.Count(c => c.CustomerID == item.CustomerID && c.Code == item.Code && c.SYSCustomerID == Account.SYSCustomerID) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "] trùng!");
                        }
                        else
                        {
                            if (model.ORD_Order.Count(c => item.RequestDate != null && c.CustomerID == item.CustomerID && c.Code == item.Code && c.SYSCustomerID == Account.SYSCustomerID && c.RequestDate == item.RequestDate) > 0)
                                throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "], Ngày yêu cầu [" + item.RequestDate.Value.ToString("dd/MM/yyyy HH:mm") + "] trùng!");
                        }
                    }

                    //Get common data.
                    var fData = data.FirstOrDefault();
                    var typeContract = -(int)SYSVarType.TypeOfContractSpotRate;

                    if (fData.ContractID > 0)
                    {
                        var oContract = model.CAT_Contract.FirstOrDefault(c => c.ID == fData.ContractID);
                        if (oContract == null)
                            throw FaultHelper.BusinessFault(null, null, "Hợp đồng không tồn tại!");
                        else if (oContract.TypeOfContractID > 0)
                            typeContract = oContract.TypeOfContractID.Value;
                    }
                    #endregion

                    #region Package
                    //Lưu thông tin Packet.
                    int? pID = null;
                    try
                    {
                        CAT_File objF = new CAT_File();
                        objF.SYSCustomerID = Account.SYSCustomerID;
                        objF.CreatedBy = Account.UserName;
                        objF.CreatedDate = DateTime.Now;
                        objF.FileName = file.FileName;
                        objF.FileExt = file.FileExt;
                        objF.FilePath = file.FilePath;

                        var tCode = model.CAT_TypeOfFile.FirstOrDefault(c => c.Code == file.TypeOfFileCode);
                        if (tCode != null)
                        {
                            objF.TypeOfFileID = tCode.ID;
                        }

                        objF.ReferID = file.ReferID;

                        model.CAT_File.Add(objF);
                        model.SaveChanges();

                        ORD_Packet objP = new ORD_Packet();
                        objP.SYSCustomerID = Account.SYSCustomerID;
                        objP.CreatedBy = Account.UserName;
                        objP.CreatedDate = DateTime.Now;
                        objP.Code = "";
                        objP.PacketName = setting != null ? setting.Name + DateTime.Now.ToString("dd-MM-yyyy") : "";
                        objP.FileID = objF.ID;
                        objP.CUSSettingID = sID;

                        model.ORD_Packet.Add(objP);
                        model.SaveChanges();
                        pID = objP.ID;
                    }
                    catch (Exception) { }
                    #endregion

                    #region Lưu đơn hàng
                    List<DTOORDOrder_Import_Product> lstImportGroup = new List<DTOORDOrder_Import_Product>();
                    //Get ListCustomer
                    var lstCustomerID = data.Where(c => c.ExcelSuccess).Select(c => c.CustomerID).Distinct().ToList();
                    var lstCustomer = model.CUS_Customer.Where(c => lstCustomerID.Contains(c.ID)).Select(c => new { c.ID, c.IsFindEconomicZone }).ToList();

                    //Get dataLocation
                    var cCustomerID = fData.CustomerID;
                    var dataCUSLocation = model.CUS_Location.Where(c => c.CustomerID == cCustomerID).Select(c => new { c.ID, c.LocationID }).ToList();
                    var dataRouting = model.CUS_Routing.Where(c => c.CustomerID == cCustomerID && c.CAT_Routing.RoutingAreaToID > 0).Select(c => new { RoutingAreaID = c.CAT_Routing.RoutingAreaToID, c.Code }).Distinct().ToList();
                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        var transportID = HelperContract.GetTransportMode(model, item.TransportModeID);
                        var serviceID = HelperContract.GetServiceOfOrder(model, item.ServiceOfOrderID);
                        var IsFindEconomicZone = lstCustomer.FirstOrDefault(c => c.ID == item.CustomerID).IsFindEconomicZone;
                        if (item.CustomerID != cCustomerID)
                        {
                            cCustomerID = item.CustomerID;
                            dataCUSLocation = model.CUS_Location.Where(c => c.CustomerID == cCustomerID).Select(c => new { c.ID, c.LocationID }).ToList();
                            dataRouting = model.CUS_Routing.Where(c => c.CustomerID == cCustomerID && c.CAT_Routing.RoutingAreaToID > 0).Select(c => new { RoutingAreaID = c.CAT_Routing.RoutingAreaToID, c.Code }).Distinct().ToList();
                        }

                        DTOORDOrder obj = new DTOORDOrder();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                        obj.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;
                        obj.CustomerID = item.CustomerID;
                        obj.TypeOfOrderID = item.TypeOfOrderID;
                        obj.IsOPS = true;
                        obj.Code = item.Code;
                        obj.ServiceOfOrderID = item.ServiceOfOrderID;

                        var transportSYSID = HelperContract.GetTransportMode(model, item.TransportModeID);
                        if (transportSYSID == iFTL || transportSYSID == iLTL)
                        {
                            obj.ServiceOfOrderID = null;
                        }
                        obj.TransportModeID = item.TransportModeID;
                        obj.TypeOfContractID = typeContract;
                        obj.PacketID = pID;
                        if (item.ContractID > 0)
                            obj.ContractID = item.ContractID;
                        if (item.ContractTermID > 0)
                            obj.ContractTermID = item.ContractTermID;
                        obj.DateConfig = obj.RequestDate = item.RequestDate.HasValue ? item.RequestDate.Value : DateTime.Now.Date;
                        obj.ETD = item.ETD;
                        obj.ETA = item.ETA;
                        obj.ETARequest = item.ETARequest;
                        obj.ETDRequest = item.ETDRequest;
                        obj.LocationFromID = item.LocationFromID;
                        if (item.LocationToID > 0)
                            obj.LocationToID = item.LocationToID;
                        obj.IsHot = item.IsHot;
                        obj.Note = item.Note;
                        obj.PartnerID = item.PartnerID;
                        obj.CutOffTime = item.CutOffTime;
                        obj.VesselNo = item.VesselNo;
                        obj.VesselName = item.VesselName;
                        obj.TripNo = item.TripNo;
                        obj.GroupOfVehicleID = item.GroupOfVehicleID;
                        obj.RoutePrice = item.RoutePrice;
                        obj.CUSRoutingID = item.CUSRoutingID;
                        obj.UserDefine1 = item.UserDefined1;
                        obj.UserDefine2 = item.UserDefined2;
                        obj.UserDefine3 = item.UserDefined3;
                        obj.UserDefine4 = item.UserDefined4;
                        obj.UserDefine5 = item.UserDefined5;
                        obj.UserDefine6 = item.UserDefined6;
                        obj.UserDefine7 = item.UserDefined7;
                        obj.UserDefine8 = item.UserDefined8;
                        obj.UserDefine9 = item.UserDefined9;

                        if (transportID == -(int)SYSVarType.TransportModeFCL)
                        {
                            if (item.TypeOfWAInspectionStatus == true)
                            {
                                obj.TypeOfWAInspectionID = -(int)SYSVarType.TypeOfWAInspectionNo;
                            }
                            else if (item.TypeOfWAInspectionStatus == false)
                            {
                                obj.TypeOfWAInspectionID = -(int)SYSVarType.TypeOfWAInspectionYes;
                            }
                            obj.DateInspect = item.DateInspection;
                        }

                        #region Tìm phụ lục
                        int? contractTermID = obj.ContractTermID;
                        if (obj.ContractID > 0 && (obj.ContractTermID == null || obj.ContractTermID < 1))
                        {
                            var term = model.CAT_ContractTerm.Where(c => c.CAT_Contract.TransportModeID == obj.TransportModeID && (transportID == -(int)SYSVarType.TransportModeFCL ? c.ServiceOfOrderID == obj.ServiceOfOrderID : true) &&
                                c.ContractID == obj.ContractID.Value && c.CAT_Contract.CustomerID == obj.CustomerID && (c.ExprETA != null || c.ExprETARequest != null || c.ExprETDRequest != null || c.ExprETD != null) &&
                                ((c.DateEffect <= obj.RequestDate && c.DateExpire == null) || (c.DateEffect <= obj.RequestDate && c.DateExpire > obj.RequestDate))).OrderByDescending(c => c.DateEffect).Select(c => new { c.ContractID, c.ID }).FirstOrDefault();
                            if (term != null)
                                contractTermID = term.ID;
                        }
                        var contractTerm = model.CAT_ContractTerm.FirstOrDefault(c => c.ID == contractTermID);
                        #endregion

                        #region Container
                        if (item.ListContainer != null && item.ListContainer.Count > 0)
                        {
                            obj.ListContainer = new List<DTOORDContainer>();
                            foreach (var con in item.ListContainer)
                            {
                                for (int i = 0; i < con.Quantity; i++)
                                {
                                    DTOORDContainer sysCon = new DTOORDContainer();
                                    sysCon.PackingID = con.PackingID;
                                    sysCon.ContainerNo = con.ContainerNo;
                                    sysCon.SealNo1 = con.SealNo1;
                                    sysCon.SealNo2 = con.SealNo2;
                                    sysCon.Ton = con.Ton;
                                    sysCon.Note = con.Note;
                                    sysCon.ETD = con.ETD;
                                    sysCon.ETA = con.ETA;
                                    sysCon.DateGetEmpty = con.DateGetEmpty;
                                    sysCon.DateReturnEmpty = con.DateReturnEmpty;
                                    sysCon.ETDRequest = con.ETDRequest;
                                    sysCon.ETARequest = con.ETARequest;
                                    sysCon.CutOffTime = obj.CutOffTime;
                                    sysCon.LoadingTime = obj.LoadingTime;
                                    sysCon.Note1 = con.Note1;
                                    sysCon.Note2 = con.Note2;
                                    sysCon.LocationToID = con.LocationToID;
                                    sysCon.LocationFromID = con.LocationFromID;
                                    sysCon.LocationDepotID = con.LocationDepotID;
                                    sysCon.LocationDepotReturnID = con.LocationDepotReturnID;

                                    int fLocation = -1, tLocation = -1, dpLocation = -1, dprLocation = -1;

                                    var objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == sysCon.LocationFromID);
                                    if (objCUSLocation != null) fLocation = objCUSLocation.LocationID;

                                    objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == sysCon.LocationToID);
                                    if (objCUSLocation != null) tLocation = objCUSLocation.LocationID;

                                    objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == sysCon.LocationDepotID);
                                    if (objCUSLocation != null) dpLocation = objCUSLocation.LocationID;

                                    objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == sysCon.LocationDepotReturnID);
                                    if (objCUSLocation != null) dprLocation = objCUSLocation.LocationID;

                                    sysCon.CATLocationToID = tLocation;
                                    sysCon.CATLocationFromID = fLocation;
                                    sysCon.CATLocationDepotID = dpLocation;
                                    sysCon.CATLocationDepotReturnID = dprLocation;

                                    obj.ListContainer.Add(sysCon);
                                    if (!obj.LocationFromID.HasValue)
                                        obj.LocationFromID = sysCon.LocationFromID;
                                    if (!obj.LocationToID.HasValue)
                                        obj.LocationToID = sysCon.LocationToID;
                                    if (!obj.LocationDepotID.HasValue)
                                        obj.LocationDepotID = sysCon.LocationDepotID;

                                    // Tự tính ETD, ETDRequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETD) && sysCon.ETD == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = sysCon.ETD;
                                        itemCheck.ETDRequest = sysCon.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        sysCon.ETD = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETD);
                                    }
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETDRequest) && sysCon.ETDRequest == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = sysCon.ETD;
                                        itemCheck.ETDRequest = sysCon.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        sysCon.ETDRequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETDRequest);
                                    }

                                    // Tự tính ETA, ETARequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETA) && sysCon.ETA == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = sysCon.ETD;
                                        itemCheck.ETDRequest = sysCon.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        sysCon.ETA = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETA);
                                    }
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETARequest) && sysCon.ETARequest == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = sysCon.ETD;
                                        itemCheck.ETDRequest = sysCon.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        sysCon.ETARequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETARequest);
                                    }
                                }
                            }
                        }

                        //List ContainerPrice
                        if (item.ListContainerPrice != null && item.ListContainerPrice.Count > 0)
                        {
                            obj.ListContainerPrice = new List<DTOORDContainerPrice>();
                            foreach (var conPrice in item.ListContainerPrice)
                            {
                                DTOORDContainerPrice sysConPrice = new DTOORDContainerPrice();
                                sysConPrice.LocationFromID = conPrice.LocationFromID;
                                sysConPrice.LocationToID = conPrice.LocationToID;
                                sysConPrice.PackingID = conPrice.PackingID;
                                sysConPrice.Price = conPrice.Price;
                                obj.ListContainerPrice.Add(sysConPrice);
                            }
                        }

                        //List Service
                        if (item.ListService != null && item.ListService.Count > 0)
                        {
                            obj.ListService = new List<DTOORDService>();
                            foreach (var service in item.ListService)
                            {
                                DTOORDService sysService = new DTOORDService();
                                sysService.ServiceID = service.ServiceID;
                                sysService.PackingID = service.PackingID;
                                sysService.Price = service.Price;
                                sysService.Note = service.Note;
                                obj.ListService.Add(sysService);
                            }
                        }
                        #endregion

                        #region GroupOfProduct
                        if (item.ListProduct != null && item.ListProduct.Count > 0)
                        {
                            obj.ListGroupProduct = new List<DTOORDGroupProduct>();
                            if (transportID == -(int)SYSVarType.TransportModeLTL || transportID == -(int)SYSVarType.TransportModeFTL)
                            {
                                #region Thêm điểm vào khu vực nếu IsFindEconomicZone = true
                                if (IsFindEconomicZone.HasValue && IsFindEconomicZone == true)
                                {
                                    var lstLocation = item.ListProduct.Where(c => c.LocationToID > 0 && !string.IsNullOrEmpty(c.EconomicZone)).Select(c => new { c.LocationToID, c.EconomicZone, }).Distinct().ToList();
                                    foreach (var itemLocation in lstLocation)
                                    {
                                        int LocationID = -1;
                                        var objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == itemLocation.LocationToID);
                                        if (objCUSLocation != null) LocationID = objCUSLocation.LocationID;
                                        var lstRoutingArea = dataRouting.Where(c => c.Code.ToLower() == itemLocation.EconomicZone.ToLower());
                                        foreach (var itemRoutingArea in lstRoutingArea)
                                        {
                                            if (model.CAT_RoutingAreaLocation.Count(c => c.RoutingAreaID == itemRoutingArea.RoutingAreaID && c.LocationID == LocationID) == 0)
                                            {
                                                CAT_RoutingAreaLocation objAreaLocation = new CAT_RoutingAreaLocation();
                                                objAreaLocation.CreatedBy = Account.UserName;
                                                objAreaLocation.CreatedDate = DateTime.Now;
                                                objAreaLocation.LocationID = LocationID;
                                                objAreaLocation.RoutingAreaID = itemRoutingArea.RoutingAreaID.Value;
                                                model.CAT_RoutingAreaLocation.Add(objAreaLocation);
                                            }
                                        }
                                    }
                                }
                                #endregion

                                foreach (var group in item.ListProduct)
                                {
                                    group.OrderCode = obj.Code;
                                    lstImportGroup.Add(group);

                                    var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == group.GroupOfProductID);
                                    if (cusGroup == null)
                                        throw FaultHelper.BusinessFault(null, null, "Nhóm sản phẩm không tồn tại!");

                                    DTOORDGroupProduct objGroup = new DTOORDGroupProduct();
                                    objGroup.GroupOfProductID = group.GroupOfProductID;
                                    objGroup.PriceOfGOPID = cusGroup.PriceOfGOPID;
                                    objGroup.LocationFromID = group.LocationFromID;
                                    objGroup.LocationToID = group.LocationToID;
                                    objGroup.ETD = group.ETD;
                                    objGroup.ETA = group.ETA;
                                    objGroup.Price = group.Price;
                                    objGroup.ETARequest = group.ETARequest;
                                    objGroup.ETDRequest = group.ETDRequest;
                                    objGroup.SOCode = group.SOCode;
                                    objGroup.HasCashCollect = group.HasCashCollect;
                                    objGroup.DNCode = group.DNCode;
                                    objGroup.Description = group.Description;
                                    objGroup.PartnerID = group.PartnerID;
                                    objGroup.Note1 = group.Note1;
                                    objGroup.Note2 = group.Note2;
                                    objGroup.SortConfig = group.SortConfig;
                                    objGroup.CUSRoutingID = group.CUSRoutingID > 0 ? group.CUSRoutingID : null;
                                    if (!obj.PartnerID.HasValue)
                                        obj.PartnerID = objGroup.PartnerID;
                                    if (!obj.LocationFromID.HasValue)
                                        obj.LocationFromID = objGroup.LocationFromID;
                                    if (!obj.LocationToID.HasValue)
                                        obj.LocationToID = objGroup.LocationToID;

                                    int fLocation = -1, tLocation = -1;
                                    var objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == objGroup.LocationFromID);
                                    if (objCUSLocation != null) fLocation = objCUSLocation.LocationID;

                                    objCUSLocation = dataCUSLocation.FirstOrDefault(c => c.ID == objGroup.LocationToID);
                                    if (objCUSLocation != null) tLocation = objCUSLocation.LocationID;

                                    if (objGroup.LocationFromID > 0 && objGroup.LocationToID > 0 && objGroup.CUSRoutingID == null)
                                        objGroup.CUSRoutingID = HelperRouting.ORDOrder_CUSRouting_FindDI(model, Account, obj.CustomerID, obj.ContractID, objGroup.LocationFromID.Value, objGroup.LocationToID.Value);

                                    if (objGroup.CUSRoutingID < 0)
                                        objGroup.CUSRoutingID = null;
                                    objGroup.CATLocationToID = tLocation;
                                    objGroup.CATLocationFromID = fLocation;

                                    // Tự tính ETD, ETDRequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETD) && objGroup.ETD == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = objGroup.ETD;
                                        itemCheck.ETDRequest = objGroup.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        objGroup.ETD = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETD);
                                    }
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETDRequest) && objGroup.ETDRequest == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = objGroup.ETD;
                                        itemCheck.ETDRequest = objGroup.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        objGroup.ETDRequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETDRequest);
                                    }

                                    // Tự tính ETA, ETARequest khi phụ lục có thiết lập và 2 ngày này ko nhập
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETA) && objGroup.ETA == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = objGroup.ETD;
                                        itemCheck.ETDRequest = objGroup.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        objGroup.ETA = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETA);
                                    }
                                    if (contractTerm != null && !string.IsNullOrEmpty(contractTerm.ExprETARequest) && objGroup.ETARequest == null)
                                    {
                                        DTOORDOrder_ExprCheck itemCheck = new DTOORDOrder_ExprCheck();
                                        itemCheck.ETD = objGroup.ETD;
                                        itemCheck.ETDRequest = objGroup.ETDRequest;
                                        itemCheck.RequestDate = obj.RequestDate;
                                        objGroup.ETARequest = ORDOrder_DateExpression(itemCheck, contractTerm.ExprETARequest);
                                    }

                                    //Cập nhật ETA, ETD theo LeadTime
                                    DateTime? ETA = objGroup.ETARequest.HasValue ? objGroup.ETARequest : obj.RequestDate;
                                    DateTime? ETD = objGroup.ETARequest.HasValue ? objGroup.ETARequest : obj.RequestDate;

                                    if (objGroup.ETA == null)
                                        objGroup.ETA = ETA;
                                    if (objGroup.ETD == null)
                                        objGroup.ETD = ETD;
                                    if (obj.ETD == null || obj.ETA < objGroup.ETA)
                                        obj.ETA = objGroup.ETA;
                                    if (obj.ETD == null || obj.ETD > objGroup.ETD)
                                        obj.ETD = objGroup.ETD;
                                    obj.ListGroupProduct.Add(objGroup);

                                    objGroup.ListProduct = new List<DTOORDProduct>();

                                    if (item.ListGroupProductPrice != null)
                                    {
                                        var oPrice = item.ListGroupProductPrice.FirstOrDefault(c => c.GroupOfProductID == objGroup.GroupOfProductID && c.LocationFromID == objGroup.LocationFromID);
                                        if (oPrice != null)
                                            objGroup.Price = oPrice.Price;
                                    }

                                    var cusProduct = model.CUS_Product.FirstOrDefault(c => c.ID == group.ProductID);
                                    if (cusProduct == null)
                                        throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại!");

                                    if (cusProduct.PackingID == null)
                                        throw FaultHelper.BusinessFault(null, null, "Sản phẩm chưa thiết lập đơn vị tính!");

                                    DTOORDProduct objProduct = new DTOORDProduct();
                                    objProduct.ProductID = group.ProductID;
                                    objProduct.PackingID = cusProduct.PackingID;

                                    objGroup.ListProduct.Add(objProduct);
                                    objGroup.PackingID = cusProduct.PackingID;

                                    //Qui đổi
                                    //group.Ton = cusProduct.IsKg ? group.Ton / 1000 : group.Ton;
                                    //Tính theo tấn
                                    if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                    {
                                        objGroup.Ton += group.Ton;
                                        //Qui đổi sang khối, quantity
                                        objProduct.ExchangeTon = 1;
                                        objProduct.ExchangeCBM = 0;
                                        objProduct.ExchangeQuantity = 0;
                                        if (objGroup.Ton > 0)
                                        {
                                            objProduct.ExchangeCBM = Math.Round(group.CBM / objGroup.Ton, digitsOfRound);
                                            objGroup.CBM += group.CBM;
                                            objProduct.ExchangeQuantity = Math.Round(group.Quantity / objGroup.Ton, digitsOfRound);
                                            objGroup.Quantity += group.Quantity;
                                        }
                                        objProduct.Quantity = objGroup.Ton;
                                    }
                                    else
                                    {
                                        //Tính theo khối
                                        if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                        {
                                            objGroup.CBM += group.CBM;
                                            //Qui đổi sang khối, quantity
                                            objProduct.ExchangeCBM = 1;
                                            objProduct.ExchangeTon = 0;
                                            objProduct.ExchangeQuantity = 0;
                                            if (objGroup.CBM > 0)
                                            {
                                                objProduct.ExchangeTon = Math.Round(group.Ton / objGroup.CBM, digitsOfRound);
                                                objGroup.Ton += group.Ton;
                                                objProduct.ExchangeQuantity = Math.Round(group.Quantity / objGroup.CBM, digitsOfRound);
                                                objGroup.Quantity += group.Quantity;
                                            }
                                            objProduct.Quantity = objGroup.CBM;
                                        }
                                        else
                                        {
                                            //Tính theo đ/v vc
                                            if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                            {
                                                objGroup.Quantity += group.Quantity;
                                                //Qui đổi sang tấn
                                                objProduct.ExchangeQuantity = 1;
                                                objProduct.ExchangeTon = 0;
                                                if (objGroup.Quantity > 0)
                                                {
                                                    if (group.Ton > 0)
                                                        objProduct.ExchangeTon = Math.Round(group.Ton / objGroup.Quantity, digitsOfRound);
                                                    else
                                                        objProduct.ExchangeTon = cusProduct.Weight.HasValue ? cusProduct.Weight : 0;
                                                }
                                                //Qui đổi sang khối
                                                objProduct.ExchangeCBM = 0;
                                                if (objGroup.Quantity > 0)
                                                {
                                                    if (group.CBM > 0)
                                                        objProduct.ExchangeCBM = Math.Round(group.CBM / objGroup.Quantity, digitsOfRound);
                                                    else
                                                        objProduct.ExchangeCBM = cusProduct.CBM.HasValue ? cusProduct.CBM : 0;
                                                }
                                                objGroup.CBM += group.CBM > 0 ? group.CBM : objProduct.ExchangeCBM.Value * group.Quantity;
                                                objGroup.Ton += group.Ton > 0 ? group.Ton : objProduct.ExchangeTon.Value * group.Quantity;
                                                objProduct.Quantity = objGroup.Quantity;
                                            }
                                        }
                                    }
                                }
                            }
                            // Cập nhật lại ngày cho order
                            var objDate = item.ListProduct.Where(c => c.ETDRequest.HasValue).OrderBy(c => c.ETDRequest).FirstOrDefault();
                            if (objDate != null)
                                obj.ETDRequest = objDate.ETDRequest;
                            objDate = item.ListProduct.Where(c => c.ETARequest.HasValue).OrderBy(c => c.ETARequest).FirstOrDefault();
                            if (objDate != null)
                                obj.ETARequest = objDate.ETARequest;
                        }
                        #endregion

                        ORDOrder_Save(model, obj);

                        #region Update auto gen code
                        var objSettingCode = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString() && c.Setting != null && c.CustomerID == obj.CustomerID);
                        if (objSettingCode == null)
                            objSettingCode = model.CUS_Setting.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString() && c.Setting != null && c.CustomerID == Account.SYSCustomerID);
                        if (objSettingCode != null)
                        {
                            DTOCUSSettingOrderCode objSet = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(objSettingCode.Setting);
                            if (objSet.DicCounter == null)
                                objSet.DicCounter = new Dictionary<DateTime, int>();

                            if (objSet.ActionReset == 1)
                            {
                                if (objSet.Expr.Contains("ETD"))
                                {
                                    if (obj.ETD.HasValue)
                                    {
                                        if (objSet.DicCounter.ContainsKey(obj.ETD.Value.Date))
                                        {
                                            var dic = objSet.DicCounter.FirstOrDefault(c => c.Key == obj.ETD.Value.Date);
                                            var val = dic.Value + 1;
                                            objSet.DicCounter.Remove(obj.ETD.Value.Date);
                                            objSet.DicCounter.Add(obj.ETD.Value.Date, val);
                                        }
                                        else
                                        {
                                            objSet.DicCounter.Add(obj.ETD.Value.Date, 1);
                                        }
                                    }
                                }
                                else
                                {
                                    if (objSet.DicCounter.ContainsKey(DateTime.Now.Date))
                                    {
                                        var dic = objSet.DicCounter.FirstOrDefault(c => c.Key == DateTime.Now.Date);
                                        var val = dic.Value + 1;
                                        objSet.DicCounter.Remove(DateTime.Now.Date);
                                        objSet.DicCounter.Add(DateTime.Now.Date, val);
                                    }
                                    else
                                    {
                                        objSet.DicCounter.Add(DateTime.Now.Date, 1);
                                    }
                                }
                                objSettingCode.ModifiedDate = DateTime.Now;
                                objSettingCode.ModifiedBy = Account.UserName;
                                objSettingCode.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(objSet);
                                model.SaveChanges();
                            }
                            else
                            {
                                objSet.SortOrder = objSet.SortOrder + 1;
                                objSettingCode.ModifiedDate = DateTime.Now;
                                objSettingCode.ModifiedBy = Account.UserName;
                                objSettingCode.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(objSet);
                                model.SaveChanges();
                            }
                        }
                        #endregion
                    }
                    #endregion

                    #region Tạo chuyến và gửi điều phối
                    if (isMon)
                    {
                        // Tìm cung đường
                        foreach (var item in model.ORD_GroupProduct.Where(c => c.CUSRoutingID == null && c.ORD_Order.PacketID == pID && c.LocationFromID > 0 && c.LocationToID > 0))
                            item.CUSRoutingID = HelperRouting.ORDOrder_CUSRouting_FindDI(model, Account, item.ORD_Order.CustomerID, item.ORD_Order.ContractID, item.LocationFromID.Value, item.LocationToID.Value);
                        model.SaveChanges();

                        // Lấy lại list đơn hàng
                        var lstORDGroup = model.ORD_GroupProduct.Where(c => c.ORD_Order.PacketID == pID && c.CUSRoutingID > 0 && c.ORD_Product.Count > 0).Select(c => new
                        {
                            ID = c.ID,
                            c.OrderID,
                            OrderCode = c.ORD_Order.Code,
                            c.SortConfig,
                            c.Ton,
                            c.CBM,
                            c.Quantity,
                            c.CUSRoutingID,
                            c.LocationFromID,
                            c.LocationToID,
                            CATLocationFromID = c.CUS_Location.LocationID,
                            CATLocationToID = c.CUS_Location1.LocationID,
                            c.DNCode,
                            c.ORD_Order.RequestDate,
                            OrderProductID = c.ORD_Product.FirstOrDefault().ID,
                            OrderProductQuantity = c.ORD_Product.FirstOrDefault().Quantity,
                            c.ORD_Order.TransportModeID,
                            c.ORD_Order.GroupOfVehicleID
                        }).ToList();

                        // Tạo OPSGroup và chuyến
                        foreach (var itemGroup in lstImportGroup.GroupBy(c => new { c.MasterETD, c.MasterETA, c.VehicleID, c.VendorID, c.MasterNote, c.DriverName, c.DriverTel, c.DriverID }))
                        {
                            foreach (var item in itemGroup)
                            {
                                // Tạo opsMaster
                                var objMaster = new OPS_DITOMaster();
                                objMaster.CreatedBy = Account.UserName;
                                objMaster.CreatedDate = DateTime.Now;
                                objMaster.Code = string.Empty;
                                objMaster.VehicleID = itemGroup.Key.VehicleID;
                                objMaster.VendorOfVehicleID = itemGroup.Key.VendorID;
                                objMaster.SYSCustomerID = Account.SYSCustomerID;
                                objMaster.ETA = itemGroup.Key.MasterETA;
                                objMaster.ETD = itemGroup.Key.MasterETD;
                                objMaster.Note = itemGroup.Key.MasterNote;
                                objMaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                                objMaster.TypeOfDITOMasterID = -(int)SYSVarType.TypeOfDITONormal;
                                objMaster.DriverName1 = itemGroup.Key.DriverName;
                                objMaster.DriverTel1 = itemGroup.Key.DriverTel;
                                if (itemGroup.Key.DriverID > 0)
                                    objMaster.DriverID1 = itemGroup.Key.DriverID;

                                var group = lstORDGroup.FirstOrDefault(c => c.OrderCode == item.OrderCode && c.SortConfig == item.SortConfig);
                                if (group != null)
                                {
                                    objMaster.TransportModeID = group.TransportModeID;
                                    if (objMaster.GroupOfVehicleID == null)
                                        objMaster.GroupOfVehicleID = group.GroupOfVehicleID;
                                    // Tạo opsGroup
                                    var objGroup = new OPS_DITOGroupProduct();
                                    objGroup.CreatedBy = Account.UserName;
                                    objGroup.CreatedDate = DateTime.Now;

                                    objGroup.IsInput = true;
                                    objGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                    objGroup.GroupSort = group.OrderID + "_" + group.CUSRoutingID.Value + "_" + group.ID;
                                    objGroup.OrderGroupProductID = group.ID;
                                    objGroup.Ton = objGroup.TonTranfer = objGroup.TonBBGN = group.Ton;
                                    objGroup.CBM = objGroup.CBMTranfer = objGroup.CBMBBGN = group.CBM;
                                    objGroup.Quantity = objGroup.QuantityTranfer = objGroup.QuantityBBGN = group.Quantity;
                                    objGroup.QuantityLoading = 0;
                                    objGroup.Note = string.Empty;
                                    objGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                    objGroup.DNCode = string.IsNullOrEmpty(group.DNCode) ? null : group.DNCode;
                                    objGroup.DateDN = group.RequestDate;
                                    objGroup.DateConfig = group.RequestDate;
                                    objMaster.OPS_DITOGroupProduct.Add(objGroup);

                                    var objProduct = new OPS_DITOProduct();
                                    objProduct.CreatedBy = Account.UserName;
                                    objProduct.CreatedDate = DateTime.Now;

                                    objProduct.OrderProductID = group.OrderProductID;
                                    objProduct.Quantity = objProduct.QuantityTranfer = objProduct.QuantityBBGN = group.OrderProductQuantity;
                                    objProduct.Note = string.Empty;
                                    objProduct.QuantityReturn = 0;

                                    objGroup.OPS_DITOProduct.Add(objProduct);
                                }
                                if (objMaster.OPS_DITOGroupProduct.Count > 0)
                                {
                                    var lstLocationID = itemGroup.Select(c => c.LocationFromID).Distinct().ToList();
                                    lstLocationID.AddRange(itemGroup.Select(c => c.LocationToID).Distinct().ToList());
                                    objMaster.TotalLocation = lstLocationID.Count;
                                    model.OPS_DITOMaster.Add(objMaster);
                                }
                            }
                        }
                        model.SaveChanges();

                        var lstMasterID = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.ORD_GroupProduct.ORD_Order.PacketID == pID).Select(c => c.DITOMasterID.Value).Distinct().ToList();

                        foreach (var objMaster in model.OPS_DITOMaster.Where(c => lstMasterID.Contains(c.ID)))
                            objMaster.Code = DICodePrefix + objMaster.ID.ToString(DICodeNum);
                        model.SaveChanges();

                        using (var model2 = new DataEntities())
                        {
                            model2.EventAccount = Account; model2.EventRunning = false;
                            HelperTOMaster.OPS_DI_ToMON(model2, lstMasterID, Account);
                        }
                    }
                    #endregion

                    return pID ?? -1;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDOrder_Export> ORDOrder_Excel_Export(int sID, int pID)
        {
            try
            {
                int iTU = -(int)SYSVarType.PriceOfGOPTU;
                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                List<DTOORDOrder_Export> result = new List<DTOORDOrder_Export>();
                using (var model = new DataEntities())
                {
                    result = model.ORD_Product.Where(c => c.ORD_GroupProduct.ORD_Order.PacketID == pID).Select(c => new DTOORDOrder_Export
                    {
                        ID = c.ID,
                        CarrierCode = string.Empty,
                        CarrierCodeName = string.Empty,
                        CarrierName = string.Empty,
                        CBM = c.ORD_GroupProduct.CBM,
                        CBM_SKU = c.ORD_GroupProduct.CBM,
                        ContainerNo = string.Empty,
                        CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        CustomerCodeName = string.Empty,
                        CutOffTime = null,
                        Date_TimeGetEmpty = null,
                        Date_TimeReturnEmpty = null,
                        DateGetEmpty = null,
                        DateReturnEmpty = null,
                        DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                        DistributorCodeName = string.Empty,
                        DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        DNCode = c.ORD_GroupProduct.DNCode,
                        EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETARequest = c.ORD_GroupProduct.ETARequest,
                        ETARequestTime = c.ORD_GroupProduct.ETARequest,
                        ETATime_RequestDate = null,
                        ETD = c.ORD_GroupProduct.ETD,
                        ETDTime_RequestDate = null,
                        GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductCodeNotUnicode = string.Empty,
                        GroupProductID = c.ORD_GroupProduct.GroupOfProductID ?? -1,
                        GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupVehicle = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        HasCashCollect = c.ORD_GroupProduct.HasCashCollect,
                        HasUseContract = true,
                        InspectionDate = null,
                        IsHot = c.ORD_GroupProduct.ORD_Order.IsHot,
                        LocationDepotCode = string.Empty,
                        LocationDepotName = string.Empty,
                        LocationFromCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                        LocationFromCodeName = string.Empty,
                        LocationFromName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                        LocationReturnCode = string.Empty,
                        LocationReturnName = string.Empty,
                        LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                        LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                        LocationToCodeName = string.Empty,
                        LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                        LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : string.Empty,
                        LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : string.Empty,
                        Note = c.ORD_GroupProduct.ORD_Order.Note,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        OrderID = c.ORD_GroupProduct.OrderID,
                        Packing = c.CUS_Product.Code,
                        PackingID = c.ProductID,
                        PackingName = c.CUS_Product.ProductName,
                        PackingNotUnicode = string.Empty,
                        PriceCBM = c.ORD_GroupProduct.PriceOfGOPID == iCBM ? c.ORD_GroupProduct.Price : null,
                        PriceQuantity = c.ORD_GroupProduct.PriceOfGOPID == iTU ? c.ORD_GroupProduct.Price : null,
                        PriceTOMaster = c.ORD_GroupProduct.ORD_Order.RoutePrice,
                        PriceTon = c.ORD_GroupProduct.PriceOfGOPID == iTon ? c.ORD_GroupProduct.Price : null,
                        ProductCodeWithoutGroup = c.CUS_Product.Code,
                        Quantity = c.ORD_GroupProduct.Quantity,
                        Quantity_SKU = c.ORD_GroupProduct.Quantity,
                        RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        RequestDate_Time = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        RequestTime = c.ORD_GroupProduct.ORD_Order.RequestDate,
                        RoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                        SealNo1 = string.Empty,
                        SealNo2 = string.Empty,
                        ServiceOfOrder = c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_ServiceOfOrder.Code : string.Empty,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        StockID = c.ORD_GroupProduct.LocationFromID ?? -1,
                        TemperatureMax = c.ORD_GroupProduct.TempMax,
                        TemperatureMin = c.ORD_GroupProduct.TempMin,
                        TimeGetEmpty = null,
                        TimeReturnEmpty = null,
                        Ton = c.CUS_Product.IsKg ? c.ORD_GroupProduct.Ton * 1000 : c.ORD_GroupProduct.Ton,
                        Ton_SKU = c.CUS_Product.IsKg ? c.ORD_GroupProduct.Ton * 1000 : c.ORD_GroupProduct.Ton,
                        TripNo = string.Empty,
                        TypeOfContainerName = string.Empty,
                        TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Code,
                        TypeOfWAInspectionStatus = false,
                        UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                        UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                        UserDefine4 = c.ORD_GroupProduct.ORD_Order.UserDefine4,
                        UserDefine5 = c.ORD_GroupProduct.ORD_Order.UserDefine5,
                        UserDefine6 = c.ORD_GroupProduct.ORD_Order.UserDefine6,
                        UserDefine7 = c.ORD_GroupProduct.ORD_Order.UserDefine7,
                        UserDefine8 = c.ORD_GroupProduct.ORD_Order.UserDefine8,
                        UserDefine9 = c.ORD_GroupProduct.ORD_Order.UserDefine9,
                        VesselName = string.Empty,
                        VesselNo = string.Empty,
                        Note1 = c.ORD_GroupProduct.Note1,
                        Note2 = c.ORD_GroupProduct.Note2,
                    }).ToList();
                    result.AddRange(model.ORD_Container.Where(c => c.ORD_Order.PacketID == pID).Select(c => new DTOORDOrder_Export
                    {
                        ID = c.ID,
                        CarrierCode = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                        CarrierCodeName = string.Empty,
                        CarrierName = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        CBM = null,
                        CBM_SKU = null,
                        ContainerNo = c.ContainerNo,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.ShortName,
                        CustomerCodeName = string.Empty,
                        CutOffTime = c.CutOffTime,
                        Date_TimeGetEmpty = c.DateGetEmpty,
                        Date_TimeReturnEmpty = c.DateReturnEmpty,
                        DateGetEmpty = c.DateGetEmpty,
                        DateReturnEmpty = c.DateReturnEmpty,
                        DistributorCode = string.Empty,
                        DistributorCodeName = string.Empty,
                        DistributorName = string.Empty,
                        DNCode = string.Empty,
                        EconomicZone = string.Empty,
                        ETA = c.ETA,
                        ETARequest = c.ETA,
                        ETARequestTime = c.ETA,
                        ETATime_RequestDate = null,
                        ETD = c.ETD,
                        ETDTime_RequestDate = null,
                        GroupProductCode = string.Empty,
                        GroupProductCodeNotUnicode = string.Empty,
                        GroupProductID = -1,
                        GroupProductName = string.Empty,
                        GroupVehicle = string.Empty,
                        HasCashCollect = false,
                        HasUseContract = true,
                        InspectionDate = c.DateInspect.HasValue ? c.DateInspect : c.ORD_Order.DateInspect,
                        IsHot = c.ORD_Order.IsHot,
                        LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                        LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                        LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location2.Code : string.Empty,
                        LocationFromCodeName = string.Empty,
                        LocationFromName = c.LocationFromID > 0 ? c.CUS_Location2.LocationName : string.Empty,
                        LocationReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                        LocationReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                        LocationToAddress = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location3.Code : string.Empty,
                        LocationToCodeName = string.Empty,
                        LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationToProvince = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location3.LocationName : string.Empty,
                        LocationToNote = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Note : string.Empty,
                        LocationToNote1 = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Note1 : string.Empty,
                        Note = c.ORD_Order.Note,
                        OrderCode = c.ORD_Order.Code,
                        OrderID = c.OrderID,
                        Packing = string.Empty,
                        PackingID = c.CAT_Packing.ID,
                        PackingName = string.Empty,
                        PackingNotUnicode = string.Empty,
                        PriceCBM = null,
                        PriceQuantity = null,
                        PriceTOMaster = null,
                        PriceTon = null,
                        ProductCodeWithoutGroup = string.Empty,
                        Quantity = null,
                        Quantity_SKU = null,
                        RequestDate = c.ORD_Order.RequestDate,
                        RequestDate_Time = c.ORD_Order.RequestDate,
                        RequestTime = c.ORD_Order.RequestDate,
                        RoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.Code : string.Empty,
                        SealNo1 = c.SealNo1,
                        SealNo2 = c.SealNo2,
                        ServiceOfOrder = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.Code : string.Empty,
                        SOCode = string.Empty,
                        StockID = -1,
                        TemperatureMax = null,
                        TemperatureMin = null,
                        TimeGetEmpty = c.DateGetEmpty,
                        TimeReturnEmpty = c.DateReturnEmpty,
                        Ton = c.Ton,
                        Ton_SKU = c.Ton,
                        TripNo = c.ORD_Order.TripNo,
                        TypeOfContainerName = c.CAT_Packing.Code,
                        TypeOfTransportMode = c.ORD_Order.CAT_TransportMode.Code,
                        TypeOfWAInspectionStatus = c.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo,
                        UserDefine1 = c.ORD_Order.UserDefine1,
                        UserDefine2 = c.ORD_Order.UserDefine2,
                        UserDefine3 = c.ORD_Order.UserDefine3,
                        UserDefine4 = c.ORD_Order.UserDefine4,
                        UserDefine5 = c.ORD_Order.UserDefine5,
                        UserDefine6 = c.ORD_Order.UserDefine6,
                        UserDefine7 = c.ORD_Order.UserDefine7,
                        UserDefine8 = c.ORD_Order.UserDefine8,
                        UserDefine9 = c.ORD_Order.UserDefine9,
                        VesselName = c.ORD_Order.VesselName,
                        VesselNo = c.ORD_Order.VesselNo
                    }).ToList());
                    foreach (var item in result)
                    {
                        if (item.RequestDate != null)
                        {
                            if (item.ETA != null)
                                item.ETATime_RequestDate = item.ETA.Value.Subtract(item.RequestDate.Value);
                            if (item.ETD != null)
                                item.ETDTime_RequestDate = item.ETD.Value.Subtract(item.RequestDate.Value);
                        }
                        item.CarrierCodeName = item.CarrierCode + "-" + item.CarrierName;
                        item.ProductCodeWithoutGroup = item.Packing;
                        item.PackingNotUnicode = StringHelper.RemoveSign4VietnameseString(item.Packing);
                        item.GroupProductCodeNotUnicode = StringHelper.RemoveSign4VietnameseString(item.GroupProductCode);
                        item.DistributorCodeName = item.DistributorCode + "-" + item.DistributorName;
                        item.CustomerCodeName = item.CustomerCode + "-" + item.CustomerName;
                        item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                        item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private int ORDOrder_Excel_FindTime(DataEntities model, int? contractID, int? cusRoutingID, DateTime? date, ref DateTime? eta, ref DateTime? etd)
        {
            if (contractID.HasValue && cusRoutingID.HasValue && date.HasValue)
            {
                var cusroute = model.CUS_Routing.Where(c => c.ID == cusRoutingID).Select(c => new { c.RoutingID }).FirstOrDefault();
                if (cusroute != null)
                {
                    var obj = model.CAT_ContractRouting.FirstOrDefault(c => c.ContractID == contractID && c.RoutingID == cusroute.RoutingID);
                    if (obj != null)
                    {
                        eta = date;
                        etd = date;
                        if (obj.LeadTimeETA.HasValue && date.HasValue)
                            eta = date.Value.AddHours(obj.LeadTimeETA.Value);
                        if (obj.LeadTimeETD.HasValue && date.HasValue)
                            etd = date.Value.AddHours(obj.LeadTimeETD.Value);
                    }
                }
            }
            return -1;
        }

        public DTOResult ORDOrder_Excel_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (Account.ListActionCode.Contains(ViewAdmin) || c.CustomerID == Account.SYSCustomerID || Account.ListCustomerID.Contains(c.CustomerID)) && c.Key == CUSSettingKey.Order.ToString()).Select(c => new DTOCUSSettingOrder
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        CustomerID = c.CustomerID,
                        SYSCustomerID = c.SYSCustomerID,
                        SettingCustomerName = c.CustomerID != c.SYSCustomerID ? c.CUS_Customer.ShortName : "",
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingOrder>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingOrder ORDOrder_Excel_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingOrder result = new DTOCUSSettingOrder();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(obj.Setting);
                            if (result != null)
                            {
                                var transportID = HelperContract.GetTransportMode(model, result.TypeOfTransportModeID);
                                result.IsContainer = transportID == -(int)SYSVarType.TransportModeFCL || transportID == -(int)SYSVarType.TransportModeLCL;
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSSettingOrderCode> ORDOrder_Excel_Setting_Code_Get()
        {
            try
            {
                List<DTOCUSSettingOrderCode> result = new List<DTOCUSSettingOrderCode>();
                using (var model = new DataEntities())
                {
                    var data = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.OrderCode.ToString() && c.Setting != null).ToList();
                    foreach (var item in data)
                    {
                        DTOCUSSettingOrderCode obj = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrderCode>(item.Setting);
                        if (obj.ActionReset == 1)
                        {
                            item.ModifiedDate = DateTime.Now;
                            item.ModifiedBy = Account.UserName;

                            if (obj.DicCounter == null)
                                obj.DicCounter = new Dictionary<DateTime, int>();
                            if (!obj.DicCounter.ContainsKey(DateTime.Now.Date))
                                obj.DicCounter.Add(DateTime.Now.Date, 0);

                            item.Setting = Newtonsoft.Json.JsonConvert.SerializeObject(obj);
                            model.SaveChanges();
                        }
                        result.Add(obj);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSGroupOfProduct> GroupOfProduct_List(int customerid)
        {
            try
            {
                List<DTOCUSGroupOfProduct> result = new List<DTOCUSGroupOfProduct>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_GroupOfProduct.Where(c => customerid > 0 ? c.CustomerID == customerid : true).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID,
                        GroupName = c.GroupName,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ImportCheck ORDOrder_ExcelOnline_Import_Data(int cusID)
        {
            try
            {
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                DTOORDOrder_ImportCheck result = new DTOORDOrder_ImportCheck();
                result.SYSCustomerID = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    result.ListCustomer = model.CUS_Customer.Where(c => !c.IsSystem && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && (isAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName,
                        IsFindEconomicZone = c.IsFindEconomicZone,
                        IsCreateLocation = c.IsCreateLocation,
                        IsCreatePartner = c.IsCreatePartner
                    }).ToList();

                    result.ListDistributor = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListDistributorLocation = model.CUS_Location.Where(c => c.CusPartID != null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID
                    }).ToList();

                    result.ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListRoute = model.CUS_Routing.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        CustomerID = c.CustomerID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID
                    }).ToList();

                    var lstRoutingAreaToID = result.ListRoute.Where(c => c.RoutingAreaToID > 0).Select(c => c.RoutingAreaToID.Value).Distinct().ToList();

                    result.ListRouteArea = model.CAT_RoutingAreaDetail.Where(c => lstRoutingAreaToID.Contains(c.RoutingAreaID)).Select(c => new CATRoutingAreaDetail
                    {
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private List<DTOORDOrder_Export> ORDOrder_Excel_GetFirst(bool isDI, int cusID)
        {
            try
            {
                int iTU = -(int)SYSVarType.PriceOfGOPTU;
                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                List<DTOORDOrder_Export> result = new List<DTOORDOrder_Export>();
                DTOORDOrder_Export item = new DTOORDOrder_Export();
                using (var model = new DataEntities())
                {
                    if (isDI)
                    {
                        item = model.ORD_Product.Where(c => c.ORD_GroupProduct.ORD_Order.CustomerID == cusID).Select(c => new DTOORDOrder_Export
                        {
                            ID = c.ID,
                            CarrierCode = string.Empty,
                            CarrierCodeName = string.Empty,
                            CarrierName = string.Empty,
                            CBM = c.ORD_GroupProduct.CBM,
                            CBM_SKU = c.ORD_GroupProduct.CBM,
                            ContainerNo = string.Empty,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            CustomerCodeName = string.Empty,
                            CutOffTime = null,
                            Date_TimeGetEmpty = null,
                            Date_TimeReturnEmpty = null,
                            DateGetEmpty = null,
                            DateReturnEmpty = null,
                            DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                            DistributorCodeName = string.Empty,
                            DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            DNCode = c.ORD_GroupProduct.DNCode,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            ETA = c.ORD_GroupProduct.ETA,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETARequestTime = c.ORD_GroupProduct.ETARequest,
                            ETATime_RequestDate = null,
                            ETD = c.ORD_GroupProduct.ETD,
                            ETDTime_RequestDate = null,
                            GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupProductCodeNotUnicode = string.Empty,
                            GroupProductID = c.ORD_GroupProduct.GroupOfProductID ?? -1,
                            GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            GroupVehicle = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                            HasCashCollect = c.ORD_GroupProduct.HasCashCollect,
                            HasUseContract = true,
                            InspectionDate = null,
                            IsHot = c.ORD_GroupProduct.ORD_Order.IsHot,
                            LocationDepotCode = string.Empty,
                            LocationDepotName = string.Empty,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationFromCodeName = string.Empty,
                            LocationFromName = c.ORD_GroupProduct.LocationFromID > 0 ? c.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                            LocationReturnCode = string.Empty,
                            LocationReturnName = string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToCodeName = string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToNote = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : string.Empty,
                            LocationToNote1 = c.ORD_GroupProduct.LocationToID > 0 ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : string.Empty,
                            Note = c.ORD_GroupProduct.ORD_Order.Note,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            OrderID = c.ORD_GroupProduct.OrderID,
                            Packing = c.CUS_Product.Code,
                            PackingID = c.ProductID,
                            PackingName = c.CUS_Product.ProductName,
                            PackingNotUnicode = string.Empty,
                            PriceCBM = c.ORD_GroupProduct.PriceOfGOPID == iCBM ? c.ORD_GroupProduct.Price : null,
                            PriceQuantity = c.ORD_GroupProduct.PriceOfGOPID == iTU ? c.ORD_GroupProduct.Price : null,
                            PriceTOMaster = c.ORD_GroupProduct.ORD_Order.RoutePrice,
                            PriceTon = c.ORD_GroupProduct.PriceOfGOPID == iTon ? c.ORD_GroupProduct.Price : null,
                            ProductCodeWithoutGroup = c.CUS_Product.Code,
                            Quantity = c.ORD_GroupProduct.Quantity,
                            Quantity_SKU = c.ORD_GroupProduct.Quantity,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RequestDate_Time = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RequestTime = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            RoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                            SealNo1 = string.Empty,
                            SealNo2 = string.Empty,
                            ServiceOfOrder = c.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_ServiceOfOrder.Code : string.Empty,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            StockID = c.ORD_GroupProduct.LocationFromID ?? -1,
                            TemperatureMax = c.ORD_GroupProduct.TempMax,
                            TemperatureMin = c.ORD_GroupProduct.TempMin,
                            TimeGetEmpty = null,
                            TimeReturnEmpty = null,
                            Ton = c.CUS_Product.IsKg ? c.ORD_GroupProduct.Ton * 1000 : c.ORD_GroupProduct.Ton,
                            Ton_SKU = c.CUS_Product.IsKg ? c.ORD_GroupProduct.Ton * 1000 : c.ORD_GroupProduct.Ton,
                            TripNo = string.Empty,
                            TypeOfContainerName = string.Empty,
                            TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Code,
                            TypeOfWAInspectionStatus = false,
                            UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                            UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                            UserDefine4 = c.ORD_GroupProduct.ORD_Order.UserDefine4,
                            UserDefine5 = c.ORD_GroupProduct.ORD_Order.UserDefine5,
                            UserDefine6 = c.ORD_GroupProduct.ORD_Order.UserDefine6,
                            UserDefine7 = c.ORD_GroupProduct.ORD_Order.UserDefine7,
                            UserDefine8 = c.ORD_GroupProduct.ORD_Order.UserDefine8,
                            UserDefine9 = c.ORD_GroupProduct.ORD_Order.UserDefine9,
                            VesselName = string.Empty,
                            VesselNo = string.Empty
                        }).FirstOrDefault();
                    }
                    else
                    {
                        item = model.ORD_Container.Where(c => c.ORD_Order.CustomerID == cusID).Select(c => new DTOORDOrder_Export
                        {
                            ID = c.ID,
                            CarrierCode = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.PartnerCode : string.Empty,
                            CarrierCodeName = string.Empty,
                            CarrierName = c.ORD_Order.PartnerID > 0 ? c.ORD_Order.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            CBM = null,
                            CBM_SKU = null,
                            ContainerNo = c.ContainerNo,
                            CustomerCode = c.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_Order.CUS_Customer.ShortName,
                            CustomerCodeName = string.Empty,
                            CutOffTime = c.CutOffTime,
                            Date_TimeGetEmpty = c.DateGetEmpty,
                            Date_TimeReturnEmpty = c.DateReturnEmpty,
                            DateGetEmpty = c.DateGetEmpty,
                            DateReturnEmpty = c.DateReturnEmpty,
                            DistributorCode = string.Empty,
                            DistributorCodeName = string.Empty,
                            DistributorName = string.Empty,
                            DNCode = string.Empty,
                            EconomicZone = string.Empty,
                            ETA = c.ETA,
                            ETARequest = c.ETA,
                            ETARequestTime = c.ETA,
                            ETATime_RequestDate = null,
                            ETD = c.ETD,
                            ETDTime_RequestDate = null,
                            GroupProductCode = string.Empty,
                            GroupProductCodeNotUnicode = string.Empty,
                            GroupProductID = -1,
                            GroupProductName = string.Empty,
                            GroupVehicle = string.Empty,
                            HasCashCollect = false,
                            HasUseContract = true,
                            InspectionDate = c.DateInspect.HasValue ? c.DateInspect : c.ORD_Order.DateInspect,
                            IsHot = c.ORD_Order.IsHot,
                            LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                            LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location2.Code : string.Empty,
                            LocationFromCodeName = string.Empty,
                            LocationFromName = c.LocationFromID > 0 ? c.CUS_Location2.LocationName : string.Empty,
                            LocationReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                            LocationReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                            LocationToCode = c.LocationToID > 0 ? c.CUS_Location3.Code : string.Empty,
                            LocationToCodeName = string.Empty,
                            LocationToDistrict = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                            LocationToProvince = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToName = c.LocationToID > 0 ? c.CUS_Location3.LocationName : string.Empty,
                            LocationToNote = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Note : string.Empty,
                            LocationToNote1 = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Note1 : string.Empty,
                            Note = c.ORD_Order.Note,
                            OrderCode = c.ORD_Order.Code,
                            OrderID = c.OrderID,
                            Packing = string.Empty,
                            PackingID = c.CAT_Packing.ID,
                            PackingName = string.Empty,
                            PackingNotUnicode = string.Empty,
                            PriceCBM = null,
                            PriceQuantity = null,
                            PriceTOMaster = null,
                            PriceTon = null,
                            ProductCodeWithoutGroup = string.Empty,
                            Quantity = null,
                            Quantity_SKU = null,
                            RequestDate = c.ORD_Order.RequestDate,
                            RequestDate_Time = c.ORD_Order.RequestDate,
                            RequestTime = c.ORD_Order.RequestDate,
                            RoutingCode = c.CUSRoutingID > 0 ? c.CUS_Routing.Code : string.Empty,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            ServiceOfOrder = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.Code : string.Empty,
                            SOCode = string.Empty,
                            StockID = -1,
                            TemperatureMax = null,
                            TemperatureMin = null,
                            TimeGetEmpty = c.DateGetEmpty,
                            TimeReturnEmpty = c.DateReturnEmpty,
                            Ton = c.Ton,
                            Ton_SKU = c.Ton,
                            TripNo = c.ORD_Order.TripNo,
                            TypeOfContainerName = c.CAT_Packing.Code,
                            TypeOfTransportMode = c.ORD_Order.CAT_TransportMode.Code,
                            TypeOfWAInspectionStatus = c.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionNo,
                            UserDefine1 = c.ORD_Order.UserDefine1,
                            UserDefine2 = c.ORD_Order.UserDefine2,
                            UserDefine3 = c.ORD_Order.UserDefine3,
                            UserDefine4 = c.ORD_Order.UserDefine4,
                            UserDefine5 = c.ORD_Order.UserDefine5,
                            UserDefine6 = c.ORD_Order.UserDefine6,
                            UserDefine7 = c.ORD_Order.UserDefine7,
                            UserDefine8 = c.ORD_Order.UserDefine8,
                            UserDefine9 = c.ORD_Order.UserDefine9,
                            VesselName = c.ORD_Order.VesselName,
                            VesselNo = c.ORD_Order.VesselNo
                        }).FirstOrDefault();
                    }
                    if (item != null)
                    {
                        if (item.RequestDate != null)
                        {
                            if (item.ETA != null)
                                item.ETATime_RequestDate = item.ETA.Value.Subtract(item.RequestDate.Value);
                            if (item.ETD != null)
                                item.ETDTime_RequestDate = item.ETD.Value.Subtract(item.RequestDate.Value);
                        }
                        item.CarrierCodeName = item.CarrierCode + "-" + item.CarrierName;
                        item.ProductCodeWithoutGroup = item.Packing;
                        item.PackingNotUnicode = StringHelper.RemoveSign4VietnameseString(item.Packing);
                        item.GroupProductCodeNotUnicode = StringHelper.RemoveSign4VietnameseString(item.GroupProductCode);
                        item.DistributorCodeName = item.DistributorCode + "-" + item.DistributorName;
                        item.CustomerCodeName = item.CustomerCode + "-" + item.CustomerName;
                        item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                        item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;

                        result.Add(item);
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel ORDOrder_ExcelOnline_Init(int templateID, int customerID, int pID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                        DTOORDOrder_ImportCheck dataImport = new DTOORDOrder_ImportCheck();

                        dataImport = ORDOrder_Excel_Import_Data(customerID);
                        objSetting = ORDOrder_Excel_Setting_Get(templateID);

                        string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                                "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                        List<string> sValue = new List<string>(aValue);
                        Dictionary<string, string> dicName = GetDataName();
                        if (objSetting != null)
                        {
                            List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                            var ws = data[0];
                            ws.Rows.Clear();

                            double[] arrColumnWidth = new double[objSetting.TotalColumn.Value];
                            for (int i = 0; i < objSetting.TotalColumn.Value; i++)
                            {
                                arrColumnWidth[i] = 100;
                            }
                            ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                            if (objSetting.RowStart > 1)
                            {
                                #region header
                                var cells = new List<Cell>();
                                foreach (var prop in objSetting.GetType().GetProperties())
                                {
                                    try
                                    {
                                        var p = prop.Name;
                                        if (!sValue.Contains(p))
                                        {
                                            var v = (int)prop.GetValue(objSetting, null);
                                            if (v > 0)
                                            {
                                                if (dicName.ContainsKey(p))
                                                    cells.Add(HelperExcel.NewCell(v - 1, dicName[p], HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                                else
                                                    cells.Add(HelperExcel.NewCell(v - 1, p, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }
                                if (objSetting.HasStock && objSetting.ListStock != null && objSetting.ListStock.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListStock)
                                    {
                                        var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                        if (cusStock != null)
                                        {
                                            if (obj.Ton > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.CBM > 0)
                                                cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.Quantity > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                if (objSetting.HasStockProduct && objSetting.ListStockWithProduct != null && objSetting.ListStockWithProduct.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListStockWithProduct)
                                    {
                                        var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                        var cusGroup = dataImport.ListGroupOfProduct.FirstOrDefault(c => c.ID == obj.GroupOfProductID && c.CUSStockID == obj.StockID);
                                        var cusProduct = dataImport.ListProduct.FirstOrDefault(c => c.ID == obj.ProductID && c.GroupOfProductID == obj.GroupOfProductID);
                                        if (cusStock != null && cusGroup != null && cusProduct != null)
                                        {
                                            if (obj.Ton > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.CBM > 0)
                                                cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.Quantity > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                else
                                {
                                    if (objSetting.HasContainer && objSetting.ListContainer != null && objSetting.ListContainer.Count > 0)
                                    {
                                        foreach (var obj in objSetting.ListContainer)
                                        {
                                            var cusPacking = dataImport.ListPackingCO.FirstOrDefault(c => c.ID == obj.PackingID);
                                            if (cusPacking != null)
                                            {
                                                if (obj.PackingCOQuantity > 0)
                                                    cells.Add(HelperExcel.NewCell(obj.PackingCOQuantity - 1, cusPacking.Code + "_Loại Cont", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            }
                                        }
                                    }
                                }

                                ws.Rows.Add(HelperExcel.NewRow(0, cells));
                                #endregion

                                #region body
                                var dataExport = new List<DTOORDOrder_Export>();
                                if (pID > 0)
                                {
                                    dataExport = ORDOrder_Excel_Export(templateID, pID);
                                }
                                else
                                {
                                    var transportModeID = HelperContract.GetTransportMode(model, objSetting.TypeOfTransportModeID);
                                    var isDI = false;
                                    if (transportModeID == iFTL || transportModeID == iLTL)
                                    {
                                        isDI = true;
                                    }
                                    dataExport = ORDOrder_Excel_GetFirst(isDI, customerID);
                                }

                                if (dataExport != null)
                                {
                                    var cRow = objSetting.RowStart - 1;
                                    List<string> timeProps = new List<string>(new string[] { "RequestTime", "ETARequestTime", "TimeGetEmpty", "TimeReturnEmpty" });
                                    if (objSetting.HasStock)
                                    {
                                        var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.GroupProductCode, c.Packing, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                        foreach (var gop in dataGop)
                                        {
                                            cells = new List<Cell>();
                                            int max = 1;
                                            var item = gop.FirstOrDefault();
                                            foreach (var sto in objSetting.ListStock)
                                            {
                                                var o = gop.Count(c => c.StockID == sto.StockID);
                                                if (o > max)
                                                    max = o;
                                            }
                                            var dataContains = new List<int>();
                                            for (var i = 0; i < max; i++)
                                            {
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                foreach (var stock in objSetting.ListStock)
                                                {
                                                    var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && !dataContains.Contains(c.ID));
                                                    if (objGopInStock != null)
                                                    {
                                                        dataContains.Add(objGopInStock.ID);
                                                        foreach (var prop in stock.GetType().GetProperties())
                                                        {
                                                            try
                                                            {
                                                                var p = prop.Name;
                                                                if (p != "StockID")
                                                                {
                                                                    var v = (int)prop.GetValue(stock, null);
                                                                    var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                                    if (val != null)
                                                                    {
                                                                        //ws.Cells[cRow, v].Value = val.ToString();
                                                                        if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                            cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                    }
                                                                }
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                    else if (objSetting.HasStockProduct)
                                    {
                                        var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                        foreach (var gop in dataGop)
                                        {
                                            cells = new List<Cell>();
                                            int max = 1;
                                            var item = gop.FirstOrDefault();
                                            foreach (var sto in objSetting.ListStockWithProduct)
                                            {
                                                var o = gop.Count(c => c.StockID == sto.StockID && c.GroupProductID == sto.GroupOfProductID && c.PackingID == sto.ProductID);
                                                if (o > max)
                                                    max = o;
                                            }
                                            var dataContains = new List<int>();
                                            for (var i = 0; i < max; i++)
                                            {
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                foreach (var stock in objSetting.ListStockWithProduct)
                                                {
                                                    var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && c.GroupProductID == stock.GroupOfProductID && c.PackingID == stock.ProductID && !dataContains.Contains(c.ID));
                                                    if (objGopInStock != null)
                                                    {
                                                        dataContains.Add(objGopInStock.ID);
                                                        foreach (var prop in stock.GetType().GetProperties())
                                                        {
                                                            try
                                                            {
                                                                var p = prop.Name;
                                                                if (p != "StockID" && p != "GroupOfProductID" && p != "ProductID")
                                                                {
                                                                    var v = (int)prop.GetValue(stock, null);
                                                                    var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                                    if (val != null)
                                                                    {
                                                                        if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                            cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                    }
                                                                }
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objSetting.HasContainer)
                                        {
                                            var dataGroup = dataExport.GroupBy(c => new { c.OrderCode, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                            foreach (var group in dataGroup)
                                            {
                                                cells = new List<Cell>();
                                                int max = 1;
                                                var item = group.FirstOrDefault();
                                                foreach (var cont in objSetting.ListContainer)
                                                {
                                                    var o = group.Count(c => c.PackingID == cont.PackingID);
                                                    if (o > max)
                                                        max = o;
                                                }
                                                var dataContains = new List<int>();
                                                for (var i = 0; i < max; i++)
                                                {
                                                    foreach (var prop in objSetting.GetType().GetProperties())
                                                    {
                                                        try
                                                        {
                                                            var p = prop.Name;
                                                            if (!sValue.Contains(p))
                                                            {
                                                                var v = (int)prop.GetValue(objSetting, null);
                                                                var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                                var txt = string.Empty;
                                                                if (val != null)
                                                                {
                                                                    if (val.GetType() == typeof(DateTime))
                                                                    {
                                                                        if (timeProps.Contains(p))
                                                                        {
                                                                            txt = String.Format("{0:HH:mm}", val);
                                                                        }
                                                                        else
                                                                        {
                                                                            txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                        }
                                                                    }
                                                                    else if (val.GetType() == typeof(TimeSpan))
                                                                    {
                                                                        txt = val.ToString();
                                                                    }
                                                                    else if (val.GetType() == typeof(bool))
                                                                    {
                                                                        bool value = (bool)val;
                                                                        if (value == true)
                                                                        {
                                                                            txt = "x";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = val.ToString();
                                                                    }
                                                                }
                                                                if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                    cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                            }
                                                        }
                                                        catch (Exception)
                                                        {
                                                        }
                                                    }

                                                    foreach (var objCon in objSetting.ListContainer)
                                                    {
                                                        var objContInStock = group.FirstOrDefault(c => c.PackingID == objCon.PackingID && !dataContains.Contains(c.ID));
                                                        if (objContInStock != null)
                                                        {
                                                            dataContains.Add(objContInStock.ID);
                                                            foreach (var prop in objCon.GetType().GetProperties())
                                                            {
                                                                try
                                                                {
                                                                    var p = prop.Name;
                                                                    if (p != "PackingID")
                                                                    {
                                                                        var v = (int)prop.GetValue(objCon, null);
                                                                        var val = group.Count(c => c.PackingID == objCon.PackingID);
                                                                        //var val = objContInStock.GetType().GetProperty(p).GetValue(objContInStock, null);
                                                                        if (val != null)
                                                                        {
                                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                                cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                        }
                                                                    }
                                                                }
                                                                catch (Exception)
                                                                {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                        else
                                        {
                                            foreach (var item in dataExport)
                                            {
                                                cells = new List<Cell>();
                                                item.Quantity_SKU = item.Quantity;
                                                item.Ton_SKU = item.Ton;
                                                item.CBM_SKU = item.CBM;
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }

                            result = HelperExcel.GetByKey(model, functionid, functionkey);
                            result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                            result = HelperExcel.Save(model, Account, result);
                        }
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ImportRowResult ORDOrder_ExcelOnline_Change(int templateID, int customerID, DTOORDOrder_ImportOnline objImport, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                DTOORDOrder_ImportRowResult result = new DTOORDOrder_ImportRowResult();
                result.Row = new Row();
                result.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                result.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DateTime dtNow = DateTime.Now.Date;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                    objSetting = ORDOrder_Excel_Setting_Get(templateID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;

                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var lstCode = new List<string>();

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }
                    failCurrent = 0;
                    foreach (var eRow in ws.Rows)
                    {
                        if (eRow.Index >= rowStart && eRow.Index != row)
                        {
                            foreach (var cell in eRow.Cells)
                            {
                                if (cell.Index == objSetting.OrderCode - 1)
                                {
                                    if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                                    {
                                        lstCode.Add(cell.Value.ToString());
                                    }
                                    else if (failCurrent >= failMax)
                                    {
                                        break;
                                    }
                                    else
                                        failCurrent++;

                                    break;
                                }
                            }
                        }
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool isContinue = true;
                        int SYSCustomerID = -1;

                        List<DTOCUSSettingOrderCode> dataSettingCode = new List<DTOCUSSettingOrderCode>();
                        DTOORDOrder_ImportCheck data = new DTOORDOrder_ImportCheck();

                        #region Get Data
                        data = ORDOrder_Excel_Import_Data(customerID);
                        dataSettingCode = ORDOrder_Excel_Setting_Code_Get();
                        #endregion

                        SYSCustomerID = Account.SYSCustomerID;
                        if (objSetting != null)
                        {
                            //Check các required.
                            ORDOrder_Excel_ValidateSetting(objSetting);

                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                         "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                            var sValue = new List<string>(aValue);
                            var dicTrM = new Dictionary<int, string>();
                            dicTrM.Add(iFCL, "FCL");
                            dicTrM.Add(iFTL, "FTL");
                            dicTrM.Add(iLTL, "LTL");
                            var sortOrder = 1;
                            int serviceID = -1;
                            int svID = -1;
                            int transportID = -1;
                            int tmID = -1;
                            int ctID = -1;
                            int ctTermID = -1;
                            var excelError = new List<string>();

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                ////Nếu điểm giao trống => Break
                                //if (objImport.LocationToID < 0)
                                //{
                                //    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có điểm giao.");
                                //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(57, lstMessageError));
                                //    isContinue = false;
                                //}

                                #region Check TransportMode && ServiceOfOrder
                                if (isContinue)
                                {
                                    //TransportMode
                                    if (objImport.TransportModeID < 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer[0], lstMessageError));
                                        isContinue = false;
                                    }
                                    else
                                    {
                                        tmID = objImport.TransportModeID;
                                        transportID = HelperContract.GetTransportMode(model, tmID);
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTM, tmID.ToString());
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ServiceOfOrderID > 0)
                                        {
                                            svID = objSetting.ServiceOfOrderID;
                                            serviceID = HelperContract.GetServiceOfOrder(model, svID);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                        }
                                        else
                                        {
                                            if (objSetting.ServiceOfOrder < 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột dịch vụ vận chuyển.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var str = excelInput["ServiceOfOrder"].Trim().ToLower();
                                                if (!string.IsNullOrEmpty(str))
                                                {
                                                    var objSV = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.Code.ToLower() == str);
                                                    if (objSV != null)
                                                    {
                                                        svID = objSV.ID;
                                                        serviceID = objSV.ServiceOfOrderID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Dịch vụ vận chuyển [" + str + "]  không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else if (transportID != iFTL && transportID != iLTL)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không xác định dịch vụ vận chuyển.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }

                                    }
                                    if (transportID == iFTL && objSetting.GroupVehicle < 1 && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột loại xe.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                //Xe tải
                                if ((transportID == iFTL || transportID == iLTL) && serviceID == iLO && isContinue)
                                {
                                    #region ĐH xe tải
                                    var cusID = -1;
                                    var cusCode = string.Empty;
                                    var ordCode = string.Empty;
                                    var cusSKU = false;

                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ gửi yêu cầu.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày gửi yêu cầu.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETD.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c đến kho.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c đến kho.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Check Customer, Contract và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //Contract
                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            //Get contract
                                            var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                            var dataC = data.ListContract.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            }
                                        }
                                    }

                                    //OrderCode
                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    #region Check nhà phân phối
                                    var isLocationToFail = objImport.IsLocationToFail;
                                    if (objImport.ExcelErrorLocation.Count > 0)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorLocation.FirstOrDefault());
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    //if (isLocationToFail)
                                    //{
                                    //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, col, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                    //}
                                    var sPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    var sLocation = new List<AddressSearchItem>();
                                    sLocation = objImport.sLocation;

                                    var pID = objImport.PartnerID;
                                    var toID = objImport.LocationToID;
                                    var toCode = objImport.LocationToCode;
                                    var toName = objImport.LocationToName;

                                    if (isContinue)
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPartnerID, pID.ToString());
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                    }

                                    string dName = objImport.PartnerName;
                                    string dCode = objImport.PartnerCode;

                                    sPartnerLocation.AddRange(objImport.ListPartnerLocation);
                                    result.Index = checkRow.Index.HasValue ? checkRow.Index.Value : -1;
                                    result.OrderCode = ordCode;
                                    result.CustomerCode = cusCode;
                                    result.PartnerCode = dCode;
                                    result.PartnerName = dName;
                                    result.PartnerID = pID;
                                    result.LocationToID = toID;
                                    result.LocationToAddress = excelInput["LocationToAddress"];
                                    result.LocationToCode = toCode;
                                    result.CustomerID = cusID;
                                    result.EconomicZone = excelInput["EconomicZone"];
                                    result.RoutingAreaCode = excelInput["RoutingAreaCode"];
                                    result.SOCode = excelInput["SOCode"];
                                    result.DNCode = excelInput["DNCode"];
                                    var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    if (objTMName != null)
                                        result.TransportModeName = objTMName.Name;
                                    result.TransportModeID = transportID;
                                    if (requestDate != null)
                                        result.RequestDate = requestDate.Value;
                                    result.IsLocationToFail = isLocationToFail;
                                    result.IsCreateLocation = objImport.IsCreateLocation;
                                    result.IsCreatePartner = objImport.IsCreatePartner;
                                    result.ListLocationToAddress = sLocation;

                                    if (result.LocationToID < 1 && result.ListLocationToAddress.Count > 0)
                                    {
                                        result.LocationToID = result.ListLocationToAddress[0].CUSLocationID;
                                        toID = result.ListLocationToAddress[0].CUSLocationID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());

                                        if (objImport.LocationToID < 0)
                                            CheckErrorAddress(checkRow, colCheckAddress, HelperExcel.MessageError(93, lstMessageError));
                                    }
                                    #endregion

                                    #region Check Cung đường

                                    int? cusRoutingID = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.RoutingCode > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RoutingCode"]))
                                            {
                                                var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                                var objRoute = data.ListRoute.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == excelInput["RoutingCode"].Trim().ToLower());
                                                if (objRoute != null)
                                                {
                                                    cusRoutingID = objRoute.ID;
                                                }
                                            }
                                        }

                                        if (cusRoutingID == null)
                                        {
                                            cusRoutingID = -1;
                                        }

                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCusRoutingID, cusRoutingID.ToString());
                                    }
                                    #endregion

                                    #region Check sản lượng, kho, nhóm sản phẩm và đơn vị tính, loại xe, nhiệt độ
                                    var sProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    //Dictionary quantity theo kho. [Q = Quantity]
                                    Dictionary<int, Dictionary<int, double>> dicQ = new Dictionary<int, Dictionary<int, double>>();
                                    //Dictionary chi tiết kho. [L = Location]
                                    Dictionary<int, DTOORDData_Location> dicL = new Dictionary<int, DTOORDData_Location>();
                                    //Dictionary chi tiết nhóm sản phẩm đầu tiên/chỉ định trong kho. [GS = GroupProductInStock]
                                    Dictionary<int, DTOORDData_GroupProduct> dicGS = new Dictionary<int, DTOORDData_GroupProduct>();

                                    //Dictionary quantity theo kho-nhóm hàng-hàng hóa. [QP = QuantityProduct]
                                    Dictionary<string, Dictionary<int, double>> dicQP = new Dictionary<string, Dictionary<int, double>>();

                                    //Nếu thiết lập kho theo cột, check kho, lấy sản lượng theo excel.

                                    if (isContinue)
                                    {
                                        if (objSetting.HasStock)
                                        {
                                            if (objSetting.ListStock == null || objSetting.ListStock.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho [Hiện kho].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(26, lstMessageError));
                                                isContinue = false;
                                            }
                                            foreach (var stock in objSetting.ListStock)
                                            {
                                                int sID = stock.StockID;
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == sID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(27, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    dicL.Add(sID, objCheck);
                                                }

                                                if (isContinue)
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    var dicS = GetDataValue(checkRow, stock, sValue);
                                                    if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                    {
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                    dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                                else
                                                                    dicV.Add(1, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(1, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                    dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                                else
                                                                    dicV.Add(2, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(2, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                    dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                                else
                                                                    dicV.Add(3, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(3, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        dicQ.Add(sID, dicV);
                                                    }
                                                }
                                            }

                                            if (dicQ.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu sản lượng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(31, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.HasStockProduct)
                                        {
                                            if (objSetting.ListStockWithProduct == null || objSetting.ListStockWithProduct.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho và nhóm hàng [Hiện Kho-Hàng].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(32, lstMessageError));
                                                isContinue = false;
                                            }

                                            foreach (var stock in objSetting.ListStockWithProduct)
                                            {
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == stock.StockID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(33, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID == stock.StockID && c.ID == stock.GroupOfProductID);
                                                    if (objGop == null)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định nhóm hàng. Kho [" + objCheck.LocationName + "]");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(34, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                    else
                                                    {
                                                        var objPro = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID == objGop.ID && c.CustomerID == cusID);
                                                        if (objPro == null)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định hàng hóa. Nhóm [" + objGop.GroupName + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(35, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                {
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    var key = stock.StockID + "-" + stock.GroupOfProductID + "-" + stock.ProductID;
                                                    dicQP.Add(key, dicV);
                                                }
                                            }
                                        }
                                        //Mỗi dòng 1 kho, check kho, lấy sản lượng theo excel.
                                        else
                                        {
                                            int sID = -1;
                                            if (objSetting.LocationFromCode < 1 && objSetting.LocationFromCodeName < 1)
                                            {
                                                if (data.ListStock.Count(c => c.CustomerID == cusID) == 1)
                                                {
                                                    var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID);

                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập điểm bốc hàng [LocationFromCode]");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(36, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                var sCode = excelInput["LocationFromCode"];
                                                if (objSetting.LocationFromCodeName > 0)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                                    {
                                                        sCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        sCode = string.Empty;
                                                    }
                                                }
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.ToLower().Trim() == sCode.ToLower().Trim());
                                                if (objCheck != null)
                                                {
                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + sCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(37, lstMessageError));
                                                    isContinue = false;
                                                    dicL.Add(-1, new DTOORDData_Location());
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]) || !string.IsNullOrEmpty(excelInput["CBM_SKU"]) || !string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                {
                                                    cusSKU = true;
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton_SKU"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM_SKU"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM_SKU"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity_SKU"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                                else
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                            }
                                        }
                                    }
                                    string strGopCode = string.Empty;
                                    //Dictionary Product theo GroupProduct. [P = Product] - Key: GroupOfProductID
                                    Dictionary<int, int> dicP = new Dictionary<int, int>();
                                    //Dictionary ProductCode theo GroupProduct. [PCode = ProductCode] - Key: GroupOfProductID
                                    Dictionary<int, string> dicPCode = new Dictionary<int, string>();
                                    //Dictionary Product PackingType theo GroupProduct. [Packing = Product Packing] - Key: GroupOfProductID
                                    Dictionary<int, int> dicPacking = new Dictionary<int, int>();

                                    //Nếu không có cột nhóm SP, check sản phẩm ko nhóm (ProductCodeWithoutGroup)
                                    //Nếu không có cột nhóm SP, kiểm tra kho có duy nhất nhóm SP => Lấy
                                    if (isContinue)
                                    {
                                        if (objSetting.GroupProductCode == 0 && objSetting.GroupProductCodeNotUnicode == 0)
                                        {
                                            if (objSetting.ProductCodeWithoutGroup > 0)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                                {
                                                    var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                    if (objP != null)
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                            if (objGS != null)
                                                            {
                                                                strGopCode = objGS.Code;
                                                                dicGS.Add(st.Key, objGS);
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                objGS = new DTOORDData_GroupProduct();
                                                                objGS.ID = -1;
                                                                dicGS.Add(st.Key, objGS);
                                                                if (!dicP.ContainsKey(-1))
                                                                {
                                                                    dicP.Add(objGS.ID, objP.ID);
                                                                    dicPCode.Add(objGS.ID, objP.Code);
                                                                    dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                                }
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, -1);
                                                                dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                                dicPacking.Add(objGS.ID, 1);
                                                            }
                                                        }
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có nhóm sản phẩm.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(41, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(42, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Kiểm tra nhóm SP có tồn tại + có trong kho.
                                        else if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.GroupProductCode > 0)
                                                strGopCode = excelInput["GroupProductCode"];
                                            else
                                                strGopCode = StringHelper.RemoveSign4VietnameseString(excelInput["GroupProductCodeNotUnicode"]);

                                            if (!string.IsNullOrEmpty(strGopCode))
                                            {
                                                var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == strGopCode.Trim().ToLower());
                                                if (objGop != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        if (data.ListGroupOfProduct.Count(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key) == 0)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không có trong kho " + dicL[st.Key].LocationCode + ".");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(43, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                        else
                                                        {
                                                            var objCheck = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key);
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không tồn tại hoặc chưa thiết lập kho.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(44, lstMessageError));
                                                    isContinue = false;
                                                    dicGS.Add(-1, new DTOORDData_GroupProduct());
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(45, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(46, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                            {
                                                var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                if (objP != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                        if (objGS != null)
                                                        {
                                                            strGopCode = objGS.Code;
                                                            dicGS.Add(st.Key, objGS);
                                                            dicP.Add(objGS.ID, objP.ID);
                                                            dicPCode.Add(objGS.ID, objP.Code);
                                                            dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var objGS = new DTOORDData_GroupProduct();
                                                    objGS.ID = -1;
                                                    dicGS.Add(st.Key, objGS);
                                                    if (!dicP.ContainsKey(-1))
                                                    {
                                                        dicP.Add(objGS.ID, -1);
                                                        dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                        dicPacking.Add(objGS.ID, 1);
                                                    }
                                                }
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.Packing == 0 && objSetting.PackingNotUnicode == 0)
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count == 1)
                                                        {
                                                            dicP.Add(gop.Value.ID, dataProduct[0].ID);
                                                            dicPCode.Add(gop.Value.ID, dataProduct[0].Code);
                                                            dicPacking.Add(gop.Value.ID, dataProduct[0].PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                            if (objDefault != null)
                                                            {
                                                                dicP.Add(gop.Value.ID, objDefault.ID);
                                                                dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                dicP.Add(gop.Value.ID, -1);
                                                                dicPCode.Add(gop.Value.ID, "");
                                                                dicPacking.Add(gop.Value.ID, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count > 0)
                                                        {
                                                            var str = string.Empty;
                                                            if (objSetting.Packing > 0)
                                                                str = excelInput["Packing"];
                                                            else if (objSetting.PackingNotUnicode > 0)
                                                                str = StringHelper.RemoveSign4VietnameseString(excelInput["PackingNotUnicode"]);

                                                            if (string.IsNullOrEmpty(str))
                                                            {
                                                                var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                                if (objDefault != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, objDefault.ID);
                                                                    dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                    dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var product = dataProduct.FirstOrDefault(c => c.Code.ToLower().Trim() == str.ToLower().Trim());
                                                                if (product != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, product.ID);
                                                                    dicPCode.Add(gop.Value.ID, product.Code);
                                                                    dicPacking.Add(gop.Value.ID, product.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập Hàng hóa/ĐVT [" + str + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(51, lstMessageError));
                                                                    isContinue = false;

                                                                    DTOORDOrder_Import_ProductNew objProductNew = new DTOORDOrder_Import_ProductNew();
                                                                    objProductNew.GroupOfProductID = gop.Value.ID;
                                                                    objProductNew.GroupName = gop.Value.GroupName;
                                                                    objProductNew.ProductCode = str;
                                                                    objProductNew.ProductName = str;
                                                                    objProductNew.PackingID = gop.Value.DefaultPackingID;
                                                                    objProductNew.PackingName = gop.Value.DefaultPackingName;
                                                                    sProductNew.Add(objProductNew);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            dicP.Add(gop.Value.ID, -1);
                                                            dicPCode.Add(gop.Value.ID, "");
                                                            dicPacking.Add(gop.Value.ID, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập ĐVT.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(52, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var groupVehicleID = -1;

                                    if (isContinue)
                                    {
                                        if (transportID == iFTL)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                            {
                                                var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe[" + excelInput["GroupVehicle"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(53, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    groupVehicleID = objCheck.ID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                                }
                                            }
                                            else
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe không xác định.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(54, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                        }
                                    }

                                    double? tmpMin = null;
                                    double? tmpMax = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMin > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMin"]))
                                        {
                                            try
                                            {
                                                tmpMin = Convert.ToDouble(excelInput["TemperatureMin"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối thiểu.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(55, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMax > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMax"]))
                                        {
                                            try
                                            {
                                                tmpMax = Convert.ToDouble(excelInput["TemperatureMax"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối đa.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(56, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Lưu dữ liệu
                                    result.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    result.ListPartnerLocation.AddRange(sPartnerLocation);
                                    result.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    result.ListProductNew.AddRange(sProductNew);
                                    if (isContinue)
                                    {
                                        var obj = new DTOORDOrder_Import();
                                        if (ctID > 0)
                                            obj.ContractID = ctID;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;

                                        if (obj.ContractID == null)
                                        {
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                                    obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai giá chuyến");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(58, lstMessageError));
                                                isContinue = false;
                                            }
                                        }

                                        obj.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                        obj.ListPartnerLocation.AddRange(sPartnerLocation);
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        obj.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                        obj.ListProductNew.AddRange(sProductNew);

                                        foreach (var dic in dicQ)
                                        {
                                            var gop = new DTOORDData_GroupProduct();
                                            try
                                            {
                                                gop = dicGS[dic.Key];
                                            }
                                            catch
                                            {
                                                gop.Code = excelInput["GroupProductCode"];
                                            }

                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                            objProduct.GroupOfProductID = gop.ID;
                                            objProduct.GroupOfProductCode = gop.Code;
                                            objProduct.ProductID = dicP[gop.ID];
                                            objProduct.ProductCode = dicPCode[gop.ID];
                                            objProduct.PartnerID = pID;
                                            objProduct.PartnerCode = dCode;
                                            objProduct.PartnerName = dName;
                                            objProduct.LocationToID = toID;
                                            objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                            objProduct.LocationFromID = dic.Key;
                                            objProduct.LocationFromCode = dicL[dic.Key].LocationCode;
                                            objProduct.LocationFromName = dicL[dic.Key].LocationName;
                                            objProduct.LocationToCode = toCode;
                                            objProduct.LocationToName = toName;
                                            objProduct.EconomicZone = excelInput["EconomicZone"];
                                            objProduct.Note1 = excelInput["Note1"];
                                            objProduct.Note2 = excelInput["Note2"];

                                            objProduct.TempMax = tmpMax;
                                            objProduct.TempMin = tmpMin;
                                            objProduct.ETD = eTD;
                                            objProduct.ETARequest = eTARequest;
                                            objProduct.ETDRequest = eTDRequest;
                                            objProduct.ETA = eTA;
                                            if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                            }
                                            objProduct.ListLocationToAddress = sLocation;
                                            objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                            var isCheck = false;
                                            if (!cusSKU)
                                            {
                                                if (objSetting.HasStock)
                                                {
                                                    var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                                else if (objSetting.HasStockProduct)
                                                {
                                                    var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                            }
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.ID == dicP[gop.ID] && c.CustomerID == cusID);
                                            if (cusProduct != null)
                                            {
                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                            }

                                            //Kiểm tra thông tin sản lượng nếu là LTL.
                                            if (transportID == iLTL)
                                            {
                                                if (gop.ID > 0 && dicPacking.ContainsKey(gop.ID))
                                                {
                                                    switch (dicPacking[gop.ID])
                                                    {
                                                        case 1://Ton
                                                            if (objProduct.Ton <= 0)
                                                            {
                                                                objProduct.Ton = 0;
                                                                //excelError.Add("Không có số tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objProduct.CBM <= 0)
                                                            {
                                                                objProduct.CBM = 0;
                                                                //excelError.Add("Không có số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objProduct.Quantity <= 0)
                                                            {
                                                                objProduct.Quantity = 0;
                                                                //excelError.Add("Không có số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //if (product.Ton == 0 && product.CBM == 0)
                                                //    excelError.Add("Không có thông tin tấn/khối.");
                                            }

                                            //Lấy giá theo import.
                                            if (gop.ID > 0 && obj.ContractID == null)
                                            {
                                                switch (gop.PackingType)
                                                {
                                                    case 1://Ton
                                                        if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá tấn");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 2://CBM
                                                        if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá khối");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 3://Quantity
                                                        if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá SL");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }

                                            obj.ListProduct.Add(objProduct);
                                        }
                                        foreach (var dic in dicQP)
                                        {
                                            var tmp = dic.Key.ToString().Split('-').ToList();
                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID.ToString() == tmp[0] && c.CustomerID == cusID);
                                            var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID.ToString() == tmp[0] && c.ID.ToString() == tmp[1]);
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID.ToString() == tmp[1] && c.ID.ToString() == tmp[2]);
                                            if (cusStock != null && cusGroup != null && cusProduct != null)
                                            {
                                                objProduct.GroupOfProductID = cusGroup.ID;
                                                objProduct.GroupOfProductCode = cusGroup.Code;
                                                objProduct.ProductID = cusProduct.ID;
                                                objProduct.ProductCode = cusProduct.Code;
                                                objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                                objProduct.PartnerID = pID;
                                                objProduct.PartnerCode = dCode;
                                                objProduct.PartnerName = dName;
                                                objProduct.LocationToID = toID;
                                                objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                                objProduct.LocationFromID = cusStock.CUSLocationID;
                                                objProduct.LocationFromCode = cusStock.LocationCode;
                                                objProduct.LocationFromName = cusStock.LocationName;
                                                objProduct.LocationToCode = toCode;
                                                objProduct.LocationToName = toName;
                                                objProduct.EconomicZone = excelInput["EconomicZone"];
                                                objProduct.Note1 = excelInput["Note1"];
                                                objProduct.Note2 = excelInput["Note2"];

                                                objProduct.TempMax = tmpMax;
                                                objProduct.TempMin = tmpMin;
                                                objProduct.ETD = eTD;
                                                objProduct.ETARequest = eTARequest;
                                                objProduct.ETDRequest = eTDRequest;
                                                objProduct.ETA = eTA;
                                                if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                                {
                                                    //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                    isContinue = false;
                                                }
                                                objProduct.ListLocationToAddress = sLocation;
                                                objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                                var isCheck = false;
                                                if (!cusSKU)
                                                {
                                                    if (objSetting.HasStock)
                                                    {
                                                        var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                    else if (objSetting.HasStockProduct)
                                                    {
                                                        var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                }

                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                                //Kiểm tra thông tin sản lượng nếu là LTL.
                                                if (transportID == iLTL)
                                                {
                                                    if (cusGroup.ID > 0 && dicPacking.ContainsKey(cusGroup.ID))
                                                    {
                                                        switch (dicPacking[cusGroup.ID])
                                                        {
                                                            case 1://Ton
                                                                if (objProduct.Ton <= 0)
                                                                {
                                                                    objProduct.Ton = 0;
                                                                    //excelError.Add("Không có số tấn.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2://CBM
                                                                if (objProduct.CBM <= 0)
                                                                {
                                                                    objProduct.CBM = 0;
                                                                    //excelError.Add("Không có số khối.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3://Quantity
                                                                if (objProduct.Quantity <= 0)
                                                                {
                                                                    objProduct.Quantity = 0;
                                                                    //excelError.Add("Không có số lượng.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }

                                                //Lấy giá theo import.
                                                if (cusGroup.ID > 0 && obj.ContractID == null)
                                                {
                                                    switch (cusGroup.PackingType)
                                                    {
                                                        case 1://Ton
                                                            if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá tấn");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá khối");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá SL");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }

                                                obj.ListProduct.Add(objProduct);
                                            }
                                        }

                                        if (obj.ListProduct != null && isContinue)
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));
                                    }

                                    #endregion
                                    #endregion
                                }
                                else if (transportID == iFCL && isContinue)
                                {
                                    #region ĐH Xe container
                                    int cusID = -1, fID = -1, tID = -1;
                                    int? crID = null, dpID = null, dprID = null;
                                    string cusCode = string.Empty;
                                    string ordCode = string.Empty;
                                    string frCode = string.Empty, frName = string.Empty, toCode = string.Empty, toName = string.Empty;
                                    string dpCode = string.Empty, dpName = string.Empty, dprCode = string.Empty, dprName = string.Empty;
                                    string crCode = string.Empty, crName = string.Empty, crCodeName = string.Empty;
                                    double ton = 0; bool? isInspect = null;

                                    //Nếu điểm giao trống => Break
                                    if (string.IsNullOrEmpty(excelInput["LocationToAddress"]) && string.IsNullOrEmpty(excelInput["LocationToCode"])
                                            && string.IsNullOrEmpty(excelInput["LocationToCodeName"]) && string.IsNullOrEmpty(excelInput["LocationToName"]))
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có điểm giao.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(57, lstMessageError));
                                        isContinue = false;
                                    }

                                    #region Check Customer và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            var dataC = data.ListContractTerm.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID && c.ServiceOfOrderID == svID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //excelError.Add("Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //excelError.Add("Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                ctTermID = dataC.FirstOrDefault().ContractTermID;

                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                        }
                                    }


                                    #endregion

                                    #region Check tgian

                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;
                                    DateTime? cutOffTime = null;
                                    DateTime? getDate = null;
                                    DateTime? returnDate = null;
                                    DateTime? inspectDate = null;

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                            }
                                            catch
                                            {
                                            }
                                            if (objSetting.RequestTime > 0 && requestDate != null)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        requestDate = requestDate.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ gửi yêu cầu.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //excelError.Add("Sai ngày gửi yêu cầu");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETD");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETA");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày y.c lấy hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ y.c lấy hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["CutOffTime"]))
                                        {
                                            try
                                            {
                                                cutOffTime = HelperExcel.ValueToDateVN(excelInput["CutOffTime"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai cut-off-time.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(69, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Ngày lấy rỗng
                                        if (!string.IsNullOrEmpty(excelInput["Date_TimeGetEmpty"]))
                                        {
                                            try
                                            {
                                                getDate = HelperExcel.ValueToDateVN(excelInput["Date_TimeGetEmpty"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày lấy rỗng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(70, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["DateGetEmpty"]))
                                            {
                                                try
                                                {
                                                    getDate = HelperExcel.ValueToDateVN(excelInput["DateGetEmpty"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày lấy rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(70, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            if (getDate != null && !string.IsNullOrEmpty(excelInput["TimeGetEmpty"]) && isContinue)
                                            {
                                                try
                                                {
                                                    //getDate = getDate.Value.Date.Add(TimeSpan.Parse(excelInput["TimeGetEmpty"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["TimeGetEmpty"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    getDate = getDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ lấy rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(71, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Nếu ko nhập Ngày lấy rỗng => ETD-12h
                                        if (getDate == null && string.IsNullOrEmpty(excelInput["Date_TimeGetEmpty"]) && string.IsNullOrEmpty(excelInput["DateGetEmpty"]) && string.IsNullOrEmpty(excelInput["TimeGetEmpty"]))
                                        {
                                            if (eTD != null)
                                                getDate = eTD.Value.AddHours(-12);
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Ngày trả rỗng
                                        if (!string.IsNullOrEmpty(excelInput["Date_TimeReturnEmpty"]))
                                        {
                                            try
                                            {
                                                returnDate = HelperExcel.ValueToDateVN(excelInput["Date_TimeReturnEmpty"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày trả rỗng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(72, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["DateReturnEmpty"]))
                                            {
                                                try
                                                {
                                                    returnDate = HelperExcel.ValueToDateVN(excelInput["DateReturnEmpty"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày trả rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(72, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            if (returnDate != null && !string.IsNullOrEmpty(excelInput["TimeReturnEmpty"]) && isContinue)
                                            {
                                                try
                                                {
                                                    //returnDate = returnDate.Value.Date.Add(TimeSpan.Parse(excelInput["TimeReturnEmpty"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["TimeReturnEmpty"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    returnDate = returnDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ trả rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(73, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Nếu ko nhập Ngày trả rỗng => ETA + 12h
                                        if (returnDate == null && string.IsNullOrEmpty(excelInput["Date_TimeReturnEmpty"]) && string.IsNullOrEmpty(excelInput["DateReturnEmpty"]) && string.IsNullOrEmpty(excelInput["TimeReturnEmpty"]))
                                        {
                                            if (eTA != null)
                                                returnDate = eTA.Value.AddHours(12);
                                        }
                                    }
                                    #endregion

                                    #region Check Carrier, Depot, From, To

                                    frCode = excelInput["LocationFromCode"];
                                    frName = excelInput["LocationFromName"];
                                    if (objSetting.LocationFromCodeName > 0)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                        {
                                            frCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                            frName = excelInput["LocationFromCodeName"].Split('-').Skip(1).FirstOrDefault();
                                        }
                                        else
                                        {
                                            frCode = string.Empty;
                                            frName = string.Empty;
                                        }
                                    }

                                    toCode = excelInput["LocationToCode"];
                                    toName = excelInput["LocationToName"];
                                    if (objSetting.LocationToCodeName > 0)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["LocationToCodeName"]))
                                        {
                                            toCode = excelInput["LocationToCodeName"].Split('-').FirstOrDefault();
                                            toName = excelInput["LocationToCodeName"].Split('-').Skip(1).FirstOrDefault();
                                        }
                                        else
                                        {
                                            toCode = string.Empty;
                                            toName = string.Empty;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        #region Nội địa
                                        if (serviceID == iLO || serviceID == iLOEmpty || serviceID == iLOLaden)
                                        {
                                            var dataDepot = data.ListDepot.Where(c => c.CustomerID == cusID).ToList();

                                            if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"]))
                                            {
                                                dpCode = excelInput["LocationDepotCode"].Trim();
                                                dpName = excelInput["LocationDepotName"].Trim();
                                                var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dpCode.Trim().ToLower());
                                                if (objCheck != null)
                                                {
                                                    dpID = objCheck.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                    if (string.IsNullOrEmpty(dpName))
                                                        dpName = objCheck.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Bãi container [" + dpCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                            if (string.IsNullOrEmpty(dpCode))
                                            {
                                                dpID = dataDepot.FirstOrDefault().CUSLocationID;
                                                dpCode = dataDepot.FirstOrDefault().LocationCode;
                                                dpName = dataDepot.FirstOrDefault().LocationName;
                                            }

                                            if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]) && isContinue)
                                            {
                                                dprCode = excelInput["LocationReturnCode"].Trim();
                                                dprName = excelInput["LocationReturnName"].Trim();
                                                var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.Trim().ToLower());
                                                if (objCheck != null)
                                                {
                                                    dprID = objCheck.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                    if (string.IsNullOrEmpty(dprName))
                                                        dprName = objCheck.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                            if (string.IsNullOrEmpty(dprCode))
                                            {
                                                dprID = dataDepot.FirstOrDefault().CUSLocationID;
                                                dprCode = dataDepot.FirstOrDefault().LocationCode;
                                                dprName = dataDepot.FirstOrDefault().LocationName;
                                            }

                                            if (isContinue)
                                            {
                                                var objF = data.ListCUSLocation.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                if (objF != null)
                                                {
                                                    fID = objF.CUSLocationID;
                                                    if (string.IsNullOrEmpty(frName))
                                                        frName = objF.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                var objT = data.ListCUSLocation.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                if (objT != null)
                                                {
                                                    tID = objT.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());
                                                    if (string.IsNullOrEmpty(toName))
                                                        toName = objT.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (fID == tID && fID > 0)
                                                {
                                                    //excelError.Add("Điểm nhận hàng và điểm giao hàng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (dpID == fID && fID > 0 && dpID > 0)
                                                {
                                                    //excelError.Add("Điểm nhận hàng và điểm lấy rỗng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(78, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (dprID == tID && tID > 0 && dprID > 0)
                                                {
                                                    //excelError.Add("Điểm giao hàng và điểm trả rỗng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(79, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Xuất nhập khẩu
                                        else
                                        {
                                            //Nếu không có Depot và DepotReturn => Mặc định depot đầu tiên của hãng tàu.
                                            if (objSetting.TypeOfWAInspectionStatus > 0 && !string.IsNullOrEmpty(excelInput["TypeOfWAInspectionStatus"]))
                                            {
                                                if (excelInput["TypeOfWAInspectionStatus"].Trim().ToLower() == "x")
                                                {
                                                    isInspect = true;
                                                }
                                                else
                                                {
                                                    isInspect = false;
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(excelInput["InspectionDate"]))
                                            {
                                                try
                                                {
                                                    inspectDate = HelperExcel.ValueToDateVN(excelInput["InspectionDate"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày kiểm hóa.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(80, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Hãng tàu
                                            crCode = excelInput["CarrierCode"].Trim();
                                            crName = excelInput["CarrierName"].Trim();
                                            crCodeName = excelInput["CarrierCodeName"].Trim();
                                            if (!string.IsNullOrEmpty(crCodeName))
                                            {
                                                string[] s = crCodeName.Split('-');
                                                crCode = s[0].Trim();
                                                if (s.Length > 1)
                                                {
                                                    crName = crCodeName.Substring(crCode.Length + 1);
                                                }
                                            }
                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(crCode))
                                                {
                                                    var objCarrier = data.ListCarrier.FirstOrDefault(c => c.CustomerID == cusID && c.PartnerCode.Trim().ToLower() == crCode.Trim().ToLower());
                                                    if (objCarrier != null)
                                                    {
                                                        crID = objCarrier.CUSPartnerID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCarrierID, crID.ToString());
                                                        if (string.IsNullOrEmpty(crName))
                                                            crName = objCarrier.PartnerName;

                                                        var dataDepot = data.ListDepot.Where(c => c.CusPartID == crID && c.CustomerID == cusID).ToList();
                                                        if (dataDepot.Count == 0)
                                                        {
                                                            //excelError.Add("Hãng tàu [" + crCode + "] chưa thiết lập bãi container.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(81, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                        else
                                                        {
                                                            //Nhập khẩu (Cảng-Kho-Depot)
                                                            if (serviceID == iIM)
                                                            {
                                                                if (isContinue)
                                                                {
                                                                    if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]))
                                                                    {
                                                                        dprCode = excelInput["LocationReturnCode"].Trim();
                                                                        dprName = excelInput["LocationReturnName"].Trim();
                                                                        var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.ToLower());
                                                                        if (objCheck != null)
                                                                        {
                                                                            dprID = objCheck.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                                            if (string.IsNullOrEmpty(dprName))
                                                                                dprName = objCheck.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"].Trim()))
                                                                    {
                                                                        dprCode = excelInput["LocationDepotCode"].Trim();
                                                                        dprName = excelInput["LocationDepotName"].Trim();
                                                                        var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.Trim().ToLower());
                                                                        if (objCheck != null)
                                                                        {
                                                                            dprID = objCheck.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                                            if (string.IsNullOrEmpty(dprName))
                                                                                dprName = objCheck.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }

                                                                // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                                                if (string.IsNullOrEmpty(dprCode))
                                                                {
                                                                    dprID = dataDepot.FirstOrDefault().CUSLocationID;
                                                                    dprCode = dataDepot.FirstOrDefault().LocationCode;
                                                                    dprName = dataDepot.FirstOrDefault().LocationName;
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    var objF = data.ListSeaPort.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                                    if (objF != null)
                                                                    {
                                                                        fID = objF.CUSLocationID;
                                                                        if (string.IsNullOrEmpty(frName))
                                                                            frName = objF.LocationName;
                                                                    }
                                                                    else
                                                                    {
                                                                        //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    var objT = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                                    if (objT != null)
                                                                    {
                                                                        tID = objT.CUSLocationID;
                                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());

                                                                        if (string.IsNullOrEmpty(toName))
                                                                            toName = objT.LocationName;
                                                                    }
                                                                    else
                                                                    {
                                                                        //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (fID == tID && fID > 0)
                                                                    {
                                                                        //excelError.Add("Điểm nhận hàng vả điểm giao hàng trùng nhau.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (dprID == tID && tID > 0 && dprID > 0)
                                                                    {
                                                                        //excelError.Add("Điểm giao hàng và điểm trả rỗng trùng nhau.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(79, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //Nhập khẩu (Depot-Kho-Cảng)
                                                                if (serviceID == iEx)
                                                                {
                                                                    if (isContinue)
                                                                    {
                                                                        if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"]))
                                                                        {
                                                                            dpCode = excelInput["LocationDepotCode"];
                                                                            dpName = excelInput["LocationDepotName"];
                                                                            var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == excelInput["LocationDepotCode"].Trim().ToLower());
                                                                            if (objCheck != null)
                                                                            {
                                                                                dpID = objCheck.CUSLocationID;
                                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                                                if (string.IsNullOrEmpty(dpName))
                                                                                    dpName = objCheck.LocationName;
                                                                            }
                                                                            else
                                                                            {
                                                                                //excelError.Add("Bãi container [" + excelInput["LocationDepotCode"] + "] không tồn tại.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                                isContinue = false;
                                                                            }
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]))
                                                                        {
                                                                            dpCode = excelInput["LocationReturnCode"].Trim();
                                                                            dpName = excelInput["LocationReturnName"].Trim();
                                                                            var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dpCode.Trim().ToLower());
                                                                            if (objCheck != null)
                                                                            {
                                                                                dpID = objCheck.CUSLocationID;
                                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                                                if (string.IsNullOrEmpty(dpName))
                                                                                    dpName = objCheck.LocationName;
                                                                            }
                                                                            else
                                                                            {
                                                                                //excelError.Add("Bãi container [" + dpCode + "] không tồn tại.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                                isContinue = false;
                                                                            }
                                                                        }
                                                                    }

                                                                    // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                                                    if (string.IsNullOrEmpty(dpCode))
                                                                    {
                                                                        dpID = dataDepot.FirstOrDefault().CUSLocationID;
                                                                        dpCode = dataDepot.FirstOrDefault().LocationCode;
                                                                        dpName = dataDepot.FirstOrDefault().LocationName;
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        var objF = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                                        if (objF != null)
                                                                        {
                                                                            fID = objF.CUSLocationID;
                                                                            if (string.IsNullOrEmpty(frName))
                                                                                frName = objF.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        var objT = data.ListSeaPort.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                                        if (objT != null)
                                                                        {
                                                                            tID = objT.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());

                                                                            if (string.IsNullOrEmpty(toName))
                                                                                toName = objT.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (fID == tID && fID > 0)
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng vả điểm giao hàng trùng nhau.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (dpID == fID && fID > 0 && dpID > 0)
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng và điểm lấy rỗng trùng nhau.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(78, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Hãng tàu [" + crCode + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(82, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    //excelError.Add("Hãng tàu không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(83, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Check Container
                                    Dictionary<int, int> dicCQ = new Dictionary<int, int>();
                                    if (isContinue)
                                    {
                                        // Chỉ thiết lập 1 cột loại cont
                                        if (!objSetting.HasContainer)
                                        {
                                            var Quantity = 1;

                                            if (isContinue)
                                            {
                                                if (objSetting.Quantity > 0)
                                                {
                                                    try
                                                    {
                                                        Quantity = Convert.ToInt32(excelInput["Quantity"]);
                                                        if (Quantity <= 0)
                                                        {
                                                            //excelError.Add("Số lượng phải lớn hơn 0.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(84, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Số lượng không hợp lệ.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(85, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (objSetting.TypeOfContainerName < 1)
                                                {
                                                    var objCheck = data.ListPackingCO.FirstOrDefault();
                                                    if (objCheck != null)
                                                    {
                                                        dicCQ.Add(objCheck.ID, Quantity);
                                                    }
                                                }
                                                else
                                                {
                                                    var objCheck = data.ListPackingCO.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["TypeOfContainerName"].Trim().ToLower());
                                                    if (objCheck != null)
                                                    {
                                                        dicCQ.Add(objCheck.ID, Quantity);
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Loại container [" + excelInput["TypeOfContainerName"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(86, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            #region Cột loại cont động
                                            if (isContinue)
                                            {
                                                if (objSetting.ListContainer == null || objSetting.ListContainer.Count == 0)
                                                {
                                                    //throw new Exception("Chưa thiết lập cột các loại cont [Loại cont].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(87, lstMessageError));
                                                    isContinue = false;
                                                }

                                                if (isContinue)
                                                {
                                                    foreach (var stock in objSetting.ListContainer)
                                                    {
                                                        if (isContinue)
                                                        {
                                                            var objPacking = data.ListPackingCO.FirstOrDefault(c => c.ID == stock.PackingID);
                                                            if (objPacking == null)
                                                            {
                                                                //throw new Exception("Loại cont thiết lập không xác định.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(88, lstMessageError));
                                                                isContinue = false;
                                                                break;
                                                            }

                                                            if (isContinue)
                                                            {
                                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                                {
                                                                    try
                                                                    {
                                                                        if (!string.IsNullOrEmpty(dicS["PackingCOQuantity"]))
                                                                        {
                                                                            var countCO = Convert.ToInt32(dicS["PackingCOQuantity"]);
                                                                            if (countCO <= 0)
                                                                            {
                                                                                //excelError.Add("Loại cont " + objPacking.Code + " số lượng phải lớn hơn 0.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(84, lstMessageError));
                                                                                isContinue = false;
                                                                                break;
                                                                            }
                                                                            dicCQ.Add(stock.PackingID, Convert.ToInt32(dicS["PackingCOQuantity"]));
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(89, lstMessageError));
                                                                        isContinue = false;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }

                                        if (isContinue && (dicCQ == null || dicCQ.Count == 0))
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(91, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.Ton > 0 && !string.IsNullOrEmpty(excelInput["Ton"]))
                                        {
                                            try
                                            {
                                                ton = Convert.ToDouble(excelInput["Ton"]);
                                                if (ton < 0)
                                                {
                                                    //excelError.Add("Sai trọng tải.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(90, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai trọng tải.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(90, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Lưu dữ liệu

                                    var obj = new DTOORDOrder_Import();
                                    //obj.SortOrder = sortOrder;
                                    //obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                    if (ctID > 0)
                                        obj.ContractID = ctID;
                                    //if (ctTermID > 0)
                                    //    obj.ContractTermID = ctTermID;
                                    //obj.ServiceOfOrderID = svID;
                                    //obj.ServiceOfOrderIDTemp = serviceID;
                                    //obj.TransportModeID = tmID;
                                    //obj.TransportModeIDTemp = transportID;
                                    //var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    //if (objTMName != null)
                                    //    obj.TransportModeName = objTMName.Name;
                                    //var objSVName = data.ListServiceOfOrder.FirstOrDefault(c => c.ID == svID);
                                    //if (objSVName != null)
                                    //    obj.ServiceOfOrderName = objSVName.Name;
                                    //obj.CustomerID = cusID;
                                    //obj.CustomerCode = cusCode;
                                    //obj.IsHot = objSetting.IsHot > 0 && !string.IsNullOrEmpty(excelInput["IsHot"]) && (excelInput["IsHot"].Trim().ToLower() == "true" || excelInput["IsHot"].Trim().ToLower() == "x");
                                    //obj.ExcelSuccess = true;
                                    //obj.Note = excelInput["Note"];
                                    //obj.VesselName = excelInput["VesselName"];
                                    //obj.VesselNo = excelInput["VesselNo"];
                                    //obj.TripNo = excelInput["TripNo"];
                                    //obj.LocationToID = tID;
                                    //obj.LocationToAddress = excelInput["LocationToAddress"];
                                    //obj.TypeOfWAInspectionStatus = isInspect;
                                    //obj.DateInspection = inspectDate;
                                    //if (obj.LocationToID < 0)
                                    //    obj.LocationToID = null;
                                    //obj.PartnerID = crID;
                                    //obj.PartnerCode = crCode;
                                    //obj.PartnerName = crName;
                                    //if (requestDate != null)
                                    //    obj.RequestDate = requestDate.Value;
                                    //obj.ETARequest = eTARequest;
                                    //obj.ETDRequest = eTDRequest;
                                    obj.ETD = eTD;
                                    obj.ETA = eTA;
                                    //obj.CutOffTime = cutOffTime;
                                    //obj.Code = excelInput["OrderCode"];
                                    //obj.UserDefined1 = excelInput["UserDefine1"];
                                    //obj.UserDefined2 = excelInput["UserDefine2"];
                                    //obj.UserDefined3 = excelInput["UserDefine3"];
                                    //obj.UserDefined4 = excelInput["UserDefine4"];
                                    //obj.UserDefined5 = excelInput["UserDefine5"];
                                    //obj.UserDefined6 = excelInput["UserDefine6"];
                                    //obj.UserDefined7 = excelInput["UserDefine7"];
                                    //obj.UserDefined8 = excelInput["UserDefine8"];
                                    //obj.UserDefined9 = excelInput["UserDefine9"];


                                    obj.ListContainer = new List<DTOORDOrder_Import_Container>();
                                    foreach (var con in dicCQ)
                                    {
                                        DTOORDOrder_Import_Container objCo = new DTOORDOrder_Import_Container();
                                        objCo.ContainerNo = excelInput["ContainerNo"];
                                        objCo.SealNo1 = excelInput["SealNo1"];
                                        objCo.SealNo2 = excelInput["SealNo2"];
                                        objCo.Quantity = con.Value;
                                        objCo.PackingID = con.Key;
                                        var objPacking = data.ListPackingCO.FirstOrDefault(c => c.ID == con.Key);
                                        objCo.PackingName = objPacking.PackingName;
                                        objCo.ETA = eTA;
                                        objCo.ETD = eTD;
                                        if (isContinue)
                                        {
                                            if (objCo.ETA != null && objCo.ETD != null && objCo.ETD >= objCo.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        objCo.Ton = ton;
                                        objCo.LocationDepotID = dpID > 0 ? dpID : null;
                                        objCo.LocationDepotCode = dpCode;
                                        objCo.LocationDepotName = dpName;
                                        objCo.LocationDepotReturnID = dprID > 0 ? dprID : null;
                                        objCo.LocationDepotReturnCode = dprCode;
                                        objCo.LocationDepotReturnName = dprName;
                                        objCo.LocationFromID = fID;
                                        objCo.LocationFromCode = frCode;
                                        objCo.LocationFromName = frName;
                                        objCo.LocationToID = tID;
                                        objCo.LocationToCode = toCode;
                                        objCo.LocationToName = toName;
                                        objCo.DateGetEmpty = getDate;
                                        objCo.DateReturnEmpty = returnDate;
                                        objCo.ETARequest = eTARequest;
                                        objCo.ETDRequest = eTDRequest;
                                        objCo.Note1 = excelInput["Note1"];
                                        objCo.Note2 = excelInput["Note2"];

                                        obj.ListContainer.Add(objCo);


                                        if (objSetting.ServiceOfOrderID > 0 || serviceID > 0)
                                        {
                                            if (serviceID == -(int)SYSVarType.ServiceOfOrderImport && objCo.LocationDepotReturnID < 1)
                                                if (objCo.LocationDepotID > 1)
                                                    objCo.LocationDepotReturnID = objCo.LocationDepotID;
                                        }
                                    }

                                    sortOrder++;

                                    if (obj.ListContainer != null && isContinue)
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListContainer));

                                    result.TransportModeID = transportID;
                                    #endregion

                                    #endregion
                                }
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result.Row = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ImportResult ORDOrder_ExcelOnline_Import(int templateID, int customerID, long id, List<Row> lst, List<DTOORDOrder_ImportOnline> lstDetail, List<string> lstMessageError)
        {
            try
            {
                DTOORDOrder_ImportResult result = new DTOORDOrder_ImportResult();
                result.SYSExcel = new SYSExcel();
                result.ListRowResult = new List<DTOORDOrder_ImportRowResult>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DateTime dtNow = DateTime.Now.Date;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                    objSetting = ORDOrder_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;

                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = rowStart + 1;
                    if (lst.Count() > 0)
                    {
                        rowEnd = lst[lst.Count() - 1].Index.Value + 1;
                        foreach (var item in lst)
                        {
                            if (item.Index.Value > rowEnd)
                            {
                                rowEnd = item.Index.Value;
                            }
                        }
                    }
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;
                    //var lstCode = new List<string>();

                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            var countCheck = eRow.Cells.Count(c => c.Value != null && !string.IsNullOrEmpty(c.Value.ToString()));
                            //var orderCell = eRow.Cells.FirstOrDefault(c => c.Index.HasValue && c.Index == objSetting.OrderCode - 1);
                            if (countCheck > 0)
                            {
                                //lstCode.Add(orderCell.Value.ToString());
                            }
                            else
                            {
                                failCurrent++;
                            }
                            //foreach (var cell in eRow.Cells)
                            //{
                            //    if (cell.Index == objSetting.OrderCode - 1)
                            //    {
                            //        if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                            //        {
                            //            lstCode.Add(cell.Value.ToString());
                            //        }
                            //        else
                            //            failCurrent++;

                            //        break;
                            //    }
                            //}


                            if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                        }
                    }

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index > rowEnd) break;

                        DTOORDOrder_ImportRowResult rowResult = new DTOORDOrder_ImportRowResult();
                        rowResult.Index = checkRow.Index.HasValue ? checkRow.Index.Value : -1;
                        rowResult.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                        rowResult.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();

                        bool isContinue = true;
                        int SYSCustomerID = -1;

                        List<DTOCUSSettingOrderCode> dataSettingCode = new List<DTOCUSSettingOrderCode>();
                        DTOORDOrder_ImportCheck data = new DTOORDOrder_ImportCheck();

                        #region Get Data
                        data = ORDOrder_Excel_Import_Data(customerID);
                        dataSettingCode = ORDOrder_Excel_Setting_Code_Get();
                        #endregion

                        SYSCustomerID = Account.SYSCustomerID;
                        if (objSetting != null)
                        {
                            //Check các required.
                            ORDOrder_Excel_ValidateSetting(objSetting);

                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                            var sValue = new List<string>(aValue);
                            var dicTrM = new Dictionary<int, string>();
                            dicTrM.Add(iFCL, "FCL");
                            dicTrM.Add(iFTL, "FTL");
                            dicTrM.Add(iLTL, "LTL");
                            var sortOrder = 1;
                            int serviceID = -1;
                            int svID = -1;
                            int transportID = -1;
                            int tmID = -1;
                            int ctID = -1;
                            int ctTermID = -1;

                            var objImport = lstDetail.FirstOrDefault(c => c.Index == checkRow.Index);

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                ////Nếu điểm giao trống => Break
                                //if (objImport.LocationToID < 0)
                                //{
                                //    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có điểm giao.");
                                //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(57, lstMessageError));
                                //    isContinue = false;
                                //}

                                #region Check TransportMode && ServiceOfOrder
                                if (isContinue)
                                {
                                    //TransportMode
                                    if (objImport.TransportModeID < 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer[0], lstMessageError));
                                        isContinue = false;
                                    }
                                    else
                                    {
                                        tmID = objImport.TransportModeID;
                                        transportID = HelperContract.GetTransportMode(model, tmID);
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTM, tmID.ToString());
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ServiceOfOrderID > 0)
                                        {
                                            svID = objSetting.ServiceOfOrderID;
                                            serviceID = HelperContract.GetServiceOfOrder(model, svID);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                        }
                                        else
                                        {
                                            if (objSetting.ServiceOfOrder < 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột dịch vụ vận chuyển.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var str = excelInput["ServiceOfOrder"].Trim().ToLower();
                                                if (!string.IsNullOrEmpty(str))
                                                {
                                                    var objSV = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.Code.ToLower() == str);
                                                    if (objSV != null)
                                                    {
                                                        svID = objSV.ID;
                                                        serviceID = objSV.ServiceOfOrderID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Dịch vụ vận chuyển [" + str + "]  không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else if (transportID != iFTL && transportID != iLTL)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không xác định dịch vụ vận chuyển.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                }
                                            }
                                        }

                                    }
                                    if (transportID == iFTL && objSetting.GroupVehicle < 1 && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột loại xe.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                //Xe tải
                                if ((transportID == iFTL || transportID == iLTL) && isContinue)
                                {
                                    #region ĐH xe tải
                                    var cusID = -1;
                                    var cusCode = string.Empty;
                                    var cusSKU = false;
                                    var ordCode = string.Empty;

                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ gửi yêu cầu.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày gửi yêu cầu.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETD.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c đến kho.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c đến kho.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Check Customer, Contract và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //Contract
                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            //Get contract
                                            var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                            var dataC = data.ListContract.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                        }
                                    }

                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    #region Check nhà phân phối
                                    var isLocationToFail = objImport.IsLocationToFail;
                                    if (objImport.ExcelErrorLocation.Count > 0)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorLocation.FirstOrDefault());
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    //if (isLocationToFail)
                                    //{
                                    //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, col, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                    //}
                                    var sPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    var sLocation = new List<AddressSearchItem>();
                                    sLocation = objImport.sLocation;

                                    var pID = objImport.PartnerID;
                                    var toID = objImport.LocationToID;
                                    var toCode = objImport.LocationToCode;
                                    var toName = objImport.LocationToName;

                                    if (isContinue)
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPartnerID, pID.ToString());
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                    }

                                    string dName = objImport.PartnerName;
                                    string dCode = objImport.PartnerCode;

                                    sPartnerLocation.AddRange(objImport.ListPartnerLocation);
                                    rowResult.OrderCode = ordCode;
                                    rowResult.CustomerCode = cusCode;
                                    rowResult.PartnerCode = dCode;
                                    rowResult.PartnerName = dName;
                                    rowResult.PartnerID = pID;
                                    rowResult.LocationToID = toID;
                                    rowResult.LocationToAddress = excelInput["LocationToAddress"];
                                    rowResult.LocationToCode = toCode;
                                    rowResult.CustomerID = cusID;
                                    rowResult.EconomicZone = excelInput["EconomicZone"];
                                    rowResult.RoutingAreaCode = excelInput["RoutingAreaCode"];
                                    rowResult.SOCode = excelInput["SOCode"];
                                    rowResult.DNCode = excelInput["DNCode"];

                                    var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    if (objTMName != null)
                                        rowResult.TransportModeName = objTMName.Name;
                                    rowResult.TransportModeID = transportID;
                                    if (requestDate != null)
                                        rowResult.RequestDate = requestDate.Value;
                                    rowResult.IsLocationToFail = isLocationToFail;
                                    rowResult.IsCreateLocation = objImport.IsCreateLocation;
                                    rowResult.IsCreatePartner = objImport.IsCreatePartner;
                                    rowResult.ListLocationToAddress = sLocation;

                                    if (rowResult.LocationToID < 1 && rowResult.ListLocationToAddress.Count > 0)
                                    {
                                        rowResult.LocationToID = rowResult.ListLocationToAddress[0].CUSLocationID;
                                        toID = rowResult.ListLocationToAddress[0].CUSLocationID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                        if (objImport.LocationToID < 0)
                                            CheckErrorAddress(checkRow, colCheckAddress, HelperExcel.MessageError(93, lstMessageError));
                                    }
                                    #endregion

                                    #region Check Cung đường

                                    int? cusRoutingID = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.RoutingCode > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RoutingCode"]))
                                            {
                                                var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                                var objRoute = data.ListRoute.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == excelInput["RoutingCode"].Trim().ToLower());
                                                if (objRoute != null)
                                                {
                                                    cusRoutingID = objRoute.ID;
                                                }
                                            }
                                        }

                                        if (cusRoutingID == null)
                                        {
                                            cusRoutingID = -1;
                                        }

                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCusRoutingID, cusRoutingID.ToString());
                                    }
                                    #endregion

                                    #region Check sản lượng, kho, nhóm sản phẩm và đơn vị tính, loại xe, nhiệt độ
                                    var sProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    //Dictionary quantity theo kho. [Q = Quantity]
                                    Dictionary<int, Dictionary<int, double>> dicQ = new Dictionary<int, Dictionary<int, double>>();
                                    //Dictionary chi tiết kho. [L = Location]
                                    Dictionary<int, DTOORDData_Location> dicL = new Dictionary<int, DTOORDData_Location>();
                                    //Dictionary chi tiết nhóm sản phẩm đầu tiên/chỉ định trong kho. [GS = GroupProductInStock]
                                    Dictionary<int, DTOORDData_GroupProduct> dicGS = new Dictionary<int, DTOORDData_GroupProduct>();

                                    //Dictionary quantity theo kho-nhóm hàng-hàng hóa. [QP = QuantityProduct]
                                    Dictionary<string, Dictionary<int, double>> dicQP = new Dictionary<string, Dictionary<int, double>>();

                                    //Nếu thiết lập kho theo cột, check kho, lấy sản lượng theo excel.

                                    if (isContinue)
                                    {
                                        if (objSetting.HasStock)
                                        {
                                            if (objSetting.ListStock == null || objSetting.ListStock.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho [Hiện kho].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(26, lstMessageError));
                                                isContinue = false;
                                            }
                                            foreach (var stock in objSetting.ListStock)
                                            {
                                                int sID = stock.StockID;
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == sID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(27, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    dicL.Add(sID, objCheck);
                                                }

                                                if (isContinue)
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    var dicS = GetDataValue(checkRow, stock, sValue);
                                                    if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                    {
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                    dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                                else
                                                                    dicV.Add(1, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(1, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                    dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                                else
                                                                    dicV.Add(2, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(2, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                    dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                                else
                                                                    dicV.Add(3, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(3, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        dicQ.Add(sID, dicV);
                                                    }
                                                }
                                            }

                                            if (dicQ.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu sản lượng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(31, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.HasStockProduct)
                                        {
                                            if (objSetting.ListStockWithProduct == null || objSetting.ListStockWithProduct.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho và nhóm hàng [Hiện Kho-Hàng].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(32, lstMessageError));
                                                isContinue = false;
                                            }

                                            foreach (var stock in objSetting.ListStockWithProduct)
                                            {
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == stock.StockID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(33, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID == stock.StockID && c.ID == stock.GroupOfProductID);
                                                    if (objGop == null)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định nhóm hàng. Kho [" + objCheck.LocationName + "]");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(34, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                    else
                                                    {
                                                        var objPro = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID == objGop.ID && c.CustomerID == cusID);
                                                        if (objPro == null)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định hàng hóa. Nhóm [" + objGop.GroupName + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(35, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                {
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    var key = stock.StockID + "-" + stock.GroupOfProductID + "-" + stock.ProductID;
                                                    dicQP.Add(key, dicV);
                                                }
                                            }
                                        }
                                        //Mỗi dòng 1 kho, check kho, lấy sản lượng theo excel.
                                        else
                                        {
                                            int sID = -1;
                                            if (objSetting.LocationFromCode < 1 && objSetting.LocationFromCodeName < 1)
                                            {
                                                if (data.ListStock.Count(c => c.CustomerID == cusID) == 1)
                                                {
                                                    var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID);

                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập điểm bốc hàng [LocationFromCode]");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(36, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                var sCode = excelInput["LocationFromCode"];
                                                if (objSetting.LocationFromCodeName > 0)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                                    {
                                                        sCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        sCode = string.Empty;
                                                    }
                                                }
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.ToLower().Trim() == sCode.ToLower().Trim());
                                                if (objCheck != null)
                                                {
                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + sCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(37, lstMessageError));
                                                    isContinue = false;
                                                    dicL.Add(-1, new DTOORDData_Location());
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]) || !string.IsNullOrEmpty(excelInput["CBM_SKU"]) || !string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                {
                                                    cusSKU = true;
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton_SKU"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM_SKU"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM_SKU"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity_SKU"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                                else
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                            }
                                        }
                                    }
                                    string strGopCode = string.Empty;
                                    //Dictionary Product theo GroupProduct. [P = Product] - Key: GroupOfProductID
                                    Dictionary<int, int> dicP = new Dictionary<int, int>();
                                    //Dictionary ProductCode theo GroupProduct. [PCode = ProductCode] - Key: GroupOfProductID
                                    Dictionary<int, string> dicPCode = new Dictionary<int, string>();
                                    //Dictionary Product PackingType theo GroupProduct. [Packing = Product Packing] - Key: GroupOfProductID
                                    Dictionary<int, int> dicPacking = new Dictionary<int, int>();

                                    //Nếu không có cột nhóm SP, check sản phẩm ko nhóm (ProductCodeWithoutGroup)
                                    //Nếu không có cột nhóm SP, kiểm tra kho có duy nhất nhóm SP => Lấy
                                    if (isContinue)
                                    {
                                        if (objSetting.GroupProductCode == 0 && objSetting.GroupProductCodeNotUnicode == 0)
                                        {
                                            if (objSetting.ProductCodeWithoutGroup > 0)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                                {
                                                    var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                    if (objP != null)
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                            if (objGS != null)
                                                            {
                                                                strGopCode = objGS.Code;
                                                                dicGS.Add(st.Key, objGS);
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                objGS = new DTOORDData_GroupProduct();
                                                                objGS.ID = -1;
                                                                dicGS.Add(st.Key, objGS);
                                                                if (!dicP.ContainsKey(-1))
                                                                {
                                                                    dicP.Add(objGS.ID, objP.ID);
                                                                    dicPCode.Add(objGS.ID, objP.Code);
                                                                    dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                                }
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, -1);
                                                                dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                                dicPacking.Add(objGS.ID, 1);
                                                            }
                                                        }
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có nhóm sản phẩm.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(41, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(42, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Kiểm tra nhóm SP có tồn tại + có trong kho.
                                        else if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.GroupProductCode > 0)
                                                strGopCode = excelInput["GroupProductCode"];
                                            else
                                                strGopCode = StringHelper.RemoveSign4VietnameseString(excelInput["GroupProductCodeNotUnicode"]);

                                            if (!string.IsNullOrEmpty(strGopCode))
                                            {
                                                var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == strGopCode.Trim().ToLower());
                                                if (objGop != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        if (data.ListGroupOfProduct.Count(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key) == 0)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không có trong kho " + dicL[st.Key].LocationCode + ".");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(43, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                        else
                                                        {
                                                            var objCheck = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key);
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không tồn tại hoặc chưa thiết lập kho.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(44, lstMessageError));
                                                    isContinue = false;
                                                    dicGS.Add(-1, new DTOORDData_GroupProduct());
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(45, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(46, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                            {
                                                var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                if (objP != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                        if (objGS != null)
                                                        {
                                                            strGopCode = objGS.Code;
                                                            dicGS.Add(st.Key, objGS);
                                                            dicP.Add(objGS.ID, objP.ID);
                                                            dicPCode.Add(objGS.ID, objP.Code);
                                                            dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var objGS = new DTOORDData_GroupProduct();
                                                    objGS.ID = -1;
                                                    dicGS.Add(st.Key, objGS);
                                                    if (!dicP.ContainsKey(-1))
                                                    {
                                                        dicP.Add(objGS.ID, -1);
                                                        dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                        dicPacking.Add(objGS.ID, 1);
                                                    }
                                                }
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.Packing == 0 && objSetting.PackingNotUnicode == 0)
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count == 1)
                                                        {
                                                            dicP.Add(gop.Value.ID, dataProduct[0].ID);
                                                            dicPCode.Add(gop.Value.ID, dataProduct[0].Code);
                                                            dicPacking.Add(gop.Value.ID, dataProduct[0].PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                            if (objDefault != null)
                                                            {
                                                                dicP.Add(gop.Value.ID, objDefault.ID);
                                                                dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                dicP.Add(gop.Value.ID, -1);
                                                                dicPCode.Add(gop.Value.ID, "");
                                                                dicPacking.Add(gop.Value.ID, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count > 0)
                                                        {
                                                            var str = string.Empty;
                                                            if (objSetting.Packing > 0)
                                                                str = excelInput["Packing"];
                                                            else if (objSetting.PackingNotUnicode > 0)
                                                                str = StringHelper.RemoveSign4VietnameseString(excelInput["PackingNotUnicode"]);

                                                            if (string.IsNullOrEmpty(str))
                                                            {
                                                                var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                                if (objDefault != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, objDefault.ID);
                                                                    dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                    dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var product = dataProduct.FirstOrDefault(c => c.Code.ToLower().Trim() == str.ToLower().Trim());
                                                                if (product != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, product.ID);
                                                                    dicPCode.Add(gop.Value.ID, product.Code);
                                                                    dicPacking.Add(gop.Value.ID, product.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập Hàng hóa/ĐVT [" + str + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(51, lstMessageError));
                                                                    isContinue = false;

                                                                    DTOORDOrder_Import_ProductNew objProductNew = new DTOORDOrder_Import_ProductNew();
                                                                    objProductNew.GroupOfProductID = gop.Value.ID;
                                                                    objProductNew.GroupName = gop.Value.GroupName;
                                                                    objProductNew.ProductCode = str;
                                                                    objProductNew.ProductName = str;
                                                                    objProductNew.PackingID = gop.Value.DefaultPackingID;
                                                                    objProductNew.PackingName = gop.Value.DefaultPackingName;
                                                                    sProductNew.Add(objProductNew);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            dicP.Add(gop.Value.ID, -1);
                                                            dicPCode.Add(gop.Value.ID, "");
                                                            dicPacking.Add(gop.Value.ID, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập ĐVT.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(52, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var groupVehicleID = -1;

                                    if (isContinue)
                                    {
                                        if (transportID == iFTL)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                            {
                                                var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe[" + excelInput["GroupVehicle"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(53, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    groupVehicleID = objCheck.ID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                                }
                                            }
                                            else
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe không xác định.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(54, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                        }
                                    }

                                    double? tmpMin = null;
                                    double? tmpMax = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMin > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMin"]))
                                        {
                                            try
                                            {
                                                tmpMin = Convert.ToDouble(excelInput["TemperatureMin"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối thiểu.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(55, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMax > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMax"]))
                                        {
                                            try
                                            {
                                                tmpMax = Convert.ToDouble(excelInput["TemperatureMax"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối đa.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(56, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion


                                    #region Lưu dữ liệu
                                    rowResult.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    rowResult.ListPartnerLocation.AddRange(sPartnerLocation);
                                    rowResult.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    rowResult.ListProductNew.AddRange(sProductNew);

                                    if (isContinue)
                                    {
                                        var obj = new DTOORDOrder_Import();
                                        if (ctID > 0)
                                            obj.ContractID = ctID;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;

                                        if (obj.ContractID == null)
                                        {
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                                    obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai giá chuyến");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(58, lstMessageError));
                                                isContinue = false;
                                            }
                                        }

                                        obj.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                        obj.ListPartnerLocation.AddRange(sPartnerLocation);
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        obj.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                        obj.ListProductNew.AddRange(sProductNew);
                                        foreach (var dic in dicQ)
                                        {
                                            var gop = new DTOORDData_GroupProduct();
                                            try
                                            {
                                                gop = dicGS[dic.Key];
                                            }
                                            catch
                                            {
                                                gop.Code = excelInput["GroupProductCode"];
                                            }

                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                            objProduct.GroupOfProductID = gop.ID;
                                            objProduct.GroupOfProductCode = gop.Code;
                                            objProduct.ProductID = dicP[gop.ID];
                                            objProduct.ProductCode = dicPCode[gop.ID];
                                            objProduct.PartnerID = pID;
                                            objProduct.PartnerCode = dCode;
                                            objProduct.PartnerName = dName;
                                            objProduct.LocationToID = toID;
                                            objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                            objProduct.LocationFromID = dic.Key;
                                            objProduct.LocationFromCode = dicL[dic.Key].LocationCode;
                                            objProduct.LocationFromName = dicL[dic.Key].LocationName;
                                            objProduct.LocationToCode = toCode;
                                            objProduct.LocationToName = toName;
                                            objProduct.EconomicZone = excelInput["EconomicZone"];
                                            objProduct.Note1 = excelInput["Note1"];
                                            objProduct.Note2 = excelInput["Note2"];

                                            objProduct.TempMax = tmpMax;
                                            objProduct.TempMin = tmpMin;
                                            objProduct.ETD = eTD;
                                            objProduct.ETARequest = eTARequest;
                                            objProduct.ETDRequest = eTDRequest;
                                            objProduct.ETA = eTA;
                                            if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                isContinue = false;
                                            }
                                            objProduct.ListLocationToAddress = sLocation;
                                            objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                            var isCheck = false;
                                            if (!cusSKU)
                                            {
                                                if (objSetting.HasStock)
                                                {
                                                    var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                                else if (objSetting.HasStockProduct)
                                                {
                                                    var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                            }

                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.ID == dicP[gop.ID] && c.CustomerID == cusID);
                                            if (cusProduct != null)
                                            {
                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                            }

                                            //Kiểm tra thông tin sản lượng nếu là LTL.
                                            if (transportID == iLTL)
                                            {
                                                if (gop.ID > 0 && dicPacking.ContainsKey(gop.ID))
                                                {
                                                    switch (dicPacking[gop.ID])
                                                    {
                                                        case 1://Ton
                                                            if (objProduct.Ton <= 0)
                                                            {
                                                                objProduct.Ton = 0;
                                                                //excelError.Add("Không có số tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objProduct.CBM <= 0)
                                                            {
                                                                objProduct.CBM = 0;
                                                                //excelError.Add("Không có số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objProduct.Quantity <= 0)
                                                            {
                                                                objProduct.Quantity = 0;
                                                                //excelError.Add("Không có số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //if (product.Ton == 0 && product.CBM == 0)
                                                //    excelError.Add("Không có thông tin tấn/khối.");
                                            }

                                            //Lấy giá theo import.
                                            if (gop.ID > 0 && obj.ContractID == null)
                                            {
                                                switch (gop.PackingType)
                                                {
                                                    case 1://Ton
                                                        if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá tấn");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 2://CBM
                                                        if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá khối");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 3://Quantity
                                                        if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá SL");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }

                                            obj.ListProduct.Add(objProduct);
                                        }
                                        foreach (var dic in dicQP)
                                        {
                                            var tmp = dic.Key.ToString().Split('-').ToList();
                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID.ToString() == tmp[0] && c.CustomerID == cusID);
                                            var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID.ToString() == tmp[0] && c.ID.ToString() == tmp[1]);
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID.ToString() == tmp[1] && c.ID.ToString() == tmp[2]);
                                            if (cusStock != null && cusGroup != null && cusProduct != null)
                                            {
                                                objProduct.GroupOfProductID = cusGroup.ID;
                                                objProduct.GroupOfProductCode = cusGroup.Code;
                                                objProduct.ProductID = cusProduct.ID;
                                                objProduct.ProductCode = cusProduct.Code;
                                                objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                                objProduct.PartnerID = pID;
                                                objProduct.PartnerCode = dCode;
                                                objProduct.PartnerName = dName;
                                                objProduct.LocationToID = toID;
                                                objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                                objProduct.LocationFromID = cusStock.CUSLocationID;
                                                objProduct.LocationFromCode = cusStock.LocationCode;
                                                objProduct.LocationFromName = cusStock.LocationName;
                                                objProduct.LocationToCode = toCode;
                                                objProduct.LocationToName = toName;
                                                objProduct.EconomicZone = excelInput["EconomicZone"];
                                                objProduct.Note1 = excelInput["Note1"];
                                                objProduct.Note2 = excelInput["Note2"];

                                                objProduct.TempMax = tmpMax;
                                                objProduct.TempMin = tmpMin;
                                                objProduct.ETD = eTD;
                                                objProduct.ETARequest = eTARequest;
                                                objProduct.ETDRequest = eTDRequest;
                                                objProduct.ETA = eTA;
                                                if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                                {
                                                    //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                    isContinue = false;
                                                }
                                                objProduct.ListLocationToAddress = sLocation;
                                                objProduct.LocationToAddress = excelInput["LocationToAddress"];
                                                var isCheck = false;
                                                if (!cusSKU)
                                                {
                                                    if (objSetting.HasStock)
                                                    {
                                                        var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                    else if (objSetting.HasStockProduct)
                                                    {
                                                        var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                }

                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];

                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                                //Kiểm tra thông tin sản lượng nếu là LTL.
                                                if (transportID == iLTL)
                                                {
                                                    if (cusGroup.ID > 0 && dicPacking.ContainsKey(cusGroup.ID))
                                                    {
                                                        switch (dicPacking[cusGroup.ID])
                                                        {
                                                            case 1://Ton
                                                                if (objProduct.Ton <= 0)
                                                                {
                                                                    objProduct.Ton = 0;
                                                                    //excelError.Add("Không có số tấn.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2://CBM
                                                                if (objProduct.CBM <= 0)
                                                                {
                                                                    objProduct.CBM = 0;
                                                                    //excelError.Add("Không có số khối.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3://Quantity
                                                                if (objProduct.Quantity <= 0)
                                                                {
                                                                    objProduct.Quantity = 0;
                                                                    //excelError.Add("Không có số lượng.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }

                                                //Lấy giá theo import.
                                                if (cusGroup.ID > 0 && obj.ContractID == null)
                                                {
                                                    switch (cusGroup.PackingType)
                                                    {
                                                        case 1://Ton
                                                            if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá tấn");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá khối");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá SL");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }

                                                obj.ListProduct.Add(objProduct);
                                            }
                                        }

                                        if (obj.ListProduct != null && isContinue)
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));
                                    }
                                    #endregion
                                    #endregion
                                }
                                else if (transportID == iFCL && isContinue)
                                {
                                    #region ĐH Xe container
                                    int cusID = -1, fID = -1, tID = -1;
                                    int? crID = null, dpID = null, dprID = null;
                                    string cusCode = string.Empty;
                                    string ordCode = string.Empty;
                                    string frCode = string.Empty, frName = string.Empty, toCode = string.Empty, toName = string.Empty;
                                    string dpCode = string.Empty, dpName = string.Empty, dprCode = string.Empty, dprName = string.Empty;
                                    string crCode = string.Empty, crName = string.Empty, crCodeName = string.Empty;
                                    double ton = 0; bool? isInspect = null;

                                    //Nếu điểm giao trống => Break
                                    if (string.IsNullOrEmpty(excelInput["LocationToAddress"]) && string.IsNullOrEmpty(excelInput["LocationToCode"])
                                            && string.IsNullOrEmpty(excelInput["LocationToCodeName"]) && string.IsNullOrEmpty(excelInput["LocationToName"]))
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có điểm giao.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(57, lstMessageError));
                                        isContinue = false;
                                    }

                                    #region Check Customer và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            var dataC = data.ListContractTerm.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID && c.ServiceOfOrderID == svID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //excelError.Add("Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //excelError.Add("Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                ctTermID = dataC.FirstOrDefault().ContractTermID;

                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                        }
                                    }


                                    #endregion

                                    #region Check tgian

                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;
                                    DateTime? cutOffTime = null;
                                    DateTime? getDate = null;
                                    DateTime? returnDate = null;
                                    DateTime? inspectDate = null;

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                            }
                                            catch
                                            {
                                            }
                                            if (objSetting.RequestTime > 0 && requestDate != null)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        requestDate = requestDate.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ gửi yêu cầu.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //excelError.Add("Sai ngày gửi yêu cầu");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETD");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ETA");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày y.c lấy hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ y.c lấy hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["CutOffTime"]))
                                        {
                                            try
                                            {
                                                cutOffTime = HelperExcel.ValueToDateVN(excelInput["CutOffTime"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai cut-off-time.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(69, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Ngày lấy rỗng
                                        if (!string.IsNullOrEmpty(excelInput["Date_TimeGetEmpty"]))
                                        {
                                            try
                                            {
                                                getDate = HelperExcel.ValueToDateVN(excelInput["Date_TimeGetEmpty"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày lấy rỗng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(70, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["DateGetEmpty"]))
                                            {
                                                try
                                                {
                                                    getDate = HelperExcel.ValueToDateVN(excelInput["DateGetEmpty"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày lấy rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(70, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            if (getDate != null && !string.IsNullOrEmpty(excelInput["TimeGetEmpty"]) && isContinue)
                                            {
                                                try
                                                {
                                                    //getDate = getDate.Value.Date.Add(TimeSpan.Parse(excelInput["TimeGetEmpty"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["TimeGetEmpty"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    getDate = getDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ lấy rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(71, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Nếu ko nhập Ngày lấy rỗng => ETD-12h
                                        if (getDate == null && string.IsNullOrEmpty(excelInput["Date_TimeGetEmpty"]) && string.IsNullOrEmpty(excelInput["DateGetEmpty"]) && string.IsNullOrEmpty(excelInput["TimeGetEmpty"]))
                                        {
                                            if (eTD != null)
                                                getDate = eTD.Value.AddHours(-12);
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Ngày trả rỗng
                                        if (!string.IsNullOrEmpty(excelInput["Date_TimeReturnEmpty"]))
                                        {
                                            try
                                            {
                                                returnDate = HelperExcel.ValueToDateVN(excelInput["Date_TimeReturnEmpty"]);
                                            }
                                            catch
                                            {
                                                //excelError.Add("Sai ngày trả rỗng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(72, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["DateReturnEmpty"]))
                                            {
                                                try
                                                {
                                                    returnDate = HelperExcel.ValueToDateVN(excelInput["DateReturnEmpty"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày trả rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(72, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            if (returnDate != null && !string.IsNullOrEmpty(excelInput["TimeReturnEmpty"]) && isContinue)
                                            {
                                                try
                                                {
                                                    //returnDate = returnDate.Value.Date.Add(TimeSpan.Parse(excelInput["TimeReturnEmpty"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["TimeReturnEmpty"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    returnDate = returnDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai giờ trả rỗng.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(73, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        // Nếu ko nhập Ngày trả rỗng => ETA + 12h
                                        if (returnDate == null && string.IsNullOrEmpty(excelInput["Date_TimeReturnEmpty"]) && string.IsNullOrEmpty(excelInput["DateReturnEmpty"]) && string.IsNullOrEmpty(excelInput["TimeReturnEmpty"]))
                                        {
                                            if (eTA != null)
                                                returnDate = eTA.Value.AddHours(12);
                                        }
                                    }
                                    #endregion

                                    #region Check Carrier, Depot, From, To

                                    frCode = excelInput["LocationFromCode"];
                                    frName = excelInput["LocationFromName"];
                                    if (objSetting.LocationFromCodeName > 0)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                        {
                                            frCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                            frName = excelInput["LocationFromCodeName"].Split('-').Skip(1).FirstOrDefault();
                                        }
                                        else
                                        {
                                            frCode = string.Empty;
                                            frName = string.Empty;
                                        }
                                    }

                                    toCode = excelInput["LocationToCode"];
                                    toName = excelInput["LocationToName"];
                                    if (objSetting.LocationToCodeName > 0)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["LocationToCodeName"]))
                                        {
                                            toCode = excelInput["LocationToCodeName"].Split('-').FirstOrDefault();
                                            toName = excelInput["LocationToCodeName"].Split('-').Skip(1).FirstOrDefault();
                                        }
                                        else
                                        {
                                            toCode = string.Empty;
                                            toName = string.Empty;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        #region Nội địa
                                        if (serviceID == iLO || serviceID == iLOEmpty || serviceID == iLOLaden)
                                        {
                                            var dataDepot = data.ListDepot.Where(c => c.CustomerID == cusID).ToList();

                                            if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"]))
                                            {
                                                dpCode = excelInput["LocationDepotCode"].Trim();
                                                dpName = excelInput["LocationDepotName"].Trim();
                                                var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dpCode.Trim().ToLower());
                                                if (objCheck != null)
                                                {
                                                    dpID = objCheck.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                    if (string.IsNullOrEmpty(dpName))
                                                        dpName = objCheck.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Bãi container [" + dpCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                            if (string.IsNullOrEmpty(dpCode))
                                            {
                                                dpID = dataDepot.FirstOrDefault().CUSLocationID;
                                                dpCode = dataDepot.FirstOrDefault().LocationCode;
                                                dpName = dataDepot.FirstOrDefault().LocationName;
                                            }

                                            if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]) && isContinue)
                                            {
                                                dprCode = excelInput["LocationReturnCode"].Trim();
                                                dprName = excelInput["LocationReturnName"].Trim();
                                                var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.Trim().ToLower());
                                                if (objCheck != null)
                                                {
                                                    dprID = objCheck.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                    if (string.IsNullOrEmpty(dprName))
                                                        dprName = objCheck.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                            if (string.IsNullOrEmpty(dprCode))
                                            {
                                                dprID = dataDepot.FirstOrDefault().CUSLocationID;
                                                dprCode = dataDepot.FirstOrDefault().LocationCode;
                                                dprName = dataDepot.FirstOrDefault().LocationName;
                                            }

                                            if (isContinue)
                                            {
                                                var objF = data.ListCUSLocation.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                if (objF != null)
                                                {
                                                    fID = objF.CUSLocationID;
                                                    if (string.IsNullOrEmpty(frName))
                                                        frName = objF.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                var objT = data.ListCUSLocation.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                if (objT != null)
                                                {
                                                    tID = objT.CUSLocationID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());
                                                    if (string.IsNullOrEmpty(toName))
                                                        toName = objT.LocationName;
                                                }
                                                else
                                                {
                                                    //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (fID == tID && fID > 0)
                                                {
                                                    //excelError.Add("Điểm nhận hàng và điểm giao hàng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (dpID == fID && fID > 0 && dpID > 0)
                                                {
                                                    //excelError.Add("Điểm nhận hàng và điểm lấy rỗng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(78, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (dprID == tID && tID > 0 && dprID > 0)
                                                {
                                                    //excelError.Add("Điểm giao hàng và điểm trả rỗng trùng nhau.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(79, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Xuất nhập khẩu
                                        else
                                        {
                                            //Nếu không có Depot và DepotReturn => Mặc định depot đầu tiên của hãng tàu.
                                            if (objSetting.TypeOfWAInspectionStatus > 0 && !string.IsNullOrEmpty(excelInput["TypeOfWAInspectionStatus"]))
                                            {
                                                if (excelInput["TypeOfWAInspectionStatus"].Trim().ToLower() == "x")
                                                {
                                                    isInspect = true;
                                                }
                                                else
                                                {
                                                    isInspect = false;
                                                }
                                            }

                                            if (!string.IsNullOrEmpty(excelInput["InspectionDate"]))
                                            {
                                                try
                                                {
                                                    inspectDate = HelperExcel.ValueToDateVN(excelInput["InspectionDate"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai ngày kiểm hóa.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(80, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            // Hãng tàu
                                            crCode = excelInput["CarrierCode"].Trim();
                                            crName = excelInput["CarrierName"].Trim();
                                            crCodeName = excelInput["CarrierCodeName"].Trim();
                                            if (!string.IsNullOrEmpty(crCodeName))
                                            {
                                                string[] s = crCodeName.Split('-');
                                                crCode = s[0].Trim();
                                                if (s.Length > 1)
                                                {
                                                    crName = crCodeName.Substring(crCode.Length + 1);
                                                }
                                            }
                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(crCode))
                                                {
                                                    var objCarrier = data.ListCarrier.FirstOrDefault(c => c.CustomerID == cusID && c.PartnerCode.Trim().ToLower() == crCode.Trim().ToLower());
                                                    if (objCarrier != null)
                                                    {
                                                        crID = objCarrier.CUSPartnerID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCarrierID, crID.ToString());

                                                        if (string.IsNullOrEmpty(crName))
                                                            crName = objCarrier.PartnerName;

                                                        var dataDepot = data.ListDepot.Where(c => c.CusPartID == crID && c.CustomerID == cusID).ToList();
                                                        if (dataDepot.Count == 0)
                                                        {
                                                            //excelError.Add("Hãng tàu [" + crCode + "] chưa thiết lập bãi container.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(81, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                        else
                                                        {
                                                            //Nhập khẩu (Cảng-Kho-Depot)
                                                            if (serviceID == iIM)
                                                            {
                                                                if (isContinue)
                                                                {
                                                                    if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]))
                                                                    {
                                                                        dprCode = excelInput["LocationReturnCode"].Trim();
                                                                        dprName = excelInput["LocationReturnName"].Trim();
                                                                        var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.ToLower());
                                                                        if (objCheck != null)
                                                                        {
                                                                            dprID = objCheck.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                                            if (string.IsNullOrEmpty(dprName))
                                                                                dprName = objCheck.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"].Trim()))
                                                                    {
                                                                        dprCode = excelInput["LocationDepotCode"].Trim();
                                                                        dprName = excelInput["LocationDepotName"].Trim();
                                                                        var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dprCode.Trim().ToLower());
                                                                        if (objCheck != null)
                                                                        {
                                                                            dprID = objCheck.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotReturnID, dprID.ToString());

                                                                            if (string.IsNullOrEmpty(dprName))
                                                                                dprName = objCheck.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Bãi container [" + dprCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }

                                                                // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                                                if (string.IsNullOrEmpty(dprCode))
                                                                {
                                                                    dprID = dataDepot.FirstOrDefault().CUSLocationID;
                                                                    dprCode = dataDepot.FirstOrDefault().LocationCode;
                                                                    dprName = dataDepot.FirstOrDefault().LocationName;
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    var objF = data.ListSeaPort.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                                    if (objF != null)
                                                                    {
                                                                        fID = objF.CUSLocationID;
                                                                        if (string.IsNullOrEmpty(frName))
                                                                            frName = objF.LocationName;
                                                                    }
                                                                    else
                                                                    {
                                                                        //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    var objT = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                                    if (objT != null)
                                                                    {
                                                                        tID = objT.CUSLocationID;
                                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());

                                                                        if (string.IsNullOrEmpty(toName))
                                                                            toName = objT.LocationName;
                                                                    }
                                                                    else
                                                                    {
                                                                        //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (fID == tID && fID > 0)
                                                                    {
                                                                        //excelError.Add("Điểm nhận hàng vả điểm giao hàng trùng nhau.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }

                                                                if (isContinue)
                                                                {
                                                                    if (dprID == tID && tID > 0 && dprID > 0)
                                                                    {
                                                                        //excelError.Add("Điểm giao hàng và điểm trả rỗng trùng nhau.");
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(79, lstMessageError));
                                                                        isContinue = false;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //Nhập khẩu (Depot-Kho-Cảng)
                                                                if (serviceID == iEx)
                                                                {
                                                                    if (isContinue)
                                                                    {
                                                                        if (objSetting.LocationDepotCode > 0 && !string.IsNullOrEmpty(excelInput["LocationDepotCode"]))
                                                                        {
                                                                            dpCode = excelInput["LocationDepotCode"];
                                                                            dpName = excelInput["LocationDepotName"];
                                                                            var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == excelInput["LocationDepotCode"].Trim().ToLower());
                                                                            if (objCheck != null)
                                                                            {
                                                                                dpID = objCheck.CUSLocationID;
                                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                                                if (string.IsNullOrEmpty(dpName))
                                                                                    dpName = objCheck.LocationName;
                                                                            }
                                                                            else
                                                                            {
                                                                                //excelError.Add("Bãi container [" + excelInput["LocationDepotCode"] + "] không tồn tại.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                                isContinue = false;
                                                                            }
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (objSetting.LocationReturnCode > 0 && !string.IsNullOrEmpty(excelInput["LocationReturnCode"]))
                                                                        {
                                                                            dpCode = excelInput["LocationReturnCode"].Trim();
                                                                            dpName = excelInput["LocationReturnName"].Trim();
                                                                            var objCheck = dataDepot.FirstOrDefault(c => c.LocationCode.Trim().ToLower() == dpCode.Trim().ToLower());
                                                                            if (objCheck != null)
                                                                            {
                                                                                dpID = objCheck.CUSLocationID;
                                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDepotID, dpID.ToString());

                                                                                if (string.IsNullOrEmpty(dpName))
                                                                                    dpName = objCheck.LocationName;
                                                                            }
                                                                            else
                                                                            {
                                                                                //excelError.Add("Bãi container [" + dpCode + "] không tồn tại.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(74, lstMessageError));
                                                                                isContinue = false;
                                                                            }
                                                                        }
                                                                    }

                                                                    // Nếu ko có depot thì mặc định lấy depot đầu tiên của hãng tàu
                                                                    if (string.IsNullOrEmpty(dpCode))
                                                                    {
                                                                        dpID = dataDepot.FirstOrDefault().CUSLocationID;
                                                                        dpCode = dataDepot.FirstOrDefault().LocationCode;
                                                                        dpName = dataDepot.FirstOrDefault().LocationName;
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        var objF = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == frCode.Trim().ToLower());
                                                                        if (objF != null)
                                                                        {
                                                                            fID = objF.CUSLocationID;
                                                                            if (string.IsNullOrEmpty(frName))
                                                                                frName = objF.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng [" + frCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(75, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        var objT = data.ListSeaPort.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.Trim().ToLower() == toCode.Trim().ToLower());
                                                                        if (objT != null)
                                                                        {
                                                                            tID = objT.CUSLocationID;
                                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, tID.ToString());

                                                                            if (string.IsNullOrEmpty(toName))
                                                                                toName = objT.LocationName;
                                                                        }
                                                                        else
                                                                        {
                                                                            //excelError.Add("Điểm giao hàng [" + toCode + "] không tồn tại.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(76, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (fID == tID && fID > 0)
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng vả điểm giao hàng trùng nhau.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(77, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }

                                                                    if (isContinue)
                                                                    {
                                                                        if (dpID == fID && fID > 0 && dpID > 0)
                                                                        {
                                                                            //excelError.Add("Điểm nhận hàng và điểm lấy rỗng trùng nhau.");
                                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(78, lstMessageError));
                                                                            isContinue = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Hãng tàu [" + crCode + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(82, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    //excelError.Add("Hãng tàu không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(83, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Check Container
                                    Dictionary<int, int> dicCQ = new Dictionary<int, int>();
                                    if (isContinue)
                                    {
                                        // Chỉ thiết lập 1 cột loại cont
                                        if (!objSetting.HasContainer)
                                        {
                                            var Quantity = 1;

                                            if (isContinue)
                                            {
                                                if (objSetting.Quantity > 0)
                                                {
                                                    try
                                                    {
                                                        Quantity = Convert.ToInt32(excelInput["Quantity"]);
                                                        if (Quantity <= 0)
                                                        {
                                                            //excelError.Add("Số lượng phải lớn hơn 0.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(84, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Số lượng không hợp lệ.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(85, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (objSetting.TypeOfContainerName < 1)
                                                {
                                                    var objCheck = data.ListPackingCO.FirstOrDefault();
                                                    if (objCheck != null)
                                                    {
                                                        dicCQ.Add(objCheck.ID, Quantity);
                                                    }
                                                }
                                                else
                                                {
                                                    var objCheck = data.ListPackingCO.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["TypeOfContainerName"].Trim().ToLower());
                                                    if (objCheck != null)
                                                    {
                                                        dicCQ.Add(objCheck.ID, Quantity);
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Loại container [" + excelInput["TypeOfContainerName"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(86, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            #region Cột loại cont động
                                            if (isContinue)
                                            {
                                                if (objSetting.ListContainer == null || objSetting.ListContainer.Count == 0)
                                                {
                                                    //throw new Exception("Chưa thiết lập cột các loại cont [Loại cont].");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(87, lstMessageError));
                                                    isContinue = false;
                                                }

                                                if (isContinue)
                                                {
                                                    foreach (var stock in objSetting.ListContainer)
                                                    {
                                                        if (isContinue)
                                                        {
                                                            var objPacking = data.ListPackingCO.FirstOrDefault(c => c.ID == stock.PackingID);
                                                            if (objPacking == null)
                                                            {
                                                                //throw new Exception("Loại cont thiết lập không xác định.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(88, lstMessageError));
                                                                isContinue = false;
                                                                break;
                                                            }

                                                            if (isContinue)
                                                            {
                                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                                {
                                                                    try
                                                                    {
                                                                        if (!string.IsNullOrEmpty(dicS["PackingCOQuantity"]))
                                                                        {
                                                                            var countCO = Convert.ToInt32(dicS["PackingCOQuantity"]);
                                                                            if (countCO <= 0)
                                                                            {
                                                                                //excelError.Add("Loại cont " + objPacking.Code + " số lượng phải lớn hơn 0.");
                                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(84, lstMessageError));
                                                                                isContinue = false;
                                                                                break;
                                                                            }
                                                                            dicCQ.Add(stock.PackingID, Convert.ToInt32(dicS["PackingCOQuantity"]));
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(89, lstMessageError));
                                                                        isContinue = false;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }

                                        if (isContinue && (dicCQ == null || dicCQ.Count == 0))
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(91, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.Ton > 0 && !string.IsNullOrEmpty(excelInput["Ton"]))
                                        {
                                            try
                                            {
                                                ton = Convert.ToDouble(excelInput["Ton"]);
                                                if (ton < 0)
                                                {
                                                    //excelError.Add("Sai trọng tải.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(90, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai trọng tải.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(90, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Lưu dữ liệu

                                    var obj = new DTOORDOrder_Import();
                                    //obj.SortOrder = sortOrder;
                                    //obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                    if (ctID > 0)
                                        obj.ContractID = ctID;
                                    //if (ctTermID > 0)
                                    //    obj.ContractTermID = ctTermID;
                                    //obj.ServiceOfOrderID = svID;
                                    //obj.ServiceOfOrderIDTemp = serviceID;
                                    //obj.TransportModeID = tmID;
                                    //obj.TransportModeIDTemp = transportID;
                                    //var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    //if (objTMName != null)
                                    //    obj.TransportModeName = objTMName.Name;
                                    //var objSVName = data.ListServiceOfOrder.FirstOrDefault(c => c.ID == svID);
                                    //if (objSVName != null)
                                    //    obj.ServiceOfOrderName = objSVName.Name;
                                    //obj.CustomerID = cusID;
                                    //obj.CustomerCode = cusCode;
                                    //obj.IsHot = objSetting.IsHot > 0 && !string.IsNullOrEmpty(excelInput["IsHot"]) && (excelInput["IsHot"].Trim().ToLower() == "true" || excelInput["IsHot"].Trim().ToLower() == "x");
                                    //obj.ExcelSuccess = true;
                                    //obj.Note = excelInput["Note"];
                                    //obj.VesselName = excelInput["VesselName"];
                                    //obj.VesselNo = excelInput["VesselNo"];
                                    //obj.TripNo = excelInput["TripNo"];
                                    //obj.LocationToID = tID;
                                    //obj.LocationToAddress = excelInput["LocationToAddress"];
                                    //obj.TypeOfWAInspectionStatus = isInspect;
                                    //obj.DateInspection = inspectDate;
                                    //if (obj.LocationToID < 0)
                                    //    obj.LocationToID = null;
                                    //obj.PartnerID = crID;
                                    //obj.PartnerCode = crCode;
                                    //obj.PartnerName = crName;
                                    //if (requestDate != null)
                                    //    obj.RequestDate = requestDate.Value;
                                    //obj.ETARequest = eTARequest;
                                    //obj.ETDRequest = eTDRequest;
                                    obj.ETD = eTD;
                                    obj.ETA = eTA;
                                    //obj.CutOffTime = cutOffTime;
                                    //obj.Code = excelInput["OrderCode"];
                                    //obj.UserDefined1 = excelInput["UserDefine1"];
                                    //obj.UserDefined2 = excelInput["UserDefine2"];
                                    //obj.UserDefined3 = excelInput["UserDefine3"];
                                    //obj.UserDefined4 = excelInput["UserDefine4"];
                                    //obj.UserDefined5 = excelInput["UserDefine5"];
                                    //obj.UserDefined6 = excelInput["UserDefine6"];
                                    //obj.UserDefined7 = excelInput["UserDefine7"];
                                    //obj.UserDefined8 = excelInput["UserDefine8"];
                                    //obj.UserDefined9 = excelInput["UserDefine9"];


                                    obj.ListContainer = new List<DTOORDOrder_Import_Container>();
                                    foreach (var con in dicCQ)
                                    {
                                        DTOORDOrder_Import_Container objCo = new DTOORDOrder_Import_Container();
                                        objCo.ContainerNo = excelInput["ContainerNo"];
                                        objCo.SealNo1 = excelInput["SealNo1"];
                                        objCo.SealNo2 = excelInput["SealNo2"];
                                        objCo.Quantity = con.Value;
                                        objCo.PackingID = con.Key;
                                        var objPacking = data.ListPackingCO.FirstOrDefault(c => c.ID == con.Key);
                                        objCo.PackingName = objPacking.PackingName;
                                        objCo.ETA = eTA;
                                        objCo.ETD = eTD;
                                        if (isContinue)
                                        {
                                            if (objCo.ETA != null && objCo.ETD != null && objCo.ETD >= objCo.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        objCo.Ton = ton;
                                        objCo.LocationDepotID = dpID > 0 ? dpID : null;
                                        objCo.LocationDepotCode = dpCode;
                                        objCo.LocationDepotName = dpName;
                                        objCo.LocationDepotReturnID = dprID > 0 ? dprID : null;
                                        objCo.LocationDepotReturnCode = dprCode;
                                        objCo.LocationDepotReturnName = dprName;
                                        objCo.LocationFromID = fID;
                                        objCo.LocationFromCode = frCode;
                                        objCo.LocationFromName = frName;
                                        objCo.LocationToID = tID;
                                        objCo.LocationToCode = toCode;
                                        objCo.LocationToName = toName;
                                        objCo.DateGetEmpty = getDate;
                                        objCo.DateReturnEmpty = returnDate;
                                        objCo.ETARequest = eTARequest;
                                        objCo.ETDRequest = eTDRequest;
                                        objCo.Note1 = excelInput["Note1"];
                                        objCo.Note2 = excelInput["Note2"];

                                        obj.ListContainer.Add(objCo);


                                        if (objSetting.ServiceOfOrderID > 0 || serviceID > 0)
                                        {
                                            if (serviceID == -(int)SYSVarType.ServiceOfOrderImport && objCo.LocationDepotReturnID < 1)
                                                if (objCo.LocationDepotID > 1)
                                                    objCo.LocationDepotReturnID = objCo.LocationDepotID;
                                        }
                                    }

                                    sortOrder++;

                                    if (obj.ListContainer != null && isContinue)
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListContainer));

                                    rowResult.TransportModeID = transportID;
                                    #endregion

                                    #endregion
                                }

                                result.ListRowResult.Add(rowResult);
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    result.SYSExcel = HelperExcel.GetByID(model, id);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_ExcelOnline_ApproveResult ORDOrder_ExcelOnline_Approve(long id, int templateID, CATFile file)
        {
            DTOORDOrder_ExcelOnline_ApproveResult result = new DTOORDOrder_ExcelOnline_ApproveResult();
            result.ID = -1;
            result.Message = string.Empty;
            result.Warning = string.Empty;
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataRes = new List<DTOORDOrder_Import>();
                    DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                    objSetting = ORDOrder_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);

                    if (lstRow.Count > 0)
                    {
                        lstRow = lstRow.OrderBy(c => c.Index).ToList();
                        var ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            TransportModeID = c.TransportModeID,
                            TransportModeName = c.SYS_Var.ValueOfVar
                        }).ToList();

                        var sortOrder = 1;
                        foreach (var checkRow in lstRow)
                        {
                            if (objSetting != null)
                            {
                                //Check các required.
                                ORDOrder_Excel_ValidateSetting(objSetting);

                                string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                                var sValue = new List<string>(aValue);

                                var excelInput = GetDataValue(checkRow, objSetting, sValue);
                                if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                                {
                                    #region Get Data
                                    string dataTM = HelperExcel.GetString(checkRow, colTM);
                                    string dataSV = HelperExcel.GetString(checkRow, colSV);
                                    string dataCus = HelperExcel.GetString(checkRow, colCus);
                                    string dataContract = HelperExcel.GetString(checkRow, colContract);
                                    string dataTerm = HelperExcel.GetString(checkRow, colTerm);
                                    string dataPartnerID = HelperExcel.GetString(checkRow, colPartnerID);
                                    string dataLocationToID = HelperExcel.GetString(checkRow, colLocationToID);
                                    string dataCusRoutingID = HelperExcel.GetString(checkRow, colCusRoutingID);
                                    string dataGroupVehicleID = HelperExcel.GetString(checkRow, colGroupVehicleID);
                                    string dataDepotID = HelperExcel.GetString(checkRow, colDepotID);
                                    string dataDepotReturnID = HelperExcel.GetString(checkRow, colDepotReturnID);
                                    string dataCarrierID = HelperExcel.GetString(checkRow, colCarrierID);
                                    string dataListProduct = HelperExcel.GetString(checkRow, colListProduct);

                                    int transportID = !string.IsNullOrEmpty(dataTM) ? Convert.ToInt32(dataTM) : 0;
                                    int serviceID = !string.IsNullOrEmpty(dataSV) ? Convert.ToInt32(dataSV) : 0;
                                    int cusID = !string.IsNullOrEmpty(dataCus) ? Convert.ToInt32(dataCus) : 0;
                                    int contractID = !string.IsNullOrEmpty(dataContract) ? Convert.ToInt32(dataContract) : 0;
                                    int termID = !string.IsNullOrEmpty(dataTerm) ? Convert.ToInt32(dataTerm) : 0;
                                    int partnerID = !string.IsNullOrEmpty(dataPartnerID) ? Convert.ToInt32(dataPartnerID) : 0;
                                    int locationToID = !string.IsNullOrEmpty(dataLocationToID) ? Convert.ToInt32(dataLocationToID) : 0;
                                    int cusRoutingID = !string.IsNullOrEmpty(dataCusRoutingID) ? Convert.ToInt32(dataCusRoutingID) : 0;
                                    int groupVehicleID = !string.IsNullOrEmpty(dataGroupVehicleID) ? Convert.ToInt32(dataGroupVehicleID) : 0;
                                    int crID = !string.IsNullOrEmpty(dataCarrierID) ? Convert.ToInt32(dataCarrierID) : 0;

                                    int transportSYSID = HelperContract.GetTransportMode(model, transportID);
                                    int serviceSYSID = HelperContract.GetServiceOfOrder(model, serviceID);
                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }

                                    if (objSetting.RequestDate_Time > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                        }
                                        catch
                                        {
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                    {
                                        try
                                        {
                                            eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                        {
                                            try
                                            {
                                                //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                TimeSpan _time = _date.TimeOfDay;
                                                eTD = requestDate.Value.Date.Add(_time);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        else
                                        {
                                            eTD = requestDate;
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                    {
                                        try
                                        {
                                            eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else if (objSetting.ETATime_RequestDate > 0 && requestDate != null)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                        {
                                            try
                                            {
                                                //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                TimeSpan _time = _date.TimeOfDay;
                                                eTA = requestDate.Value.Date.Add(_time);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        else
                                        {
                                            eTA = requestDate;
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                    {
                                        try
                                        {
                                            eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (eTARequest != null && objSetting.ETARequestTime > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                            {
                                                try
                                                {
                                                    //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTARequest = eTARequest.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                    {
                                        try
                                        {
                                            eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (eTDRequest != null && objSetting.ETDRequestTime > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                            {
                                                try
                                                {
                                                    //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                    #endregion
                                    if (transportSYSID == iFTL || transportSYSID == iLTL)
                                    {
                                        #region Lưu dữ liệu xe tải
                                        List<DTOORDOrder_Import_Product> ListProduct = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOORDOrder_Import_Product>>(dataListProduct);

                                        var obj = new DTOORDOrder_Import();
                                        obj.SortOrder = sortOrder;
                                        obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                        if (contractID > 0)
                                            obj.ContractID = contractID;
                                        if (termID > 0)
                                            obj.ContractTermID = termID;
                                        obj.ServiceOfOrderID = serviceID;
                                        obj.ServiceOfOrderIDTemp = serviceSYSID;
                                        obj.TransportModeID = transportID;
                                        obj.TransportModeName = string.Empty;
                                        var objTMName = ListTransportMode.FirstOrDefault(c => c.ID == transportID);
                                        if (objTMName != null)
                                            obj.TransportModeName = objTMName.Name;
                                        obj.TransportModeIDTemp = transportSYSID;
                                        obj.CustomerID = cusID;
                                        //obj.CustomerCode = cusCode;
                                        obj.IsHot = objSetting.IsHot > 0 && !string.IsNullOrEmpty(excelInput["IsHot"]) && excelInput["IsHot"].Trim().ToLower() == "true";
                                        obj.ExcelSuccess = true;
                                        obj.Note = excelInput["Note"];
                                        //obj.IsLocationToFail = isLocationToFail;
                                        obj.LocationToID = locationToID;
                                        obj.LocationToAddress = excelInput["LocationToAddress"];
                                        if (obj.LocationToID < 0)
                                            obj.LocationToID = null;
                                        obj.PartnerID = partnerID;
                                        if (requestDate != null)
                                            obj.RequestDate = requestDate.Value;
                                        obj.ETARequest = eTARequest;
                                        obj.ETDRequest = eTDRequest;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;
                                        obj.Code = excelInput["OrderCode"];
                                        obj.CUSRoutingID = cusRoutingID > 0 ? (int?)cusRoutingID : null;
                                        obj.UserDefined1 = excelInput["UserDefine1"];
                                        obj.UserDefined2 = excelInput["UserDefine2"];
                                        obj.UserDefined3 = excelInput["UserDefine3"];
                                        obj.UserDefined4 = excelInput["UserDefine4"];
                                        obj.UserDefined5 = excelInput["UserDefine5"];
                                        obj.UserDefined6 = excelInput["UserDefine6"];
                                        obj.UserDefined7 = excelInput["UserDefine7"];
                                        obj.UserDefined8 = excelInput["UserDefine8"];
                                        obj.UserDefined9 = excelInput["UserDefine9"];

                                        if (transportID == iFTL && groupVehicleID > 0)
                                            obj.GroupOfVehicleID = groupVehicleID;

                                        if (obj.ContractID == null && !string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                        {
                                            obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                        }
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        foreach (var product in ListProduct)
                                        {
                                            product.LocationToID = locationToID;
                                            product.SortOrder = sortOrder;
                                        }
                                        obj.ListProduct.AddRange(ListProduct);

                                        if (obj.ListProduct != null)
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));

                                        #endregion
                                        obj.ExcelRow = checkRow.Index.Value;
                                        sortOrder++;
                                        dataRes.Add(obj);
                                    }
                                    else if (transportSYSID == iFCL)
                                    {
                                        #region Lưu dữ liệu Container
                                        DTOORDOrder_ImportCheck data = new DTOORDOrder_ImportCheck();
                                        data.CUSSetting = HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Get(model, Account, cusID);
                                        bool? isInspect = null;

                                        if (objSetting.TypeOfWAInspectionStatus > 0 && !string.IsNullOrEmpty(excelInput["TypeOfWAInspectionStatus"]))
                                        {
                                            if (excelInput["TypeOfWAInspectionStatus"].Trim().ToLower() == "x")
                                            {
                                                isInspect = true;
                                            }
                                            else
                                            {
                                                isInspect = false;
                                            }
                                        }

                                        DateTime? inspectDate = null;
                                        if (!string.IsNullOrEmpty(excelInput["InspectionDate"]))
                                        {
                                            try
                                            {
                                                inspectDate = HelperExcel.ValueToDateVN(excelInput["InspectionDate"]);
                                            }
                                            catch
                                            {
                                            }
                                        }

                                        DateTime? cutOffTime = null;
                                        if (!string.IsNullOrEmpty(excelInput["CutOffTime"]))
                                        {
                                            try
                                            {
                                                cutOffTime = HelperExcel.ValueToDateVN(excelInput["CutOffTime"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        List<DTOORDOrder_Import_Container> ListContainer = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOORDOrder_Import_Container>>(dataListProduct);

                                        var obj = new DTOORDOrder_Import();
                                        obj.SortOrder = sortOrder;
                                        obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                        if (contractID > 0)
                                            obj.ContractID = contractID;
                                        if (termID > 0)
                                            obj.ContractTermID = termID;
                                        obj.ServiceOfOrderID = serviceID;
                                        obj.ServiceOfOrderIDTemp = serviceID;
                                        obj.TransportModeID = transportID;
                                        obj.TransportModeIDTemp = transportSYSID;
                                        obj.TransportModeName = string.Empty;
                                        var objTMName = ListTransportMode.FirstOrDefault(c => c.ID == transportID);
                                        if (objTMName != null)
                                            obj.TransportModeName = objTMName.Name;
                                        obj.CustomerID = cusID;
                                        obj.IsHot = objSetting.IsHot > 0 && !string.IsNullOrEmpty(excelInput["IsHot"]) && (excelInput["IsHot"].Trim().ToLower() == "true" || excelInput["IsHot"].Trim().ToLower() == "x");
                                        obj.ExcelSuccess = true;
                                        obj.Note = excelInput["Note"];
                                        obj.VesselName = excelInput["VesselName"];
                                        obj.VesselNo = excelInput["VesselNo"];
                                        obj.TripNo = excelInput["TripNo"];
                                        obj.LocationToID = locationToID;
                                        obj.LocationToAddress = excelInput["LocationToAddress"];
                                        obj.TypeOfWAInspectionStatus = isInspect;
                                        obj.DateInspection = inspectDate;
                                        if (obj.LocationToID < 0)
                                            obj.LocationToID = null;
                                        obj.PartnerID = crID > 0 ? (int?)crID : null;
                                        if (requestDate != null)
                                            obj.RequestDate = requestDate.Value;
                                        obj.ETARequest = eTARequest;
                                        obj.ETDRequest = eTDRequest;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;
                                        obj.Code = excelInput["OrderCode"];
                                        obj.UserDefined1 = excelInput["UserDefine1"];
                                        obj.UserDefined2 = excelInput["UserDefine2"];
                                        obj.UserDefined3 = excelInput["UserDefine3"];
                                        obj.UserDefined4 = excelInput["UserDefine4"];
                                        obj.UserDefined5 = excelInput["UserDefine5"];
                                        obj.UserDefined6 = excelInput["UserDefine6"];
                                        obj.UserDefined7 = excelInput["UserDefine7"];
                                        obj.UserDefined8 = excelInput["UserDefine8"];
                                        obj.UserDefined9 = excelInput["UserDefine9"];

                                        // Import đơn hàng nếu có nhập ETDRequest thì CutOfTime = ETDRequest + giờ gợi ý
                                        if (cutOffTime == null && eTDRequest != null)
                                        {
                                            if (data.CUSSetting.CutOfTimeSuggest > 0)
                                            {
                                                cutOffTime = eTDRequest.Value.AddHours(data.CUSSetting.CutOfTimeSuggest);
                                            }
                                        }
                                        obj.CutOffTime = cutOffTime;
                                        obj.ListContainer = new List<DTOORDOrder_Import_Container>();
                                        obj.ListContainer.AddRange(ListContainer);
                                        #endregion
                                        obj.ExcelRow = checkRow.Index.Value;
                                        sortOrder++;
                                        dataRes.Add(obj);
                                    }
                                }
                            }
                        }



                        #region Tạo mã đơn hàng
                        List<DTOORDOrder> ListCode = new List<DTOORDOrder>();
                        List<DTOORDOrder> ListCodeData = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOORDOrder { Code = c.Code, CustomerID = c.CustomerID, RequestDate = c.RequestDate, SYSCustomerID = c.SYSCustomerID, UserDefine1 = c.UserDefine1 }).ToList();
                        var dataSettingCode = ORDOrder_Excel_Setting_Code_Get();

                        ListCode.AddRange(ListCodeData);
                        foreach (var group in dataRes.Where(c => c.ExcelSuccess).GroupBy(c => new { c.CustomerID, c.TransportModeID, c.ServiceOfOrderID, c.ContractID, c.RequestDate }).ToList())
                        {
                            var oCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == group.Key.CustomerID);
                            if (oCode == null)
                                oCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID);
                            if (oCode != null && oCode.ActionType > 0)
                            {
                                switch (oCode.ActionType)
                                {
                                    case 1: //Cột Code
                                        foreach (var cGroup in group.GroupBy(c => c.Code).ToList())
                                        {
                                            var ETD = cGroup.Min(c => c.ETD);
                                            var ETA = cGroup.Max(c => c.ETA);
                                            foreach (var c in cGroup)
                                            {
                                                c.ETA = ETA;
                                                c.ETD = ETD;
                                            }
                                            if (oCode.Expr.Contains("ETD") && !ETD.HasValue)
                                            {
                                                foreach (var c in cGroup)
                                                {
                                                    c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                    c.ExcelSuccess = false;
                                                }
                                            }
                                            else
                                            {
                                                DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                                param.CustomerID = cGroup.FirstOrDefault().CustomerID;
                                                param.CustomerCode = cGroup.FirstOrDefault().CustomerCode;
                                                param.TypeOfOrder = cGroup.FirstOrDefault().TransportModeName.ToUpper();
                                                param.ServiceOfOrderID = cGroup.FirstOrDefault().ServiceOfOrderIDTemp;
                                                param.ETD = ETD;
                                                param.UserDefine1 = cGroup.FirstOrDefault().UserDefined1;
                                                param.UserDefine2 = cGroup.FirstOrDefault().UserDefined2;
                                                param.UserDefine3 = cGroup.FirstOrDefault().UserDefined3;
                                                param.UserDefine4 = cGroup.FirstOrDefault().UserDefined4;
                                                param.UserDefine5 = cGroup.FirstOrDefault().UserDefined5;
                                                param.UserDefine6 = cGroup.FirstOrDefault().UserDefined6;
                                                param.UserDefine7 = cGroup.FirstOrDefault().UserDefined7;
                                                param.UserDefine8 = cGroup.FirstOrDefault().UserDefined8;
                                                param.UserDefine9 = cGroup.FirstOrDefault().UserDefined9;
                                                var txt = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                                foreach (var c in cGroup)
                                                {
                                                    c.Code = txt;
                                                }
                                            }
                                        }
                                        break;
                                    case 2: //Mỗi dòng
                                        var aETD = group.Min(c => c.ETD);
                                        var aETA = group.Max(c => c.ETA);
                                        foreach (var c in group)
                                        {
                                            c.ETA = aETA;
                                            c.ETD = aETD;
                                            if (oCode.Expr.Contains("ETD") && !c.ETD.HasValue)
                                            {
                                                c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                c.ExcelSuccess = false;
                                            }
                                            else
                                            {
                                                DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                                param.CustomerID = c.CustomerID;
                                                param.CustomerCode = c.CustomerCode;
                                                param.TypeOfOrder = c.TransportModeName.ToUpper();
                                                param.ServiceOfOrderID = c.ServiceOfOrderIDTemp;
                                                param.ETD = aETD;
                                                param.UserDefine1 = c.UserDefined1;
                                                param.UserDefine2 = c.UserDefined2;
                                                param.UserDefine3 = c.UserDefined3;
                                                param.UserDefine4 = c.UserDefined4;
                                                param.UserDefine5 = c.UserDefined5;
                                                param.UserDefine6 = c.UserDefined6;
                                                param.UserDefine7 = c.UserDefined7;
                                                param.UserDefine8 = c.UserDefined8;
                                                param.UserDefine9 = c.UserDefined9;
                                                var txt = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                                c.Code = txt;
                                            }
                                        }
                                        break;
                                    case 3: //Tất cả                                
                                        var cETD = group.Min(c => c.ETD);
                                        var cETA = group.Max(c => c.ETA);
                                        foreach (var c in group)
                                        {
                                            c.ETA = cETA;
                                            c.ETD = cETD;
                                        }
                                        if (oCode.Expr.Contains("ETD") && !cETD.HasValue)
                                        {
                                            foreach (var c in group)
                                            {
                                                c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                c.ExcelSuccess = false;
                                            }
                                        }
                                        else
                                        {
                                            DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                            param.CustomerID = group.FirstOrDefault().CustomerID;
                                            param.CustomerCode = group.FirstOrDefault().CustomerCode;
                                            param.TypeOfOrder = group.FirstOrDefault().TransportModeName.ToUpper();
                                            param.ServiceOfOrderID = group.FirstOrDefault().ServiceOfOrderIDTemp;
                                            param.ETD = cETD;
                                            param.UserDefine1 = group.FirstOrDefault().UserDefined1;
                                            param.UserDefine2 = group.FirstOrDefault().UserDefined2;
                                            param.UserDefine3 = group.FirstOrDefault().UserDefined3;
                                            param.UserDefine4 = group.FirstOrDefault().UserDefined4;
                                            param.UserDefine5 = group.FirstOrDefault().UserDefined5;
                                            param.UserDefine6 = group.FirstOrDefault().UserDefined6;
                                            param.UserDefine7 = group.FirstOrDefault().UserDefined7;
                                            param.UserDefine8 = group.FirstOrDefault().UserDefined8;
                                            param.UserDefine9 = group.FirstOrDefault().UserDefined9;
                                            var tCode = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                            foreach (var c in group)
                                            {
                                                c.Code = tCode;
                                            }
                                        }
                                        break;
                                }
                            }
                            else
                            {
                                foreach (var cGroup in group.GroupBy(c => c.Code).ToList())
                                {
                                    var ETD = cGroup.Min(c => c.ETD);
                                    var ETA = cGroup.Max(c => c.ETA);
                                    foreach (var c in cGroup)
                                    {
                                        c.ETA = ETA;
                                        c.ETD = ETD;
                                    }
                                }
                            }
                        }
                        foreach (var item in dataRes)
                        {
                            if (!StringHelper.IsValidCode(item.Code) || item.Code.Length > 256)
                            {
                                if (item.ExcelSuccess)
                                {
                                    item.ExcelSuccess = false;
                                    item.ExcelError = "Mã ĐH [" + item.Code + "] không hợp lệ.";
                                    throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "] không hợp lệ. Dòng " + (item.ExcelRow + 1));
                                }
                                else
                                {
                                    item.ExcelError += "Mã ĐH [" + item.Code + "] không hợp lệ.";
                                    throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "] không hợp lệ. Dòng " + (item.ExcelRow + 1));
                                }
                            }
                            var objCheck = ListCodeData.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.Code == item.Code);
                            if (objCheck != null)
                            {
                                if (Setting.IsUniqueOrderCode)
                                {
                                    item.ExcelSuccess = false;
                                    item.ExcelError += " Trùng mã ĐH [" + item.Code + "]";
                                    throw FaultHelper.BusinessFault(null, null, "Trùng mã ĐH [" + item.Code + "]. Dòng " + (item.ExcelRow + 1));
                                }
                                else
                                {
                                    if (ListCodeData.Count(c => c.CustomerID == item.CustomerID && c.Code == item.Code && c.RequestDate == item.RequestDate) > 0)
                                    {
                                        item.ExcelSuccess = false;
                                        item.ExcelError += " Trùng mã ĐH [" + item.Code + "] và ngày gửi yêu cầu.";
                                        throw FaultHelper.BusinessFault(null, null, "Trùng mã ĐH [" + item.Code + "] và ngày gửi yêu cầu. Dòng " + (item.ExcelRow + 1));
                                    }
                                }
                            }
                        }
                        #endregion

                        #region Group
                        var dataSource = new List<DTOORDOrder_Import>();
                        using (CopyHelper copy = new CopyHelper())
                        {
                            var query = dataRes.GroupBy(c => c.Code);
                            foreach (var item in query)
                            {
                                //var lst = item.Cast<DTOORDOrder_Import>().ToList();

                                if (item.Count() > 1)
                                {
                                    DTOORDOrder_Import objOrder = new DTOORDOrder_Import();

                                    copy.Copy(item.FirstOrDefault(), objOrder);
                                    objOrder.ListProduct = new List<DTOORDOrder_Import_Product>();
                                    objOrder.ListContainer = new List<DTOORDOrder_Import_Container>();

                                    if (objOrder.TransportModeIDTemp == iFTL || objOrder.TransportModeIDTemp == iLTL)
                                    {
                                        foreach (var itemOrder in item)
                                        {
                                            objOrder.ListProduct.AddRange(itemOrder.ListProduct);
                                        }
                                    }
                                    else if (objOrder.TransportModeIDTemp == iFCL)
                                    {
                                        foreach (var itemOrder in item)
                                        {
                                            objOrder.ListContainer.AddRange(itemOrder.ListContainer);
                                        }
                                    }
                                    dataSource.Add(objOrder);
                                }
                                else
                                    dataSource.AddRange(item);
                            }
                        }
                        #endregion

                        #region check IsSkipDuplicate
                        List<DTOORDOrder_Import> dataSourceNew = new List<DTOORDOrder_Import>();

                        if (objSetting.IsSkipDuplicate)
                        {
                            List<string> lstError = new List<string>();

                            ListCode = new List<DTOORDOrder>();
                            ListCode.AddRange(ListCodeData);

                            foreach (var item in dataSource)
                            {
                                var checkData = ListCode.Where(c => c.Code == item.Code && c.UserDefine1 == item.UserDefined1 && c.CustomerID == item.CustomerID).FirstOrDefault();

                                if (checkData != null)
                                {
                                    var code = "[" + item.Code + "- dòng " + (item.ExcelRow + 1) + "]";
                                    lstError.Add(code);
                                }
                                else
                                {
                                    DTOORDOrder temp = new DTOORDOrder();
                                    temp.Code = item.Code;
                                    temp.CustomerID = item.CustomerID;
                                    temp.UserDefine1 = item.UserDefined1;

                                    ListCode.Add(temp);
                                    dataSourceNew.Add(item);
                                }
                            }

                            if (lstError.Count > 0)
                            {
                                var str = string.Join(", ", lstError);
                                result.Message = "Dữ liệu " + str + ". Trùng mã đơn hàng và UserDefine1, sẽ không được lưu.";
                            }
                        }
                        else
                        {
                            dataSourceNew.AddRange(dataSource);
                        }
                        #endregion

                        #region warning duplicate
                        List<string> lstWarning = new List<string>();

                        ListCode = new List<DTOORDOrder>();
                        ListCode.AddRange(ListCodeData);

                        foreach (var item in dataSourceNew)
                        {
                            var checkData = ListCode.Where(c => c.Code == item.Code && c.CustomerID == item.CustomerID).FirstOrDefault();

                            if (checkData != null)
                            {
                                var code = "[" + item.Code + "- dòng " + (item.ExcelRow + 1) + "]";
                                lstWarning.Add(code);
                            }
                            else
                            {
                                DTOORDOrder temp = new DTOORDOrder();
                                temp.Code = item.Code;
                                temp.CustomerID = item.CustomerID;

                                ListCode.Add(temp);
                            }
                        }

                        if (lstWarning.Count > 0)
                        {
                            var str = string.Join(", ", lstWarning);
                            result.Warning = "Dữ liệu " + str + ". Trùng mã đơn hàng.";
                        }
                        #endregion

                        dataSourceNew = dataSourceNew.OrderBy(c => c.SortOrder).ToList();
                        if (dataSourceNew.Count > 0)
                        {
                            result.ID = ORDOrder_Excel_Import(templateID, file, dataSourceNew, false);
                        }
                        return result;
                    }
                    else
                        return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void CheckErrorAddress(Row row, int idx, string value)
        {
            var cell = row.Cells.FirstOrDefault(c => c.Index == idx);
            if (cell == null)
            {
                cell = HelperExcel.NewCell(idx, value);
                row.Cells.Add(cell);
            }
            cell.Value = value;
            cell.Color = "#FFFFFF";
            cell.Background = "#FFA500";
        }

        public void ORDOrder_ExcelOnline_LocationToSave(long id, int templateID, List<DTOORDOrder_ImportRowResult> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataRes = new List<DTOORDOrder_Import>();
                    DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                    objSetting = ORDOrder_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    //ws.Rows = lst;

                    if (ws.Rows.Count > 0)
                    {
                        foreach (var item in lst)
                        {
                            if (item.Index > 0 && item.LocationToID > 0)
                            {
                                foreach (var checkRow in ws.Rows)
                                {
                                    if (checkRow.Index == item.Index)
                                    {
                                        //Kiểm tra nếu row success
                                        var cell = checkRow.Cells.FirstOrDefault(c => c.Index == colCheckChange);
                                        if (cell != null && cell.Value != null && cell.Value.ToString() == "x")
                                        {
                                            cell = checkRow.Cells.FirstOrDefault(c => c.Index == colCheckNote);
                                            if (cell != null && cell.Value != null && string.IsNullOrEmpty(cell.Value.ToString()))
                                            {
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, item.LocationToID.ToString());
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private string ORDOrder_Excel_GenCodeFromSetting(ref DTOCUSSettingOrderCode obj, ref List<DTOORDOrder> ListCode, DTOORDOrder_Import_Code param)
        {
            var exp = obj.Expr;
            var idx = 1;

            if (obj.DicCounter == null)
                obj.DicCounter = new Dictionary<DateTime, int>();

            // Tất cả
            if (obj.ActionReset == 0)
            {
                idx = obj.SortOrder + 1;
                obj.SortOrder = idx;
            }
            else
            {
                // Theo thứ tự trong ngày
                if (obj.ActionReset == 1)
                {
                    if (exp.Contains("ETD") && param.ETD.HasValue)
                    {
                        if (obj.DicCounter.ContainsKey(param.ETD.Value.Date))
                        {
                            var dic = obj.DicCounter.FirstOrDefault(c => c.Key == param.ETD.Value.Date);
                            idx = dic.Value + 1;
                            obj.DicCounter.Remove(param.ETD.Value.Date);
                            obj.DicCounter.Add(param.ETD.Value.Date, idx);
                        }
                        else
                        {
                            obj.DicCounter.Add(param.ETD.Value.Date, idx);
                        }
                    }
                    else
                    {
                        if (obj.DicCounter.ContainsKey(DateTime.Now.Date))
                        {
                            var dic = obj.DicCounter.FirstOrDefault(c => c.Key == DateTime.Now.Date);
                            idx = dic.Value + 1;
                            obj.DicCounter.Remove(DateTime.Now.Date);
                            obj.DicCounter.Add(DateTime.Now.Date, idx);
                        }
                        else
                        {
                            obj.DicCounter.Add(DateTime.Now.Date, idx);
                        }
                    }
                }
            }

            var txt = string.Empty;
            txt = exp;
            txt = txt.Replace("[Day-D]", DateTime.Now.Day.ToString());
            txt = txt.Replace("[Day-DD]", DateTime.Now.Day.ToString("00"));
            txt = txt.Replace("[Month-M]", DateTime.Now.Month.ToString());
            txt = txt.Replace("[Month-MM]", DateTime.Now.Month.ToString("00"));
            txt = txt.Replace("[Year-YY]", (DateTime.Now.Year % 100).ToString("00"));
            txt = txt.Replace("[Year-YYYY]", DateTime.Now.Year.ToString("0000"));
            if (param.ETD.HasValue)
            {
                txt = txt.Replace("[DayETD-D]", param.ETD.Value.Day.ToString());
                txt = txt.Replace("[DayETD-DD]", param.ETD.Value.Day.ToString("00"));
                txt = txt.Replace("[MonthETD-M]", param.ETD.Value.Month.ToString());
                txt = txt.Replace("[MonthETD-MM]", param.ETD.Value.Month.ToString("00"));
                txt = txt.Replace("[YearETD-YY]", (param.ETD.Value.Year % 100).ToString("00"));
                txt = txt.Replace("[YearETD-YYYY]", param.ETD.Value.Year.ToString("0000"));
            }
            txt = txt.Replace("[CustomerCode]", param.CustomerCode);
            txt = txt.Replace("[TypeOrder]", param.TypeOfOrder);
            txt = txt.Replace("[UserDefine1]", param.UserDefine1);
            txt = txt.Replace("[UserDefine2]", param.UserDefine2);
            txt = txt.Replace("[UserDefine3]", param.UserDefine3);
            txt = txt.Replace("[UserDefine4]", param.UserDefine4);
            txt = txt.Replace("[UserDefine5]", param.UserDefine5);
            txt = txt.Replace("[UserDefine6]", param.UserDefine6);
            txt = txt.Replace("[UserDefine7]", param.UserDefine7);
            txt = txt.Replace("[UserDefine8]", param.UserDefine8);
            txt = txt.Replace("[UserDefine9]", param.UserDefine9);
            switch (param.ServiceOfOrderID)
            {
                case iIM:
                    txt = txt.Replace("[ServiceOfOrderEng]", "IM");
                    txt = txt.Replace("[ServiceOfOrderVi]", "T");
                    break;
                case iEx:
                    txt = txt.Replace("[ServiceOfOrderEng]", "EX");
                    txt = txt.Replace("[ServiceOfOrderVi]", "D");
                    break;
                case iLO:
                    txt = txt.Replace("[ServiceOfOrderEng]", "LO");
                    txt = txt.Replace("[ServiceOfOrderVi]", "C");
                    break;
                case iLOEmpty:
                    txt = txt.Replace("[ServiceOfOrderEng]", "LOEmpty");
                    txt = txt.Replace("[ServiceOfOrderVi]", "CR");
                    break;
                case iLOLaden:
                    txt = txt.Replace("[ServiceOfOrderEng]", "LOLaden");
                    txt = txt.Replace("[ServiceOfOrderVi]", "CD");
                    break;
            }

            // Tất cả theo đúng mã
            // [CustomerCode][ServiceOfOrderEng][Sort-000]
            // BIAEX-001
            // BIAIM-001
            string temp = txt.Replace("[Sort-000]", "");
            temp = txt.Replace("[Sort-00000]", "");
            temp = txt.Replace("[Sort-0000000]", "");
            if (obj.ActionReset == 2)
            {
                // Áp dụng tất cả khách hàng
                var lstCode = ListCode.Where(c => c.Code.ToLower().StartsWith(temp.ToLower()));
                // Áp dụng cho từng khách hàng
                if (obj.CustomerID != param.SYSCustomerID)
                    lstCode = lstCode.Where(c => c.CustomerID == param.CustomerID).OrderByDescending(c => c.Code);
                if (lstCode != null && lstCode.Count() > 0)
                {
                    var last = lstCode.FirstOrDefault();
                    // Lấy index 
                    string strIndex = last.Code.Split('-')[last.Code.Split('-').Length - 1];
                    if (!string.IsNullOrEmpty(strIndex))
                    {
                        try
                        {
                            idx = Convert.ToInt32(strIndex);
                            idx += 1;
                        }
                        catch { }
                    }
                }
            }

            txt = txt.Replace("[Sort-000]", "-" + idx.ToString("000"));
            txt = txt.Replace("[Sort-00000]", "-" + idx.ToString("00000"));
            txt = txt.Replace("[Sort-0000000]", "-" + idx.ToString("0000000"));
            if (obj.ActionReset == 2)
            {
                DTOORDOrder objCode = new DTOORDOrder();
                objCode.Code = txt;
                objCode.CustomerID = param.CustomerID;
                ListCode.Add(objCode);
            }

            return txt;
        }

        private Dictionary<string, string> GetDataValue(Row checkRow, object obj, List<string> sValue)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();
            foreach (var prop in obj.GetType().GetProperties())
            {
                try
                {
                    var p = prop.Name;
                    if (!sValue.Contains(p))
                    {
                        var v = (int)prop.GetValue(obj, null);
                        var value = HelperExcel.GetString(checkRow, v - 1);
                        result.Add(p, v > 0 ? value : string.Empty);
                    }
                }
                catch (Exception)
                {
                }
            }
            return result;
        }

        private void ORDOrder_Excel_ValidateSetting(DTOCUSSettingOrder obj)
        {
            if (obj.RequestDate < 1)
                throw new Exception("Chưa thiết lập ngày yêu cầu [RequestDate].");
            if (obj.SYSCustomerID == obj.CustomerID && obj.CustomerCode < 1)
                throw new Exception("Chưa thiết lập mã KH [CustomerCode].");
            if (obj.LocationToAddress < 1 && obj.LocationToCode < 1 && obj.LocationToCodeName < 1 && obj.LocationToName < 1)
                throw new Exception("Chưa thiết lập điểm giao hàng.");
        }

        private Dictionary<string, string> GetDataName()
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            result.Add("OrderCode", "Mã ĐH");
            result.Add("UniqueOrderCode", "Mã ĐH duy nhất");
            result.Add("SOCode", "Số SO");
            result.Add("DNCode", "Số DN");
            result.Add("RequestDate", "Ngày yêu cầu");
            result.Add("ETD", "ETD");
            result.Add("ETDTime_RequestDate", "ETD theo ngày yêu cầu");
            result.Add("ETA", "ETA");
            result.Add("ETATime_RequestDate", "ETA theo ngày yêu cầu");
            result.Add("ETARequest", "Ngày yc giao hàng");
            result.Add("ETDRequest", "Ngày yc đến kho");
            result.Add("CustomerCode", "Mã khách hàng");
            result.Add("CustomerName", "Tên khách hàng");
            result.Add("CustomerCodeName", "Mã-Tên khách hàng");
            result.Add("DistributorCode", "Mã NPP");
            result.Add("DistributorName", "Tên NPP");
            result.Add("DistributorCodeName", "Mã-Tên NPP");
            result.Add("LocationFromCode", "Mã điểm nhận");
            result.Add("LocationFromName", "Tên điểm nhận");
            result.Add("LocationFromCodeName", "Mã-Tên điểm nhận");
            result.Add("LocationToCode", "Mã điểm giao");
            result.Add("LocationToCodeName", "Mã-Tên điểm giao");
            result.Add("LocationToName", "Tên điểm giao");
            result.Add("LocationToAddress", "Địa chỉ giao");
            result.Add("GroupProductCode", "Nhóm sản phẩm");
            result.Add("Packing", "Mã hàng hóa/ĐVT");
            result.Add("Ton", "Tấn");
            result.Add("CBM", "Khối");
            result.Add("Quantity", "Số lượng");
            result.Add("GroupVehicle", "Loại xe");
            result.Add("Note", "Ghi chú");
            result.Add("TypeOfTransportMode", "Loại vận chuyển");
            result.Add("ServiceOfOrder", "Dịch vụ");
            result.Add("EconomicZone", "EconomicZone");
            result.Add("RoutingAreaCode", "Mã khu vực");
            result.Add("UserDefine1", "Tùy chọn 1");
            result.Add("UserDefine2", "Tùy chọn 2");
            result.Add("UserDefine3", "Tùy chọn 3");
            result.Add("UserDefine4", "Tùy chọn 4");
            result.Add("UserDefine5", "Tùy chọn 5");
            result.Add("UserDefine6", "Tùy chọn 6");
            result.Add("UserDefine7", "Tùy chọn 7");
            result.Add("UserDefine8", "Tùy chọn 8");
            result.Add("UserDefine9", "Tùy chọn 9");
            result.Add("RequestTime", "Giờ yêu cầu ĐH");
            result.Add("ETARequestTime", "Giờ yêu cầu giao hàng");
            result.Add("ETDRequestTime", "Giờ yêu cầu đến kho");
            result.Add("RequestDate_Time", "Ngày giờ yêu cầu ĐH");
            result.Add("LocationToNote", "Ghi chú điểm giao");
            result.Add("LocationToNote1", "Ghi chú điểm giao 1");
            result.Add("GroupProductCodeNotUnicode", "Nhóm sản phẩm(ko dấu)");
            result.Add("PackingNotUnicode", "Sản phẩm(ko dấu)");
            result.Add("RoutingCode", "Mã cung đường");
            result.Add("IsHot", "Gấp");
            result.Add("CutOffTime", "CutOffTime");
            result.Add("CarrierCode", "Mã hãng tàu");
            result.Add("CarrierCodeName", "Mã-têụ hãng tàu");
            result.Add("CarrierName", "Tên hãng tàu");
            result.Add("VesselNo", "Số tàu");
            result.Add("VesselName", "Tên tàu");
            result.Add("TripNo", "Số chuyến");
            result.Add("ContainerNo", "Số con.");
            result.Add("SealNo1", "SealNo1");
            result.Add("SealNo2", "SealNo2");
            result.Add("TypeOfContainerName", "Loại container");
            result.Add("LocationDepotCode", "Mã depot");
            result.Add("LocationDepotName", "Tên depot");
            result.Add("LocationReturnCode", "Mã depot trả");
            result.Add("LocationReturnName", "Tên depot trả");
            result.Add("HasCashCollect", "Thu hộ");
            result.Add("PriceTOMaster", "Giá chuyến");
            result.Add("PriceTon", "Giá theo tấn");
            result.Add("PriceCBM", "Giá theo khối");
            result.Add("PriceQuantity", "Giá theo số lượng");
            result.Add("TemperatureMax", "NĐ tối đa");
            result.Add("TemperatureMin", "NĐ tối thiểu");
            result.Add("DateGetEmpty", "Ngày lấy rỗng");
            result.Add("Date_TimeGetEmpty", "Ngày/giờ lấy rỗng");
            result.Add("TimeGetEmpty", "Giờ lấy rỗng");
            result.Add("DateReturnEmpty", "Ngày trả rỗng");
            result.Add("Date_TimeReturnEmpty", "Ngày/giờ trả rỗng");
            result.Add("TimeReturnEmpty", "Giờ trả rỗng");
            result.Add("TypeOfWAInspectionStatus", "Miễn kiểm");
            result.Add("InspectionDate", "Tgian kiểm hóa");
            result.Add("ProductCodeWithoutGroup", "Mã SP không nhóm");
            result.Add("Note1", "Ghi chú 1");
            result.Add("Note2", "Ghi chú 2");
            result.Add("Ton_SKU", "Tấn SKU");
            result.Add("CBM_SKU", "Khối SKU");
            result.Add("Quantity_SKU", "Số lượng SKU");

            return result;
        }
        #endregion

        #region ORDPlan
        public DTOResult ORDOrder_Plan_Excel_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (Account.ListActionCode.Contains(ViewAdmin) || c.CustomerID == Account.SYSCustomerID || Account.ListCustomerID.Contains(c.CustomerID)) && c.Key == CUSSettingKey.ORDPlan.ToString()).Select(c => new DTOCUSSettingORDPlan
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        CustomerID = c.CustomerID,
                        SYSCustomerID = c.SYSCustomerID,
                        SettingCustomerName = c.CustomerID != c.SYSCustomerID ? c.CUS_Customer.ShortName : "",
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingORDPlan>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingORDPlan ORDOrder_Plan_Excel_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingORDPlan result = new DTOCUSSettingORDPlan();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingORDPlan>(obj.Setting);
                            if (result != null)
                            {
                                var transportID = HelperContract.GetTransportMode(model, result.TypeOfTransportModeID);
                                result.IsContainer = transportID == -(int)SYSVarType.TransportModeFCL || transportID == -(int)SYSVarType.TransportModeLCL;
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_Plan_ImportCheck ORDOrder_Plan_Excel_Import_Data(int cusID)
        {
            try
            {
                int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                int iDistributor = -(int)SYSVarType.TypeOfPartnerDistributor;

                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;

                DTOORDOrder_Plan_ImportCheck result = new DTOORDOrder_Plan_ImportCheck();
                result.Setting = new DTOSYSSetting();
                result.CUSSetting = new CUSSettingsCutOffTimeSuggest();
                result.SYSCustomerID = Account.SYSCustomerID;
                using (var model = new DataEntities())
                {
                    var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var defTon = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon);
                    var defCBM = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM);
                    var defTU = model.CAT_Packing.FirstOrDefault(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU);

                    result.Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    result.CUSSetting = HelperCUSSetting.CUSSettingsReport_CutOfTimeSuggest_Get(model, Account, cusID);
                    result.ListCode = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOORDOrder { Code = c.Code, CustomerID = c.CustomerID, RequestDate = c.RequestDate, SYSCustomerID = c.SYSCustomerID }).ToList();

                    result.ListCustomer = model.CUS_Customer.Where(c => !c.IsSystem && c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS && (isAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName,
                        IsFindEconomicZone = c.IsFindEconomicZone,
                    }).ToList();

                    result.ListService = model.CAT_Service.Select(c => new DTOCATService
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ServiceName = c.ServiceName,
                        PackingID = 0,
                        PackingName = string.Empty
                    }).ToList();

                    result.ListPackingCO = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        Code = c.Code,
                        PackingName = c.PackingName,
                    }).ToList();

                    result.ListDepot = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CusPartID.HasValue && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListStock = model.CUS_Location.Where(c => c.CusPartID == null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListDistributor = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListGroupOfProduct = model.CUS_GroupOfProductInStock.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_GroupProduct
                    {
                        ID = c.GroupOfProductID,
                        Code = c.CUS_GroupOfProduct.Code,
                        GroupName = c.CUS_GroupOfProduct.GroupName,
                        CUSStockID = c.StockID,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        StockID = c.CUS_Location.LocationID,
                        IsDefault = c.CUS_GroupOfProduct.IsDefault,
                        PackingType = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? 1 : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? 2 : 3,
                        DefaultPackingID = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.ID : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.ID : defTU.ID,
                        DefaultPackingName = c.CUS_GroupOfProduct.PriceOfGOPID == iTon ? defTon.PackingName : c.CUS_GroupOfProduct.PriceOfGOPID == iCBM ? defCBM.PackingName : defTU.PackingName
                    }).ToList();

                    result.ListSeaPort = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                    {
                        CUSLocationID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.Code,
                        CustomerID = c.CustomerID,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListCarrier = model.CUS_Partner.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();

                    result.ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == cusID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    result.ListCUSLocation = model.CUS_Location.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID,
                        LoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        LoadTimeDI = c.CAT_Location.LoadTimeDI ?? 2,
                        UnLoadTimeCO = c.CAT_Location.LoadTimeCO ?? 2,
                        UnLoadTimeDI = c.CAT_Location.UnLoadTimeDI ?? 2
                    }).ToList();

                    result.ListGroupOfVehicle = model.CAT_GroupOfVehicle.Select(c => new CATGroupOfVehicle
                    {
                        ID = c.ID,
                        Ton = c.Ton.HasValue ? c.Ton.Value : 0,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();

                    result.ListDistributorLocation = model.CUS_Location.Where(c => c.CusPartID != null && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID)) && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iDistributor).Select(c => new DTOORDData_Location
                    {
                        LocationID = c.LocationID,
                        CUSLocationID = c.ID,
                        LocationCode = c.Code,
                        LocationName = c.LocationName,
                        Address = c.CAT_Location.Address,
                        CusPartID = c.CusPartID,
                        CustomerID = c.CustomerID
                    }).ToList();

                    result.ListRoute = model.CUS_Routing.Where(c => (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID))).Select(c => new DTOCUSRouting
                    {
                        ID = c.ID,
                        Code = c.Code,
                        RoutingName = c.RoutingName,
                        CustomerID = c.CustomerID,
                        RoutingAreaToID = c.CAT_Routing.RoutingAreaToID
                    }).ToList();

                    var lstRoutingAreaToID = result.ListRoute.Where(c => c.RoutingAreaToID > 0).Select(c => c.RoutingAreaToID.Value).Distinct().ToList();

                    result.ListRouteArea = model.CAT_RoutingAreaDetail.Where(c => lstRoutingAreaToID.Contains(c.RoutingAreaID)).Select(c => new CATRoutingAreaDetail
                    {
                        RoutingAreaID = c.RoutingAreaID,
                        ProvinceID = c.ProvinceID,
                        DistrictID = c.DistrictID,
                    }).ToList();

                    result.ListServiceOfOrder = model.CAT_ServiceOfOrder.Select(c => new CATServiceOfOrder
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        ServiceOfOrderName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    result.ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.SYS_Var.ValueOfVar
                    }).ToList();

                    DateTime dtNow = DateTime.Now.Date;
                    result.ListContractTerm = model.CAT_ContractTerm.Where(c => c.CAT_Contract.SYSCustomerID == Account.SYSCustomerID && c.CAT_Contract.CustomerID > 0 && c.CAT_Contract.CUS_Customer.IsSystem == false
                        && (c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.CAT_Contract.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                        && (isCus && isAdmin ? true : !isCus ? c.CAT_Contract.CustomerID == cusID : Account.ListCustomerID.Contains(c.CAT_Contract.CustomerID.Value))
                        && c.CAT_Contract.EffectDate <= dtNow && c.CAT_Contract.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                        {
                            ID = c.ContractID,
                            ContractTermID = c.ID,
                            ContractNo = c.DisplayName,
                            CustomerID = c.CAT_Contract.CustomerID.Value,
                            ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                            TransportModeID = c.CAT_Contract.TransportModeID.Value
                        }).ToList();

                    result.ListContract = model.CAT_Contract.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.CustomerID > 0 && c.CUS_Customer.IsSystem == false
                    && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)
                    && (isCus && isAdmin ? true : !isCus ? c.CustomerID == cusID : Account.ListCustomerID.Contains(c.CustomerID.Value))
                    && c.EffectDate <= dtNow && c.ExpiredDate >= dtNow).Select(c => new DTOORDOrder_Import_Contract
                    {
                        ID = c.ID,
                        ContractTermID = -1,
                        ContractNo = c.DisplayName,
                        CustomerID = c.CustomerID.Value,
                        //ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        TransportModeID = c.TransportModeID.Value
                    }).ToList();

                    result.ListVendor = model.CUS_Customer.Where(c => !c.IsSystem && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true)
                        && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSDIImportPacket_Vendor
                        {
                            ID = c.ID,
                            IsVendor = c.ID != Account.SYSCustomerID,
                            VendorCode = c.Code,
                            VendorName = c.CustomerName
                        }).ToList();
                    var objNew = new DTOOPSDIImportPacket_Vendor();
                    objNew.ID = Account.SYSCustomerID;
                    objNew.IsVendor = false;
                    objNew.VendorName = objNew.VendorCode = "Xe nhà";
                    if (result.ListVendor.Count(c => c.ID == objNew.ID) == 0)
                        result.ListVendor.Insert(0, objNew);

                    result.ListDriver = model.CUS_Driver.Where(c => c.CustomerID != Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.CAT_Driver.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = c.CustomerID
                    }).ToList();

                    var dataDriverHome = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOOPSDIImportPacket_Driver
                    {
                        ID = c.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        DriverTel = c.CAT_Driver.Cellphone,
                        VendorID = Account.SYSCustomerID
                    }).ToList();

                    result.ListDriver.AddRange(dataDriverHome);

                    result.ListVehicle = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && c.CustomerID != Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = c.CustomerID,
                        MaxWeight = c.CAT_Vehicle.MaxWeight > 0 ? c.CAT_Vehicle.MaxWeight.Value : 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin
                    }).ToList();

                    var dataVehicleHome = model.FLM_Asset.Where(c => c.VehicleID > 2 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSDIImportPacket_Vehicle
                    {
                        ID = c.VehicleID.Value,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        VendorID = Account.SYSCustomerID,
                        DriverName = c.CAT_Vehicle.DriverName,
                        DriverTel = c.CAT_Vehicle.Cellphone,
                        MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                        TempMax = c.CAT_Vehicle.TempMax,
                        TempMin = c.CAT_Vehicle.TempMin,
                        DriverID = c.CAT_Vehicle.DriverID,
                    }).Distinct().ToList();

                    result.ListVehicleTimeSheet = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.FLM_Asset.VehicleID.Value,
                        DateFrom = c.DateFromActual,
                        DateTo = c.DateToActual
                    }).ToList();

                    result.ListVehiclePlan = model.FLM_VehiclePlan.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.TypeOfDriverID == -(int)SYSVarType.TypeOfDriverMain).Select(c => new DTOFLMVehiclePlan
                    {
                        ID = c.ID,
                        DateFrom = c.DateFrom,
                        DateTo = c.DateTo,
                        DriverID = c.DriverID,
                        DriverName = c.FLM_Driver.CAT_Driver.LastName + " " + c.FLM_Driver.CAT_Driver.FirstName,
                        VehicleID = c.VehicleID
                    }).ToList();

                    result.ListVehicle.AddRange(dataVehicleHome);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDOrder_Export> ORDOrder_Plan_Excel_Export(int sID, int pID)
        {
            try
            {
                int iTU = -(int)SYSVarType.PriceOfGOPTU;
                int iTon = -(int)SYSVarType.PriceOfGOPTon;
                int iCBM = -(int)SYSVarType.PriceOfGOPCBM;
                List<DTOORDOrder_Export> result = new List<DTOORDOrder_Export>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.PacketID == pID).Select(c => new DTOORDOrder_Export
                    {
                        ID = c.ID,
                        CarrierCode = string.Empty,
                        CarrierCodeName = string.Empty,
                        CarrierName = string.Empty,
                        CBM = c.OPS_DITOGroupProduct.ORD_GroupProduct.CBM,
                        CBM_SKU = c.OPS_DITOGroupProduct.ORD_GroupProduct.CBM,
                        ContainerNo = string.Empty,
                        CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                        CustomerCodeName = string.Empty,
                        CutOffTime = null,
                        Date_TimeGetEmpty = null,
                        Date_TimeReturnEmpty = null,
                        DateGetEmpty = null,
                        DateReturnEmpty = null,
                        DistributorCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                        DistributorCodeName = string.Empty,
                        DistributorName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                        DNCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.DNCode,
                        EconomicZone = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID.HasValue ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETARequest = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETARequest,
                        ETARequestTime = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETARequest,
                        ETATime_RequestDate = null,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        ETDTime_RequestDate = null,
                        GroupProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductCodeNotUnicode = string.Empty,
                        GroupProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID ?? -1,
                        GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        GroupVehicle = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.GroupOfVehicleID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.GroupName : string.Empty,
                        HasCashCollect = c.OPS_DITOGroupProduct.ORD_GroupProduct.HasCashCollect,
                        HasUseContract = true,
                        InspectionDate = null,
                        IsHot = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.IsHot,
                        LocationDepotCode = string.Empty,
                        LocationDepotName = string.Empty,
                        LocationFromCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                        LocationFromCodeName = string.Empty,
                        LocationFromName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.LocationName : string.Empty,
                        LocationReturnCode = string.Empty,
                        LocationReturnName = string.Empty,
                        LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                        LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                        LocationToCodeName = string.Empty,
                        LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                        LocationToNote = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note : string.Empty,
                        LocationToNote1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1 : string.Empty,
                        Note = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Note,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        OrderID = c.OPS_DITOGroupProduct.ORD_GroupProduct.OrderID,
                        Packing = c.ORD_Product.CUS_Product.Code,
                        PackingID = c.ORD_Product.ProductID,
                        PackingName = c.ORD_Product.CUS_Product.ProductName,
                        PackingNotUnicode = string.Empty,
                        PriceCBM = c.OPS_DITOGroupProduct.ORD_GroupProduct.PriceOfGOPID == iCBM ? c.OPS_DITOGroupProduct.ORD_GroupProduct.Price : null,
                        PriceQuantity = c.OPS_DITOGroupProduct.ORD_GroupProduct.PriceOfGOPID == iTU ? c.OPS_DITOGroupProduct.ORD_GroupProduct.Price : null,
                        PriceTOMaster = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RoutePrice,
                        PriceTon = c.OPS_DITOGroupProduct.ORD_GroupProduct.PriceOfGOPID == iTon ? c.OPS_DITOGroupProduct.ORD_GroupProduct.Price : null,
                        ProductCodeWithoutGroup = c.ORD_Product.CUS_Product.Code,
                        Quantity = c.OPS_DITOGroupProduct.ORD_GroupProduct.Quantity,
                        Quantity_SKU = c.OPS_DITOGroupProduct.ORD_GroupProduct.Quantity,
                        RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                        RequestDate_Time = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                        RequestTime = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                        RoutingCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUSRoutingID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                        SealNo1 = string.Empty,
                        SealNo2 = string.Empty,
                        ServiceOfOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.ServiceOfOrderID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_ServiceOfOrder.Code : string.Empty,
                        SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                        StockID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationFromID ?? -1,
                        TemperatureMax = c.OPS_DITOGroupProduct.ORD_GroupProduct.TempMax,
                        TemperatureMin = c.OPS_DITOGroupProduct.ORD_GroupProduct.TempMin,
                        TimeGetEmpty = null,
                        TimeReturnEmpty = null,
                        Ton = c.ORD_Product.CUS_Product.IsKg ? c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton * 1000 : c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton,
                        Ton_SKU = c.ORD_Product.CUS_Product.IsKg ? c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton * 1000 : c.OPS_DITOGroupProduct.ORD_GroupProduct.Ton,
                        TripNo = string.Empty,
                        TypeOfContainerName = string.Empty,
                        TypeOfTransportMode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Code,
                        TypeOfWAInspectionStatus = false,
                        UserDefine1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine1,
                        UserDefine2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine2,
                        UserDefine3 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine3,
                        UserDefine4 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine4,
                        UserDefine5 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine5,
                        UserDefine6 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine6,
                        UserDefine7 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine7,
                        UserDefine8 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine8,
                        UserDefine9 = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.UserDefine9,
                        VesselName = string.Empty,
                        VesselNo = string.Empty,
                        Note1 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note1,
                        Note2 = c.OPS_DITOGroupProduct.ORD_GroupProduct.Note2,
                        VendorCode = c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : string.Empty,
                        VehicleNo = (c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0) ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                        DriverName = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverName1 : string.Empty,
                        DriverTel = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverTel1 : string.Empty,
                        MasterETDDate_Time = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : null,
                        MasterETDDate = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : null,
                        MasterETDTime = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : null,
                        MasterETADate_Time = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : null,
                        MasterETADate = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : null,
                        MasterETATime = c.OPS_DITOGroupProduct.DITOMasterID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : null,
                    }).ToList();

                    foreach (var item in result)
                    {
                        if (item.RequestDate != null)
                        {
                            if (item.ETA != null)
                                item.ETATime_RequestDate = item.ETA.Value.Subtract(item.RequestDate.Value);
                            if (item.ETD != null)
                                item.ETDTime_RequestDate = item.ETD.Value.Subtract(item.RequestDate.Value);
                        }
                        item.CarrierCodeName = item.CarrierCode + "-" + item.CarrierName;
                        item.ProductCodeWithoutGroup = item.Packing;
                        item.PackingNotUnicode = StringHelper.RemoveSign4VietnameseString(item.Packing);
                        item.GroupProductCodeNotUnicode = StringHelper.RemoveSign4VietnameseString(item.GroupProductCode);
                        item.DistributorCodeName = item.DistributorCode + "-" + item.DistributorName;
                        item.CustomerCodeName = item.CustomerCode + "-" + item.CustomerName;
                        item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                        item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;

                        item.MasterHours = item.MasterETADate_Time != null && item.MasterETDDate_Time != null ? item.MasterETADate_Time - item.MasterETDDate_Time : null;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel ORDOrder_Plan_ExcelOnline_Init(int templateID, int customerID, int pID, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        DTOCUSSettingORDPlan objSetting = new DTOCUSSettingORDPlan();
                        DTOORDOrder_ImportCheck dataImport = new DTOORDOrder_ImportCheck();

                        dataImport = ORDOrder_Excel_Import_Data(customerID);
                        objSetting = ORDOrder_Plan_Excel_Setting_Get(templateID);

                        string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                                "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                        List<string> sValue = new List<string>(aValue);
                        Dictionary<string, string> dicName = ORDOrder_Plan_GetDataName();
                        if (objSetting != null)
                        {
                            List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                            var ws = data[0];
                            ws.Rows.Clear();

                            double[] arrColumnWidth = new double[objSetting.TotalColumn.Value];
                            for (int i = 0; i < objSetting.TotalColumn.Value; i++)
                            {
                                arrColumnWidth[i] = 100;
                            }
                            ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                            if (objSetting.RowStart > 1)
                            {
                                #region header
                                var cells = new List<Cell>();
                                foreach (var prop in objSetting.GetType().GetProperties())
                                {
                                    try
                                    {
                                        var p = prop.Name;
                                        if (!sValue.Contains(p))
                                        {
                                            var v = (int)prop.GetValue(objSetting, null);
                                            if (v > 0)
                                            {
                                                if (dicName.ContainsKey(p))
                                                    cells.Add(HelperExcel.NewCell(v - 1, dicName[p], HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                                else
                                                    cells.Add(HelperExcel.NewCell(v - 1, p, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }
                                if (objSetting.HasStock && objSetting.ListStock != null && objSetting.ListStock.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListStock)
                                    {
                                        var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                        if (cusStock != null)
                                        {
                                            if (obj.Ton > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.CBM > 0)
                                                cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.Quantity > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                if (objSetting.HasStockProduct && objSetting.ListStockWithProduct != null && objSetting.ListStockWithProduct.Count > 0)
                                {
                                    foreach (var obj in objSetting.ListStockWithProduct)
                                    {
                                        var cusStock = dataImport.ListStock.FirstOrDefault(c => c.CUSLocationID == obj.StockID && c.CustomerID == customerID);
                                        var cusGroup = dataImport.ListGroupOfProduct.FirstOrDefault(c => c.ID == obj.GroupOfProductID && c.CUSStockID == obj.StockID);
                                        var cusProduct = dataImport.ListProduct.FirstOrDefault(c => c.ID == obj.ProductID && c.GroupOfProductID == obj.GroupOfProductID);
                                        if (cusStock != null && cusGroup != null && cusProduct != null)
                                        {
                                            if (obj.Ton > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Ton - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Tấn", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.CBM > 0)
                                                cells.Add(HelperExcel.NewCell(obj.CBM - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_Khối", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            if (obj.Quantity > 0)
                                                cells.Add(HelperExcel.NewCell(obj.Quantity - 1, cusStock.LocationCode + "_" + cusGroup.Code + "_" + cusProduct.Code + "_SL", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                        }
                                    }
                                }
                                else
                                {
                                    if (objSetting.HasContainer && objSetting.ListContainer != null && objSetting.ListContainer.Count > 0)
                                    {
                                        foreach (var obj in objSetting.ListContainer)
                                        {
                                            var cusPacking = dataImport.ListPackingCO.FirstOrDefault(c => c.ID == obj.PackingID);
                                            if (cusPacking != null)
                                            {
                                                if (obj.PackingCOQuantity > 0)
                                                    cells.Add(HelperExcel.NewCell(obj.PackingCOQuantity - 1, cusPacking.Code + "_Loại Cont", HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            }
                                        }
                                    }
                                }

                                ws.Rows.Add(HelperExcel.NewRow(0, cells));
                                #endregion

                                #region body
                                var dataExport = new List<DTOORDOrder_Export>();
                                if (pID > 0)
                                {
                                    dataExport = ORDOrder_Plan_Excel_Export(templateID, pID);
                                }
                                else
                                {
                                    var transportModeID = HelperContract.GetTransportMode(model, objSetting.TypeOfTransportModeID);
                                    var isDI = false;
                                    if (transportModeID == iFTL || transportModeID == iLTL)
                                    {
                                        isDI = true;
                                    }
                                    dataExport = ORDOrder_Excel_GetFirst(isDI, customerID);
                                }

                                if (dataExport != null)
                                {
                                    var cRow = objSetting.RowStart - 1;
                                    List<string> timeProps = new List<string>(new string[] { "RequestTime", "ETARequestTime", "TimeGetEmpty", "TimeReturnEmpty" });
                                    if (objSetting.HasStock)
                                    {
                                        var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.GroupProductCode, c.Packing, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                        foreach (var gop in dataGop)
                                        {
                                            cells = new List<Cell>();
                                            int max = 1;
                                            var item = gop.FirstOrDefault();
                                            foreach (var sto in objSetting.ListStock)
                                            {
                                                var o = gop.Count(c => c.StockID == sto.StockID);
                                                if (o > max)
                                                    max = o;
                                            }
                                            var dataContains = new List<int>();
                                            for (var i = 0; i < max; i++)
                                            {
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                foreach (var stock in objSetting.ListStock)
                                                {
                                                    var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && !dataContains.Contains(c.ID));
                                                    if (objGopInStock != null)
                                                    {
                                                        dataContains.Add(objGopInStock.ID);
                                                        foreach (var prop in stock.GetType().GetProperties())
                                                        {
                                                            try
                                                            {
                                                                var p = prop.Name;
                                                                if (p != "StockID")
                                                                {
                                                                    var v = (int)prop.GetValue(stock, null);
                                                                    var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                                    if (val != null)
                                                                    {
                                                                        //ws.Cells[cRow, v].Value = val.ToString();
                                                                        if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                            cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                    }
                                                                }
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                    else if (objSetting.HasStockProduct)
                                    {
                                        var dataGop = dataExport.GroupBy(c => new { c.OrderCode, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                        foreach (var gop in dataGop)
                                        {
                                            cells = new List<Cell>();
                                            int max = 1;
                                            var item = gop.FirstOrDefault();
                                            foreach (var sto in objSetting.ListStockWithProduct)
                                            {
                                                var o = gop.Count(c => c.StockID == sto.StockID && c.GroupProductID == sto.GroupOfProductID && c.PackingID == sto.ProductID);
                                                if (o > max)
                                                    max = o;
                                            }
                                            var dataContains = new List<int>();
                                            for (var i = 0; i < max; i++)
                                            {
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                foreach (var stock in objSetting.ListStockWithProduct)
                                                {
                                                    var objGopInStock = gop.FirstOrDefault(c => c.StockID == stock.StockID && c.GroupProductID == stock.GroupOfProductID && c.PackingID == stock.ProductID && !dataContains.Contains(c.ID));
                                                    if (objGopInStock != null)
                                                    {
                                                        dataContains.Add(objGopInStock.ID);
                                                        foreach (var prop in stock.GetType().GetProperties())
                                                        {
                                                            try
                                                            {
                                                                var p = prop.Name;
                                                                if (p != "StockID" && p != "GroupOfProductID" && p != "ProductID")
                                                                {
                                                                    var v = (int)prop.GetValue(stock, null);
                                                                    var val = objGopInStock.GetType().GetProperty(p).GetValue(objGopInStock, null);
                                                                    if (val != null)
                                                                    {
                                                                        if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                            cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                    }
                                                                }
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objSetting.HasContainer)
                                        {
                                            var dataGroup = dataExport.GroupBy(c => new { c.OrderCode, c.DistributorCode, c.LocationToCode, c.ETD, c.ETA }).ToList();
                                            foreach (var group in dataGroup)
                                            {
                                                cells = new List<Cell>();
                                                int max = 1;
                                                var item = group.FirstOrDefault();
                                                foreach (var cont in objSetting.ListContainer)
                                                {
                                                    var o = group.Count(c => c.PackingID == cont.PackingID);
                                                    if (o > max)
                                                        max = o;
                                                }
                                                var dataContains = new List<int>();
                                                for (var i = 0; i < max; i++)
                                                {
                                                    foreach (var prop in objSetting.GetType().GetProperties())
                                                    {
                                                        try
                                                        {
                                                            var p = prop.Name;
                                                            if (!sValue.Contains(p))
                                                            {
                                                                var v = (int)prop.GetValue(objSetting, null);
                                                                var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                                var txt = string.Empty;
                                                                if (val != null)
                                                                {
                                                                    if (val.GetType() == typeof(DateTime))
                                                                    {
                                                                        if (timeProps.Contains(p))
                                                                        {
                                                                            txt = String.Format("{0:HH:mm}", val);
                                                                        }
                                                                        else
                                                                        {
                                                                            txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                        }
                                                                    }
                                                                    else if (val.GetType() == typeof(TimeSpan))
                                                                    {
                                                                        txt = val.ToString();
                                                                    }
                                                                    else if (val.GetType() == typeof(bool))
                                                                    {
                                                                        bool value = (bool)val;
                                                                        if (value == true)
                                                                        {
                                                                            txt = "x";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = val.ToString();
                                                                    }
                                                                }
                                                                if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                    cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                            }
                                                        }
                                                        catch (Exception)
                                                        {
                                                        }
                                                    }

                                                    foreach (var objCon in objSetting.ListContainer)
                                                    {
                                                        var objContInStock = group.FirstOrDefault(c => c.PackingID == objCon.PackingID && !dataContains.Contains(c.ID));
                                                        if (objContInStock != null)
                                                        {
                                                            dataContains.Add(objContInStock.ID);
                                                            foreach (var prop in objCon.GetType().GetProperties())
                                                            {
                                                                try
                                                                {
                                                                    var p = prop.Name;
                                                                    if (p != "PackingID")
                                                                    {
                                                                        var v = (int)prop.GetValue(objCon, null);
                                                                        var val = group.Count(c => c.PackingID == objCon.PackingID);
                                                                        //var val = objContInStock.GetType().GetProperty(p).GetValue(objContInStock, null);
                                                                        if (val != null)
                                                                        {
                                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                                cells.Add(HelperExcel.NewCell(v - 1, val.ToString()));
                                                                        }
                                                                    }
                                                                }
                                                                catch (Exception)
                                                                {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                        else
                                        {
                                            foreach (var item in dataExport)
                                            {
                                                cells = new List<Cell>();
                                                item.Quantity_SKU = item.Quantity;
                                                item.Ton_SKU = item.Ton;
                                                item.CBM_SKU = item.CBM;
                                                foreach (var prop in objSetting.GetType().GetProperties())
                                                {
                                                    try
                                                    {
                                                        var p = prop.Name;
                                                        if (!sValue.Contains(p))
                                                        {
                                                            var v = (int)prop.GetValue(objSetting, null);
                                                            var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                            var txt = string.Empty;
                                                            if (val != null)
                                                            {
                                                                if (val.GetType() == typeof(DateTime))
                                                                {
                                                                    if (timeProps.Contains(p))
                                                                    {
                                                                        txt = String.Format("{0:HH:mm}", val);
                                                                    }
                                                                    else
                                                                    {
                                                                        txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                                    }
                                                                }
                                                                else if (val.GetType() == typeof(TimeSpan))
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                                else if (val.GetType() == typeof(bool))
                                                                {
                                                                    bool value = (bool)val;
                                                                    if (value == true)
                                                                    {
                                                                        txt = "x";
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    txt = val.ToString();
                                                                }
                                                            }
                                                            if (v > 0 && v <= objSetting.TotalColumn.Value)
                                                                cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                        }
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                }
                                                ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                                cRow++;
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }

                            result = HelperExcel.GetByKey(model, functionid, functionkey);
                            result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                            result = HelperExcel.Save(model, Account, result);
                        }
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_Plan_ImportRowResult ORDOrder_Plan_ExcelOnline_Change(int templateID, int customerID, DTOORDOrder_ImportOnline objImport, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                DTOORDOrder_Plan_ImportRowResult result = new DTOORDOrder_Plan_ImportRowResult();
                result.Row = new Row();
                result.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                result.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DateTime dtNow = DateTime.Now.Date;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingORDPlan objSetting = new DTOCUSSettingORDPlan();
                    objSetting = ORDOrder_Plan_Excel_Setting_Get(templateID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;
                    int colVenID = objSetting.TotalColumn.Value + 16;
                    int colVehID = objSetting.TotalColumn.Value + 17;
                    int colGovID = objSetting.TotalColumn.Value + 28;
                    int colDriverTel = objSetting.TotalColumn.Value + 19;
                    int colDriverName = objSetting.TotalColumn.Value + 20;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool isContinue = true;
                        int SYSCustomerID = -1;

                        List<DTOCUSSettingOrderCode> dataSettingCode = new List<DTOCUSSettingOrderCode>();
                        DTOORDOrder_Plan_ImportCheck data = new DTOORDOrder_Plan_ImportCheck();

                        #region Get Data
                        data = ORDOrder_Plan_Excel_Import_Data(customerID);
                        dataSettingCode = ORDOrder_Excel_Setting_Code_Get();
                        #endregion

                        SYSCustomerID = Account.SYSCustomerID;
                        if (objSetting != null)
                        {
                            //Check các required.
                            ORDOrder_Plan_Excel_ValidateSetting(objSetting);

                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                         "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                            var sValue = new List<string>(aValue);
                            var dicTrM = new Dictionary<int, string>();
                            dicTrM.Add(iFCL, "FCL");
                            dicTrM.Add(iFTL, "FTL");
                            dicTrM.Add(iLTL, "LTL");
                            var sortOrder = 1;
                            int serviceID = -1;
                            int svID = -1;
                            int transportID = -1;
                            int tmID = -1;
                            int ctID = -1;
                            int ctTermID = -1;
                            var excelError = new List<string>();

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                ////Nếu điểm giao trống => Break
                                //if (objImport.LocationToID < 0)
                                //{
                                //    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có điểm giao.");
                                //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(57, lstMessageError));
                                //    isContinue = false;
                                //}

                                #region Check TransportMode && ServiceOfOrder
                                if (isContinue)
                                {
                                    //TransportMode
                                    if (objImport.TransportModeID < 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer[0], lstMessageError));
                                        isContinue = false;
                                    }
                                    else
                                    {
                                        tmID = objImport.TransportModeID;
                                        transportID = HelperContract.GetTransportMode(model, tmID);
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTM, tmID.ToString());
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ServiceOfOrderID > 0)
                                        {
                                            svID = objSetting.ServiceOfOrderID;
                                            serviceID = HelperContract.GetServiceOfOrder(model, svID);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                        }
                                        else
                                        {
                                            if (objSetting.ServiceOfOrder < 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột dịch vụ vận chuyển.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var str = excelInput["ServiceOfOrder"].Trim().ToLower();
                                                if (!string.IsNullOrEmpty(str))
                                                {
                                                    var objSV = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.Code.ToLower() == str);
                                                    if (objSV != null)
                                                    {
                                                        svID = objSV.ID;
                                                        serviceID = objSV.ServiceOfOrderID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Dịch vụ vận chuyển [" + str + "]  không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else if (transportID != iFTL && transportID != iLTL)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không xác định dịch vụ vận chuyển.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }

                                    }
                                    if (transportID == iFTL && objSetting.GroupVehicle < 1 && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột loại xe.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                //Xe tải
                                if ((transportID == iFTL || transportID == iLTL) && serviceID == iLO && isContinue)
                                {
                                    #region ĐH xe tải
                                    var cusID = -1;
                                    var cusCode = string.Empty;
                                    var ordCode = string.Empty;
                                    var cusSKU = false;

                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ gửi yêu cầu.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày gửi yêu cầu.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETD.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c đến kho.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c đến kho.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Check Customer, Contract và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //Contract
                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            //Get contract
                                            var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                            var dataC = data.ListContract.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            }
                                        }
                                    }

                                    //OrderCode
                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    #region Check nhà phân phối
                                    var isLocationToFail = objImport.IsLocationToFail;
                                    if (objImport.ExcelErrorLocation.Count > 0)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorLocation.FirstOrDefault());
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    //if (isLocationToFail)
                                    //{
                                    //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, col, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                    //}
                                    var sPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    var sLocation = new List<AddressSearchItem>();
                                    sLocation = objImport.sLocation;

                                    var pID = objImport.PartnerID;
                                    var toID = objImport.LocationToID;
                                    var toCode = objImport.LocationToCode;
                                    var toName = objImport.LocationToName;

                                    if (isContinue)
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPartnerID, pID.ToString());
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                    }

                                    string dName = objImport.PartnerName;
                                    string dCode = objImport.PartnerCode;

                                    sPartnerLocation.AddRange(objImport.ListPartnerLocation);
                                    result.Index = checkRow.Index.HasValue ? checkRow.Index.Value : -1;
                                    result.OrderCode = ordCode;
                                    result.CustomerCode = cusCode;
                                    result.PartnerCode = dCode;
                                    result.PartnerName = dName;
                                    result.PartnerID = pID;
                                    result.LocationToID = toID;
                                    result.LocationToAddress = excelInput["LocationToAddress"];
                                    result.LocationToCode = toCode;
                                    result.CustomerID = cusID;
                                    result.EconomicZone = excelInput["EconomicZone"];
                                    result.RoutingAreaCode = excelInput["RoutingAreaCode"];
                                    result.SOCode = excelInput["SOCode"];
                                    result.DNCode = excelInput["DNCode"];
                                    var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    if (objTMName != null)
                                        result.TransportModeName = objTMName.Name;
                                    result.TransportModeID = transportID;
                                    if (requestDate != null)
                                        result.RequestDate = requestDate.Value;
                                    result.IsLocationToFail = isLocationToFail;
                                    result.IsCreateLocation = objImport.IsCreateLocation;
                                    result.IsCreatePartner = objImport.IsCreatePartner;
                                    result.ListLocationToAddress = sLocation;

                                    if (result.LocationToID < 1 && result.ListLocationToAddress.Count > 0)
                                    {
                                        result.LocationToID = result.ListLocationToAddress[0].CUSLocationID;
                                        toID = result.ListLocationToAddress[0].CUSLocationID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());

                                        if (objImport.LocationToID < 0)
                                            CheckErrorAddress(checkRow, colCheckAddress, HelperExcel.MessageError(93, lstMessageError));
                                    }
                                    #endregion

                                    #region Check Cung đường

                                    int? cusRoutingID = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.RoutingCode > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RoutingCode"]))
                                            {
                                                var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                                var objRoute = data.ListRoute.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == excelInput["RoutingCode"].Trim().ToLower());
                                                if (objRoute != null)
                                                {
                                                    cusRoutingID = objRoute.ID;
                                                }
                                            }
                                        }

                                        if (cusRoutingID == null)
                                        {
                                            cusRoutingID = -1;
                                        }

                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCusRoutingID, cusRoutingID.ToString());
                                    }
                                    #endregion

                                    #region Check sản lượng, kho, nhóm sản phẩm và đơn vị tính, loại xe, nhiệt độ
                                    var sProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    //Dictionary quantity theo kho. [Q = Quantity]
                                    Dictionary<int, Dictionary<int, double>> dicQ = new Dictionary<int, Dictionary<int, double>>();
                                    //Dictionary chi tiết kho. [L = Location]
                                    Dictionary<int, DTOORDData_Location> dicL = new Dictionary<int, DTOORDData_Location>();
                                    //Dictionary chi tiết nhóm sản phẩm đầu tiên/chỉ định trong kho. [GS = GroupProductInStock]
                                    Dictionary<int, DTOORDData_GroupProduct> dicGS = new Dictionary<int, DTOORDData_GroupProduct>();

                                    //Dictionary quantity theo kho-nhóm hàng-hàng hóa. [QP = QuantityProduct]
                                    Dictionary<string, Dictionary<int, double>> dicQP = new Dictionary<string, Dictionary<int, double>>();

                                    //Nếu thiết lập kho theo cột, check kho, lấy sản lượng theo excel.

                                    if (isContinue)
                                    {
                                        if (objSetting.HasStock)
                                        {
                                            if (objSetting.ListStock == null || objSetting.ListStock.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho [Hiện kho].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(26, lstMessageError));
                                                isContinue = false;
                                            }
                                            foreach (var stock in objSetting.ListStock)
                                            {
                                                int sID = stock.StockID;
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == sID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(27, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    dicL.Add(sID, objCheck);
                                                }

                                                if (isContinue)
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    var dicS = GetDataValue(checkRow, stock, sValue);
                                                    if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                    {
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                    dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                                else
                                                                    dicV.Add(1, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(1, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                    dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                                else
                                                                    dicV.Add(2, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(2, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                    dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                                else
                                                                    dicV.Add(3, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(3, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        dicQ.Add(sID, dicV);
                                                    }
                                                }
                                            }

                                            if (dicQ.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu sản lượng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(31, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.HasStockProduct)
                                        {
                                            if (objSetting.ListStockWithProduct == null || objSetting.ListStockWithProduct.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho và nhóm hàng [Hiện Kho-Hàng].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(32, lstMessageError));
                                                isContinue = false;
                                            }

                                            foreach (var stock in objSetting.ListStockWithProduct)
                                            {
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == stock.StockID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(33, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID == stock.StockID && c.ID == stock.GroupOfProductID);
                                                    if (objGop == null)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định nhóm hàng. Kho [" + objCheck.LocationName + "]");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(34, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                    else
                                                    {
                                                        var objPro = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID == objGop.ID && c.CustomerID == cusID);
                                                        if (objPro == null)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định hàng hóa. Nhóm [" + objGop.GroupName + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(35, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                {
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    var key = stock.StockID + "-" + stock.GroupOfProductID + "-" + stock.ProductID;
                                                    dicQP.Add(key, dicV);
                                                }
                                            }
                                        }
                                        //Mỗi dòng 1 kho, check kho, lấy sản lượng theo excel.
                                        else
                                        {
                                            int sID = -1;
                                            if (objSetting.LocationFromCode < 1 && objSetting.LocationFromCodeName < 1)
                                            {
                                                if (data.ListStock.Count(c => c.CustomerID == cusID) == 1)
                                                {
                                                    var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID);

                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập điểm bốc hàng [LocationFromCode]");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(36, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                var sCode = excelInput["LocationFromCode"];
                                                if (objSetting.LocationFromCodeName > 0)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                                    {
                                                        sCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        sCode = string.Empty;
                                                    }
                                                }
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.ToLower().Trim() == sCode.ToLower().Trim());
                                                if (objCheck != null)
                                                {
                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + sCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(37, lstMessageError));
                                                    isContinue = false;
                                                    dicL.Add(-1, new DTOORDData_Location());
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]) || !string.IsNullOrEmpty(excelInput["CBM_SKU"]) || !string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                {
                                                    cusSKU = true;
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton_SKU"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM_SKU"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM_SKU"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity_SKU"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                                else
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                            }
                                        }
                                    }
                                    string strGopCode = string.Empty;
                                    //Dictionary Product theo GroupProduct. [P = Product] - Key: GroupOfProductID
                                    Dictionary<int, int> dicP = new Dictionary<int, int>();
                                    //Dictionary ProductCode theo GroupProduct. [PCode = ProductCode] - Key: GroupOfProductID
                                    Dictionary<int, string> dicPCode = new Dictionary<int, string>();
                                    //Dictionary Product PackingType theo GroupProduct. [Packing = Product Packing] - Key: GroupOfProductID
                                    Dictionary<int, int> dicPacking = new Dictionary<int, int>();

                                    //Nếu không có cột nhóm SP, check sản phẩm ko nhóm (ProductCodeWithoutGroup)
                                    //Nếu không có cột nhóm SP, kiểm tra kho có duy nhất nhóm SP => Lấy
                                    if (isContinue)
                                    {
                                        if (objSetting.GroupProductCode == 0 && objSetting.GroupProductCodeNotUnicode == 0)
                                        {
                                            if (objSetting.ProductCodeWithoutGroup > 0)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                                {
                                                    var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                    if (objP != null)
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                            if (objGS != null)
                                                            {
                                                                strGopCode = objGS.Code;
                                                                dicGS.Add(st.Key, objGS);
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                objGS = new DTOORDData_GroupProduct();
                                                                objGS.ID = -1;
                                                                dicGS.Add(st.Key, objGS);
                                                                if (!dicP.ContainsKey(-1))
                                                                {
                                                                    dicP.Add(objGS.ID, objP.ID);
                                                                    dicPCode.Add(objGS.ID, objP.Code);
                                                                    dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                                }
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, -1);
                                                                dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                                dicPacking.Add(objGS.ID, 1);
                                                            }
                                                        }
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có nhóm sản phẩm.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(41, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(42, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Kiểm tra nhóm SP có tồn tại + có trong kho.
                                        else if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.GroupProductCode > 0)
                                                strGopCode = excelInput["GroupProductCode"];
                                            else
                                                strGopCode = StringHelper.RemoveSign4VietnameseString(excelInput["GroupProductCodeNotUnicode"]);

                                            if (!string.IsNullOrEmpty(strGopCode))
                                            {
                                                var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == strGopCode.Trim().ToLower());
                                                if (objGop != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        if (data.ListGroupOfProduct.Count(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key) == 0)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không có trong kho " + dicL[st.Key].LocationCode + ".");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(43, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                        else
                                                        {
                                                            var objCheck = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key);
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không tồn tại hoặc chưa thiết lập kho.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(44, lstMessageError));
                                                    isContinue = false;
                                                    dicGS.Add(-1, new DTOORDData_GroupProduct());
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(45, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(46, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                            {
                                                var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                if (objP != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                        if (objGS != null)
                                                        {
                                                            strGopCode = objGS.Code;
                                                            dicGS.Add(st.Key, objGS);
                                                            dicP.Add(objGS.ID, objP.ID);
                                                            dicPCode.Add(objGS.ID, objP.Code);
                                                            dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var objGS = new DTOORDData_GroupProduct();
                                                    objGS.ID = -1;
                                                    dicGS.Add(st.Key, objGS);
                                                    if (!dicP.ContainsKey(-1))
                                                    {
                                                        dicP.Add(objGS.ID, -1);
                                                        dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                        dicPacking.Add(objGS.ID, 1);
                                                    }
                                                }
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.Packing == 0 && objSetting.PackingNotUnicode == 0)
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count == 1)
                                                        {
                                                            dicP.Add(gop.Value.ID, dataProduct[0].ID);
                                                            dicPCode.Add(gop.Value.ID, dataProduct[0].Code);
                                                            dicPacking.Add(gop.Value.ID, dataProduct[0].PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                            if (objDefault != null)
                                                            {
                                                                dicP.Add(gop.Value.ID, objDefault.ID);
                                                                dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                dicP.Add(gop.Value.ID, -1);
                                                                dicPCode.Add(gop.Value.ID, "");
                                                                dicPacking.Add(gop.Value.ID, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count > 0)
                                                        {
                                                            var str = string.Empty;
                                                            if (objSetting.Packing > 0)
                                                                str = excelInput["Packing"];
                                                            else if (objSetting.PackingNotUnicode > 0)
                                                                str = StringHelper.RemoveSign4VietnameseString(excelInput["PackingNotUnicode"]);

                                                            if (string.IsNullOrEmpty(str))
                                                            {
                                                                var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                                if (objDefault != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, objDefault.ID);
                                                                    dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                    dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var product = dataProduct.FirstOrDefault(c => c.Code.ToLower().Trim() == str.ToLower().Trim());
                                                                if (product != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, product.ID);
                                                                    dicPCode.Add(gop.Value.ID, product.Code);
                                                                    dicPacking.Add(gop.Value.ID, product.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập Hàng hóa/ĐVT [" + str + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(51, lstMessageError));
                                                                    isContinue = false;

                                                                    DTOORDOrder_Import_ProductNew objProductNew = new DTOORDOrder_Import_ProductNew();
                                                                    objProductNew.GroupOfProductID = gop.Value.ID;
                                                                    objProductNew.GroupName = gop.Value.GroupName;
                                                                    objProductNew.ProductCode = str;
                                                                    objProductNew.ProductName = str;
                                                                    objProductNew.PackingID = gop.Value.DefaultPackingID;
                                                                    objProductNew.PackingName = gop.Value.DefaultPackingName;
                                                                    sProductNew.Add(objProductNew);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            dicP.Add(gop.Value.ID, -1);
                                                            dicPCode.Add(gop.Value.ID, "");
                                                            dicPacking.Add(gop.Value.ID, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập ĐVT.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(52, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var groupVehicleID = -1;

                                    if (isContinue)
                                    {
                                        if (transportID == iFTL)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                            {
                                                var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe[" + excelInput["GroupVehicle"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(53, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    groupVehicleID = objCheck.ID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                                }
                                            }
                                            else
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe không xác định.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(54, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                        }
                                    }

                                    double? tmpMin = null;
                                    double? tmpMax = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMin > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMin"]))
                                        {
                                            try
                                            {
                                                tmpMin = Convert.ToDouble(excelInput["TemperatureMin"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối thiểu.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(55, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMax > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMax"]))
                                        {
                                            try
                                            {
                                                tmpMax = Convert.ToDouble(excelInput["TemperatureMax"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối đa.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(56, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion

                                    int venID = -1, vehID = -1, masterGOVID = -1; int? driverID = null;
                                    DateTime? MasterETA = null; DateTime? MasterETD = null;
                                    string venCode = excelInput["VendorCode"].Trim(), vehCode = excelInput["VehicleNo"].Trim();
                                    string driverName = excelInput["DriverName"], driverTel = excelInput["DriverTel"];
                                    #region Plan
                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["VehicleNo"]))
                                        {
                                            #region check thời gian
                                            MasterETD = null;
                                            if (objSetting.MasterETDDate < 1 && objSetting.MasterETDDate_Time < 1)
                                                throw new Exception("Chưa thiết lập cột MasterETD chuyến.");

                                            try
                                            {
                                                MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate"]);
                                            }
                                            catch (Exception)
                                            {
                                            }
                                            if (objSetting.MasterETDTime > 0 && MasterETD != null)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["MasterETDTime"]))
                                                {
                                                    try
                                                    {
                                                        MasterETD = MasterETD.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETDTime"]));
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ MasterETD chuyến.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(94, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                            if (objSetting.MasterETDDate_Time > 0 && isContinue)
                                            {
                                                try
                                                {
                                                    MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate_Time"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai MasterETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(95, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            MasterETA = null;
                                            if (isContinue)
                                            {
                                                if (objSetting.MasterHours > 0)
                                                {
                                                    if (MasterETD != null)
                                                    {
                                                        try
                                                        {
                                                            MasterETA = MasterETD.Value.AddHours(Convert.ToDouble(excelInput["MasterHours"]));
                                                        }
                                                        catch
                                                        {
                                                            //excelError.Add("Sai thời gian chuyến.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(96, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (objSetting.MasterETADate < 1 && objSetting.MasterETADate_Time < 1)
                                                        throw new Exception("Chưa thiết lập cột MasterETA chuyến.");
                                                    try
                                                    {
                                                        MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate"]);
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                    if (objSetting.MasterETATime > 0 && MasterETA != null)
                                                    {
                                                        if (!string.IsNullOrEmpty(excelInput["MasterETATime"]))
                                                        {
                                                            try
                                                            {
                                                                MasterETA = MasterETA.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETATime"]));
                                                            }
                                                            catch
                                                            {
                                                                //excelError.Add("Sai giờ MasterETA.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(97, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    if (objSetting.MasterETADate_Time > 0 && isContinue)
                                                    {
                                                        try
                                                        {
                                                            MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate_Time"]);
                                                        }
                                                        catch
                                                        {
                                                            //excelError.Add("Sai MasterETA.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(98, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }

                                            if (MasterETA != null && MasterETD != null && MasterETD >= MasterETA && isContinue)
                                            {
                                                //excelError.Add("Sai ràng buộc thời gian MasterETD-MasterETA");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(99, lstMessageError));
                                                isContinue = false;
                                            }
                                            #endregion

                                            #region Kiểm tra chuyến
                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["VendorCode"]))
                                                {
                                                    var objVendor = data.ListVendor.FirstOrDefault(c => c.VendorCode.Trim().ToLower() == excelInput["VendorCode"].Trim().ToLower());
                                                    if (objVendor != null)
                                                    {
                                                        venID = objVendor.ID;
                                                        venCode = objVendor.VendorCode;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Nhà xe [" + excelPlanInput["VendorCode"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(100, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    var objVendor = data.ListVendor.FirstOrDefault(c => c.IsVendor == false);
                                                    if (objVendor != null)
                                                    {
                                                        venID = objVendor.ID;
                                                        venCode = "Xe nhà";
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Nhà xe không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(101, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }

                                                var dataCode = new List<string>();
                                                var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                                                var sCode = vehCode.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                                                foreach (var c in dataChar)
                                                {
                                                    dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                                                }

                                                if (isContinue)
                                                {
                                                    var objVehicle = data.ListVehicle.FirstOrDefault(c => c.VendorID == venID && dataCode.Contains(c.VehicleNo.Trim().ToLower()));
                                                    if (objVehicle != null)
                                                    {
                                                        vehID = objVehicle.ID;
                                                        vehCode = objVehicle.VehicleNo;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehID, vehID.ToString());
                                                        if (venID > 0 && venCode == "Xe nhà")
                                                        {
                                                            var objPlanning = data.ListVehiclePlan.FirstOrDefault(c => c.VehicleID == vehID && !((c.DateFrom < MasterETD && c.DateTo < MasterETD) || (c.DateFrom > MasterETA && c.DateTo > MasterETA)));
                                                            if (objPlanning != null)
                                                            {
                                                                var objDriver = data.ListDriver.FirstOrDefault(c => c.ID == objPlanning.DriverID);
                                                                if (objDriver != null)
                                                                {
                                                                    driverName = objDriver.DriverName;
                                                                    driverTel = objDriver.DriverTel;
                                                                    driverID = objDriver.ID;
                                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverName, driverName);
                                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverTel, driverTel);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                driverName = objVehicle.DriverName;
                                                                driverTel = objVehicle.DriverTel;
                                                                driverID = objVehicle.DriverID;
                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverName, driverName);
                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverTel, driverTel);
                                                            }
                                                            if (driverID < 1)
                                                            {
                                                                //excelError.Add("Không có thông tin tài xế.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(102, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (venID > 0)
                                                        {
                                                            if (venCode != "Xe nhà")
                                                            {
                                                                //isNewVehicle = true;
                                                            }
                                                            //excelError.Add("Xe [" + excelPlanInput["VehicleNo"] + "] không tồn tại.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(103, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                if (isContinue)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                                    {
                                                        var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                        if (objCheck != null)
                                                        {
                                                            masterGOVID = objCheck.ID;
                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, masterGOVID.ToString());
                                                        }
                                                        else
                                                        {
                                                            //excelError.Add("Không tìm thấy loại xe [" + excelInput["GroupVehicle"] + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(104, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, masterGOVID.ToString());
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //Chưa nhập xe
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(115, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    #endregion

                                    #region Lưu dữ liệu
                                    result.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    result.ListPartnerLocation.AddRange(sPartnerLocation);
                                    result.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    result.ListProductNew.AddRange(sProductNew);
                                    if (isContinue)
                                    {
                                        var obj = new DTOORDOrder_Import();
                                        if (ctID > 0)
                                            obj.ContractID = ctID;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;

                                        if (obj.ContractID == null)
                                        {
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                                    obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai giá chuyến");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(58, lstMessageError));
                                                isContinue = false;
                                            }
                                        }

                                        obj.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                        obj.ListPartnerLocation.AddRange(sPartnerLocation);
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        obj.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                        obj.ListProductNew.AddRange(sProductNew);

                                        foreach (var dic in dicQ)
                                        {
                                            var gop = new DTOORDData_GroupProduct();
                                            try
                                            {
                                                gop = dicGS[dic.Key];
                                            }
                                            catch
                                            {
                                                gop.Code = excelInput["GroupProductCode"];
                                            }

                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                            objProduct.GroupOfProductID = gop.ID;
                                            objProduct.GroupOfProductCode = gop.Code;
                                            objProduct.ProductID = dicP[gop.ID];
                                            objProduct.ProductCode = dicPCode[gop.ID];
                                            objProduct.PartnerID = pID;
                                            objProduct.PartnerCode = dCode;
                                            objProduct.PartnerName = dName;
                                            objProduct.LocationToID = toID;
                                            objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                            objProduct.LocationFromID = dic.Key;
                                            objProduct.LocationFromCode = dicL[dic.Key].LocationCode;
                                            objProduct.LocationFromName = dicL[dic.Key].LocationName;
                                            objProduct.LocationToCode = toCode;
                                            objProduct.LocationToName = toName;
                                            objProduct.EconomicZone = excelInput["EconomicZone"];
                                            objProduct.Note1 = excelInput["Note1"];
                                            objProduct.Note2 = excelInput["Note2"];

                                            objProduct.TempMax = tmpMax;
                                            objProduct.TempMin = tmpMin;
                                            objProduct.ETD = eTD;
                                            objProduct.ETARequest = eTARequest;
                                            objProduct.ETDRequest = eTDRequest;
                                            objProduct.ETA = eTA;
                                            if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                            }
                                            objProduct.ListLocationToAddress = sLocation;
                                            objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                            var isCheck = false;
                                            if (!cusSKU)
                                            {
                                                if (objSetting.HasStock)
                                                {
                                                    var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                                else if (objSetting.HasStockProduct)
                                                {
                                                    var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                            }
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.ID == dicP[gop.ID] && c.CustomerID == cusID);
                                            if (cusProduct != null)
                                            {
                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                            }

                                            //Kiểm tra thông tin sản lượng nếu là LTL.
                                            if (transportID == iLTL)
                                            {
                                                if (gop.ID > 0 && dicPacking.ContainsKey(gop.ID))
                                                {
                                                    switch (dicPacking[gop.ID])
                                                    {
                                                        case 1://Ton
                                                            if (objProduct.Ton <= 0)
                                                            {
                                                                objProduct.Ton = 0;
                                                                //excelError.Add("Không có số tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objProduct.CBM <= 0)
                                                            {
                                                                objProduct.CBM = 0;
                                                                //excelError.Add("Không có số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objProduct.Quantity <= 0)
                                                            {
                                                                objProduct.Quantity = 0;
                                                                //excelError.Add("Không có số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //if (product.Ton == 0 && product.CBM == 0)
                                                //    excelError.Add("Không có thông tin tấn/khối.");
                                            }

                                            //Lấy giá theo import.
                                            if (gop.ID > 0 && obj.ContractID == null)
                                            {
                                                switch (gop.PackingType)
                                                {
                                                    case 1://Ton
                                                        if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá tấn");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 2://CBM
                                                        if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá khối");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 3://Quantity
                                                        if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá SL");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }
                                            #region Plan
                                            objProduct.MasterETD = MasterETD;
                                            objProduct.MasterETA = MasterETA;
                                            objProduct.VehicleID = vehID;
                                            objProduct.VendorID = venID;
                                            objProduct.MasterGroupOfVehicleID = masterGOVID;
                                            objProduct.DriverTel = driverTel;
                                            objProduct.DriverName = driverName;
                                            objProduct.MasterNote = excelInput["MasterNote"];
                                            objProduct.DriverID = driverID;
                                            #endregion

                                            obj.ListProduct.Add(objProduct);
                                        }
                                        foreach (var dic in dicQP)
                                        {
                                            var tmp = dic.Key.ToString().Split('-').ToList();
                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID.ToString() == tmp[0] && c.CustomerID == cusID);
                                            var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID.ToString() == tmp[0] && c.ID.ToString() == tmp[1]);
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID.ToString() == tmp[1] && c.ID.ToString() == tmp[2]);
                                            if (cusStock != null && cusGroup != null && cusProduct != null)
                                            {
                                                objProduct.GroupOfProductID = cusGroup.ID;
                                                objProduct.GroupOfProductCode = cusGroup.Code;
                                                objProduct.ProductID = cusProduct.ID;
                                                objProduct.ProductCode = cusProduct.Code;
                                                objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                                objProduct.PartnerID = pID;
                                                objProduct.PartnerCode = dCode;
                                                objProduct.PartnerName = dName;
                                                objProduct.LocationToID = toID;
                                                objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                                objProduct.LocationFromID = cusStock.CUSLocationID;
                                                objProduct.LocationFromCode = cusStock.LocationCode;
                                                objProduct.LocationFromName = cusStock.LocationName;
                                                objProduct.LocationToCode = toCode;
                                                objProduct.LocationToName = toName;
                                                objProduct.EconomicZone = excelInput["EconomicZone"];
                                                objProduct.Note1 = excelInput["Note1"];
                                                objProduct.Note2 = excelInput["Note2"];

                                                objProduct.TempMax = tmpMax;
                                                objProduct.TempMin = tmpMin;
                                                objProduct.ETD = eTD;
                                                objProduct.ETARequest = eTARequest;
                                                objProduct.ETDRequest = eTDRequest;
                                                objProduct.ETA = eTA;
                                                if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                                {
                                                    //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                    isContinue = false;
                                                }
                                                objProduct.ListLocationToAddress = sLocation;
                                                objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                                var isCheck = false;
                                                if (!cusSKU)
                                                {
                                                    if (objSetting.HasStock)
                                                    {
                                                        var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                    else if (objSetting.HasStockProduct)
                                                    {
                                                        var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                }

                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                                //Kiểm tra thông tin sản lượng nếu là LTL.
                                                if (transportID == iLTL)
                                                {
                                                    if (cusGroup.ID > 0 && dicPacking.ContainsKey(cusGroup.ID))
                                                    {
                                                        switch (dicPacking[cusGroup.ID])
                                                        {
                                                            case 1://Ton
                                                                if (objProduct.Ton <= 0)
                                                                {
                                                                    objProduct.Ton = 0;
                                                                    //excelError.Add("Không có số tấn.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2://CBM
                                                                if (objProduct.CBM <= 0)
                                                                {
                                                                    objProduct.CBM = 0;
                                                                    //excelError.Add("Không có số khối.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3://Quantity
                                                                if (objProduct.Quantity <= 0)
                                                                {
                                                                    objProduct.Quantity = 0;
                                                                    //excelError.Add("Không có số lượng.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }

                                                //Lấy giá theo import.
                                                if (cusGroup.ID > 0 && obj.ContractID == null)
                                                {
                                                    switch (cusGroup.PackingType)
                                                    {
                                                        case 1://Ton
                                                            if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá tấn");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá khối");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá SL");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }

                                                #region Plan
                                                objProduct.MasterETD = MasterETD;
                                                objProduct.MasterETA = MasterETA;
                                                objProduct.VehicleID = vehID;
                                                objProduct.VendorID = venID;
                                                objProduct.MasterGroupOfVehicleID = masterGOVID;
                                                objProduct.DriverTel = driverTel;
                                                objProduct.DriverName = driverName;
                                                objProduct.MasterNote = excelInput["MasterNote"];
                                                objProduct.DriverID = driverID;
                                                #endregion

                                                obj.ListProduct.Add(objProduct);
                                            }
                                        }

                                        if (obj.ListProduct != null && isContinue)
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));
                                    }

                                    #endregion

                                    #endregion
                                }
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result.Row = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_Plan_ImportResult ORDOrder_Plan_ExcelOnline_Import(int templateID, int customerID, long id, List<Row> lst, List<DTOORDOrder_ImportOnline> lstDetail, List<string> lstMessageError)
        {
            try
            {
                DTOORDOrder_Plan_ImportResult result = new DTOORDOrder_Plan_ImportResult();
                result.SYSExcel = new SYSExcel();
                result.ListRowResult = new List<DTOORDOrder_Plan_ImportRowResult>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                DateTime dtNow = DateTime.Now.Date;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingORDPlan objSetting = new DTOCUSSettingORDPlan();
                    objSetting = ORDOrder_Plan_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;
                    int colVenID = objSetting.TotalColumn.Value + 16;
                    int colVehID = objSetting.TotalColumn.Value + 17;
                    int colGovID = objSetting.TotalColumn.Value + 18;
                    int colDriverTel = objSetting.TotalColumn.Value + 19;
                    int colDriverName = objSetting.TotalColumn.Value + 20;

                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = rowStart + 1;

                    #region get rowEnd
                    if (lst.Count() > 0)
                    {
                        rowEnd = lst[lst.Count() - 1].Index.Value + 1;
                        foreach (var item in lst)
                        {
                            if (item.Index.Value > rowEnd)
                            {
                                rowEnd = item.Index.Value;
                            }
                        }
                    }
                    #endregion

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;

                    #region check row empty
                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            var countCheck = eRow.Cells.Count(c => c.Value != null && !string.IsNullOrEmpty(c.Value.ToString()));
                            if (countCheck > 0)
                            {
                            }
                            else
                            {
                                failCurrent++;
                            }
                            if (failCurrent >= failMax)
                            {
                                rowEnd = eRow.Index.Value;
                                break;
                            }
                        }
                    }
                    #endregion

                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index > rowEnd) break;

                        DTOORDOrder_Plan_ImportRowResult rowResult = new DTOORDOrder_Plan_ImportRowResult();
                        rowResult.Index = checkRow.Index.HasValue ? checkRow.Index.Value : -1;
                        rowResult.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                        rowResult.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();

                        bool isContinue = true;
                        int SYSCustomerID = -1;

                        List<DTOCUSSettingOrderCode> dataSettingCode = new List<DTOCUSSettingOrderCode>();
                        DTOORDOrder_Plan_ImportCheck data = new DTOORDOrder_Plan_ImportCheck();

                        #region Get Data
                        data = ORDOrder_Plan_Excel_Import_Data(customerID);
                        dataSettingCode = ORDOrder_Excel_Setting_Code_Get();
                        #endregion

                        SYSCustomerID = Account.SYSCustomerID;
                        if (objSetting != null)
                        {
                            //Check các required.
                            ORDOrder_Plan_Excel_ValidateSetting(objSetting);

                            string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                            var sValue = new List<string>(aValue);
                            var dicTrM = new Dictionary<int, string>();
                            dicTrM.Add(iFCL, "FCL");
                            dicTrM.Add(iFTL, "FTL");
                            dicTrM.Add(iLTL, "LTL");
                            var sortOrder = 1;
                            int serviceID = -1;
                            int svID = -1;
                            int transportID = -1;
                            int tmID = -1;
                            int ctID = -1;
                            int ctTermID = -1;

                            var objImport = lstDetail.FirstOrDefault(c => c.Index == checkRow.Index);

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                #region Check TransportMode && ServiceOfOrder
                                if (isContinue)
                                {
                                    //TransportMode
                                    if (objImport.TransportModeID < 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer[0], lstMessageError));
                                        isContinue = false;
                                    }
                                    else
                                    {
                                        tmID = objImport.TransportModeID;
                                        transportID = HelperContract.GetTransportMode(model, tmID);
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTM, tmID.ToString());
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ServiceOfOrderID > 0)
                                        {
                                            svID = objSetting.ServiceOfOrderID;
                                            serviceID = HelperContract.GetServiceOfOrder(model, svID);
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                        }
                                        else
                                        {
                                            if (objSetting.ServiceOfOrder < 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột dịch vụ vận chuyển.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(8, lstMessageError));
                                                isContinue = false;
                                            }

                                            if (isContinue)
                                            {
                                                var str = excelInput["ServiceOfOrder"].Trim().ToLower();
                                                if (!string.IsNullOrEmpty(str))
                                                {
                                                    var objSV = model.CAT_ServiceOfOrder.FirstOrDefault(c => c.Code.ToLower() == str);
                                                    if (objSV != null)
                                                    {
                                                        svID = objSV.ID;
                                                        serviceID = objSV.ServiceOfOrderID;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Dịch vụ vận chuyển [" + str + "]  không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(9, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else if (transportID != iFTL && transportID != iLTL)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không xác định dịch vụ vận chuyển.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(10, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colSV, svID.ToString());
                                                }
                                            }
                                        }

                                    }
                                    if (transportID == iFTL && objSetting.GroupVehicle < 1 && isContinue)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập cột loại xe.");
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(11, lstMessageError));
                                        isContinue = false;
                                    }
                                }
                                #endregion

                                //Xe tải
                                if ((transportID == iFTL || transportID == iLTL) && isContinue)
                                {
                                    #region ĐH xe tải
                                    var cusID = -1;
                                    var cusCode = string.Empty;
                                    var cusSKU = false;
                                    var ordCode = string.Empty;

                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ gửi yêu cầu.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(12, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.RequestDate_Time > 0)
                                        {
                                            try
                                            {
                                                requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (requestDate == null)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày gửi yêu cầu.");
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(13, lstMessageError));
                                            isContinue = false;
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                        {
                                            try
                                            {
                                                eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETD.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(14, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTD = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(15, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTD = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                        {
                                            try
                                            {
                                                eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(16, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.ETATime_RequestDate > 0 && requestDate != null && isContinue)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                            {
                                                try
                                                {
                                                    //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTA = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(17, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                eTA = requestDate;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                        {
                                            try
                                            {
                                                eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c giao hàng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(18, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTARequest != null && objSetting.ETARequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTARequest = eTARequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c giao hàng.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                        {
                                            try
                                            {
                                                eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai ngày y.c đến kho.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                                isContinue = false;
                                            }
                                            if (eTDRequest != null && objSetting.ETDRequestTime > 0 && isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                                {
                                                    try
                                                    {
                                                        //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                        var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                        TimeSpan _time = _date.TimeOfDay;
                                                        eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                    }
                                                    catch
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai giờ y.c đến kho.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Check Customer, Contract và Code
                                    //Customer
                                    if (isContinue)
                                    {
                                        if (objImport.ExcelErrorCustomer.Count > 0)
                                        {
                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorCustomer.FirstOrDefault());
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorCustomer.FirstOrDefault(), lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            cusID = objImport.CustomerID;
                                            cusCode = objImport.CustomerCode;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCus, cusID.ToString());
                                        }
                                    }

                                    //Contract
                                    if (isContinue)
                                    {
                                        if (cusID > 0 && objSetting.HasUseContract)
                                        {
                                            //Get contract
                                            var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                            var dataC = data.ListContract.Where(c => c.CustomerID == cusID && c.TransportModeID == tmID).ToList();
                                            if (dataC.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                                isContinue = false;
                                            }
                                            else if (dataC.Count > 1)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Có hơn 1 hợp đồng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                ctID = dataC.FirstOrDefault().ID;
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colContract, ctID.ToString());
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colTerm, ctTermID.ToString());
                                        }
                                    }

                                    //OrderCode
                                    if (isContinue)
                                    {
                                        var objCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == cusID);
                                        if (objCode == null || objCode.ActionType < 2) //Ko thiết lập hoặc theo cột mã.
                                        {
                                            if (string.IsNullOrEmpty(excelInput["OrderCode"]))
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu mã ĐH.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                            else
                                            {
                                                var code = excelInput["OrderCode"];
                                                if (!StringHelper.IsValidCode(code) || code.Length > 256)
                                                {
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(66, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    ordCode = excelInput["OrderCode"];
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    #region Check nhà phân phối
                                    var isLocationToFail = objImport.IsLocationToFail;
                                    if (objImport.ExcelErrorLocation.Count > 0)
                                    {
                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, objImport.ExcelErrorLocation.FirstOrDefault());
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    //if (isLocationToFail)
                                    //{
                                    //    HelperExcel.CheckErrorFail(checkRow, colCheckChange, col, HelperExcel.MessageError(objImport.ExcelErrorLocation.FirstOrDefault(), lstMessageError));
                                    //}
                                    var sPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    var sLocation = new List<AddressSearchItem>();
                                    sLocation = objImport.sLocation;

                                    var pID = objImport.PartnerID;
                                    var toID = objImport.LocationToID;
                                    var toCode = objImport.LocationToCode;
                                    var toName = objImport.LocationToName;

                                    if (isContinue)
                                    {
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colPartnerID, pID.ToString());
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                    }

                                    string dName = objImport.PartnerName;
                                    string dCode = objImport.PartnerCode;

                                    sPartnerLocation.AddRange(objImport.ListPartnerLocation);
                                    rowResult.OrderCode = ordCode;
                                    rowResult.CustomerCode = cusCode;
                                    rowResult.PartnerCode = dCode;
                                    rowResult.PartnerName = dName;
                                    rowResult.PartnerID = pID;
                                    rowResult.LocationToID = toID;
                                    rowResult.LocationToAddress = excelInput["LocationToAddress"];
                                    rowResult.LocationToCode = toCode;
                                    rowResult.CustomerID = cusID;
                                    rowResult.EconomicZone = excelInput["EconomicZone"];
                                    rowResult.RoutingAreaCode = excelInput["RoutingAreaCode"];
                                    rowResult.SOCode = excelInput["SOCode"];
                                    rowResult.DNCode = excelInput["DNCode"];

                                    var objTMName = data.ListTransportMode.FirstOrDefault(c => c.ID == tmID);
                                    if (objTMName != null)
                                        rowResult.TransportModeName = objTMName.Name;
                                    rowResult.TransportModeID = transportID;
                                    if (requestDate != null)
                                        rowResult.RequestDate = requestDate.Value;
                                    rowResult.IsLocationToFail = isLocationToFail;
                                    rowResult.IsCreateLocation = objImport.IsCreateLocation;
                                    rowResult.IsCreatePartner = objImport.IsCreatePartner;
                                    rowResult.ListLocationToAddress = sLocation;

                                    if (rowResult.LocationToID < 1 && rowResult.ListLocationToAddress.Count > 0)
                                    {
                                        rowResult.LocationToID = rowResult.ListLocationToAddress[0].CUSLocationID;
                                        toID = rowResult.ListLocationToAddress[0].CUSLocationID;
                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, toID.ToString());
                                        if (objImport.LocationToID < 0)
                                            CheckErrorAddress(checkRow, colCheckAddress, HelperExcel.MessageError(93, lstMessageError));
                                    }
                                    #endregion

                                    #region Check Cung đường

                                    int? cusRoutingID = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.RoutingCode > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RoutingCode"]))
                                            {
                                                var isCus = cusID < 1 || cusID == Account.SYSCustomerID;
                                                var objRoute = data.ListRoute.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == excelInput["RoutingCode"].Trim().ToLower());
                                                if (objRoute != null)
                                                {
                                                    cusRoutingID = objRoute.ID;
                                                }
                                            }
                                        }

                                        if (cusRoutingID == null)
                                        {
                                            cusRoutingID = -1;
                                        }

                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colCusRoutingID, cusRoutingID.ToString());
                                    }
                                    #endregion

                                    #region Check sản lượng, kho, nhóm sản phẩm và đơn vị tính, loại xe, nhiệt độ
                                    var sProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    //Dictionary quantity theo kho. [Q = Quantity]
                                    Dictionary<int, Dictionary<int, double>> dicQ = new Dictionary<int, Dictionary<int, double>>();
                                    //Dictionary chi tiết kho. [L = Location]
                                    Dictionary<int, DTOORDData_Location> dicL = new Dictionary<int, DTOORDData_Location>();
                                    //Dictionary chi tiết nhóm sản phẩm đầu tiên/chỉ định trong kho. [GS = GroupProductInStock]
                                    Dictionary<int, DTOORDData_GroupProduct> dicGS = new Dictionary<int, DTOORDData_GroupProduct>();

                                    //Dictionary quantity theo kho-nhóm hàng-hàng hóa. [QP = QuantityProduct]
                                    Dictionary<string, Dictionary<int, double>> dicQP = new Dictionary<string, Dictionary<int, double>>();

                                    //Nếu thiết lập kho theo cột, check kho, lấy sản lượng theo excel.

                                    if (isContinue)
                                    {
                                        if (objSetting.HasStock)
                                        {
                                            if (objSetting.ListStock == null || objSetting.ListStock.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho [Hiện kho].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(26, lstMessageError));
                                                isContinue = false;
                                            }
                                            foreach (var stock in objSetting.ListStock)
                                            {
                                                int sID = stock.StockID;
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == sID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(27, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    dicL.Add(sID, objCheck);
                                                }

                                                if (isContinue)
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    var dicS = GetDataValue(checkRow, stock, sValue);
                                                    if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                    {
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                    dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                                else
                                                                    dicV.Add(1, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(1, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                    dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                                else
                                                                    dicV.Add(2, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(2, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        if (isContinue)
                                                        {
                                                            try
                                                            {
                                                                if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                    dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                                else
                                                                    dicV.Add(3, 0);
                                                            }
                                                            catch
                                                            {
                                                                dicV.Add(3, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        dicQ.Add(sID, dicV);
                                                    }
                                                }
                                            }

                                            if (dicQ.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Thiếu sản lượng.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(31, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else if (objSetting.HasStockProduct)
                                        {
                                            if (objSetting.ListStockWithProduct == null || objSetting.ListStockWithProduct.Count == 0)
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập kho và nhóm hàng [Hiện Kho-Hàng].");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(32, lstMessageError));
                                                isContinue = false;
                                            }

                                            foreach (var stock in objSetting.ListStockWithProduct)
                                            {
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CUSLocationID == stock.StockID && c.CustomerID == cusID);
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(33, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID == stock.StockID && c.ID == stock.GroupOfProductID);
                                                    if (objGop == null)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định nhóm hàng. Kho [" + objCheck.LocationName + "]");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(34, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                    else
                                                    {
                                                        var objPro = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID == objGop.ID && c.CustomerID == cusID);
                                                        if (objPro == null)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho thiết lập không xác định hàng hóa. Nhóm [" + objGop.GroupName + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(35, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                var dicS = GetDataValue(checkRow, stock, sValue);
                                                if (!dicS.Values.All(c => string.IsNullOrEmpty(c)))
                                                {
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(dicS["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(dicS["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(dicS["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(dicS["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    var key = stock.StockID + "-" + stock.GroupOfProductID + "-" + stock.ProductID;
                                                    dicQP.Add(key, dicV);
                                                }
                                            }
                                        }
                                        //Mỗi dòng 1 kho, check kho, lấy sản lượng theo excel.
                                        else
                                        {
                                            int sID = -1;
                                            if (objSetting.LocationFromCode < 1 && objSetting.LocationFromCodeName < 1)
                                            {
                                                if (data.ListStock.Count(c => c.CustomerID == cusID) == 1)
                                                {
                                                    var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID);

                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Chưa thiết lập điểm bốc hàng [LocationFromCode]");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(36, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                var sCode = excelInput["LocationFromCode"];
                                                if (objSetting.LocationFromCodeName > 0)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["LocationFromCodeName"]))
                                                    {
                                                        sCode = excelInput["LocationFromCodeName"].Split('-').FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        sCode = string.Empty;
                                                    }
                                                }
                                                var objCheck = data.ListStock.FirstOrDefault(c => c.CustomerID == cusID && c.LocationCode.ToLower().Trim() == sCode.ToLower().Trim());
                                                if (objCheck != null)
                                                {
                                                    sID = objCheck.CUSLocationID;
                                                    dicL.Add(sID, objCheck);
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + sCode + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(37, lstMessageError));
                                                    isContinue = false;
                                                    dicL.Add(-1, new DTOORDData_Location());
                                                }
                                            }

                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]) || !string.IsNullOrEmpty(excelInput["CBM_SKU"]) || !string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                {
                                                    cusSKU = true;
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton_SKU"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton_SKU"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM_SKU"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM_SKU"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity_SKU"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity_SKU"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                                else
                                                {
                                                    Dictionary<int, double> dicV = new Dictionary<int, double>();
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Ton"]))
                                                                dicV.Add(1, Convert.ToDouble(excelInput["Ton"]));
                                                            else
                                                                dicV.Add(1, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(1, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai tấn.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(28, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["CBM"]))
                                                                dicV.Add(2, Convert.ToDouble(excelInput["CBM"]));
                                                            else
                                                                dicV.Add(2, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(2, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số khối.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(29, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    if (isContinue)
                                                    {
                                                        try
                                                        {
                                                            if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                                                dicV.Add(3, Convert.ToDouble(excelInput["Quantity"]));
                                                            else
                                                                dicV.Add(3, 0);
                                                        }
                                                        catch
                                                        {
                                                            dicV.Add(3, 0);
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai số lượng.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(30, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    dicQ.Add(sID, dicV);
                                                }
                                            }
                                        }
                                    }
                                    string strGopCode = string.Empty;
                                    //Dictionary Product theo GroupProduct. [P = Product] - Key: GroupOfProductID
                                    Dictionary<int, int> dicP = new Dictionary<int, int>();
                                    //Dictionary ProductCode theo GroupProduct. [PCode = ProductCode] - Key: GroupOfProductID
                                    Dictionary<int, string> dicPCode = new Dictionary<int, string>();
                                    //Dictionary Product PackingType theo GroupProduct. [Packing = Product Packing] - Key: GroupOfProductID
                                    Dictionary<int, int> dicPacking = new Dictionary<int, int>();

                                    //Nếu không có cột nhóm SP, check sản phẩm ko nhóm (ProductCodeWithoutGroup)
                                    //Nếu không có cột nhóm SP, kiểm tra kho có duy nhất nhóm SP => Lấy
                                    if (isContinue)
                                    {
                                        if (objSetting.GroupProductCode == 0 && objSetting.GroupProductCodeNotUnicode == 0)
                                        {
                                            if (objSetting.ProductCodeWithoutGroup > 0)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                                {
                                                    var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                    if (objP != null)
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                            if (objGS != null)
                                                            {
                                                                strGopCode = objGS.Code;
                                                                dicGS.Add(st.Key, objGS);
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                objGS = new DTOORDData_GroupProduct();
                                                                objGS.ID = -1;
                                                                dicGS.Add(st.Key, objGS);
                                                                if (!dicP.ContainsKey(-1))
                                                                {
                                                                    dicP.Add(objGS.ID, objP.ID);
                                                                    dicPCode.Add(objGS.ID, objP.Code);
                                                                    dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                                }
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (var st in dicQ)
                                                        {
                                                            var objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, -1);
                                                                dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                                dicPacking.Add(objGS.ID, 1);
                                                            }
                                                        }
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có nhóm sản phẩm.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(41, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(42, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //Kiểm tra nhóm SP có tồn tại + có trong kho.
                                        else if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.GroupProductCode > 0)
                                                strGopCode = excelInput["GroupProductCode"];
                                            else
                                                strGopCode = StringHelper.RemoveSign4VietnameseString(excelInput["GroupProductCodeNotUnicode"]);

                                            if (!string.IsNullOrEmpty(strGopCode))
                                            {
                                                var objGop = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.Code.Trim().ToLower() == strGopCode.Trim().ToLower());
                                                if (objGop != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        if (data.ListGroupOfProduct.Count(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key) == 0)
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không có trong kho " + dicL[st.Key].LocationCode + ".");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(43, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                        else
                                                        {
                                                            var objCheck = data.ListGroupOfProduct.FirstOrDefault(c => c.CustomerID == cusID && c.ID == objGop.ID && c.CUSStockID == st.Key);
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + strGopCode + "] không tồn tại hoặc chưa thiết lập kho.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(44, lstMessageError));
                                                    isContinue = false;
                                                    dicGS.Add(-1, new DTOORDData_GroupProduct());
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var dataGS = data.ListGroupOfProduct.Where(c => c.CustomerID == cusID && c.CUSStockID == st.Key).ToList();
                                                    if (dataGS.Count == 0)
                                                    {
                                                        //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(45, lstMessageError));
                                                        isContinue = false;
                                                        dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                    }
                                                    else if (dataGS.Count == 1)
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault();
                                                        strGopCode = objCheck.Code;
                                                        dicGS.Add(st.Key, objCheck);
                                                    }
                                                    else
                                                    {
                                                        var objCheck = dataGS.FirstOrDefault(c => c.IsDefault == true);
                                                        if (objCheck != null)
                                                        {
                                                            strGopCode = objCheck.Code;
                                                            dicGS.Add(st.Key, objCheck);
                                                        }
                                                        else
                                                        {
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] có nhiều hơn 1 nhóm sản phẩm.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(46, lstMessageError));
                                                            isContinue = false;
                                                            dicGS.Add(st.Key, new DTOORDData_GroupProduct());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ProductCodeWithoutGroup"]))
                                            {
                                                var objP = data.ListProduct.FirstOrDefault(c => c.Code == excelInput["ProductCodeWithoutGroup"] && c.CustomerID == cusID);
                                                if (objP != null)
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = data.ListGroupOfProduct.FirstOrDefault(c => c.ID == objP.GroupOfProductID && c.CUSStockID == st.Key);
                                                        if (objGS != null)
                                                        {
                                                            strGopCode = objGS.Code;
                                                            dicGS.Add(st.Key, objGS);
                                                            dicP.Add(objGS.ID, objP.ID);
                                                            dicPCode.Add(objGS.ID, objP.Code);
                                                            dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            objGS = new DTOORDData_GroupProduct();
                                                            objGS.ID = -1;
                                                            dicGS.Add(st.Key, objGS);
                                                            if (!dicP.ContainsKey(-1))
                                                            {
                                                                dicP.Add(objGS.ID, objP.ID);
                                                                dicPCode.Add(objGS.ID, objP.Code);
                                                                dicPacking.Add(objGS.ID, objP.PackingTypeGOP);
                                                            }
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Kho [" + dicL[st.Key].LocationCode + "] không có sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "].");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(47, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (var st in dicQ)
                                                    {
                                                        var objGS = new DTOORDData_GroupProduct();
                                                        objGS.ID = -1;
                                                        dicGS.Add(st.Key, objGS);
                                                        if (!dicP.ContainsKey(-1))
                                                        {
                                                            dicP.Add(objGS.ID, -1);
                                                            dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                            dicPacking.Add(objGS.ID, 1);
                                                        }
                                                    }
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sản phẩm [" + excelInput["ProductCodeWithoutGroup"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(48, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }
                                            else
                                            {
                                                foreach (var st in dicQ)
                                                {
                                                    var objGS = new DTOORDData_GroupProduct();
                                                    objGS.ID = -1;
                                                    dicGS.Add(st.Key, objGS);
                                                    if (!dicP.ContainsKey(-1))
                                                    {
                                                        dicP.Add(objGS.ID, -1);
                                                        dicPCode.Add(objGS.ID, excelInput["ProductCodeWithoutGroup"]);
                                                        dicPacking.Add(objGS.ID, 1);
                                                    }
                                                }
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Không có thông tin sản phẩm.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(49, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }

                                    if (isContinue)
                                    {
                                        if (objSetting.ProductCodeWithoutGroup == 0)
                                        {
                                            if (objSetting.Packing == 0 && objSetting.PackingNotUnicode == 0)
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count == 1)
                                                        {
                                                            dicP.Add(gop.Value.ID, dataProduct[0].ID);
                                                            dicPCode.Add(gop.Value.ID, dataProduct[0].Code);
                                                            dicPacking.Add(gop.Value.ID, dataProduct[0].PackingTypeGOP);
                                                        }
                                                        else
                                                        {
                                                            var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                            if (objDefault != null)
                                                            {
                                                                dicP.Add(gop.Value.ID, objDefault.ID);
                                                                dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                            }
                                                            else
                                                            {
                                                                dicP.Add(gop.Value.ID, -1);
                                                                dicPCode.Add(gop.Value.ID, "");
                                                                dicPacking.Add(gop.Value.ID, 0);
                                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (var gop in dicGS)
                                                {
                                                    if (!dicP.ContainsKey(gop.Value.ID))
                                                    {
                                                        var dataProduct = data.ListProduct.Where(c => c.GroupOfProductID == gop.Value.ID && c.CustomerID == cusID).ToList();
                                                        if (dataProduct.Count > 0)
                                                        {
                                                            var str = string.Empty;
                                                            if (objSetting.Packing > 0)
                                                                str = excelInput["Packing"];
                                                            else if (objSetting.PackingNotUnicode > 0)
                                                                str = StringHelper.RemoveSign4VietnameseString(excelInput["PackingNotUnicode"]);

                                                            if (string.IsNullOrEmpty(str))
                                                            {
                                                                var objDefault = dataProduct.FirstOrDefault(c => c.IsDefault == true);
                                                                if (objDefault != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, objDefault.ID);
                                                                    dicPCode.Add(gop.Value.ID, objDefault.Code);
                                                                    dicPacking.Add(gop.Value.ID, objDefault.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] có nhiều hơn 1 ĐVT");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(50, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var product = dataProduct.FirstOrDefault(c => c.Code.ToLower().Trim() == str.ToLower().Trim());
                                                                if (product != null)
                                                                {
                                                                    dicP.Add(gop.Value.ID, product.ID);
                                                                    dicPCode.Add(gop.Value.ID, product.Code);
                                                                    dicPacking.Add(gop.Value.ID, product.PackingTypeGOP);
                                                                }
                                                                else
                                                                {
                                                                    dicP.Add(gop.Value.ID, -1);
                                                                    dicPCode.Add(gop.Value.ID, "");
                                                                    dicPacking.Add(gop.Value.ID, 0);
                                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập Hàng hóa/ĐVT [" + str + "].");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(51, lstMessageError));
                                                                    isContinue = false;

                                                                    DTOORDOrder_Import_ProductNew objProductNew = new DTOORDOrder_Import_ProductNew();
                                                                    objProductNew.GroupOfProductID = gop.Value.ID;
                                                                    objProductNew.GroupName = gop.Value.GroupName;
                                                                    objProductNew.ProductCode = str;
                                                                    objProductNew.ProductName = str;
                                                                    objProductNew.PackingID = gop.Value.DefaultPackingID;
                                                                    objProductNew.PackingName = gop.Value.DefaultPackingName;
                                                                    sProductNew.Add(objProductNew);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            dicP.Add(gop.Value.ID, -1);
                                                            dicPCode.Add(gop.Value.ID, "");
                                                            dicPacking.Add(gop.Value.ID, 0);
                                                            //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Nhóm sp[" + (gop.Value.ID > 0 ? gop.Value.Code : strGopCode) + "] chưa thiết lập ĐVT.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(52, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    var groupVehicleID = -1;

                                    if (isContinue)
                                    {
                                        if (transportID == iFTL)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                            {
                                                var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                if (objCheck == null)
                                                {
                                                    //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe[" + excelInput["GroupVehicle"] + "] không tồn tại.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(53, lstMessageError));
                                                    isContinue = false;
                                                }
                                                else
                                                {
                                                    groupVehicleID = objCheck.ID;
                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                                }
                                            }
                                            else
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Loại xe không xác định.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(54, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGroupVehicleID, groupVehicleID.ToString());
                                        }
                                    }

                                    double? tmpMin = null;
                                    double? tmpMax = null;
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMin > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMin"]))
                                        {
                                            try
                                            {
                                                tmpMin = Convert.ToDouble(excelInput["TemperatureMin"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối thiểu.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(55, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    if (isContinue)
                                    {
                                        if (objSetting.TemperatureMax > 0 && !string.IsNullOrEmpty(excelInput["TemperatureMax"]))
                                        {
                                            try
                                            {
                                                tmpMax = Convert.ToDouble(excelInput["TemperatureMax"]);
                                            }
                                            catch
                                            {
                                                //HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, "Sai nhiệt độ tối đa.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(56, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                    #endregion

                                    int venID = -1, vehID = -1, masterGOVID = -1; int? driverID = -1;
                                    DateTime? MasterETA = null; DateTime? MasterETD = null;
                                    string venCode = excelInput["VendorCode"].Trim(), vehCode = excelInput["VehicleNo"].Trim();
                                    string driverName = excelInput["DriverName"], driverTel = excelInput["DriverTel"];
                                    #region Plan
                                    if (isContinue)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["VehicleNo"]))
                                        {
                                            #region check thời gian
                                            MasterETD = null;
                                            if (objSetting.MasterETDDate < 1 && objSetting.MasterETDDate_Time < 1)
                                                throw new Exception("Chưa thiết lập cột MasterETD chuyến.");

                                            try
                                            {
                                                MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate"]);
                                            }
                                            catch (Exception)
                                            {
                                            }
                                            if (objSetting.MasterETDTime > 0 && MasterETD != null)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["MasterETDTime"]))
                                                {
                                                    try
                                                    {
                                                        MasterETD = MasterETD.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETDTime"]));
                                                    }
                                                    catch
                                                    {
                                                        //excelError.Add("Sai giờ MasterETD chuyến.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(94, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                            }
                                            if (objSetting.MasterETDDate_Time > 0 && isContinue)
                                            {
                                                try
                                                {
                                                    MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate_Time"]);
                                                }
                                                catch
                                                {
                                                    //excelError.Add("Sai MasterETD.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(95, lstMessageError));
                                                    isContinue = false;
                                                }
                                            }

                                            MasterETA = null;
                                            if (isContinue)
                                            {
                                                if (objSetting.MasterHours > 0)
                                                {
                                                    if (MasterETD != null)
                                                    {
                                                        try
                                                        {
                                                            MasterETA = MasterETD.Value.AddHours(Convert.ToDouble(excelInput["MasterHours"]));
                                                        }
                                                        catch
                                                        {
                                                            //excelError.Add("Sai thời gian chuyến.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(96, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (objSetting.MasterETADate < 1 && objSetting.MasterETADate_Time < 1)
                                                        throw new Exception("Chưa thiết lập cột MasterETA chuyến.");
                                                    try
                                                    {
                                                        MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate"]);
                                                    }
                                                    catch (Exception)
                                                    {
                                                    }
                                                    if (objSetting.MasterETATime > 0 && MasterETA != null)
                                                    {
                                                        if (!string.IsNullOrEmpty(excelInput["MasterETATime"]))
                                                        {
                                                            try
                                                            {
                                                                MasterETA = MasterETA.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETATime"]));
                                                            }
                                                            catch
                                                            {
                                                                //excelError.Add("Sai giờ MasterETA.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(97, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    if (objSetting.MasterETADate_Time > 0 && isContinue)
                                                    {
                                                        try
                                                        {
                                                            MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate_Time"]);
                                                        }
                                                        catch
                                                        {
                                                            //excelError.Add("Sai MasterETA.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(98, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }
                                            }

                                            if (MasterETA != null && MasterETD != null && MasterETD >= MasterETA && isContinue)
                                            {
                                                //excelError.Add("Sai ràng buộc thời gian MasterETD-MasterETA");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(99, lstMessageError));
                                                isContinue = false;
                                            }
                                            #endregion

                                            #region Kiểm tra chuyến
                                            if (isContinue)
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["VendorCode"]))
                                                {
                                                    var objVendor = data.ListVendor.FirstOrDefault(c => c.VendorCode.Trim().ToLower() == excelInput["VendorCode"].Trim().ToLower());
                                                    if (objVendor != null)
                                                    {
                                                        venID = objVendor.ID;
                                                        venCode = objVendor.VendorCode;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Nhà xe [" + excelPlanInput["VendorCode"] + "] không tồn tại.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(100, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }
                                                else
                                                {
                                                    var objVendor = data.ListVendor.FirstOrDefault(c => c.IsVendor == false);
                                                    if (objVendor != null)
                                                    {
                                                        venID = objVendor.ID;
                                                        venCode = "Xe nhà";
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVenID, venID.ToString());
                                                    }
                                                    else
                                                    {
                                                        //excelError.Add("Nhà xe không xác định.");
                                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(101, lstMessageError));
                                                        isContinue = false;
                                                    }
                                                }

                                                var dataCode = new List<string>();
                                                var dataChar = new char[] { '-', ' ', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '=', '/', '?', '<', ',', '>', '~', '`' };
                                                var sCode = vehCode.Split(dataChar, StringSplitOptions.RemoveEmptyEntries).ToArray();
                                                foreach (var c in dataChar)
                                                {
                                                    dataCode.Add(string.Join(c.ToString(), sCode).ToLower());
                                                }

                                                if (isContinue)
                                                {
                                                    var objVehicle = data.ListVehicle.FirstOrDefault(c => c.VendorID == venID && dataCode.Contains(c.VehicleNo.Trim().ToLower()));
                                                    if (objVehicle != null)
                                                    {
                                                        vehID = objVehicle.ID;
                                                        vehCode = objVehicle.VehicleNo;
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colVehID, vehID.ToString());
                                                        if (venID > 0 && venCode == "Xe nhà")
                                                        {
                                                            var objPlanning = data.ListVehiclePlan.FirstOrDefault(c => c.VehicleID == vehID && !((c.DateFrom < MasterETD && c.DateTo < MasterETD) || (c.DateFrom > MasterETA && c.DateTo > MasterETA)));
                                                            if (objPlanning != null)
                                                            {
                                                                var objDriver = data.ListDriver.FirstOrDefault(c => c.ID == objPlanning.DriverID);
                                                                if (objDriver != null)
                                                                {
                                                                    driverName = objDriver.DriverName;
                                                                    driverTel = objDriver.DriverTel;
                                                                    driverID = objDriver.ID;
                                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverName, driverName);
                                                                    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverTel, driverTel);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                driverName = objVehicle.DriverName;
                                                                driverTel = objVehicle.DriverTel;
                                                                driverID = objVehicle.DriverID;
                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverName, driverName);
                                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colDriverTel, driverTel);
                                                            }
                                                            if (driverID < 1)
                                                            {
                                                                //excelError.Add("Không có thông tin tài xế.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(102, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (venID > 0)
                                                        {
                                                            if (venCode != "Xe nhà")
                                                            {
                                                                //isNewVehicle = true;
                                                            }
                                                            //excelError.Add("Xe [" + excelPlanInput["VehicleNo"] + "] không tồn tại.");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(103, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                }

                                                if (isContinue)
                                                {
                                                    if (!string.IsNullOrEmpty(excelInput["GroupVehicle"]))
                                                    {
                                                        var objCheck = data.ListGroupOfVehicle.FirstOrDefault(c => c.Code.Trim().ToLower() == excelInput["GroupVehicle"].Trim().ToLower());
                                                        if (objCheck != null)
                                                        {
                                                            masterGOVID = objCheck.ID;
                                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, masterGOVID.ToString());
                                                        }
                                                        else
                                                        {
                                                            //excelError.Add("Không tìm thấy loại xe [" + excelInput["GroupVehicle"] + "]");
                                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(104, lstMessageError));
                                                            isContinue = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colGovID, masterGOVID.ToString());
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //Chưa nhập xe
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(115, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    #endregion

                                    #region Lưu dữ liệu
                                    rowResult.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                    rowResult.ListPartnerLocation.AddRange(sPartnerLocation);
                                    rowResult.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                    rowResult.ListProductNew.AddRange(sProductNew);

                                    if (isContinue)
                                    {
                                        var obj = new DTOORDOrder_Import();
                                        if (ctID > 0)
                                            obj.ContractID = ctID;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;

                                        if (obj.ContractID == null)
                                        {
                                            try
                                            {
                                                if (!string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                                    obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                            }
                                            catch (Exception)
                                            {
                                                //excelError.Add("Sai giá chuyến");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(58, lstMessageError));
                                                isContinue = false;
                                            }
                                        }

                                        obj.ListPartnerLocation = new List<DTOORDOrder_Import_PartnerLocation>();
                                        obj.ListPartnerLocation.AddRange(sPartnerLocation);
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        obj.ListProductNew = new List<DTOORDOrder_Import_ProductNew>();
                                        obj.ListProductNew.AddRange(sProductNew);
                                        foreach (var dic in dicQ)
                                        {
                                            var gop = new DTOORDData_GroupProduct();
                                            try
                                            {
                                                gop = dicGS[dic.Key];
                                            }
                                            catch
                                            {
                                                gop.Code = excelInput["GroupProductCode"];
                                            }

                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                            objProduct.GroupOfProductID = gop.ID;
                                            objProduct.GroupOfProductCode = gop.Code;
                                            objProduct.ProductID = dicP[gop.ID];
                                            objProduct.ProductCode = dicPCode[gop.ID];
                                            objProduct.PartnerID = pID;
                                            objProduct.PartnerCode = dCode;
                                            objProduct.PartnerName = dName;
                                            objProduct.LocationToID = toID;
                                            objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                            objProduct.LocationFromID = dic.Key;
                                            objProduct.LocationFromCode = dicL[dic.Key].LocationCode;
                                            objProduct.LocationFromName = dicL[dic.Key].LocationName;
                                            objProduct.LocationToCode = toCode;
                                            objProduct.LocationToName = toName;
                                            objProduct.EconomicZone = excelInput["EconomicZone"];
                                            objProduct.Note1 = excelInput["Note1"];
                                            objProduct.Note2 = excelInput["Note2"];

                                            objProduct.TempMax = tmpMax;
                                            objProduct.TempMin = tmpMin;
                                            objProduct.ETD = eTD;
                                            objProduct.ETARequest = eTARequest;
                                            objProduct.ETDRequest = eTDRequest;
                                            objProduct.ETA = eTA;
                                            if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                            {
                                                //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                isContinue = false;
                                            }
                                            objProduct.ListLocationToAddress = sLocation;
                                            objProduct.LocationToAddress = excelInput["LocationToAddress"];

                                            var isCheck = false;
                                            if (!cusSKU)
                                            {
                                                if (objSetting.HasStock)
                                                {
                                                    var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                                else if (objSetting.HasStockProduct)
                                                {
                                                    var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                    if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                        (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                    {
                                                        isCheck = true;
                                                    }
                                                }
                                            }

                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.ID == dicP[gop.ID] && c.CustomerID == cusID);
                                            if (cusProduct != null)
                                            {
                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];
                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                            }

                                            //Kiểm tra thông tin sản lượng nếu là LTL.
                                            if (transportID == iLTL)
                                            {
                                                if (gop.ID > 0 && dicPacking.ContainsKey(gop.ID))
                                                {
                                                    switch (dicPacking[gop.ID])
                                                    {
                                                        case 1://Ton
                                                            if (objProduct.Ton <= 0)
                                                            {
                                                                objProduct.Ton = 0;
                                                                //excelError.Add("Không có số tấn.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objProduct.CBM <= 0)
                                                            {
                                                                objProduct.CBM = 0;
                                                                //excelError.Add("Không có số khối.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objProduct.Quantity <= 0)
                                                            {
                                                                objProduct.Quantity = 0;
                                                                //excelError.Add("Không có số lượng.");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //if (product.Ton == 0 && product.CBM == 0)
                                                //    excelError.Add("Không có thông tin tấn/khối.");
                                            }

                                            //Lấy giá theo import.
                                            if (gop.ID > 0 && obj.ContractID == null)
                                            {
                                                switch (gop.PackingType)
                                                {
                                                    case 1://Ton
                                                        if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá tấn");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 2://CBM
                                                        if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá khối");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                    case 3://Quantity
                                                        if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                        {
                                                            try
                                                            {
                                                                objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                            }
                                                            catch (Exception)
                                                            {
                                                                //excelError.Add("Sai giá SL");
                                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                isContinue = false;
                                                            }
                                                        }
                                                        break;
                                                }
                                            }

                                            #region Plan
                                            objProduct.MasterETD = MasterETD;
                                            objProduct.MasterETA = MasterETA;
                                            objProduct.VehicleID = vehID;
                                            objProduct.VendorID = venID;
                                            objProduct.MasterGroupOfVehicleID = masterGOVID;
                                            objProduct.DriverTel = driverTel;
                                            objProduct.DriverName = driverName;
                                            objProduct.MasterNote = excelInput["MasterNote"];
                                            objProduct.DriverID = driverID;
                                            #endregion

                                            obj.ListProduct.Add(objProduct);
                                        }
                                        foreach (var dic in dicQP)
                                        {
                                            var tmp = dic.Key.ToString().Split('-').ToList();
                                            var objProduct = new DTOORDOrder_Import_Product();
                                            objProduct.SortOrder = sortOrder;
                                            objProduct.SOCode = excelInput["SOCode"];
                                            objProduct.DNCode = excelInput["DNCode"];
                                            var cusStock = data.ListStock.FirstOrDefault(c => c.CUSLocationID.ToString() == tmp[0] && c.CustomerID == cusID);
                                            var cusGroup = data.ListGroupOfProduct.FirstOrDefault(c => c.CUSStockID.ToString() == tmp[0] && c.ID.ToString() == tmp[1]);
                                            var cusProduct = data.ListProduct.FirstOrDefault(c => c.GroupOfProductID.ToString() == tmp[1] && c.ID.ToString() == tmp[2]);
                                            if (cusStock != null && cusGroup != null && cusProduct != null)
                                            {
                                                objProduct.GroupOfProductID = cusGroup.ID;
                                                objProduct.GroupOfProductCode = cusGroup.Code;
                                                objProduct.ProductID = cusProduct.ID;
                                                objProduct.ProductCode = cusProduct.Code;
                                                objProduct.CUSRoutingID = cusRoutingID > 0 ? cusRoutingID : null;
                                                objProduct.PartnerID = pID;
                                                objProduct.PartnerCode = dCode;
                                                objProduct.PartnerName = dName;
                                                objProduct.LocationToID = toID;
                                                objProduct.HasCashCollect = !string.IsNullOrEmpty(excelInput["HasCashCollect"]) && excelInput["HasCashCollect"].Trim().ToLower() == "x";
                                                objProduct.LocationFromID = cusStock.CUSLocationID;
                                                objProduct.LocationFromCode = cusStock.LocationCode;
                                                objProduct.LocationFromName = cusStock.LocationName;
                                                objProduct.LocationToCode = toCode;
                                                objProduct.LocationToName = toName;
                                                objProduct.EconomicZone = excelInput["EconomicZone"];
                                                objProduct.Note1 = excelInput["Note1"];
                                                objProduct.Note2 = excelInput["Note2"];

                                                objProduct.TempMax = tmpMax;
                                                objProduct.TempMin = tmpMin;
                                                objProduct.ETD = eTD;
                                                objProduct.ETARequest = eTARequest;
                                                objProduct.ETDRequest = eTDRequest;
                                                objProduct.ETA = eTA;
                                                if (objProduct.ETA != null && objProduct.ETD != null && objProduct.ETD >= objProduct.ETA)
                                                {
                                                    //excelError.Add("Sai ràng buộc ETD-ETA.");
                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(59, lstMessageError));
                                                    isContinue = false;
                                                }
                                                objProduct.ListLocationToAddress = sLocation;
                                                objProduct.LocationToAddress = excelInput["LocationToAddress"];
                                                var isCheck = false;
                                                if (!cusSKU)
                                                {
                                                    if (objSetting.HasStock)
                                                    {
                                                        var settingStock = objSetting.ListStock.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                    else if (objSetting.HasStockProduct)
                                                    {
                                                        var settingStock = objSetting.ListStockWithProduct.Where(c => c.StockID == objProduct.LocationFromID).FirstOrDefault();
                                                        if ((settingStock.Ton > 0 && settingStock.CBM == 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM > 0 && settingStock.Quantity == 0) ||
                                                            (settingStock.Ton == 0 && settingStock.CBM == 0 && settingStock.Quantity > 0))
                                                        {
                                                            isCheck = true;
                                                        }
                                                    }
                                                }

                                                if (!cusSKU && !isCheck)
                                                {
                                                    objProduct.Ton = dic.Value[1];
                                                    objProduct.CBM = dic.Value[2];
                                                    objProduct.Quantity = dic.Value[3];
                                                    if (cusProduct.IsKg)
                                                        objProduct.Ton = objProduct.Ton / 1000;
                                                }
                                                else
                                                {
                                                    switch (cusProduct.PackingTypeGOP)
                                                    {
                                                        case 1:
                                                            objProduct.Ton = dic.Value[1];

                                                            if (cusProduct.IsKg)
                                                                objProduct.Ton = objProduct.Ton / 1000;
                                                            if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                                objProduct.Quantity = objProduct.Ton / cusProduct.Weight.Value;
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            break;
                                                        case 2:
                                                            objProduct.CBM = dic.Value[2];
                                                            if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                                objProduct.Quantity = objProduct.CBM / cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        case 3:
                                                            objProduct.Quantity = dic.Value[3];
                                                            if (cusProduct.CBM.HasValue)
                                                                objProduct.CBM = objProduct.Quantity * cusProduct.CBM.Value;
                                                            if (cusProduct.Weight.HasValue)
                                                                objProduct.Ton = objProduct.Quantity * cusProduct.Weight.Value;
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    objProduct.Ton = Math.Round(objProduct.Ton, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.CBM = Math.Round(objProduct.CBM, digitsOfRound, MidpointRounding.AwayFromZero);
                                                    objProduct.Quantity = Math.Round(objProduct.Quantity, digitsOfRound, MidpointRounding.AwayFromZero);
                                                }
                                                //Kiểm tra thông tin sản lượng nếu là LTL.
                                                if (transportID == iLTL)
                                                {
                                                    if (cusGroup.ID > 0 && dicPacking.ContainsKey(cusGroup.ID))
                                                    {
                                                        switch (dicPacking[cusGroup.ID])
                                                        {
                                                            case 1://Ton
                                                                if (objProduct.Ton <= 0)
                                                                {
                                                                    objProduct.Ton = 0;
                                                                    //excelError.Add("Không có số tấn.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(60, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 2://CBM
                                                                if (objProduct.CBM <= 0)
                                                                {
                                                                    objProduct.CBM = 0;
                                                                    //excelError.Add("Không có số khối.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(61, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                            case 3://Quantity
                                                                if (objProduct.Quantity <= 0)
                                                                {
                                                                    objProduct.Quantity = 0;
                                                                    //excelError.Add("Không có số lượng.");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(62, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                                break;
                                                        }
                                                    }
                                                }

                                                //Lấy giá theo import.
                                                if (cusGroup.ID > 0 && obj.ContractID == null)
                                                {
                                                    switch (cusGroup.PackingType)
                                                    {
                                                        case 1://Ton
                                                            if (objSetting.PriceTon > 0 && !string.IsNullOrEmpty(excelInput["PriceTon"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceTon"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá tấn");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(63, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 2://CBM
                                                            if (objSetting.PriceCBM > 0 && !string.IsNullOrEmpty(excelInput["PriceCBM"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceCBM"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá khối");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(64, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                        case 3://Quantity
                                                            if (objSetting.PriceQuantity > 0 && !string.IsNullOrEmpty(excelInput["PriceQuantity"]))
                                                            {
                                                                try
                                                                {
                                                                    objProduct.Price = Convert.ToDecimal(excelInput["PriceQuantity"]);
                                                                }
                                                                catch (Exception)
                                                                {
                                                                    //excelError.Add("Sai giá SL");
                                                                    HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(65, lstMessageError));
                                                                    isContinue = false;
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }

                                                #region Plan
                                                objProduct.MasterETD = MasterETD;
                                                objProduct.MasterETA = MasterETA;
                                                objProduct.VehicleID = vehID;
                                                objProduct.VendorID = venID;
                                                objProduct.MasterGroupOfVehicleID = masterGOVID;
                                                objProduct.DriverTel = driverTel;
                                                objProduct.DriverName = driverName;
                                                objProduct.MasterNote = excelInput["MasterNote"];
                                                objProduct.DriverID = driverID;
                                                #endregion

                                                obj.ListProduct.Add(objProduct);
                                            }
                                        }

                                        if (obj.ListProduct != null && isContinue)
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));
                                    }
                                    #endregion


                                    #endregion
                                }

                                result.ListRowResult.Add(rowResult);
                            }
                        }
                    }
                    HelperExcel.SaveData(model, id, lstWorksheet);

                    result.SYSExcel = HelperExcel.GetByID(model, id);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDOrder_Plan_ExcelOnline_ApproveResult ORDOrder_Plan_ExcelOnline_Approve(long id, int templateID, CATFile file)
        {
            DTOORDOrder_Plan_ExcelOnline_ApproveResult result = new DTOORDOrder_Plan_ExcelOnline_ApproveResult();
            result.ID = -1;
            result.Message = string.Empty;
            result.Warning = string.Empty;
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataRes = new List<DTOORDOrder_Import>();
                    DTOCUSSettingORDPlan objSetting = new DTOCUSSettingORDPlan();
                    objSetting = ORDOrder_Plan_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colCheckAddress = objSetting.TotalColumn.Value + 2;
                    int colTM = objSetting.TotalColumn.Value + 3;
                    int colSV = objSetting.TotalColumn.Value + 4;
                    int colCus = objSetting.TotalColumn.Value + 5;
                    int colContract = objSetting.TotalColumn.Value + 6;
                    int colTerm = objSetting.TotalColumn.Value + 7;
                    int colPartnerID = objSetting.TotalColumn.Value + 8;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;
                    int colCusRoutingID = objSetting.TotalColumn.Value + 10;
                    int colGroupVehicleID = objSetting.TotalColumn.Value + 11;
                    int colDepotID = objSetting.TotalColumn.Value + 12;
                    int colDepotReturnID = objSetting.TotalColumn.Value + 13;
                    int colCarrierID = objSetting.TotalColumn.Value + 14;
                    int colListProduct = objSetting.TotalColumn.Value + 15;
                    int colVenID = objSetting.TotalColumn.Value + 16;
                    int colVehID = objSetting.TotalColumn.Value + 17;
                    int colGovID = objSetting.TotalColumn.Value + 18;
                    int colDriverTel = objSetting.TotalColumn.Value + 19;
                    int colDriverName = objSetting.TotalColumn.Value + 20;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);

                    if (lstRow.Count > 0)
                    {
                        lstRow = lstRow.OrderBy(c => c.Index).ToList();
                        var ListTransportMode = model.CAT_TransportMode.Select(c => new CATTransportMode
                        {
                            ID = c.ID,
                            Code = c.Code,
                            Name = c.Name,
                            TransportModeID = c.TransportModeID,
                            TransportModeName = c.SYS_Var.ValueOfVar
                        }).ToList();

                        var sortOrder = 1;
                        foreach (var checkRow in lstRow)
                        {
                            if (objSetting != null)
                            {
                                //Check các required.
                                ORDOrder_Plan_Excel_ValidateSetting(objSetting);

                                string[] aValue = { "CustomerID", "SYSCustomerID", "ID", "CreateBy", "CreateDate", "HasStock", "ListStock", "Name", "ContractID", "RowStart", "HasStockProduct",
                                            "StockID", "GroupOfProductID", "ProductID", "ListStockWithProduct", "ServiceOfOrderName", "SettingCustomerName", "TypeOfTransportModeName", "TypeOfTransportModeID", "ServiceOfOrderID", "TotalColumn" };
                                var sValue = new List<string>(aValue);

                                var excelInput = GetDataValue(checkRow, objSetting, sValue);
                                if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                                {
                                    #region Get Data
                                    string dataTM = HelperExcel.GetString(checkRow, colTM);
                                    string dataSV = HelperExcel.GetString(checkRow, colSV);
                                    string dataCus = HelperExcel.GetString(checkRow, colCus);
                                    string dataContract = HelperExcel.GetString(checkRow, colContract);
                                    string dataTerm = HelperExcel.GetString(checkRow, colTerm);
                                    string dataPartnerID = HelperExcel.GetString(checkRow, colPartnerID);
                                    string dataLocationToID = HelperExcel.GetString(checkRow, colLocationToID);
                                    string dataCusRoutingID = HelperExcel.GetString(checkRow, colCusRoutingID);
                                    string dataGroupVehicleID = HelperExcel.GetString(checkRow, colGroupVehicleID);
                                    string dataDepotID = HelperExcel.GetString(checkRow, colDepotID);
                                    string dataDepotReturnID = HelperExcel.GetString(checkRow, colDepotReturnID);
                                    string dataCarrierID = HelperExcel.GetString(checkRow, colCarrierID);
                                    string dataListProduct = HelperExcel.GetString(checkRow, colListProduct);

                                    int transportID = !string.IsNullOrEmpty(dataTM) ? Convert.ToInt32(dataTM) : 0;
                                    int serviceID = !string.IsNullOrEmpty(dataSV) ? Convert.ToInt32(dataSV) : 0;
                                    int cusID = !string.IsNullOrEmpty(dataCus) ? Convert.ToInt32(dataCus) : 0;
                                    int contractID = !string.IsNullOrEmpty(dataContract) ? Convert.ToInt32(dataContract) : 0;
                                    int termID = !string.IsNullOrEmpty(dataTerm) ? Convert.ToInt32(dataTerm) : 0;
                                    int partnerID = !string.IsNullOrEmpty(dataPartnerID) ? Convert.ToInt32(dataPartnerID) : 0;
                                    int locationToID = !string.IsNullOrEmpty(dataLocationToID) ? Convert.ToInt32(dataLocationToID) : 0;
                                    int cusRoutingID = !string.IsNullOrEmpty(dataCusRoutingID) ? Convert.ToInt32(dataCusRoutingID) : 0;
                                    int groupVehicleID = !string.IsNullOrEmpty(dataGroupVehicleID) ? Convert.ToInt32(dataGroupVehicleID) : 0;
                                    int crID = !string.IsNullOrEmpty(dataCarrierID) ? Convert.ToInt32(dataCarrierID) : 0;

                                    int transportSYSID = HelperContract.GetTransportMode(model, transportID);
                                    int serviceSYSID = HelperContract.GetServiceOfOrder(model, serviceID);

                                    #region Check tgian
                                    DateTime? requestDate = null;
                                    DateTime? eTD = null;
                                    DateTime? eTA = null;
                                    DateTime? eTARequest = null;
                                    DateTime? eTDRequest = null;

                                    if (objSetting.RequestDate > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (objSetting.RequestTime > 0 && requestDate != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["RequestTime"]))
                                            {
                                                try
                                                {
                                                    //requestDate = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["RequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["RequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    requestDate = requestDate.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }

                                    if (objSetting.RequestDate_Time > 0)
                                    {
                                        try
                                        {
                                            requestDate = HelperExcel.ValueToDateVN(excelInput["RequestDate_Time"]);
                                        }
                                        catch
                                        {
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETD"]))
                                    {
                                        try
                                        {
                                            eTD = HelperExcel.ValueToDateVN(excelInput["ETD"]);
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else if (objSetting.ETDTime_RequestDate > 0 && requestDate != null)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETDTime_RequestDate"]))
                                        {
                                            try
                                            {
                                                //eTD = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETDTime_RequestDate"]));
                                                var _date = HelperExcel.ValueToDateVN(excelInput["ETDTime_RequestDate"]);
                                                TimeSpan _time = _date.TimeOfDay;
                                                eTD = requestDate.Value.Date.Add(_time);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        else
                                        {
                                            eTD = requestDate;
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETA"]))
                                    {
                                        try
                                        {
                                            eTA = HelperExcel.ValueToDateVN(excelInput["ETA"]);
                                        }
                                        catch
                                        {
                                        }
                                    }
                                    else if (objSetting.ETATime_RequestDate > 0 && requestDate != null)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["ETATime_RequestDate"]))
                                        {
                                            try
                                            {
                                                //eTA = requestDate.Value.Date.Add(TimeSpan.Parse(excelInput["ETATime_RequestDate"]));
                                                var _date = HelperExcel.ValueToDateVN(excelInput["ETATime_RequestDate"]);
                                                TimeSpan _time = _date.TimeOfDay;
                                                eTA = requestDate.Value.Date.Add(_time);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                        else
                                        {
                                            eTA = requestDate;
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETARequest"]))
                                    {
                                        try
                                        {
                                            eTARequest = HelperExcel.ValueToDateVN(excelInput["ETARequest"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (eTARequest != null && objSetting.ETARequestTime > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETARequestTime"]))
                                            {
                                                try
                                                {
                                                    //eTARequest = eTARequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETARequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETARequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTARequest = eTARequest.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }

                                    if (!string.IsNullOrEmpty(excelInput["ETDRequest"]))
                                    {
                                        try
                                        {
                                            eTDRequest = HelperExcel.ValueToDateVN(excelInput["ETDRequest"]);
                                        }
                                        catch
                                        {
                                        }
                                        if (eTDRequest != null && objSetting.ETDRequestTime > 0)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["ETDRequestTime"]))
                                            {
                                                try
                                                {
                                                    //eTDRequest = eTDRequest.Value.Date.Add(TimeSpan.Parse(excelInput["ETDRequestTime"]));
                                                    var _date = HelperExcel.ValueToDateVN(excelInput["ETDRequestTime"]);
                                                    TimeSpan _time = _date.TimeOfDay;
                                                    eTDRequest = eTDRequest.Value.Date.Add(_time);
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Plan
                                    string dataVenID = HelperExcel.GetString(checkRow, colVenID);
                                    string dataVehID = HelperExcel.GetString(checkRow, colVehID);
                                    string dataGovID = HelperExcel.GetString(checkRow, colGovID);

                                    int venID = !string.IsNullOrEmpty(dataVenID) ? Convert.ToInt32(dataVenID) : 0;
                                    int vehID = !string.IsNullOrEmpty(dataVehID) ? Convert.ToInt32(dataVehID) : 0;
                                    int govID = !string.IsNullOrEmpty(dataGovID) ? Convert.ToInt32(dataGovID) : 0;
                                    string driverTel = HelperExcel.GetString(checkRow, colDriverTel);
                                    string driverName = HelperExcel.GetString(checkRow, colDriverName);

                                    #region thoi gian
                                    DateTime? MasterETD = null;
                                    if (objSetting.MasterETDDate < 1 && objSetting.MasterETDDate_Time < 1)
                                        throw new Exception("Chưa thiết lập cột MasterETD chuyến.");

                                    try
                                    {
                                        MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate"]);
                                    }
                                    catch (Exception)
                                    {
                                    }
                                    if (objSetting.MasterETDTime > 0 && MasterETD != null)
                                    {
                                        if (!string.IsNullOrEmpty(excelInput["MasterETDTime"]))
                                        {
                                            try
                                            {
                                                MasterETD = MasterETD.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETDTime"]));
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }
                                    if (objSetting.MasterETDDate_Time > 0)
                                    {
                                        try
                                        {
                                            MasterETD = HelperExcel.ValueToDateVN(excelInput["MasterETDDate_Time"]);
                                        }
                                        catch
                                        {
                                        }
                                    }

                                    DateTime? MasterETA = null;
                                    if (objSetting.MasterHours > 0)
                                    {
                                        if (MasterETD != null)
                                        {
                                            try
                                            {
                                                MasterETA = MasterETD.Value.AddHours(Convert.ToDouble(excelInput["MasterHours"]));
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objSetting.MasterETADate < 1 && objSetting.MasterETADate_Time < 1)
                                            throw new Exception("Chưa thiết lập cột MasterETA chuyến.");
                                        try
                                        {
                                            MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate"]);
                                        }
                                        catch (Exception)
                                        {
                                        }
                                        if (objSetting.MasterETATime > 0 && MasterETA != null)
                                        {
                                            if (!string.IsNullOrEmpty(excelInput["MasterETATime"]))
                                            {
                                                try
                                                {
                                                    MasterETA = MasterETA.Value.Date.Add(TimeSpan.Parse(excelInput["MasterETATime"]));
                                                }
                                                catch
                                                {
                                                }
                                            }
                                        }
                                        if (objSetting.MasterETADate_Time > 0)
                                        {
                                            try
                                            {
                                                MasterETA = HelperExcel.ValueToDateVN(excelInput["MasterETADate_Time"]);
                                            }
                                            catch
                                            {
                                            }
                                        }
                                    }
                                    #endregion
                                    #endregion
                                    #endregion
                                    if (transportSYSID == iFTL || transportSYSID == iLTL)
                                    {
                                        #region Lưu dữ liệu xe tải
                                        List<DTOORDOrder_Import_Product> ListProduct = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOORDOrder_Import_Product>>(dataListProduct);

                                        var obj = new DTOORDOrder_Import();
                                        obj.SortOrder = sortOrder;
                                        obj.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                        if (contractID > 0)
                                            obj.ContractID = contractID;
                                        if (termID > 0)
                                            obj.ContractTermID = termID;
                                        obj.ServiceOfOrderID = serviceID;
                                        obj.ServiceOfOrderIDTemp = serviceSYSID;
                                        obj.TransportModeID = transportID;
                                        obj.TransportModeName = string.Empty;
                                        var objTMName = ListTransportMode.FirstOrDefault(c => c.ID == transportID);
                                        if (objTMName != null)
                                            obj.TransportModeName = objTMName.Name;
                                        obj.TransportModeIDTemp = transportSYSID;
                                        obj.CustomerID = cusID;
                                        //obj.CustomerCode = cusCode;
                                        obj.IsHot = objSetting.IsHot > 0 && !string.IsNullOrEmpty(excelInput["IsHot"]) && excelInput["IsHot"].Trim().ToLower() == "true";
                                        obj.ExcelSuccess = true;
                                        obj.Note = excelInput["Note"];
                                        //obj.IsLocationToFail = isLocationToFail;
                                        obj.LocationToID = locationToID;
                                        obj.LocationToAddress = excelInput["LocationToAddress"];
                                        if (obj.LocationToID < 0)
                                            obj.LocationToID = null;
                                        obj.PartnerID = partnerID;
                                        if (requestDate != null)
                                            obj.RequestDate = requestDate.Value;
                                        obj.ETARequest = eTARequest;
                                        obj.ETDRequest = eTDRequest;
                                        obj.ETD = eTD;
                                        obj.ETA = eTA;
                                        obj.Code = excelInput["OrderCode"];
                                        obj.CUSRoutingID = cusRoutingID > 0 ? (int?)cusRoutingID : null;
                                        obj.UserDefined1 = excelInput["UserDefine1"];
                                        obj.UserDefined2 = excelInput["UserDefine2"];
                                        obj.UserDefined3 = excelInput["UserDefine3"];
                                        obj.UserDefined4 = excelInput["UserDefine4"];
                                        obj.UserDefined5 = excelInput["UserDefine5"];
                                        obj.UserDefined6 = excelInput["UserDefine6"];
                                        obj.UserDefined7 = excelInput["UserDefine7"];
                                        obj.UserDefined8 = excelInput["UserDefine8"];
                                        obj.UserDefined9 = excelInput["UserDefine9"];

                                        if (transportID == iFTL && groupVehicleID > 0)
                                            obj.GroupOfVehicleID = groupVehicleID;

                                        if (obj.ContractID == null && !string.IsNullOrEmpty(excelInput["PriceTOMaster"]))
                                        {
                                            obj.RoutePrice = Convert.ToDecimal(excelInput["PriceTOMaster"]);
                                        }
                                        obj.ListProduct = new List<DTOORDOrder_Import_Product>();
                                        foreach (var product in ListProduct)
                                        {
                                            product.LocationToID = locationToID;
                                            product.SortOrder = sortOrder;
                                        }
                                        obj.ListProduct.AddRange(ListProduct);

                                        //if (obj.ListProduct != null)
                                        //    HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colListProduct, Newtonsoft.Json.JsonConvert.SerializeObject(obj.ListProduct));

                                        #region Plan
                                        obj.MasterETD = MasterETD;
                                        obj.MasterETA = MasterETA;
                                        obj.VehicleID = vehID;
                                        obj.VendorID = venID;
                                        obj.MasterGroupOfVehicleID = govID;
                                        obj.DriverTel = driverTel;
                                        obj.DriverName = driverName;
                                        obj.MasterNote = excelInput["MasterNote"];
                                        #endregion

                                        #endregion
                                        obj.ExcelRow = checkRow.Index.Value;
                                        sortOrder++;
                                        dataRes.Add(obj);
                                    }
                                }
                            }
                        }

                        #region Tạo mã đơn hàng
                        List<DTOORDOrder> ListCode = new List<DTOORDOrder>();
                        List<DTOORDOrder> ListCodeData = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOORDOrder { Code = c.Code, CustomerID = c.CustomerID, RequestDate = c.RequestDate, SYSCustomerID = c.SYSCustomerID, UserDefine1 = c.UserDefine1 }).ToList();
                        var dataSettingCode = ORDOrder_Excel_Setting_Code_Get();

                        ListCode.AddRange(ListCodeData);
                        foreach (var group in dataRes.Where(c => c.ExcelSuccess).GroupBy(c => new { c.CustomerID, c.TransportModeID, c.ServiceOfOrderID, c.ContractID, c.RequestDate }).ToList())
                        {
                            var oCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == group.Key.CustomerID);
                            if (oCode == null)
                                oCode = dataSettingCode.FirstOrDefault(c => c.CustomerID == Account.SYSCustomerID);
                            if (oCode != null && oCode.ActionType > 0)
                            {
                                switch (oCode.ActionType)
                                {
                                    case 1: //Cột Code
                                        foreach (var cGroup in group.GroupBy(c => c.Code).ToList())
                                        {
                                            var ETD = cGroup.Min(c => c.ETD);
                                            var ETA = cGroup.Max(c => c.ETA);
                                            foreach (var c in cGroup)
                                            {
                                                c.ETA = ETA;
                                                c.ETD = ETD;
                                            }
                                            if (oCode.Expr.Contains("ETD") && !ETD.HasValue)
                                            {
                                                foreach (var c in cGroup)
                                                {
                                                    c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                    c.ExcelSuccess = false;
                                                }
                                            }
                                            else
                                            {
                                                DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                                param.CustomerID = cGroup.FirstOrDefault().CustomerID;
                                                param.CustomerCode = cGroup.FirstOrDefault().CustomerCode;
                                                param.TypeOfOrder = cGroup.FirstOrDefault().TransportModeName.ToUpper();
                                                param.ServiceOfOrderID = cGroup.FirstOrDefault().ServiceOfOrderIDTemp;
                                                param.ETD = ETD;
                                                param.UserDefine1 = cGroup.FirstOrDefault().UserDefined1;
                                                param.UserDefine2 = cGroup.FirstOrDefault().UserDefined2;
                                                param.UserDefine3 = cGroup.FirstOrDefault().UserDefined3;
                                                param.UserDefine4 = cGroup.FirstOrDefault().UserDefined4;
                                                param.UserDefine5 = cGroup.FirstOrDefault().UserDefined5;
                                                param.UserDefine6 = cGroup.FirstOrDefault().UserDefined6;
                                                param.UserDefine7 = cGroup.FirstOrDefault().UserDefined7;
                                                param.UserDefine8 = cGroup.FirstOrDefault().UserDefined8;
                                                param.UserDefine9 = cGroup.FirstOrDefault().UserDefined9;
                                                var txt = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                                foreach (var c in cGroup)
                                                {
                                                    c.Code = txt;
                                                }
                                            }
                                        }
                                        break;
                                    case 2: //Mỗi dòng
                                        var aETD = group.Min(c => c.ETD);
                                        var aETA = group.Max(c => c.ETA);
                                        foreach (var c in group)
                                        {
                                            c.ETA = aETA;
                                            c.ETD = aETD;
                                            if (oCode.Expr.Contains("ETD") && !c.ETD.HasValue)
                                            {
                                                c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                c.ExcelSuccess = false;
                                            }
                                            else
                                            {
                                                DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                                param.CustomerID = c.CustomerID;
                                                param.CustomerCode = c.CustomerCode;
                                                param.TypeOfOrder = c.TransportModeName.ToUpper();
                                                param.ServiceOfOrderID = c.ServiceOfOrderIDTemp;
                                                param.ETD = aETD;
                                                param.UserDefine1 = c.UserDefined1;
                                                param.UserDefine2 = c.UserDefined2;
                                                param.UserDefine3 = c.UserDefined3;
                                                param.UserDefine4 = c.UserDefined4;
                                                param.UserDefine5 = c.UserDefined5;
                                                param.UserDefine6 = c.UserDefined6;
                                                param.UserDefine7 = c.UserDefined7;
                                                param.UserDefine8 = c.UserDefined8;
                                                param.UserDefine9 = c.UserDefined9;
                                                var txt = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                                c.Code = txt;
                                            }
                                        }
                                        break;
                                    case 3: //Tất cả                                
                                        var cETD = group.Min(c => c.ETD);
                                        var cETA = group.Max(c => c.ETA);
                                        foreach (var c in group)
                                        {
                                            c.ETA = cETA;
                                            c.ETD = cETD;
                                        }
                                        if (oCode.Expr.Contains("ETD") && !cETD.HasValue)
                                        {
                                            foreach (var c in group)
                                            {
                                                c.ExcelError += " Không thể tạo mã ĐH. Sai ETD";
                                                c.ExcelSuccess = false;
                                            }
                                        }
                                        else
                                        {
                                            DTOORDOrder_Import_Code param = new DTOORDOrder_Import_Code();
                                            param.CustomerID = group.FirstOrDefault().CustomerID;
                                            param.CustomerCode = group.FirstOrDefault().CustomerCode;
                                            param.TypeOfOrder = group.FirstOrDefault().TransportModeName.ToUpper();
                                            param.ServiceOfOrderID = group.FirstOrDefault().ServiceOfOrderIDTemp;
                                            param.ETD = cETD;
                                            param.UserDefine1 = group.FirstOrDefault().UserDefined1;
                                            param.UserDefine2 = group.FirstOrDefault().UserDefined2;
                                            param.UserDefine3 = group.FirstOrDefault().UserDefined3;
                                            param.UserDefine4 = group.FirstOrDefault().UserDefined4;
                                            param.UserDefine5 = group.FirstOrDefault().UserDefined5;
                                            param.UserDefine6 = group.FirstOrDefault().UserDefined6;
                                            param.UserDefine7 = group.FirstOrDefault().UserDefined7;
                                            param.UserDefine8 = group.FirstOrDefault().UserDefined8;
                                            param.UserDefine9 = group.FirstOrDefault().UserDefined9;
                                            var tCode = ORDOrder_Excel_GenCodeFromSetting(ref oCode, ref ListCode, param);
                                            foreach (var c in group)
                                            {
                                                c.Code = tCode;
                                            }
                                        }
                                        break;
                                }
                            }
                            else
                            {
                                foreach (var cGroup in group.GroupBy(c => c.Code).ToList())
                                {
                                    var ETD = cGroup.Min(c => c.ETD);
                                    var ETA = cGroup.Max(c => c.ETA);
                                    foreach (var c in cGroup)
                                    {
                                        c.ETA = ETA;
                                        c.ETD = ETD;
                                    }
                                }
                            }
                        }
                        foreach (var item in dataRes)
                        {
                            if (!StringHelper.IsValidCode(item.Code) || item.Code.Length > 256)
                            {
                                if (item.ExcelSuccess)
                                {
                                    item.ExcelSuccess = false;
                                    item.ExcelError = "Mã ĐH [" + item.Code + "] không hợp lệ.";
                                    throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "] không hợp lệ. Dòng " + (item.ExcelRow + 1));
                                }
                                else
                                {
                                    item.ExcelError += "Mã ĐH [" + item.Code + "] không hợp lệ.";
                                    throw FaultHelper.BusinessFault(null, null, "Mã ĐH [" + item.Code + "] không hợp lệ. Dòng " + (item.ExcelRow + 1));
                                }
                            }
                            var objCheck = ListCodeData.FirstOrDefault(c => c.CustomerID == item.CustomerID && c.Code == item.Code);
                            if (objCheck != null)
                            {
                                if (Setting.IsUniqueOrderCode)
                                {
                                    item.ExcelSuccess = false;
                                    item.ExcelError += " Trùng mã ĐH [" + item.Code + "]";
                                    throw FaultHelper.BusinessFault(null, null, "Trùng mã ĐH [" + item.Code + "]. Dòng " + (item.ExcelRow + 1));
                                }
                                else
                                {
                                    if (ListCodeData.Count(c => c.CustomerID == item.CustomerID && c.Code == item.Code && c.RequestDate == item.RequestDate) > 0)
                                    {
                                        item.ExcelSuccess = false;
                                        item.ExcelError += " Trùng mã ĐH [" + item.Code + "] và ngày gửi yêu cầu.";
                                        throw FaultHelper.BusinessFault(null, null, "Trùng mã ĐH [" + item.Code + "] và ngày gửi yêu cầu. Dòng " + (item.ExcelRow + 1));
                                    }
                                }
                            }
                        }
                        #endregion

                        #region Group
                        var dataSource = new List<DTOORDOrder_Import>();
                        using (CopyHelper copy = new CopyHelper())
                        {
                            var query = dataRes.GroupBy(c => c.Code);
                            foreach (var item in query)
                            {
                                //var lst = item.Cast<DTOORDOrder_Import>().ToList();

                                if (item.Count() > 1)
                                {
                                    DTOORDOrder_Import objOrder = new DTOORDOrder_Import();

                                    copy.Copy(item.FirstOrDefault(), objOrder);
                                    objOrder.ListProduct = new List<DTOORDOrder_Import_Product>();
                                    objOrder.ListContainer = new List<DTOORDOrder_Import_Container>();

                                    if (objOrder.TransportModeIDTemp == iFTL || objOrder.TransportModeIDTemp == iLTL)
                                    {
                                        foreach (var itemOrder in item)
                                        {
                                            objOrder.ListProduct.AddRange(itemOrder.ListProduct);
                                        }
                                    }
                                    else if (objOrder.TransportModeIDTemp == iFCL)
                                    {
                                        foreach (var itemOrder in item)
                                        {
                                            objOrder.ListContainer.AddRange(itemOrder.ListContainer);
                                        }
                                    }
                                    dataSource.Add(objOrder);
                                }
                                else
                                    dataSource.AddRange(item);
                            }
                        }
                        #endregion

                        #region check IsSkipDuplicate
                        List<DTOORDOrder_Import> dataSourceNew = new List<DTOORDOrder_Import>();

                        if (objSetting.IsSkipDuplicate)
                        {
                            List<string> lstError = new List<string>();

                            ListCode = new List<DTOORDOrder>();
                            ListCode.AddRange(ListCodeData);

                            foreach (var item in dataSource)
                            {
                                var checkData = ListCode.Where(c => c.Code == item.Code && c.UserDefine1 == item.UserDefined1 && c.CustomerID == item.CustomerID).FirstOrDefault();

                                if (checkData != null)
                                {
                                    var code = "[" + item.Code + "- dòng " + (item.ExcelRow + 1) + "]";
                                    lstError.Add(code);
                                }
                                else
                                {
                                    DTOORDOrder temp = new DTOORDOrder();
                                    temp.Code = item.Code;
                                    temp.CustomerID = item.CustomerID;
                                    temp.UserDefine1 = item.UserDefined1;

                                    ListCode.Add(temp);
                                    dataSourceNew.Add(item);
                                }
                            }

                            if (lstError.Count > 0)
                            {
                                var str = string.Join(", ", lstError);
                                result.Message = "Dữ liệu " + str + ". Trùng mã đơn hàng và UserDefine1, sẽ không được lưu.";
                            }
                        }
                        else
                        {
                            dataSourceNew.AddRange(dataSource);
                        }
                        #endregion

                        #region warning duplicate
                        List<string> lstWarning = new List<string>();

                        ListCode = new List<DTOORDOrder>();
                        ListCode.AddRange(ListCodeData);

                        foreach (var item in dataSourceNew)
                        {
                            var checkData = ListCode.Where(c => c.Code == item.Code && c.CustomerID == item.CustomerID).FirstOrDefault();

                            if (checkData != null)
                            {
                                var code = "[" + item.Code + "- dòng " + (item.ExcelRow + 1) + "]";
                                lstWarning.Add(code);
                            }
                            else
                            {
                                DTOORDOrder temp = new DTOORDOrder();
                                temp.Code = item.Code;
                                temp.CustomerID = item.CustomerID;

                                ListCode.Add(temp);
                            }

                            int count = 1;
                            foreach (var itemProduct in item.ListProduct)
                            {
                                itemProduct.SortConfig = count;
                                count++;
                            }
                        }

                        if (lstWarning.Count > 0)
                        {
                            var str = string.Join(", ", lstWarning);
                            result.Warning = "Dữ liệu " + str + ". Trùng mã đơn hàng.";
                        }
                        #endregion

                        dataSourceNew = dataSourceNew.OrderBy(c => c.SortOrder).ToList();
                        if (dataSourceNew.Count > 0)
                        {
                            result.ID = ORDOrder_Excel_Import(templateID, file, dataSourceNew, true);
                        }
                        return result;
                    }
                    else
                        return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void ORDOrder_Plan_Excel_ValidateSetting(DTOCUSSettingORDPlan obj)
        {
            if (obj.RequestDate < 1)
                throw new Exception("Chưa thiết lập ngày yêu cầu [RequestDate].");
            if (obj.SYSCustomerID == obj.CustomerID && obj.CustomerCode < 1)
                throw new Exception("Chưa thiết lập mã KH [CustomerCode].");
            if (obj.LocationToAddress < 1 && obj.LocationToCode < 1 && obj.LocationToCodeName < 1 && obj.LocationToName < 1)
                throw new Exception("Chưa thiết lập điểm giao hàng.");
        }

        private Dictionary<string, string> ORDOrder_Plan_GetDataName()
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            result.Add("OrderCode", "Mã ĐH");
            result.Add("UniqueOrderCode", "Mã ĐH duy nhất");
            result.Add("SOCode", "Số SO");
            result.Add("DNCode", "Số DN");
            result.Add("RequestDate", "Ngày yêu cầu");
            result.Add("ETD", "ETD");
            result.Add("ETDTime_RequestDate", "ETD theo ngày yêu cầu");
            result.Add("ETA", "ETA");
            result.Add("ETATime_RequestDate", "ETA theo ngày yêu cầu");
            result.Add("ETARequest", "Ngày yc giao hàng");
            result.Add("ETDRequest", "Ngày yc đến kho");
            result.Add("CustomerCode", "Mã khách hàng");
            result.Add("CustomerName", "Tên khách hàng");
            result.Add("CustomerCodeName", "Mã-Tên khách hàng");
            result.Add("DistributorCode", "Mã NPP");
            result.Add("DistributorName", "Tên NPP");
            result.Add("DistributorCodeName", "Mã-Tên NPP");
            result.Add("LocationFromCode", "Mã điểm nhận");
            result.Add("LocationFromName", "Tên điểm nhận");
            result.Add("LocationFromCodeName", "Mã-Tên điểm nhận");
            result.Add("LocationToCode", "Mã điểm giao");
            result.Add("LocationToCodeName", "Mã-Tên điểm giao");
            result.Add("LocationToName", "Tên điểm giao");
            result.Add("LocationToAddress", "Địa chỉ giao");
            result.Add("GroupProductCode", "Nhóm sản phẩm");
            result.Add("Packing", "Mã hàng hóa/ĐVT");
            result.Add("Ton", "Tấn");
            result.Add("CBM", "Khối");
            result.Add("Quantity", "Số lượng");
            result.Add("GroupVehicle", "Loại xe");
            result.Add("Note", "Ghi chú");
            result.Add("TypeOfTransportMode", "Loại vận chuyển");
            result.Add("ServiceOfOrder", "Dịch vụ");
            result.Add("EconomicZone", "EconomicZone");
            result.Add("RoutingAreaCode", "Mã khu vực");
            result.Add("UserDefine1", "Tùy chọn 1");
            result.Add("UserDefine2", "Tùy chọn 2");
            result.Add("UserDefine3", "Tùy chọn 3");
            result.Add("UserDefine4", "Tùy chọn 4");
            result.Add("UserDefine5", "Tùy chọn 5");
            result.Add("UserDefine6", "Tùy chọn 6");
            result.Add("UserDefine7", "Tùy chọn 7");
            result.Add("UserDefine8", "Tùy chọn 8");
            result.Add("UserDefine9", "Tùy chọn 9");
            result.Add("RequestTime", "Giờ yêu cầu ĐH");
            result.Add("ETARequestTime", "Giờ yêu cầu giao hàng");
            result.Add("ETDRequestTime", "Giờ yêu cầu đến kho");
            result.Add("RequestDate_Time", "Ngày giờ yêu cầu ĐH");
            result.Add("LocationToNote", "Ghi chú điểm giao");
            result.Add("LocationToNote1", "Ghi chú điểm giao 1");
            result.Add("GroupProductCodeNotUnicode", "Nhóm sản phẩm(ko dấu)");
            result.Add("PackingNotUnicode", "Sản phẩm(ko dấu)");
            result.Add("RoutingCode", "Mã cung đường");
            result.Add("IsHot", "Gấp");
            result.Add("CutOffTime", "CutOffTime");
            result.Add("CarrierCode", "Mã hãng tàu");
            result.Add("CarrierCodeName", "Mã-têụ hãng tàu");
            result.Add("CarrierName", "Tên hãng tàu");
            result.Add("VesselNo", "Số tàu");
            result.Add("VesselName", "Tên tàu");
            result.Add("TripNo", "Số chuyến");
            result.Add("ContainerNo", "Số con.");
            result.Add("SealNo1", "SealNo1");
            result.Add("SealNo2", "SealNo2");
            result.Add("TypeOfContainerName", "Loại container");
            result.Add("LocationDepotCode", "Mã depot");
            result.Add("LocationDepotName", "Tên depot");
            result.Add("LocationReturnCode", "Mã depot trả");
            result.Add("LocationReturnName", "Tên depot trả");
            result.Add("HasCashCollect", "Thu hộ");
            result.Add("PriceTOMaster", "Giá chuyến");
            result.Add("PriceTon", "Giá theo tấn");
            result.Add("PriceCBM", "Giá theo khối");
            result.Add("PriceQuantity", "Giá theo số lượng");
            result.Add("TemperatureMax", "NĐ tối đa");
            result.Add("TemperatureMin", "NĐ tối thiểu");
            result.Add("DateGetEmpty", "Ngày lấy rỗng");
            result.Add("Date_TimeGetEmpty", "Ngày/giờ lấy rỗng");
            result.Add("TimeGetEmpty", "Giờ lấy rỗng");
            result.Add("DateReturnEmpty", "Ngày trả rỗng");
            result.Add("Date_TimeReturnEmpty", "Ngày/giờ trả rỗng");
            result.Add("TimeReturnEmpty", "Giờ trả rỗng");
            result.Add("TypeOfWAInspectionStatus", "Miễn kiểm");
            result.Add("InspectionDate", "Tgian kiểm hóa");
            result.Add("ProductCodeWithoutGroup", "Mã SP không nhóm");
            result.Add("Note1", "Ghi chú 1");
            result.Add("Note2", "Ghi chú 2");
            result.Add("Ton_SKU", "Tấn SKU");
            result.Add("CBM_SKU", "Khối SKU");
            result.Add("Quantity_SKU", "Số lượng SKU");
            result.Add("VendorCode", "Mã nhà xe");
            result.Add("VehicleNo", "Số xe");
            result.Add("MasterETDDate_Time", "Ngày-giờ ETD");
            result.Add("MasterETDDate", "Ngày ETD");
            result.Add("MasterETDTime", "Giờ ETD");
            result.Add("MasterETADate_Time", "Ngày-giờ ETA");
            result.Add("MasterETADate", "Ngày ETA");
            result.Add("MasterETATime", "Giờ ETA");
            result.Add("MasterNote", "Ghi chú chuyến");
            result.Add("MasterGroupVehicle", "Loại xe");
            result.Add("DriverName", "Tên tài xế");
            result.Add("DriverTel", "SĐT tài xế");
            result.Add("MasterSortOrder", "Số chuyến");
            result.Add("LocationFromProvince", "Tỉnh thành điểm lấy");
            result.Add("LocationFromDistrict", "Quận huyện điểm lấy");
            result.Add("LocationToProvince", "Tỉnh thành điểm giao");
            result.Add("LocationToDistrict", "Quận huyện điểm giao");
            result.Add("MasterHours", "Thời gian chuyến");
            result.Add("RomoocNo", "Số Romooc");

            return result;
        }

        public void ORDOrder_Plan_ExcelOnline_LocationToSave(long id, int templateID, List<DTOORDOrder_Plan_ImportRowResult> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var dataRes = new List<DTOORDOrder_Import>();
                    DTOCUSSettingOrder objSetting = new DTOCUSSettingOrder();
                    objSetting = ORDOrder_Excel_Setting_Get(templateID);
                    var Setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.TotalColumn.Value;
                    int colCheckNote = objSetting.TotalColumn.Value + 1;
                    int colLocationToID = objSetting.TotalColumn.Value + 9;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    //ws.Rows = lst;

                    if (ws.Rows.Count > 0)
                    {
                        foreach (var item in lst)
                        {
                            if (item.Index > 0 && item.LocationToID > 0)
                            {
                                foreach (var checkRow in ws.Rows)
                                {
                                    if (checkRow.Index == item.Index)
                                    {
                                        //Kiểm tra nếu row success
                                        var cell = checkRow.Cells.FirstOrDefault(c => c.Index == colCheckChange);
                                        if (cell != null && cell.Value != null && cell.Value.ToString() == "x")
                                        {
                                            cell = checkRow.Cells.FirstOrDefault(c => c.Index == colCheckNote);
                                            if (cell != null && cell.Value != null && string.IsNullOrEmpty(cell.Value.ToString()))
                                            {
                                                HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colLocationToID, item.LocationToID.ToString());
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        HelperExcel.SaveData(model, id, lstWorksheet);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Inspection
        public DTOResult ORDOrder_TypeOfDocument_List(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_TypeOfDocument.Select(c => new DTOORDTypeOfDocument
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName,
                            SortOrder = c.SortOrder,
                            TypeOfWAInspectionStatusID = c.TypeOfWAInspectionStatusID,
                            TypeOfWAInspectionStatusName = c.SYS_Var.ValueOfVar
                        }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDTypeOfDocument>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDTypeOfDocument ORDOrder_TypeOfDocument_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOORDTypeOfDocument result = new DTOORDTypeOfDocument();
                    if (id > 0)
                    {
                        var obj = model.ORD_TypeOfDocument.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.SortOrder = obj.SortOrder;
                            result.TypeName = obj.TypeName;
                            result.Code = obj.Code;
                            result.TypeOfWAInspectionStatusID = obj.TypeOfWAInspectionStatusID;
                            result.TypeOfWAInspectionStatusName = obj.SYS_Var.ValueOfVar;
                        }
                    }
                    else
                    {
                        result.TypeOfWAInspectionStatusID = -(int)SYSVarType.TypeOfWAInspectionStatusWait;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_TypeOfDocument_Save(DTOORDTypeOfDocument item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.ORD_TypeOfDocument.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new ORD_TypeOfDocument();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.ORD_TypeOfDocument.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.TypeName = item.TypeName;
                    obj.TypeOfWAInspectionStatusID = item.TypeOfWAInspectionStatusID;
                    obj.SortOrder = item.SortOrder;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_TypeOfDocument_DeleteList(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    //foreach (var item in lstID)
                    //{
                    //    var obj = model.ORD_TypeOfDocument.FirstOrDefault(c => c.ID == item);
                    //    if (obj != null)
                    //    {
                    //        if (model.ORD_Document.Count(c => c.TypeOfDocumentID == item) > 0)
                    //            throw FaultHelper.BusinessFault(null, null, obj.TypeName + " đang được sử dụng, không thể xóa!");

                    //        model.ORD_TypeOfDocument.Remove(obj);
                    //    }
                    //}
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOORDTypeOfDocument> ORDOrder_TypeOfDocument_Read()
        {
            try
            {
                var result = new List<DTOORDTypeOfDocument>();
                using (var model = new DataEntities())
                {
                    result = model.ORD_TypeOfDocument.OrderBy(c => c.SortOrder).Select(c => new DTOORDTypeOfDocument
                        {
                            ID = c.ID,
                            Code = c.Code,
                            TypeName = c.TypeName
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_Document_List(string request, DateTime dtfrom, DateTime dtto, List<int> lstCustomerID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_Document.Where(c => c.DateDocument >= dtfrom && c.DateDocument <= dtto && (lstCustomerID.Count == 0 ? true : lstCustomerID.Contains(c.ORD_Order.CustomerID))).Select(c => new DTOORDDocument
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DateDocument = c.DateDocument,
                        DocumentStatusID = c.DocumentStatusID,
                        DocumentStatusCode = c.SYS_Var.Code,
                        DocumentStatusName = c.SYS_Var.ValueOfVar,
                        OrderID = c.OrderID,
                        OrderCode = c.ORD_Order.Code,
                        CustomerID = c.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        ContractCustomerID = c.ContractCustomerID,
                        DateConfigCustomer = c.DateConfigCustomer,
                        VendorID = c.VendorID,
                        VendorCode = c.VendorID > 0 ? c.CUS_Customer.Code : string.Empty,
                        VendorName = c.VendorID > 0 ? c.CUS_Customer.CustomerName : string.Empty,
                        ContractVendorID = c.ContractVendorID,
                        DateConfigVendor = c.DateConfigVendor,
                        HasInspection = c.HasInspection
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDDocument>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDDocument ORDOrder_Document_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOORDDocument result = new DTOORDDocument();
                    if (id > 0)
                    {
                        var obj = model.ORD_Document.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result.ID = obj.ID;
                            result.Code = obj.Code;
                            result.DateDocument = obj.DateDocument;
                            result.DocumentStatusID = obj.DocumentStatusID;
                            result.DocumentStatusCode = obj.SYS_Var.Code;
                            result.DocumentStatusName = obj.SYS_Var.ValueOfVar;
                            result.OrderID = obj.OrderID;
                            result.OrderCode = obj.ORD_Order.Code;
                            result.CustomerID = obj.ORD_Order.CustomerID;
                            result.CustomerCode = obj.ORD_Order.CUS_Customer.Code;
                            result.CustomerName = obj.ORD_Order.CUS_Customer.CustomerName;
                            result.VendorID = obj.VendorID;
                            result.ContractCustomerID = obj.ContractCustomerID;
                            result.ContractVendorID = obj.ContractVendorID;
                            result.HasInspection = obj.HasInspection;
                        }
                    }
                    else
                    {
                        result.DateDocument = DateTime.Now.Date;
                        result.DocumentStatusID = -(int)SYSVarType.DocumentStatusWait;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_Document_Save(DTOORDDocument item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var order = model.ORD_Order.FirstOrDefault(c => c.ID == item.OrderID);
                    if (order == null)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng ko tồn tại!");

                    if (model.ORD_Document.Count(c => c.ID != item.ID && c.OrderID == item.OrderID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã được khai báo dịch vụ!");

                    // Ktra order có được khai báo gói dịch vụ chưa
                    var lstContainer = model.ORD_Container.Where(c => c.OrderID == item.OrderID).Select(c => c.ID).ToList();
                    var obj = model.ORD_Document.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new ORD_Document();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.OrderID = item.OrderID;
                        obj.Code = string.Empty;
                        obj.DocumentStatusID = -(int)SYSVarType.DocumentStatusWait;
                        model.ORD_Document.Add(obj);

                        // Tạo danh sách cont
                        foreach (var container in lstContainer)
                        {
                            ORD_DocumentContainer objContainer = new ORD_DocumentContainer();
                            objContainer.CreatedBy = Account.UserName;
                            objContainer.CreatedDate = DateTime.Now;
                            objContainer.ContainerID = container;
                            obj.ORD_DocumentContainer.Add(objContainer);
                        }
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        if (obj.OrderID != item.OrderID)
                        {
                            // Xóa container cũ
                            foreach (var container in model.ORD_DocumentContainer.Where(c => c.DocumentID == obj.ID))
                                model.ORD_DocumentContainer.Remove(container);

                            // Tạo danh sách cont
                            foreach (var container in lstContainer)
                            {
                                ORD_DocumentContainer objContainer = new ORD_DocumentContainer();
                                objContainer.CreatedBy = Account.UserName;
                                objContainer.CreatedDate = DateTime.Now;
                                objContainer.ContainerID = container;
                                obj.ORD_DocumentContainer.Add(objContainer);
                            }
                        }
                    }

                    obj.HasInspection = order.TypeOfWAInspectionID == -(int)SYSVarType.TypeOfWAInspectionYes;
                    obj.DateDocument = item.DateDocument.Date;
                    obj.DateConfigCustomer = item.DateDocument;
                    obj.DateConfigVendor = item.DateDocument;
                    obj.VendorID = item.VendorID;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_Document_DeleteList(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lstID)
                    {
                        var obj = model.ORD_Document.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            if (model.ORD_DocumentContainer.Count(c => c.DocumentID == item) > 0)
                                throw FaultHelper.BusinessFault(null, null, obj.Code + " đang được sử dụng, không thể xóa!");
                            if (model.ORD_DocumentService.Count(c => c.DocumentID == item) > 0)
                                throw FaultHelper.BusinessFault(null, null, obj.Code + " đang được sử dụng, không thể xóa!");

                            model.ORD_Document.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_Document_OrderList(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_Order.Where(c => (c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFCL || c.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLCL) && c.ORD_Document.Count == 0).Select(c => new DTOORDOrder
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        OrderRefID = c.OrderRefID,
                        SYSCustomerID = c.SYSCustomerID,
                        Code = c.Code,
                        CustomerID = c.CustomerID,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        TypeOfContractID = c.TypeOfContractID,
                        ContractID = c.ContractID,
                        TypeOfOrderID = c.TypeOfOrderID,
                        StatusOfOrderID = c.StatusOfOrderID,
                        StatusOfPlanID = c.StatusOfPlanID,
                        RequestDate = c.RequestDate,
                        LocationFromID = c.LocationFromID,
                        ETD = c.ETD,
                        LocationToID = c.LocationToID,
                        ETA = c.ETA,
                        ETARequest = c.ETARequest,
                        DateConfig = c.DateConfig,
                        CutOffTime = c.CutOffTime,
                        LoadingTime = c.LoadingTime,
                        LocationDepotID = c.LocationDepotID,
                        LocationDepotReturnID = c.LocationDepotReturnID,
                        VesselNo = c.VesselNo,
                        VesselName = c.VesselName,
                        TripNo = c.TripNo,
                        IsOPS = c.IsOPS,
                        IsClosed = c.IsClosed,
                        IsHot = c.IsHot,
                        BiddingNo = c.BiddingNo,
                        Note = c.Note,
                        ExternalCode = c.ExternalCode,
                        ExternalDate = c.ExternalDate,
                        UserDefine1 = c.UserDefine1,
                        UserDefine2 = c.UserDefine2,
                        UserDefine3 = c.UserDefine3,
                        UserDefine4 = c.UserDefine4,
                        UserDefine5 = c.UserDefine5,
                        UserDefine6 = c.UserDefine6,
                        UserDefine7 = c.UserDefine7,
                        UserDefine8 = c.UserDefine8,
                        UserDefine9 = c.UserDefine9,
                        LocationFrom = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                        LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                        LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationTo = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                        LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                        LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                        StatusOfOrderName = c.SYS_Var.ValueOfVar,
                        StatusOfPlanName = c.SYS_Var1.ValueOfVar,
                        TypeOfView = 0,
                        CustomerName = c.CUS_Customer.CustomerName,
                        TypeOfContractName = c.SYS_Var2.ValueOfVar,
                        TypeOfOrderName = c.SYS_Var3.ValueOfVar,
                        ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,
                        TransportModeName = c.CAT_TransportMode.Name,
                        IsSent = model.ORD_Order.Count(d => d.OrderRefID == c.ID) > 0,
                        URL = string.Empty,
                        CATLocationFromID = c.LocationFromID.HasValue ? c.CUS_Location2.LocationID : 0,
                        CATLocationToID = c.LocationToID.HasValue ? c.CUS_Location3.LocationID : 0,
                        GroupOfVehicleName = c.GroupOfVehicleID.HasValue ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        RoutePrice = c.RoutePrice,
                        AllowCoLoad = c.AllowCoLoad,
                        TextFrom = c.TextFrom,
                        TextTo = c.TextTo,
                        CreatedDate = c.CreatedDate,
                        TypeOfWAInspectionName = c.TypeOfWAInspectionID > 0 ? c.SYS_Var5.ValueOfVar : string.Empty,
                        TypeOfWAInspectionStatusName = c.TypeOfWAInspectionStatusID > 0 ? c.SYS_Var6.ValueOfVar : string.Empty,
                        TransportModeIDTemp = c.CAT_TransportMode.TransportModeID,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOORDDocumentService> ORDOrder_DocumentService_List(int documentID)
        {
            try
            {
                var result = new List<DTOORDDocumentService>();
                using (var model = new DataEntities())
                {
                    result = model.ORD_DocumentService.Where(c => c.DocumentID == documentID).Select(c => new DTOORDDocumentService
                    {
                        ID = c.ID,
                        DocumentID = c.DocumentID,
                        DocumentCode = c.ORD_Document.Code,
                        ServiceID = c.ServiceID,
                        ServiceCode = c.CAT_Service.Code,
                        ServiceName = c.CAT_Service.ServiceName,
                        PriceCustomer = c.PriceCustomer,
                        PriceVendor = c.PriceVendor,
                        Quantity = c.Quantity,
                        IsDetail = c.CAT_Service.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc,
                        IsQuantity = c.ORD_DocumentDetail.Count(d => d.Code != "" && d.Code != null) == 0,
                        IsComplete = c.IsComplete
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentService_Save(int documentID, List<DTOORDDocumentService> lstService)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_Document.FirstOrDefault(c => c.ID == documentID);
                    if (document != null)
                    {
                        foreach (var item in lstService)
                        {
                            var obj = model.ORD_DocumentService.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.PriceCustomer = item.PriceCustomer;
                                obj.PriceVendor = item.PriceVendor;
                                obj.Quantity = item.Quantity;
                                obj.IsComplete = item.IsComplete;

                                if (obj.CAT_Service.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc)
                                {
                                    if (model.ORD_DocumentDetail.Count(c => c.DocumentServiceID == obj.ID && !string.IsNullOrEmpty(c.Code)) == 0)
                                    {
                                        foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == obj.ID))
                                            model.ORD_DocumentDetail.Remove(detail);

                                        for (int i = 0; i < obj.Quantity; i++)
                                        {
                                            ORD_DocumentDetail objDetail = new ORD_DocumentDetail();
                                            objDetail.CreatedBy = Account.UserName;
                                            objDetail.CreatedDate = DateTime.Now;
                                            objDetail.Code = string.Empty;
                                            obj.ORD_DocumentDetail.Add(objDetail);
                                        }
                                    }
                                }
                            }
                        }
                        model.SaveChanges();

                        if (model.ORD_DocumentService.Count(c => c.DocumentID == document.ID) == model.ORD_DocumentService.Count(c => c.DocumentID == document.ID && c.IsComplete))
                        {
                            document.DocumentStatusID = -(int)SYSVarType.DocumentStatusComplete;
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void ORDOrder_DocumentService_UpdateQuantity(int documentServiceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_DocumentService.FirstOrDefault(c => c.ID == documentServiceID);
                    if (document != null)
                    {
                        document.ModifiedBy = Account.UserName;
                        document.ModifiedDate = DateTime.Now;
                        document.Quantity = model.ORD_DocumentDetail.Count(c => c.DocumentServiceID == documentServiceID);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDDocumentService> ORDOrder_DocumentService_NotInList(int documentID)
        {
            try
            {
                var result = new List<DTOORDDocumentService>();
                using (var model = new DataEntities())
                {
                    var lstService = model.ORD_DocumentService.Where(c => c.DocumentID == documentID).Select(c => c.ServiceID).Distinct().ToList();

                    result = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeDoc && !lstService.Contains(c.ID)).Select(c => new DTOORDDocumentService
                    {
                        ID = c.ID,
                        DocumentID = documentID,
                        DocumentCode = string.Empty,
                        ServiceID = c.ID,
                        ServiceCode = c.Code,
                        ServiceName = c.ServiceName,
                        PriceCustomer = 0,
                        PriceVendor = 0,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentService_NotInList_Save(int documentID, List<int> lstServiceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_Document.FirstOrDefault(c => c.ID == documentID);
                    if (document != null)
                    {
                        foreach (var item in lstServiceID)
                        {
                            ORD_DocumentService obj = new ORD_DocumentService();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.DocumentID = documentID;
                            obj.ServiceID = item;
                            model.ORD_DocumentService.Add(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentService_DeleteList(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lstID)
                    {
                        var obj = model.ORD_DocumentService.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            foreach (var detail in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == obj.ID))
                                model.ORD_DocumentDetail.Remove(detail);
                            model.ORD_DocumentService.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOORDDocumentDetail> ORDOrder_DocumentDetail_List(int documentServiceID)
        {
            try
            {
                var result = new List<DTOORDDocumentDetail>();
                using (var model = new DataEntities())
                {
                    result = model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == documentServiceID).Select(c => new DTOORDDocumentDetail
                    {
                        ID = c.ID,
                        DocumentServiceID = c.DocumentServiceID,
                        Code = c.Code,
                        SendDate = c.SendDate,
                        Note = c.Note
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentDetail_Save(int documentServiceID, DTOORDDocumentDetail item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_DocumentService.FirstOrDefault(c => c.ID == documentServiceID);
                    if (document != null)
                    {
                        ORD_DocumentDetail obj = new ORD_DocumentDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.Code = item.Code;
                        obj.Note = item.Note;
                        obj.SendDate = item.SendDate;
                        obj.DocumentServiceID = documentServiceID;
                        model.ORD_DocumentDetail.Add(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentDetail_SaveList(int documentServiceID, List<DTOORDDocumentDetail> lstDetail)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_DocumentService.FirstOrDefault(c => c.ID == documentServiceID);
                    if (document != null)
                    {
                        foreach (var item in lstDetail)
                        {
                            var obj = model.ORD_DocumentDetail.FirstOrDefault(c => c.ID == item.ID);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.Code = item.Code;
                                obj.Note = item.Note;
                                obj.SendDate = item.SendDate;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentDetail_DeleteList(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int documentServiceID = 0;
                    foreach (var item in lstID)
                    {
                        var obj = model.ORD_DocumentDetail.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            documentServiceID = obj.DocumentServiceID;
                            model.ORD_DocumentDetail.Remove(obj);
                        }
                    }
                    model.SaveChanges();

                    ORDOrder_DocumentService_UpdateQuantity(documentServiceID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDDocumentDetail> ORDOrder_DocumentDetail_Export(int documentServiceID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new List<DTOORDDocumentDetail>();
                    result = model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == documentServiceID).Select(c => new DTOORDDocumentDetail
                    {
                        ID = c.ID,
                        DocumentServiceID = c.DocumentServiceID,
                        Code = c.Code,
                        SendDate = c.SendDate,
                        Note = c.Note
                    }).ToList();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentDetail_Import(int documentServiceID, List<DTOORDDocumentDetail> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_DocumentService.FirstOrDefault(c => c.ID == documentServiceID);
                    if (document != null)
                    {
                        foreach (var item in model.ORD_DocumentDetail.Where(c => c.DocumentServiceID == documentServiceID))
                            model.ORD_DocumentDetail.Remove(item);

                        foreach (var item in lst)
                        {
                            ORD_DocumentDetail obj = new ORD_DocumentDetail();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.Code = item.Code;
                            obj.Note = item.Note;
                            obj.SendDate = item.SendDate;
                            obj.DocumentServiceID = documentServiceID;
                            model.ORD_DocumentDetail.Add(obj);
                        }
                        model.SaveChanges();

                        ORDOrder_DocumentService_UpdateQuantity(documentServiceID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public List<DTOORDDocumentContainer> ORDOrder_DocumentContainer_List(int documentID)
        {
            try
            {
                var result = new List<DTOORDDocumentContainer>();
                using (var model = new DataEntities())
                {
                    result = model.ORD_DocumentContainer.Where(c => c.DocumentID == documentID).Select(c => new DTOORDDocumentContainer
                    {
                        ID = c.ID,
                        DocumentID = c.DocumentID,
                        DocumentCode = c.ORD_Document.Code,
                        DateDocument = c.ORD_Document.DateDocument,
                        CustomerID = c.ORD_Document.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Document.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Document.ORD_Order.CUS_Customer.CustomerName,
                        OrderID = c.ORD_Container.OrderID,
                        OrderCode = c.ORD_Container.ORD_Order.Code,
                        ContainerID = c.ContainerID,
                        PackingCode = c.ORD_Container.CAT_Packing.Code,
                        ContainerNo = c.ORD_Container.ContainerNo,
                        SealNo1 = c.ORD_Container.SealNo1,
                        SealNo2 = c.ORD_Container.SealNo2,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentContainer_Complete(DTOORDDocumentContainer item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.ORD_DocumentContainer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrder_DocumentContainer_NotInList(int documentID, string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var document = model.ORD_Document.FirstOrDefault(c => c.ID == documentID);
                    if (document != null)
                    {
                        var lstContainerID = model.ORD_DocumentContainer.Where(c => c.DocumentID == documentID).Select(c => c.ContainerID).Distinct().ToList();

                        //var query = model.ORD_Container.Where(c => c.ORD_Order.CustomerID == document.CustomerID && c.ORD_Order.SYSCustomerID == Account.SYSCustomerID && (document.HasInspection ? c.ORD_Order.TypeOfWAInspectionID > 0 : true) && !lstContainerID.Contains(c.ID) && c.ORD_Order.StatusOfOrderID < -(int)SYSVarType.StatusOfOrderReceived).Select(c => new DTOORDDocumentContainer
                        //{
                        //    ID = c.ID,
                        //    DocumentID = documentID,
                        //    DocumentCode = document.Code,
                        //    ContainerID = c.ID,
                        //    PackingCode = c.CAT_Packing.Code,
                        //    ContainerNo = c.ContainerNo,
                        //    SealNo1 = c.SealNo1,
                        //    SealNo2 = c.SealNo2,
                        //    OrderID = c.OrderID,
                        //    OrderCode = c.ORD_Order.Code,
                        //    IsComplete = false
                        //}).ToDataSourceResult(CreateRequest(request));

                        //result.Total = query.Total;
                        //result.Data = query.Data as IEnumerable<DTOORDDocumentContainer>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentContainer_NotInList_Save(int documentID, List<int> lstContainerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_Document.FirstOrDefault(c => c.ID == documentID);
                    if (document != null)
                    {
                        //foreach (var item in lstContainerID)
                        //{
                        //    var obj = model.ORD_DocumentContainer.FirstOrDefault(c => c.ContainerID == item && c.DocumentID == documentID);
                        //    if (obj == null)
                        //    {
                        //        obj = new ORD_DocumentContainer();
                        //        obj.CreatedBy = Account.UserName;
                        //        obj.CreatedDate = DateTime.Now;
                        //        obj.DocumentID = documentID;
                        //        obj.ContainerID = item;
                        //        if (document.ORD_TypeOfDocument.TypeOfWAInspectionStatusID == -(int)SYSVarType.TypeOfWAInspectionStatusComplete)
                        //            obj.IsComplete = true;
                        //        model.ORD_DocumentContainer.Add(obj);
                        //    }
                        //}
                        //model.SaveChanges();

                        //var docContainer = model.ORD_DocumentContainer.Where(c => c.DocumentID == documentID && c.ORD_Container.ORD_Order.ContractID > 0).Select(c => new
                        //{
                        //    c.ORD_Container.ORD_Order.ContractID
                        //}).FirstOrDefault();
                        //if (docContainer != null)
                        //    document.ContractCustomerID = docContainer.ContractID;

                        //model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_DocumentContainer_DeleteList(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lstID)
                    {
                        var obj = model.ORD_DocumentContainer.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                            model.ORD_DocumentContainer.Remove(obj);
                    }
                    model.SaveChanges();
                }

            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOORDContainerService_Data ORDOrder_ContainerInService_List(int documentID)
        {
            try
            {
                var result = new DTOORDContainerService_Data();
                result.ListContainer = new List<DTOORDContainerService_Container>();
                result.ListContainerService = new List<DTOORDContainerService_Detail>();
                result.ListService = new List<DTOORDContainerService_Service>();
                using (var model = new DataEntities())
                {
                    result.ListContainer = model.ORD_DocumentContainer.Where(c => c.DocumentID == documentID).Select(c => new DTOORDContainerService_Container
                        {
                            ContainerID = c.ContainerID,
                            ContainerNo = c.ORD_Container.ContainerNo,
                            SealNo1 = c.ORD_Container.SealNo1,
                            SealNo2 = c.ORD_Container.SealNo2,
                            OrderID = c.ORD_Container.OrderID,
                            OrderCode = c.ORD_Container.ORD_Order.Code
                        }).ToList();

                    var lstContainerID = result.ListContainer.Select(c => c.ContainerID).Distinct().ToList();

                    result.ListContainerService = model.ORD_ContainerService.Where(c => lstContainerID.Contains(c.ContainerID)).Select(c => new DTOORDContainerService_Detail
                    {
                        ID = c.ID,
                        ContainerID = c.ContainerID,
                        ServiceID = c.ServiceID,
                        PriceCustomer = c.PriceCustomer,
                        PriceVendor = c.PriceVendor
                    }).ToList();

                    result.ListService = model.CAT_Service.Where(c => c.ServiceTypeID == -(int)SYSVarType.ServiceTypeContainer).Select(c => new DTOORDContainerService_Service
                        {
                            ServiceID = c.ID,
                            ServiceCode = c.Code,
                            ServiceName = c.ServiceName
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrder_ContainerInService_NotInList_Save(int documentID, List<DTOORDContainerService_Detail> lstContainerService)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var document = model.ORD_Document.FirstOrDefault(c => c.ID == documentID);
                    if (document != null)
                    {
                        // Xóa hết data cũ
                        foreach (var item in model.ORD_DocumentContainer.Where(c => c.DocumentID == documentID))
                        {
                            foreach (var itemService in model.ORD_ContainerService.Where(c => c.ContainerID == item.ContainerID))
                                model.ORD_ContainerService.Remove(itemService);
                        }

                        foreach (var item in lstContainerService)
                        {
                            var obj = new ORD_ContainerService();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.ContainerID = item.ContainerID;
                            obj.ServiceID = item.ServiceID;
                            obj.PriceCustomer = item.PriceCustomer;
                            obj.PriceVendor = item.PriceVendor;
                            model.ORD_ContainerService.Add(obj);
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOResult ORDOrder_DocumentContainer_Read(string request, DateTime dtfrom, DateTime dtto, List<int> lstCustomerID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_DocumentContainer.Where(c => c.ORD_Document.DateDocument >= dtfrom && c.ORD_Document.DateDocument <= dtto && (lstCustomerID.Count == 0 ? true : lstCustomerID.Contains(c.ORD_Document.ORD_Order.CustomerID))).Select(c => new DTOORDDocumentContainer
                    {
                        ID = c.ID,
                        DocumentID = c.DocumentID,
                        DateDocument = c.ORD_Document.DateDocument,
                        CustomerID = c.ORD_Document.ORD_Order.CustomerID,
                        CustomerCode = c.ORD_Document.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Document.ORD_Order.CUS_Customer.CustomerName,
                        OrderID = c.ORD_Container.OrderID,
                        OrderCode = c.ORD_Container.ORD_Order.Code,
                        ContainerID = c.ContainerID,
                        PackingCode = c.ORD_Container.CAT_Packing.Code,
                        ContainerNo = c.ORD_Container.ContainerNo,
                        SealNo1 = c.ORD_Container.SealNo1,
                        SealNo2 = c.ORD_Container.SealNo2,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDDocumentContainer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public void ORDOrder_Document_AutoGenerate(List<int> lstOrderID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                    {
                        c.ID,
                        c.Code,
                        c.DateConfig,
                        c.CustomerID,
                        c.ContractID
                    }).ToList();
                    var lstOrderContainer = model.ORD_Container.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new { c.ID, c.OrderID }).ToList();
                    foreach (var order in lstOrder)
                    {
                        var lstContainer = lstOrderContainer.Where(c => c.OrderID == order.ID);
                        if (lstContainer.Count() > 0)
                        {
                            ORD_Document obj = new ORD_Document();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.Code = string.Empty;
                            obj.DateDocument = order.DateConfig.Date;
                            obj.DocumentStatusID = -(int)SYSVarType.DocumentStatusWait;
                            obj.OrderID = order.ID;
                            obj.ContractCustomerID = order.ContractID;
                            obj.DateConfigCustomer = order.DateConfig.Date;
                            obj.HasInspection = true;
                            model.ORD_Document.Add(obj);

                            foreach (var container in lstContainer)
                            {
                                ORD_DocumentContainer objContainer = new ORD_DocumentContainer();
                                objContainer.CreatedBy = Account.UserName;
                                objContainer.CreatedDate = DateTime.Now;
                                objContainer.ContainerID = container.ID;
                                obj.ORD_DocumentContainer.Add(objContainer);
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public string ORDOrder_Document_CheckInspection(List<int> lstOrderID)
        {
            try
            {
                string strError = string.Empty;
                List<string> lstError = new List<string>();
                using (var model = new DataEntities())
                {
                    var lstOrder = model.ORD_Order.Where(c => lstOrderID.Contains(c.ID)).Select(c => new
                      {
                          c.ID,
                          c.Code,
                      }).ToList();

                    foreach (var order in lstOrder)
                    {
                        if (!model.ORD_Document.Any(c => c.OrderID == order.ID && c.DocumentStatusID == -(int)SYSVarType.DocumentStatusComplete))
                            lstError.Add(order.Code);
                    }

                    if (lstError.Count > 0)
                        strError = "Các đơn " + string.Join(", ", lstError) + " chưa được kiểm hóa xong!";
                }
                return strError;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Tracking

        public List<DTOORDTracking_Order> ORD_Tracking_Order_List(List<int> dataCus)
        {
            try
            {
                List<DTOORDTracking_Order> result = new List<DTOORDTracking_Order>();
                using (var model = new DataEntities())
                {
                    int iLCL = -(int)SYSVarType.TransportModeLCL;
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    result = model.ORD_Order.Where(c => c.SYSCustomerID == Account.SYSCustomerID && dataCus.Contains(c.CustomerID) && c.ParentID == null && c.OrderRefID == null).Select(c => new DTOORDTracking_Order
                    {
                        ID = c.ID,
                        OrderCode = c.Code,
                        IsContainer = c.CAT_TransportMode.TransportModeID == iFCL || c.CAT_TransportMode.TransportModeID == iLCL
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<DTOORDTracking_TOMaster> ORD_Tracking_TripByOrder_List(int orderID)
        {
            try
            {
                List<DTOORDTracking_TOMaster> result = new List<DTOORDTracking_TOMaster>();
                using (var model = new DataEntities())
                {
                    int iLCL = -(int)SYSVarType.TransportModeLCL;
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    var obj = model.ORD_Order.FirstOrDefault(c => c.ID == orderID);
                    if (obj != null)
                    {
                        #region FCL, LCL
                        if (obj.CAT_TransportMode.TransportModeID == iFCL || obj.CAT_TransportMode.TransportModeID == iLCL)
                        {
                            var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_Container.ORD_Container.OrderID == orderID && !c.IsSplit).Select(c => new
                            {
                                ID = c.COTOMasterID.Value,
                                Code = c.OPS_COTOMaster.Code,
                                VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                                DriverName = c.OPS_COTOMaster.DriverName1,
                                DriverTel = c.OPS_COTOMaster.DriverTel1,
                                RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                                CreatedDate = c.OPS_COTOMaster.CreatedDate,
                                ETD = c.OPS_COTOMaster.ETD,
                                ETA = c.OPS_COTOMaster.ETA,
                                ATA = c.OPS_COTOMaster.ATA,
                                ATD = c.OPS_COTOMaster.ATD,
                                LocationFromID = c.LocationFromID,
                                LocationFromName = c.CAT_Location.Location,
                                LocationToID = c.LocationToID,
                                LocationToName = c.CAT_Location1.Location,
                                IsComplete = c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived,
                                Status = c.SYS_Var1.ValueOfVar
                            }).Distinct().ToList();

                            foreach (var itemQuery in query)
                            {
                                DTOORDTracking_TOMaster item = new DTOORDTracking_TOMaster
                                {
                                    ID = itemQuery.ID,
                                    Code = itemQuery.Code,
                                    VehicleNo = itemQuery.VehicleNo,
                                    DriverName = itemQuery.DriverName,
                                    DriverTel = itemQuery.DriverTel,
                                    RequestDate = itemQuery.RequestDate,
                                    CreatedDate = itemQuery.CreatedDate,
                                    ETD = itemQuery.ETD,
                                    ETA = itemQuery.ETA,
                                    ATA = itemQuery.ATA,
                                    ATD = itemQuery.ATD,
                                    LocationFromID = itemQuery.LocationFromID,
                                    LocationFromName = itemQuery.LocationFromName,
                                    LocationToID = itemQuery.LocationToID,
                                    LocationToName = itemQuery.LocationToName,
                                    IsComplete = itemQuery.IsComplete,
                                    Status = itemQuery.Status,
                                };
                                item.ListLocation = new List<DTOORDTracking_Location>();
                                result.Add(item);

                                var dataCon = model.OPS_COTOContainer.Where(c => c.COTOMasterID == item.ID && c.OPS_Container.ORD_Container.OrderID == orderID).Select(c => new
                                {
                                    c.ID,
                                    c.OPS_Container.ContainerID,
                                    c.OPS_Container.ORD_Container.Ton,
                                    c.OPS_Container.ORD_Container.ContainerNo,
                                    PackingCode = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                }).ToList();

                                item.TotalTon = dataCon.Sum(c => c.Ton);
                                item.TotalQuantity = dataCon.Select(c => c.ContainerID).Distinct().Count();
                                item.GroupList = string.Join(", ", dataCon.Select(c => c.ContainerNo).Distinct().ToList());

                                var locationFrom = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID == item.LocationFromID).Select(c => new
                                {
                                    ID = c.LocationID.Value,
                                    SortOrder = c.SortOrder,
                                    SortOrderReal = c.SortOrderReal,
                                    TypeOfTOLocationID = c.TypeOfTOLocationID,
                                    Code = c.CAT_Location.Code,
                                    LocationName = c.CAT_Location.Location,
                                    DateCome = c.DateCome.HasValue ? c.DateCome.Value : c.OPS_COTOMaster.ATD.HasValue ? c.OPS_COTOMaster.ATD.Value : c.OPS_COTOMaster.ETD,
                                    Address = c.CAT_Location.Address,
                                    Lat = c.CAT_Location.Lat,
                                    Lng = c.CAT_Location.Lng
                                }).FirstOrDefault();

                                var locationTo = model.OPS_COTOLocation.Where(c => c.COTOMasterID == item.ID && c.LocationID == item.LocationToID).Select(c => new
                                {
                                    ID = c.LocationID.Value,
                                    SortOrder = c.SortOrder,
                                    SortOrderReal = c.SortOrderReal,
                                    TypeOfTOLocationID = c.TypeOfTOLocationID,
                                    Code = c.CAT_Location.Code,
                                    LocationName = c.CAT_Location.Location,
                                    DateCome = c.DateCome.HasValue ? c.DateCome.Value : c.OPS_COTOMaster.ATA.HasValue ? c.OPS_COTOMaster.ATA.Value : c.OPS_COTOMaster.ETA,
                                    Address = c.CAT_Location.Address,
                                    Lat = c.CAT_Location.Lat,
                                    Lng = c.CAT_Location.Lng
                                }).FirstOrDefault();

                                if (locationFrom != null)
                                {
                                    item.ListLocation.Add(new DTOORDTracking_Location
                                    {
                                        ID = locationFrom.ID,
                                        Address = locationFrom.Address,
                                        Code = locationFrom.Code,
                                        Lat = locationFrom.Lat ?? -1,
                                        Lng = locationFrom.Lng ?? -1,
                                        LocationName = locationFrom.LocationName,
                                        SortOrder = locationFrom.SortOrderReal ?? locationFrom.SortOrder,
                                        Status = locationFrom.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : locationFrom.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : 1,
                                        DateTime = locationFrom.DateCome,
                                    });
                                }

                                if (locationTo != null)
                                {
                                    item.ListLocation.Add(new DTOORDTracking_Location
                                    {
                                        ID = locationTo.ID,
                                        Address = locationTo.Address,
                                        Code = locationTo.Code,
                                        Lat = locationTo.Lat ?? -1,
                                        Lng = locationTo.Lng ?? -1,
                                        LocationName = locationTo.LocationName,
                                        SortOrder = locationTo.SortOrderReal ?? locationTo.SortOrder,
                                        Status = locationTo.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : locationTo.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : 1,
                                        DateTime = locationTo.DateCome,
                                    });
                                }

                                item.ListLocation = item.ListLocation.OrderBy(c => c.SortOrder).Distinct().ToList();
                            }
                        }
                        #endregion

                        #region FTL, LTL
                        else
                        {
                            var query = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID > 0 && c.ORD_GroupProduct.OrderID == orderID).Select(c => new
                            {
                                ID = c.DITOMasterID.Value,
                                Code = c.OPS_DITOMaster.Code,
                                VehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                                DriverName = c.OPS_DITOMaster.DriverName1,
                                DriverTel = c.OPS_DITOMaster.DriverTel1,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                CreatedDate = c.OPS_DITOMaster.CreatedDate,
                                ETD = c.OPS_DITOMaster.ETD.Value,
                                ETA = c.OPS_DITOMaster.ETA.Value,
                                ATA = c.OPS_DITOMaster.ATA,
                                ATD = c.OPS_DITOMaster.ATD,
                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationFromName = c.ORD_GroupProduct.CUS_Location.CAT_Location.Location,
                                LocationToID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                                IsComplete = c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived,
                                Status = c.SYS_Var.ValueOfVar
                            }).Distinct().ToList();
                            foreach (var itemQuery in query)
                            {
                                DTOORDTracking_TOMaster item = new DTOORDTracking_TOMaster
                                {
                                    ID = itemQuery.ID,
                                    Code = itemQuery.Code,
                                    VehicleNo = itemQuery.VehicleNo,
                                    DriverName = itemQuery.DriverName,
                                    DriverTel = itemQuery.DriverTel,
                                    RequestDate = itemQuery.RequestDate,
                                    CreatedDate = itemQuery.CreatedDate,
                                    ETD = itemQuery.ETD,
                                    ETA = itemQuery.ETA,
                                    ATA = itemQuery.ATA,
                                    ATD = itemQuery.ATD,
                                    LocationFromID = itemQuery.LocationFromID,
                                    LocationFromName = itemQuery.LocationFromName,
                                    LocationToID = itemQuery.LocationToID,
                                    LocationToName = itemQuery.LocationToName,
                                    IsComplete = itemQuery.IsComplete,
                                    Status = itemQuery.Status
                                };
                                item.ListLocation = new List<DTOORDTracking_Location>();
                                result.Add(item);

                                var dataGop = model.OPS_DITOGroupProduct.Where(c => c.OrderGroupProductID > 0 && c.DITOMasterID == item.ID && c.ORD_GroupProduct.OrderID == orderID).Select(c => new
                                {
                                    c.ID,
                                    c.TonTranfer,
                                    c.QuantityTranfer,
                                    c.CBMTranfer,
                                    c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                }).ToList();

                                item.TotalTon = dataGop.Sum(c => c.TonTranfer);
                                item.TotalCBM = dataGop.Sum(c => c.CBMTranfer);
                                item.TotalQuantity = dataGop.Sum(c => c.QuantityTranfer);
                                item.GroupList = string.Join(", ", dataGop.Select(c => c.Code).Distinct().ToList());

                                var locationFrom = model.OPS_DITOLocation.Where(c => c.DITOMasterID == item.ID && c.LocationID == item.LocationFromID).Select(c => new
                                    {
                                        ID = c.LocationID.Value,
                                        SortOrder = c.SortOrder,
                                        SortOrderReal = c.SortOrderReal,
                                        TypeOfTOLocationID = c.TypeOfTOLocationID,
                                        Code = c.CAT_Location.Code,
                                        LocationName = c.CAT_Location.Location,
                                        DateCome = c.DateCome,
                                        Address = c.CAT_Location.Address,
                                        Lat = c.CAT_Location.Lat,
                                        Lng = c.CAT_Location.Lng
                                    }).FirstOrDefault();

                                var locationTo = model.OPS_DITOLocation.Where(c => c.DITOMasterID == item.ID && c.LocationID == item.LocationToID).Select(c => new
                                {
                                    ID = c.LocationID.Value,
                                    SortOrder = c.SortOrder,
                                    SortOrderReal = c.SortOrderReal,
                                    TypeOfTOLocationID = c.TypeOfTOLocationID,
                                    Code = c.CAT_Location.Code,
                                    LocationName = c.CAT_Location.Location,
                                    DateCome = c.DateCome,
                                    Address = c.CAT_Location.Address,
                                    Lat = c.CAT_Location.Lat,
                                    Lng = c.CAT_Location.Lng
                                }).FirstOrDefault();

                                if (locationFrom != null)
                                {
                                    item.ListLocation.Add(new DTOORDTracking_Location
                                    {
                                        ID = locationFrom.ID,
                                        Address = locationFrom.Address,
                                        Code = locationFrom.Code,
                                        Lat = locationFrom.Lat ?? -1,
                                        Lng = locationFrom.Lng ?? -1,
                                        LocationName = locationFrom.LocationName,
                                        SortOrder = locationFrom.SortOrderReal ?? locationFrom.SortOrder,
                                        Status = locationFrom.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : locationFrom.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : 1,
                                        DateTime = locationFrom.DateCome.HasValue ? locationFrom.DateCome : item.IsComplete ? (item.ATD.HasValue ? item.ATD.Value : item.ETD) : locationFrom.DateCome,
                                    });
                                }

                                if (locationTo != null)
                                {
                                    item.ListLocation.Add(new DTOORDTracking_Location
                                    {
                                        ID = locationTo.ID,
                                        Address = locationTo.Address,
                                        Code = locationTo.Code,
                                        Lat = locationTo.Lat ?? -1,
                                        Lng = locationTo.Lng ?? -1,
                                        LocationName = locationTo.LocationName,
                                        SortOrder = locationTo.SortOrderReal ?? locationTo.SortOrder,
                                        Status = locationTo.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery ? 2 : locationTo.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : 1,
                                        DateTime = locationTo.DateCome.HasValue ? locationTo.DateCome : item.IsComplete ? (item.ATA.HasValue ? item.ATA.Value : item.ETA) : locationTo.DateCome,
                                    });
                                }

                                item.ListLocation = item.ListLocation.OrderBy(c => c.SortOrder).Distinct().ToList();
                            }
                        }
                        #endregion

                        foreach (var item in result)
                        {
                            var fDate = item.RequestDate > item.ATD ? item.ATD.HasValue ? item.ATD.Value : item.ETD : item.RequestDate;
                            fDate = fDate > item.CreatedDate ? item.CreatedDate : fDate;
                            var tDate = item.ATA.HasValue && item.ATA > item.ETA ? item.ATA.Value : item.ETA;
                            var totalHours = tDate.Subtract(fDate).TotalHours;
                            if (totalHours > 24)
                                item.TimeSpan = 3;
                            else if (totalHours > 12)
                                item.TimeSpan = 2;
                            else if (totalHours > 6)
                                item.TimeSpan = 1;
                            else if (totalHours > 3)
                                item.TimeSpan = 0.5;
                            else
                                item.TimeSpan = 0.25;
                            item.Start = fDate.Subtract(TimeSpan.FromHours(item.TimeSpan));
                            item.End = tDate.Add(TimeSpan.FromHours(item.TimeSpan));
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public List<DTOORDTracking_Location> ORD_Tracking_LocationByTrip_List(int orderID, int tripID)
        {
            try
            {
                List<DTOORDTracking_Location> result = new List<DTOORDTracking_Location>();
                using (var model = new DataEntities())
                {
                    int iLCL = -(int)SYSVarType.TransportModeLCL;
                    int iFCL = -(int)SYSVarType.TransportModeFCL;
                    var obj = model.ORD_Order.FirstOrDefault(c => c.ID == orderID);
                    if (obj != null)
                    {
                        if (obj.CAT_TransportMode.TransportModeID == iFCL || obj.CAT_TransportMode.TransportModeID == iLCL)
                        {
                            var data = new List<int>();
                            foreach (var item in model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.OrderID == orderID && c.COTOMasterID == tripID).Select(c => new
                            {
                                c.LocationFromID,
                                c.LocationToID
                            }).ToList())
                            {
                                if (!data.Contains(item.LocationFromID))
                                    data.Add(item.LocationFromID);
                                if (!data.Contains(item.LocationToID))
                                    data.Add(item.LocationToID);
                            }
                            result = model.OPS_COTOLocation.Where(c => c.COTOMasterID == tripID && c.LocationID > 0 && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty || data.Contains(c.LocationID.Value))).Select(c => new DTOORDTracking_Location
                            {
                                ID = c.ID,
                                SortOrder = c.SortOrder,
                                Address = c.CAT_Location.Address,
                                Code = c.CAT_Location.Code,
                                LocationName = c.CAT_Location.Location,
                                Lat = c.CAT_Location.Lat ?? 0,
                                Lng = c.CAT_Location.Lng ?? 0,
                                Status = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet ? 1 : 2
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                        else
                        {
                            var data = new List<int>();
                            foreach (var item in model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == orderID && c.DITOMasterID == tripID).Select(c => new
                            {
                                LocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                                LocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID
                            }).ToList())
                            {
                                if (!data.Contains(item.LocationFromID))
                                    data.Add(item.LocationFromID);
                                if (!data.Contains(item.LocationToID))
                                    data.Add(item.LocationToID);
                            }
                            result = model.OPS_DITOLocation.Where(c => c.DITOMasterID == tripID && c.LocationID > 0 && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty || data.Contains(c.LocationID.Value))).Select(c => new DTOORDTracking_Location
                            {
                                ID = c.ID,
                                SortOrder = c.SortOrder,
                                Address = c.CAT_Location.Address,
                                Code = c.CAT_Location.Code,
                                LocationName = c.CAT_Location.Location,
                                Lat = c.CAT_Location.Lat ?? 0,
                                Lng = c.CAT_Location.Lng ?? 0,
                                Status = c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty ? 0 : c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet ? 1 : 2
                            }).OrderBy(c => c.SortOrder).ToList();
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        #region Cancel

        public DTOResult ORD_DI_Cancel_List(string request, List<int> dataCus, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);

                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusCancel
                        && dataCus.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                        && c.ORD_GroupProduct.ETD <= tDate && c.ORD_GroupProduct.ETD >= fDate).Select(c => new DTOOPS_DITOGroupProduct
                        {
                            ID = c.ID,
                            OrderGroupProductID = c.OrderGroupProductID.Value,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            DITOMasterID = c.DITOMasterID > 0 ? c.DITOMasterID.Value : -1,
                            DITOMasterCode = c.DITOMasterID > 0 ? c.OPS_DITOMaster.Code : string.Empty,
                            OrderGroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ETD = c.ORD_GroupProduct.ETD,
                            ETA = c.ORD_GroupProduct.ETA,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            IsSplit = c.IsSplit,
                            Note = c.Note,
                            LocationFromName = c.ORD_GroupProduct.CUS_Location.CAT_Location.Location,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                            CancelReasonID = c.ReasonCancelID,
                            CancelReasonName = c.ReasonCancelID > 0 ? c.CAT_Reason.ReasonName : string.Empty,
                            CancelReasonNote = c.ReasonCancelNote
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPS_DITOGroupProduct>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORD_CO_Cancel_List(string request, List<int> dataCus, DateTime fDate, DateTime tDate)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    fDate = fDate.Date;
                    tDate = tDate.Date.AddDays(1);

                    var query = model.OPS_COTOContainer.Where(c => c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerCancel
                        && dataCus.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID) && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                        && c.ETD <= tDate && c.ETD >= fDate).Select(c => new DTOOPSCOTOContainer
                        {
                            ID = c.ID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.ShortName,
                            COTOMasterID = c.COTOMasterID > 0 ? c.COTOMasterID.Value : -1,
                            COTOMasterCode = c.COTOMasterID > 0 ? c.OPS_COTOMaster.Code : string.Empty,
                            ETD = c.ETD,
                            ETA = c.ETA,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            LocationFromName = c.CAT_Location.Location,
                            LocationToName = c.CAT_Location1.Location,
                            PackingName = c.OPS_Container.ORD_Container.CAT_Packing.PackingName,
                            StatusOfCOContainerName = c.SYS_Var.ValueOfVar,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                            Note = c.OPS_Container.Note,
                            CancelReasonID = c.ReasonCancelID,
                            CancelReasonName = c.ReasonCancelID > 0 ? c.CAT_Reason.ReasonName : string.Empty,
                            CancelReasonNote = c.ReasonCancelNote
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSCOTOContainer>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATReason> ORD_DI_Cancel_Reason_List()
        {
            try
            {
                var result = new List<DTOCATReason>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Reason.Where(c => c.TypeOfReasonID == -(int)SYSVarType.TypeOfReasonTOCancel).Select(c => new DTOCATReason
                    {
                        ID = c.ID,
                        ReasonName = c.ReasonName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_DI_Cancel_Change(int gopID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusCancel);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ReasonCancelID = reasonID;
                        obj.ReasonCancelNote = reasonNote;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_CO_Cancel_Change(int conID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == conID && c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerCancel);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.ReasonCancelID = reasonID;
                        obj.ReasonCancelNote = reasonNote;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region COTemp

        public DTOResult ORD_COTemp_List(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                    var query = model.ORD_Container_Temp.Where(c => !c.IsClosed && c.SYSCustomerID == Account.SYSCustomerID && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : isAdmin == true ? true : false)).Select(c => new DTOORDContainer_Temp
                        {
                            ID = c.ID,
                            OrderCode = c.OrderCode,
                            CustomerID = c.CustomerID,
                            CustomerCode = c.CUS_Customer.Code,
                            ServiceOfOrderID = c.ServiceOfOrderID,
                            ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,
                            TransportModeID = c.TransportModeID,
                            TransportModeName = c.CAT_TransportMode.Name,
                            RequestDate = c.RequestDate,
                            PackingID = c.PackingID,
                            PackingName = c.CAT_Packing.PackingName,
                            PartnerID = c.PartnerID,
                            PartnerCode = c.PartnerID > 0 ? c.CUS_Partner.PartnerCode : string.Empty,
                            PartnerName = c.PartnerID > 0 ? c.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            ContainerNo = c.ContainerNo,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            Ton = c.Ton,
                            Note = c.Note,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location2.Code : string.Empty,
                            LocationFromName = c.LocationFromID > 0 ? c.CUS_Location2.LocationName : string.Empty,
                            LocationFromAddress = c.LocationFromID > 0 ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.LocationToID > 0 ? c.CUS_Location3.Code : string.Empty,
                            LocationToName = c.LocationToID > 0 ? c.CUS_Location3.LocationName : string.Empty,
                            LocationToAddress = c.LocationToID > 0 ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                            LocationDepotID = c.LocationDepotID,
                            LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location.Code : string.Empty,
                            LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location.LocationName : string.Empty,
                            LocationDepotReturnID = c.LocationDepotReturnID,
                            LocationDepotReturnCode = c.LocationDepotReturnID > 0 ? c.CUS_Location1.Code : string.Empty,
                            LocationDepotReturnName = c.LocationDepotReturnID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            CutOffTime = c.CutOffTime,
                            LoadingTime = c.LoadingTime,
                            DateShipCome = c.DateShipCome,
                            DateDocument = c.DateDocument,
                            TypeOfWAInspectionID = c.TypeOfWAInspectionID,
                            TypeOfWAInspectionName = c.TypeOfWAInspectionID > 0 ? c.SYS_Var.ValueOfVar : string.Empty,
                            IsClosed = c.IsClosed,
                            CreatedDate = c.CreatedDate,
                            CreatedBy = c.CreatedBy,
                            ModifiedBy = c.ModifiedBy,
                            ModifiedDate = c.ModifiedDate,
                            DateGetEmpty = c.DateGetEmpty,
                            DateReturnEmpty = c.DateReturnEmpty,
                            Note1 = c.Note1,
                            Note2 = c.Note2,

                        }).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOORDContainer_Temp>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORD_COTemp_Location_List(string request, int cusID, int carID, int serID, int transID, int nLocation)
        {
            try
            {
                //nLocation: 0: Depot, 1: LocationFrom, 2: LocationTo
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                    var transportID = HelperContract.GetTransportMode(model, transID);
                    var serviceID = HelperContract.GetServiceOfOrder(model, serID);
                    var viewID = ORDOrder_GetView(serviceID, transportID); // 1: IMEX, 2: LO
                    switch (viewID)
                    {
                        case 1:
                            switch (nLocation)
                            {
                                case 0:
                                    var queryCar = model.CUS_Location.Where(c => c.CusPartID == carID).Select(c => new DTOORDData_Location
                                    {
                                        CUSLocationID = c.ID,
                                        LocationID = c.LocationID,
                                        LocationCode = c.Code,
                                        CustomerID = c.CustomerID,
                                        LocationName = c.LocationName,
                                        Address = c.CAT_Location.Address,
                                        CusPartID = c.CusPartID,
                                        Lat = c.CAT_Location.Lat,
                                        Lng = c.CAT_Location.Lng
                                    }).ToDataSourceResult(CreateRequest(request));
                                    result.Total = queryCar.Total;
                                    result.Data = queryCar.Data as IEnumerable<DTOORDData_Location>;
                                    break;
                                case 1:
                                    if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                                    {
                                        var querySea = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                                        {
                                            CUSLocationID = c.ID,
                                            LocationID = c.LocationID,
                                            LocationCode = c.Code,
                                            CustomerID = c.CustomerID,
                                            LocationName = c.LocationName,
                                            Address = c.CAT_Location.Address,
                                            CusPartID = c.CusPartID,
                                            Lat = c.CAT_Location.Lat,
                                            Lng = c.CAT_Location.Lng
                                        }).ToDataSourceResult(CreateRequest(request));
                                        result.Total = querySea.Total;
                                        result.Data = querySea.Data as IEnumerable<DTOORDData_Location>;
                                    }
                                    else
                                    {
                                        var queryStk = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == cusID).Select(c => new DTOORDData_Location
                                        {
                                            CUSLocationID = c.ID,
                                            LocationID = c.LocationID,
                                            LocationCode = c.Code,
                                            CustomerID = c.CustomerID,
                                            LocationName = c.LocationName,
                                            Address = c.CAT_Location.Address,
                                            CusPartID = c.CusPartID,
                                            Lat = c.CAT_Location.Lat,
                                            Lng = c.CAT_Location.Lng
                                        }).ToDataSourceResult(CreateRequest(request));
                                        result.Total = queryStk.Total;
                                        result.Data = queryStk.Data as IEnumerable<DTOORDData_Location>;
                                    }
                                    break;
                                case 2:
                                    if (serviceID == -(int)SYSVarType.ServiceOfOrderImport)
                                    {
                                        var queryStk = model.CUS_Location.Where(c => c.CusPartID == null && c.CustomerID == cusID).Select(c => new DTOORDData_Location
                                        {
                                            CUSLocationID = c.ID,
                                            LocationID = c.LocationID,
                                            LocationCode = c.Code,
                                            CustomerID = c.CustomerID,
                                            LocationName = c.LocationName,
                                            Address = c.CAT_Location.Address,
                                            CusPartID = c.CusPartID,
                                            Lat = c.CAT_Location.Lat,
                                            Lng = c.CAT_Location.Lng
                                        }).ToDataSourceResult(CreateRequest(request));
                                        result.Total = queryStk.Total;
                                        result.Data = queryStk.Data as IEnumerable<DTOORDData_Location>;
                                    }
                                    else
                                    {
                                        var querySea = model.CUS_Location.Where(c => c.CustomerID == cusID && c.CUS_Partner.CAT_Partner.TypeOfPartnerID == iSeaPort).Select(c => new DTOORDData_Location
                                        {
                                            CUSLocationID = c.ID,
                                            LocationID = c.LocationID,
                                            LocationCode = c.Code,
                                            CustomerID = c.CustomerID,
                                            LocationName = c.LocationName,
                                            Address = c.CAT_Location.Address,
                                            CusPartID = c.CusPartID,
                                            Lat = c.CAT_Location.Lat,
                                            Lng = c.CAT_Location.Lng
                                        }).ToDataSourceResult(CreateRequest(request));
                                        result.Total = querySea.Total;
                                        result.Data = querySea.Data as IEnumerable<DTOORDData_Location>;
                                    }
                                    break;
                                default: break;
                            }
                            break;
                        case 2:
                            switch (nLocation)
                            {
                                case 0:
                                    var queryCar = model.CUS_Location.Where(c => c.CusPartID == carID).Select(c => new DTOORDData_Location
                                    {
                                        CUSLocationID = c.ID,
                                        LocationID = c.LocationID,
                                        LocationCode = c.Code,
                                        CustomerID = c.CustomerID,
                                        LocationName = c.LocationName,
                                        Address = c.CAT_Location.Address,
                                        CusPartID = c.CusPartID,
                                        Lat = c.CAT_Location.Lat,
                                        Lng = c.CAT_Location.Lng
                                    }).ToDataSourceResult(CreateRequest(request));
                                    result.Total = queryCar.Total;
                                    result.Data = queryCar.Data as IEnumerable<DTOORDData_Location>;
                                    break;
                                case 1:
                                case 2:
                                    var queryLoc = model.CUS_Location.Where(c => c.CustomerID == cusID).Select(c => new DTOORDData_Location
                                    {
                                        LocationID = c.LocationID,
                                        CUSLocationID = c.ID,
                                        LocationCode = c.Code,
                                        CustomerID = c.CustomerID,
                                        LocationName = c.LocationName,
                                        Address = c.CAT_Location.Address,
                                        CusPartID = c.CusPartID,
                                        Lat = c.CAT_Location.Lat,
                                        Lng = c.CAT_Location.Lng
                                    }).ToList();
                                    result.Total = queryLoc.Count;
                                    result.Data = queryLoc as IEnumerable<DTOORDData_Location>;
                                    break;
                                default: break;
                            }
                            break;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOORDContainer_TempData ORD_COTemp_Data()
        {
            try
            {
                DTOORDContainer_TempData result = new DTOORDContainer_TempData();
                using (var model = new DataEntities())
                {
                    bool IsAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    result.ListCustomer = model.CUS_Customer.Where(c => !c.IsSystem && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && (IsAdmin ? true : Account.ListCustomerID.Contains(c.ID))).Select(c => new CUSCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    result.ListPacking = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new CATPacking
                    {
                        ID = c.ID,
                        PackingName = c.PackingName,
                        Code = c.Code
                    }).ToList();
                    result.ListServiceOfOrder = new List<SYSVar>();
                    result.ListTransportMode = new List<SYSVar>();
                    foreach (var item in model.CAT_ServiceOfOrder)
                    {
                        var objIM = new SYSVar();
                        objIM.ID = item.ID;
                        objIM.Code = item.Code;
                        objIM.TypeOfVar = item.ServiceOfOrderID;
                        objIM.ValueOfVar = item.Name;
                        result.ListServiceOfOrder.Add(objIM);
                    }

                    foreach (var item in model.CAT_TransportMode.Where(c => c.TransportModeID == -(int)SYSVarType.TransportModeFCL))
                    {
                        var objIM = new SYSVar();
                        objIM.ID = item.ID;
                        objIM.Code = item.Code;
                        objIM.TypeOfVar = item.TransportModeID;
                        objIM.ValueOfVar = item.Name;
                        result.ListTransportMode.Add(objIM);
                    }
                    //var objIM = new SYSVar();
                    //objIM.ID = -(int)SYSVarType.ServiceOfOrderImport;
                    //objIM.Code = "IM";
                    //objIM.TypeOfVar = 1;
                    //objIM.ValueOfVar = "Nhập khẩu";
                    //result.ListServiceOfOrder.Add(objIM);
                    //var objEX = new SYSVar();
                    //objEX.ID = -(int)SYSVarType.ServiceOfOrderExport;
                    //objEX.Code = "EX";
                    //objEX.TypeOfVar = 2;
                    //objEX.ValueOfVar = "Xuất khẩu";
                    //result.ListServiceOfOrder.Add(objEX);
                    //var objLO = new SYSVar();
                    //objLO.ID = -(int)SYSVarType.ServiceOfOrderLocal;
                    //objLO.Code = "LO";
                    //objLO.TypeOfVar = 3;
                    //objLO.ValueOfVar = "Chuyển kho";
                    //result.ListServiceOfOrder.Add(objLO);
                    //var objLOEmpty = new SYSVar();
                    //objLOEmpty.ID = -(int)SYSVarType.ServiceOfOrderLocalEmpty;
                    //objLOEmpty.Code = "LOEmpty";
                    //objLOEmpty.TypeOfVar = 4;
                    //objLOEmpty.ValueOfVar = "Chuyển rỗng";
                    //result.ListServiceOfOrder.Add(objLOEmpty);
                    //var objLOLaden = new SYSVar();
                    //objLOLaden.ID = -(int)SYSVarType.ServiceOfOrderLocalLaden;
                    //objLOLaden.Code = "LOLaden";
                    //objLOLaden.TypeOfVar = 5;
                    //objLOLaden.ValueOfVar = "Chuyển đầy";
                    //result.ListServiceOfOrder.Add(objLOLaden);

                    //result.ListTransportMode = new List<SYSVar>();
                    //var objFCL = new SYSVar();
                    //objFCL.ID = -(int)SYSVarType.TransportModeFCL;
                    //objFCL.Code = "FCL";
                    //objFCL.ValueOfVar = "FCL";
                    //result.ListTransportMode.Add(objFCL);
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOORDData_Partner> ORD_COTemp_Carrier_List(int cusID)
        {
            try
            {
                List<DTOORDData_Partner> result = new List<DTOORDData_Partner>();
                using (var model = new DataEntities())
                {
                    int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;
                    result = model.CUS_Partner.Where(c => c.CustomerID == cusID && c.CAT_Partner.TypeOfPartnerID == iCarrier).Select(c => new DTOORDData_Partner
                    {
                        PartnerID = c.PartnerID,
                        CUSPartnerID = c.ID,
                        CustomerID = c.CustomerID,
                        PartnerCode = c.PartnerCode,
                        PartnerName = c.CAT_Partner.PartnerName,
                        DetentionTime = c.RateGetEmpty > 0 ? c.RateGetEmpty.Value : 0,
                        DemurrageTime = c.RateReturnEmpty > 0 ? c.RateReturnEmpty.Value : 0
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_COTemp_SaveList(int total, DTOORDContainer_Temp item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    using (CopyHelper copy = new CopyHelper())
                    {
                        for (var i = 0; i < total; i++)
                        {
                            var obj = new ORD_Container_Temp();
                            copy.Copy(item, obj);
                            obj.SYSCustomerID = Account.SYSCustomerID;
                            obj.DateDocument = item.DateDocument;
                            obj.DateGetEmpty = item.DateGetEmpty;
                            obj.DateReturnEmpty = item.DateReturnEmpty;
                            obj.DateShipCome = item.DateShipCome;
                            obj.CutOffTime = item.CutOffTime;
                            obj.RequestDate = item.RequestDate;
                            obj.CreatedDate = DateTime.Now;
                            obj.CreatedBy = Account.UserName;
                            model.ORD_Container_Temp.Add(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_COTemp_Update(DTOORDContainer_Temp item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    using (CopyHelper copy = new CopyHelper())
                    {
                        var obj = model.ORD_Container_Temp.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null && !obj.IsClosed)
                        {
                            copy.Copy(item, obj);
                            obj.DateDocument = item.DateDocument;
                            obj.DateGetEmpty = item.DateGetEmpty;
                            obj.DateReturnEmpty = item.DateReturnEmpty;
                            obj.DateShipCome = item.DateShipCome;
                            obj.CutOffTime = item.CutOffTime;
                            obj.Note = item.Note;
                            obj.Note1 = item.Note1;
                            obj.Note2 = item.Note2;
                            obj.RequestDate = item.RequestDate;
                            obj.ModifiedDate = DateTime.Now;
                            obj.ModifiedBy = Account.UserName;
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_COTemp_DeleteList(List<int> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in data)
                    {
                        var obj = model.ORD_Container_Temp.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {
                            model.ORD_Container_Temp.Remove(obj);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORD_COTemp_ToORD(List<int> data, bool isGenCode)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOORDOrder> dataTemp = new List<DTOORDOrder>();
                    Dictionary<int, string> dataCon = new Dictionary<int, string>();
                    var setting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
                    foreach (var item in data)
                    {
                        var obj = model.ORD_Container_Temp.FirstOrDefault(c => c.ID == item && c.SYSCustomerID == Account.SYSCustomerID);
                        if (obj != null)
                        {
                            var fDate = obj.RequestDate.Date;
                            var tDate = obj.RequestDate.Date.AddDays(1);
                            if (!isGenCode)
                            {
                                if (setting.IsUniqueOrderCode)
                                {
                                    if (model.ORD_Order.Count(c => c.Code == obj.OrderCode && c.CustomerID == obj.CustomerID && c.SYSCustomerID == Account.SYSCustomerID) > 0)
                                        throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng [" + obj.OrderCode + "] đã tồn tại!");
                                }
                                else
                                {
                                    if (model.ORD_Order.Count(c => c.Code == obj.OrderCode && c.CustomerID == obj.CustomerID && c.SYSCustomerID == Account.SYSCustomerID && c.RequestDate == obj.RequestDate) > 0)
                                        throw FaultHelper.BusinessFault(null, null, "Mã đơn hàng [" + obj.OrderCode + "], ngày yêu cầu [" + obj.RequestDate.ToString("dd/MM/yyyy HH:mm:ss") + "] đã tồn tại!");
                                }
                            }
                            var objOrder = dataTemp.FirstOrDefault(c => c.Code == obj.OrderCode && c.CustomerID == obj.CustomerID);
                            if (objOrder != null)
                            {
                                if (objOrder.TransportModeID != obj.TransportModeID)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin loại vận chuyển.");
                                if (objOrder.ServiceOfOrderID != obj.ServiceOfOrderID)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin dịch vụ vận chuyển.");
                                if (objOrder.CustomerID != obj.CustomerID)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin khách hàng.");
                                if (objOrder.PartnerID != obj.PartnerID)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin hãng tàu.");
                                if (objOrder.RequestDate != obj.RequestDate)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin ngày yêu cầu.");
                                if (objOrder.CutOffTime != obj.CutOffTime)
                                    throw FaultHelper.BusinessFault(null, null, "Đơn hàng " + obj.OrderCode + " không cùng thông tin Cut-Off-Time.");
                            }
                            else
                            {
                                objOrder = new DTOORDOrder();
                                objOrder.Code = obj.OrderCode;
                                objOrder.RequestDate = obj.RequestDate;
                                objOrder.TransportModeID = obj.TransportModeID;
                                objOrder.ServiceOfOrderID = obj.ServiceOfOrderID;
                                objOrder.CutOffTime = obj.CutOffTime;
                                objOrder.CustomerID = obj.CustomerID;
                                objOrder.PartnerID = obj.PartnerID;
                                objOrder.DateConfig = obj.RequestDate;
                                objOrder.ListContainer = new List<DTOORDContainer>();
                                dataTemp.Add(objOrder);
                            }
                            DTOORDContainer objCo = new DTOORDContainer();
                            objCo.ContainerNo = obj.ContainerNo;
                            objCo.SealNo1 = obj.SealNo1;
                            objCo.SealNo2 = obj.SealNo2;
                            objCo.ETA = obj.ETA;
                            objCo.ETD = obj.ETD;
                            objCo.DateGetEmpty = obj.DateGetEmpty;
                            objCo.DateReturnEmpty = obj.DateReturnEmpty;
                            objCo.LoadingTime = obj.LoadingTime;
                            objCo.DateDocument = obj.DateDocument;
                            objCo.LocationToID = obj.LocationToID;
                            objCo.LocationFromID = obj.LocationFromID;
                            objCo.LocationDepotID = obj.LocationDepotID;
                            objCo.LocationDepotReturnID = obj.LocationDepotReturnID;
                            objCo.CutOffTime = obj.CutOffTime;
                            objCo.PackingID = obj.PackingID;
                            objCo.Ton = obj.Ton;

                            dataCon.Add(obj.ID, obj.OrderCode);
                            objOrder.ListContainer.Add(objCo);
                        }
                    }
                    foreach (var item in dataTemp)
                    {
                        item.SYSCustomerID = Account.SYSCustomerID;
                        item.LocationToID = item.ListContainer.FirstOrDefault().LocationToID;
                        item.LocationFromID = item.ListContainer.FirstOrDefault().LocationFromID;
                        item.ETD = item.ListContainer.Min(c => c.ETD);
                        item.ETA = item.ListContainer.Max(c => c.ETA);
                        item.IsOPS = true;
                        item.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                        item.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                        bool flag = true;
                        string preCode = item.Code;
                        if (isGenCode)
                        {
                            do
                            {
                                item.Code = ORDOrder_AutoGenerateCode(model, Account, item);

                                if (setting.IsUniqueOrderCode)
                                {
                                    if (model.ORD_Order.Count(c => c.Code == item.Code && c.CustomerID == item.CustomerID && c.SYSCustomerID == Account.SYSCustomerID) == 0)
                                    {
                                        flag = false;
                                    }
                                }
                                else
                                {
                                    if (model.ORD_Order.Count(c => c.Code == item.Code && c.CustomerID == item.CustomerID && c.SYSCustomerID == Account.SYSCustomerID && c.RequestDate == item.RequestDate) == 0)
                                        flag = false;
                                }
                            } while (flag);

                        }
                        ORDOrder_Save(model, item);
                        if (isGenCode)
                        {
                            ORDOrder_UpdateSettingOrderCode(model, Account, item);
                        }
                        foreach (var con in dataCon.Where(c => c.Value == preCode).ToList())
                        {
                            var obj = model.ORD_Container_Temp.FirstOrDefault(c => c.ID == con.Key);
                            if (obj != null)
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                obj.IsClosed = true;
                            }
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Packet

        public List<DTOORDPAK> ORD_PAK_List()
        {
            try
            {
                var result = new List<DTOORDPAK>();
                using (var model = new DataEntities())
                {
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());

                    //Xóa các packet không có đơn hàng
                    foreach (var item in model.ORD_Packet.Where(c => c.ORD_Order.Count == 0))
                    {
                        model.ORD_Packet.Remove(item);
                    }
                    model.SaveChanges();

                    result = model.ORD_Packet.Where(c => c.SYSCustomerID == Account.SYSCustomerID && ((isCustomer && !isAdmin) ? Account.ListCustomerID.ToList().Contains(c.CUS_Setting.CustomerID) || c.CUS_Setting.CustomerID == Account.SYSCustomerID : isAdmin == true ? true : false))
                        .Select(c => new DTOORDPAK
                        {
                            ID = c.ID,
                            Code = c.Code,
                            PacketName = c.PacketName,
                            Start = c.CreatedDate
                        }).ToList();
                    foreach (var item in result)
                    {
                        item.End = item.Start.AddHours(1);
                        var data = model.ORD_Order.Where(c => c.PacketID == item.ID).Select(c => c.StatusOfOrderID).ToList();
                        var data1 = data.Where(c => c == -(int)SYSVarType.StatusOfOrderNew).ToList();
                        var data2 = data.Where(c => c == -(int)SYSVarType.StatusOfOrderPlaning || c == -(int)SYSVarType.StatusOfOrderTranfer).ToList();
                        var data3 = data.Where(c => c == -(int)SYSVarType.StatusOfOrderReceived).ToList();
                        var str1 = data1.Count > 0 ? data1.Count + " đơn chưa gửi điều phối" : string.Empty;
                        var str2 = data2.Count > 0 ? data2.Count + " đơn đang lập chuyến" : string.Empty;
                        var str3 = data3.Count > 0 ? data3.Count + " đơn hoàn thành" : string.Empty;
                        if (data.Count == data1.Count)
                        {
                            item.Status = 1;
                        }
                        if (data.Count != data1.Count && data1.Count > 0)
                        {
                            item.Status = 2;
                        }
                        if (data.Count == data2.Count)
                        {
                            item.Status = 3;
                        }
                        if (data.Count != data3.Count && data3.Count > 0)
                        {
                            item.Status = 4;
                        }
                        if (data.Count == data3.Count)
                        {
                            item.Status = 5;
                        }
                        item.ToolTipText = str1 + " " + str2 + " " + str3;
                        var dataCus = model.ORD_Order.Where(c => c.PacketID == item.ID).Select(c => c.CUS_Customer.Code).Distinct().ToList();
                        if (dataCus.Count > 3)
                        {
                            item.PacketName = string.Join(",", dataCus.Take(3).ToList()) + "...";
                        }
                        else
                        {
                            item.PacketName = string.Join(",", dataCus);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORD_PAK_Order_List(string request, int pID)
        {
            try
            {
                var result = new DTOResult();
                int iLCL = -(int)SYSVarType.TransportModeLCL;
                int iFCL = -(int)SYSVarType.TransportModeFCL;
                int iMain = -(int)SYSVarType.TypeOfContractMain;
                int iImport = -(int)SYSVarType.ServiceOfOrderImport;
                int iExport = -(int)SYSVarType.ServiceOfOrderExport;
                int iRequest = -(int)SYSVarType.StatusOfOrderRequest;
                using (var model = new DataEntities())
                {
                    var objSetting = ORD_SystemSetting_Get(model);
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                    var query = model.ORD_Order.Where(c => c.PacketID == pID && c.StatusOfOrderID != iRequest).Select(c => new DTOORDOrder
                    {
                        ID = c.ID,
                        ParentID = c.ParentID,
                        OrderRefID = c.OrderRefID,
                        SYSCustomerID = c.SYSCustomerID,
                        Code = c.Code,
                        CustomerID = c.CustomerID,
                        ServiceOfOrderID = c.ServiceOfOrderID,
                        TransportModeID = c.TransportModeID,
                        TypeOfContractID = c.TypeOfContractID,
                        ContractID = c.ContractID,
                        TypeOfOrderID = c.TypeOfOrderID,
                        StatusOfOrderID = c.StatusOfOrderID,
                        StatusOfPlanID = c.StatusOfPlanID,
                        RequestDate = c.RequestDate,
                        LocationFromID = c.LocationFromID,
                        ETD = c.ETD,
                        LocationToID = c.LocationToID,
                        ShortName = c.CUS_Customer.ShortName,
                        CreatedBy = c.CreatedBy,
                        ETA = c.ETA,
                        ETDRequest = c.ETDRequest,
                        ETARequest = c.ETARequest,
                        DateConfig = c.DateConfig,
                        CutOffTime = c.CutOffTime,
                        LoadingTime = c.LoadingTime,
                        LocationDepotID = c.LocationDepotID,
                        LocationDepotReturnID = c.LocationDepotReturnID,
                        VesselNo = c.VesselNo,
                        VesselName = c.VesselName,
                        TripNo = c.TripNo,
                        IsOPS = c.IsOPS,
                        IsClosed = c.IsClosed,
                        IsHot = c.IsHot,
                        BiddingNo = c.BiddingNo,
                        Note = c.Note,
                        ExternalCode = c.ExternalCode,
                        ExternalDate = c.ExternalDate,
                        UserDefine1 = c.UserDefine1,
                        UserDefine2 = c.UserDefine2,
                        UserDefine3 = c.UserDefine3,
                        UserDefine4 = c.UserDefine4,
                        UserDefine5 = c.UserDefine5,
                        UserDefine6 = c.UserDefine6,
                        UserDefine7 = c.UserDefine7,
                        UserDefine8 = c.UserDefine8,
                        UserDefine9 = c.UserDefine9,
                        LocationFrom = c.LocationFromID.HasValue ? c.CUS_Location2.LocationName : string.Empty,
                        LocationFromAddress = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.Address : string.Empty,
                        LocationFromProvince = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationFromDistrict = c.LocationFromID.HasValue ? c.CUS_Location2.CAT_Location.CAT_District.DistrictName : string.Empty,
                        LocationTo = c.LocationToID.HasValue ? c.CUS_Location3.LocationName : string.Empty,
                        LocationToAddress = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.Address : string.Empty,
                        LocationToProvince = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                        LocationToDistrict = c.LocationToID.HasValue ? c.CUS_Location3.CAT_Location.CAT_District.DistrictName : string.Empty,
                        StatusOfOrderName = c.SYS_Var.ValueOfVar,
                        StatusOfPlanName = c.SYS_Var1.ValueOfVar,
                        TypeOfView = 0,
                        CustomerName = c.CUS_Customer.ShortName,
                        TypeOfContractName = c.SYS_Var2.ValueOfVar,
                        TypeOfOrderName = c.SYS_Var3.ValueOfVar,
                        ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,
                        TransportModeName = c.CAT_TransportMode.Name,
                        ViewID = c.ServiceOfOrderID < 0 ? 3 : c.CAT_ServiceOfOrder.ServiceOfOrderID == iImport ? 1 : c.CAT_ServiceOfOrder.ServiceOfOrderID == iExport ? 2 : 3,
                        CreatedDate = c.CreatedDate,
                        IsMain = c.TypeOfContractID == iMain,
                        IsSent = model.ORD_Order.Count(d => d.OrderRefID == c.ID) > 0,
                        URL = string.Empty,
                        CATLocationFromID = c.LocationFromID.HasValue ? c.CUS_Location2.LocationID : 0,
                        CATLocationToID = c.LocationToID.HasValue ? c.CUS_Location3.LocationID : 0,
                        GroupOfVehicleName = c.GroupOfVehicleID.HasValue ? c.CAT_GroupOfVehicle.GroupName : string.Empty,
                        RoutePrice = c.RoutePrice,
                        IsContainer = c.CAT_TransportMode.TransportModeID == iFCL || c.CAT_TransportMode.TransportModeID == iLCL,
                        AllowCoLoad = c.AllowCoLoad,
                        TextFrom = c.TextFrom,
                        TextTo = c.TextTo,
                        TotalTon = c.CAT_TransportMode.TransportModeID == iFCL ? (c.ORD_Container.Count > 0 ? c.ORD_Container.Sum(o => o.Ton) : 0) : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.Ton) : 0),
                        TotalCBM = c.CAT_TransportMode.TransportModeID == iFCL ? 0 : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.CBM) : 0),
                        TotalQuantity = c.CAT_TransportMode.TransportModeID == iFCL ? 0 : (c.ORD_GroupProduct.Count > 0 ? c.ORD_GroupProduct.Sum(o => o.Quantity) : 0),
                        TotalContainer20 = c.CAT_TransportMode.TransportModeID == iFCL ? c.ORD_Container.Count(o => o.CAT_Packing.PackingName.StartsWith("20")) : 0,
                        TotalContainer40 = c.CAT_TransportMode.TransportModeID == iFCL ? c.ORD_Container.Count(o => o.CAT_Packing.PackingName.StartsWith("40")) : 0,

                        TypeOfWAInspectionName = c.TypeOfWAInspectionID > 0 ? c.SYS_Var5.ValueOfVar : string.Empty,
                        TypeOfWAInspectionStatusName = c.TypeOfWAInspectionStatusID > 0 ? c.SYS_Var6.ValueOfVar : string.Empty,

                        TransportModeIDTemp = c.CAT_TransportMode.TransportModeID,
                        ServiceOfOrderIDTemp = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.ServiceOfOrderID : c.ServiceOfOrderID,
                    }).ToDataSourceResult(CreateRequest(request));
                    foreach (DTOORDOrder item in query.Data)
                    {
                        item.TypeOfView = ORDOrder_GetView(item.ServiceOfOrderIDTemp, item.TransportModeIDTemp);
                    }
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region OrderRoute

        public DTOResult ORDOrderRoute_List(string request, bool isClosed)
        {
            try
            {
                //var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                //var isCustomer = Account.ListActionCode.Contains(SYSViewCode.ViewCustomer.ToString());
                int iStatusOpen = -(int)SYSVarType.RouteStatusOpen;
                int iStatusApproved = -(int)SYSVarType.RouteStatusApproved;
                int iStatusClosed = -(int)SYSVarType.RouteStatusClosed;

                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_Route.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (isClosed ? (c.RouteStatusID == iStatusClosed) : (c.RouteStatusID == iStatusOpen || c.RouteStatusID == iStatusApproved))).Select(c => new DTOORDRoute
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RouteName = c.RouteName,
                            RouteStatusID = c.RouteStatusID,
                            RouteStatusName = c.SYS_Var.ValueOfVar,
                            RouteStatusOPSID = c.RouteStatusOPSID,
                            RouteStatusOPSName = c.SYS_Var1.ValueOfVar
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRoute>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOORDRoute ORDOrderRoute_Get(int id)
        {
            try
            {
                DTOORDRoute result = new DTOORDRoute();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.ORD_Route.Where(c => c.ID == id).Select(c => new DTOORDRoute
                        {
                            ID = c.ID,
                            Code = c.Code,
                            RouteName = c.RouteName,
                            RouteStatusID = c.RouteStatusID,
                            RouteStatusName = c.SYS_Var.ValueOfVar,
                            RouteStatusOPSID = c.RouteStatusOPSID,
                            RouteStatusOPSName = c.SYS_Var1.ValueOfVar,
                            HasApproved = c.RouteStatusID == -(int)SYSVarType.RouteStatusApproved
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int ORDOrderRoute_Save(DTOORDRoute item)
        {
            try
            {
                int result = -1;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    item.Code = item.Code.Trim();

                    if (model.ORD_Route.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã [" + item.Code + "]đã sử dụng");

                    var obj = model.ORD_Route.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new ORD_Route();
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RouteStatusID = -(int)SYSVarType.RouteStatusOpen;
                        obj.RouteStatusOPSID = -(int)SYSVarType.RouteStatusOPSPlan;
                        model.ORD_Route.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.RouteName = item.RouteName;
                    model.SaveChanges();
                    result = obj.ID;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_Delete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_Delete(model, Account, id);
                    //var obj = model.ORD_Route.FirstOrDefault(c => c.ID == id);
                    //if (obj == null)
                    //    throw FaultHelper.BusinessFault(null, null, "không tìm thấy dữ liệu cần xóa");

                    //if (model.ORD_Order.Count(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == obj.ID) > 0)
                    //    throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng. Không được xóa");

                    //foreach (var detail in model.ORD_RouteOrder.Where(c => c.RouteID == obj.ID))
                    //{
                    //    model.ORD_RouteOrder.Remove(detail);
                    //}
                    //foreach (var detail in model.ORD_RouteDetail.Where(c => c.RouteID == obj.ID))
                    //{
                    //    model.ORD_RouteDetail.Remove(detail);
                    //}

                    //model.ORD_Route.Remove(obj);
                    //model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrderRoute_OrderList(string request, int ordRouteId)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_RouteOrder.Where(c => c.RouteID == ordRouteId).Select(c => new DTOORDRouteOrder
                    {
                        ID = c.ID,
                        OrderID = c.OrderID,
                        OrderCode = c.ORD_Order.Code,
                        CustomerCode = c.ORD_Order.CUS_Customer.Code,
                        CustomerName = c.ORD_Order.CUS_Customer.CustomerName,
                        RequestDate = c.ORD_Order.RequestDate,
                        LocationFromCode = c.ORD_Order.LocationFromID > 0 ? c.ORD_Order.CUS_Location.Code : string.Empty,
                        LocationFromName = c.ORD_Order.LocationFromID > 0 ? c.ORD_Order.CUS_Location.LocationName : string.Empty,
                        LocationFromAddress = c.ORD_Order.LocationFromID > 0 ? c.ORD_Order.CUS_Location.CAT_Location.Address : string.Empty,
                        LocationToCode = c.ORD_Order.LocationToID > 0 ? c.ORD_Order.CUS_Location1.Code : string.Empty,
                        LocationToName = c.ORD_Order.LocationToID > 0 ? c.ORD_Order.CUS_Location1.LocationName : string.Empty,
                        LocationToAddress = c.ORD_Order.LocationToID > 0 ? c.ORD_Order.CUS_Location1.CAT_Location.Address : string.Empty,
                        TransportModeID = c.ORD_Order.TransportModeID,
                        TransportModeName = c.ORD_Order.CAT_TransportMode.Name,
                        ServiceOfOrderID = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.ServiceOfOrderID.Value : -1,
                        ServiceOfOrderName = c.ORD_Order.ServiceOfOrderID > 0 ? c.ORD_Order.CAT_ServiceOfOrder.Name : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_OrderSaveList(List<int> lst, int ordRouteId)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    MultiMode_AddOrder(model, Account, ordRouteId, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_OrderDelete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_RemoveOrder(model, Account, new List<int> { id });
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ORDOrderRoute_OrderNotInList(string request, int ordRouteId)
        {
            try
            {
                DTOResult result = new DTOResult();
                int iRequest = -(int)SYSVarType.StatusOfOrderRequest;
                int iReceive = -(int)SYSVarType.StatusOfOrderReceived;

                using (var model = new DataEntities())
                {
                    var lstExist = model.ORD_RouteOrder.Where(c => c.RouteID == ordRouteId).Select(c => c.OrderID).ToList();
                    var query = model.ORD_Order.Where(c => c.StatusOfOrderID >= iRequest && c.StatusOfOrderID < iReceive && c.ParentID == null && c.RouteDetailID == null).Select(c => new DTOORDRouteOrder
                    {
                        ID = c.ID,
                        OrderID = c.ID,
                        OrderCode = c.Code,
                        CustomerCode = c.CUS_Customer.Code,
                        CustomerName = c.CUS_Customer.CustomerName,
                        RequestDate = c.RequestDate,
                        LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location.Code : string.Empty,
                        LocationFromName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : string.Empty,
                        LocationFromAddress = c.LocationFromID > 0 ? c.CUS_Location.CAT_Location.Address : string.Empty,
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : string.Empty,
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : string.Empty,
                        LocationToAddress = c.LocationToID > 0 ? c.CUS_Location1.CAT_Location.Address : string.Empty,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteOrder>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_OrderApproved(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_Approved(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_OrderUnApproved(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_UnApproved(model, Account, id);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrderRoute_RouteDetailList(string request, int ordRouteId)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_RouteDetail.Where(c => c.RouteID == ordRouteId).Select(c => new DTOORDRouteDetail
                    {
                        ID = c.ID,
                        OrderRouteID = c.RouteID,
                        Code = c.Code,
                        DetailName = c.DetailName,
                        SortOrder = c.SortOrder,
                        RouteDetailStatusID = c.RouteDetailStatusID,
                        RouteDetailStatusName = c.SYS_Var.ValueOfVar,
                        RouteDetailStatusModeID = c.RouteDetailStatusModeID,
                        RouteDetailStatusModeName = c.SYS_Var1.ValueOfVar,
                        RouteDetailStatusOPSID = c.RouteDetailStatusOPSID,
                        RouteDetailStatusOPSIDName = c.SYS_Var2.ValueOfVar,

                        PartnerFromID = c.PartnerFromID > 0 ? c.PartnerFromID.Value : -1,
                        PartnerFromCode = c.PartnerFromID > 0 ? c.CUS_Partner.PartnerCode : string.Empty,

                        LocationFromID = c.LocationFromID > 0 ? c.LocationFromID.Value : -1,
                        LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location.Code : string.Empty,
                        LocationFromName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : string.Empty,

                        PartnerToID = c.PartnerToID > 0 ? c.PartnerToID.Value : -1,
                        PartnerToCode = c.PartnerToID > 0 ? c.CUS_Partner1.PartnerCode : string.Empty,
                        LocationToID = c.LocationToID > 0 ? c.LocationToID.Value : -1,
                        LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : string.Empty,
                        LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : string.Empty,

                        PartnerDepotID = c.PartnerDepotID > 0 ? c.PartnerDepotID.Value : -1,
                        PartnerDepotCode = c.PartnerDepotID > 0 ? c.CUS_Partner2.PartnerCode : string.Empty,
                        LocationDepotID = c.LocationDepotID > 0 ? c.LocationDepotID.Value : -1,
                        LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location2.Code : string.Empty,
                        LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location2.LocationName : string.Empty,

                        TransportModeID = c.TransportModeID,
                        TransportModeName = c.CAT_TransportMode.Name,

                        ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                        ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,

                        ETA = c.ETA,
                        ETD = c.ETD,
                        ETARequest = c.ETARequest,
                        ETDRequest = c.ETDRequest,
                        ATA = c.ATA,
                        ATD = c.ATD,
                        VesselID = c.VesselID > 0 ? c.VesselID.Value : -1,
                        VesselNo = c.VesselID > 0 ? c.CAT_Vessel.Code : string.Empty,
                        VesselMasterCode = c.VesselMasterCode,
                        IsMain = c.IsMain,
                        IsLTLtoFCL = c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL1,

                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOORDRouteDetail ORDOrderRoute_RouteDetailGet(int id)
        {
            try
            {
                DTOORDRouteDetail result = new DTOORDRouteDetail();
                using (var model = new DataEntities())
                {
                    int iOPSPlan = -(int)SYSVarType.RouteDetailStatusOPSPlan;
                    int iOPSRun = -(int)SYSVarType.RouteDetailStatusOPSRun;
                    int iOPSComplete = -(int)SYSVarType.RouteDetailStatusOPSComplete;

                    string txtRun = string.Empty;
                    string txtComplete = string.Empty;
                    var objSysVarRun = model.SYS_Var.FirstOrDefault(c => c.ID == iOPSRun);
                    if (objSysVarRun != null) txtRun = objSysVarRun.ValueOfVar;
                    var objSysVarComplete = model.SYS_Var.FirstOrDefault(c => c.ID == iOPSComplete);
                    if (objSysVarComplete != null) txtComplete = objSysVarComplete.ValueOfVar;

                    if (id > 0)
                    {
                        result = model.ORD_RouteDetail.Where(c => c.ID == id).Select(c => new DTOORDRouteDetail
                        {
                            ID = c.ID,
                            OrderRouteID = c.RouteID,
                            Code = c.Code,
                            DetailName = c.DetailName,
                            SortOrder = c.SortOrder,
                            RouteDetailStatusID = c.RouteDetailStatusID,
                            RouteDetailStatusName = c.SYS_Var.ValueOfVar,
                            RouteDetailStatusModeID = c.RouteDetailStatusModeID,
                            RouteDetailStatusModeName = c.SYS_Var1.ValueOfVar,
                            RouteDetailStatusOPSID = c.RouteDetailStatusOPSID,
                            RouteDetailStatusOPSIDName = c.SYS_Var2.ValueOfVar,

                            PartnerFromID = c.PartnerFromID > 0 ? c.PartnerFromID.Value : -1,
                            PartnerFromCode = c.PartnerFromID > 0 ? c.CUS_Partner.PartnerCode : string.Empty,

                            LocationFromID = c.LocationFromID > 0 ? c.LocationFromID.Value : -1,
                            LocationFromCode = c.LocationFromID > 0 ? c.CUS_Location.Code : string.Empty,
                            LocationFromName = c.LocationFromID > 0 ? c.CUS_Location.LocationName : string.Empty,

                            PartnerToID = c.PartnerToID > 0 ? c.PartnerToID.Value : -1,
                            PartnerToCode = c.PartnerToID > 0 ? c.CUS_Partner1.PartnerCode : string.Empty,
                            LocationToID = c.LocationToID > 0 ? c.LocationToID.Value : -1,
                            LocationToCode = c.LocationToID > 0 ? c.CUS_Location1.Code : string.Empty,
                            LocationToName = c.LocationToID > 0 ? c.CUS_Location1.LocationName : string.Empty,

                            PartnerDepotID = c.PartnerDepotID > 0 ? c.PartnerDepotID.Value : -1,
                            PartnerDepotCode = c.PartnerDepotID > 0 ? c.CUS_Partner2.PartnerCode : string.Empty,
                            LocationDepotID = c.LocationDepotID > 0 ? c.LocationDepotID.Value : -1,
                            LocationDepotCode = c.LocationDepotID > 0 ? c.CUS_Location2.Code : string.Empty,
                            LocationDepotName = c.LocationDepotID > 0 ? c.CUS_Location2.LocationName : string.Empty,

                            TransportModeID = c.TransportModeID,
                            TransportModeName = c.CAT_TransportMode.Name,

                            ServiceOfOrderID = c.ServiceOfOrderID > 0 ? c.ServiceOfOrderID.Value : -1,
                            ServiceOfOrderName = c.ServiceOfOrderID > 0 ? c.CAT_ServiceOfOrder.Name : string.Empty,

                            ETA = c.ETA,
                            ETD = c.ETD,
                            ETARequest = c.ETARequest,
                            ETDRequest = c.ETDRequest,

                            TypeNextStatus = -1,
                            NextStatus = string.Empty,

                            VesselID = c.VesselID > 0 ? c.VesselID.Value : -1,
                            VesselNo = c.VesselID > 0 ? c.CAT_Vessel.Code : string.Empty,
                            VesselMasterCode = c.VesselMasterCode,
                            IsMain = c.IsMain,
                            ATA = c.ATA,
                            ATD = c.ATD,
                            IsLTLtoFCL = c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL1,
                        }).FirstOrDefault();

                        if (result != null)
                        {
                            if (result.SortOrder == 1 && result.RouteDetailStatusOPSID < iOPSComplete)
                            {
                                result.TypeNextStatus = result.RouteDetailStatusOPSID == iOPSPlan ? 1 : 2;
                                result.NextStatus = result.RouteDetailStatusOPSID == iOPSPlan ? txtRun : txtComplete;
                            }
                            else
                            {
                                int preSortorder = result.SortOrder - 1;
                                var objPre = model.ORD_RouteDetail.FirstOrDefault(c => c.RouteID == result.OrderRouteID && c.SortOrder == preSortorder);
                                if (objPre != null && result.RouteDetailStatusOPSID < iOPSComplete && objPre.RouteDetailStatusOPSID == iOPSComplete)
                                {
                                    result.TypeNextStatus = result.RouteDetailStatusOPSID == iOPSPlan ? 1 : 2;
                                    result.NextStatus = result.RouteDetailStatusOPSID == iOPSPlan ? txtRun : txtComplete;
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        result.TransportModeID = -1;
                        var objTransport = model.CAT_TransportMode.FirstOrDefault();
                        if (objTransport != null) result.TransportModeID = objTransport.ID;
                        result.ServiceOfOrderID = -1;
                        result.ETD = DateTime.Now;
                        result.ETA = DateTime.Now.AddHours(2);
                        result.SortOrder = -1;
                        result.RouteDetailStatusModeID = -1;
                        var objRouteMode = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.RouteDetailStatusMode).FirstOrDefault();
                        if (objRouteMode != null)
                            result.RouteDetailStatusModeID = objRouteMode.ID;

                        result.PartnerFromID = -1;
                        result.PartnerToID = -1;
                        result.PartnerDepotID = -1;

                        result.LocationFromID = -1;
                        result.LocationToID = -1;
                        result.LocationDepotID = -1;
                        result.VesselID = -1;

                        result.TypeNextStatus = -1;
                        result.NextStatus = string.Empty;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int ORDOrderRoute_RouteDetailSave(DTOORDRouteDetail item, int ordRouteId)
        {
            try
            {
                var result = -1;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    //int iModeJoin = -(int)SYSVarType.RouteDetailStatusModeJoin;
                    //int iModeTranport = -(int)SYSVarType.RouteDetailStatusModeTranport;
                    //int iModeSplit = -(int)SYSVarType.RouteDetailStatusModeSplit;
                    //int iModeDirect = -(int)SYSVarType.RouteDetailStatusModeDirect;

                    item.Code = item.Code.Trim();
                    if (model.ORD_RouteDetail.Count(c => c.ID != item.ID && c.Code == item.Code) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã[" + item.Code + "] đã sử dụng");
                    if (item.ETA <= item.ETD)
                        throw FaultHelper.BusinessFault(null, null, "Thời gian ETD ETA không chính xác");

                    var objPre = model.ORD_RouteDetail.Where(c => c.RouteID == ordRouteId && c.SortOrder < item.SortOrder).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    if (objPre == null)
                        objPre = model.ORD_RouteDetail.Where(c => c.RouteID == ordRouteId).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                    var objNext = model.ORD_RouteDetail.Where(c => c.RouteID == ordRouteId && c.SortOrder > item.SortOrder).FirstOrDefault();

                    if (objPre != null && item.ETD < objPre.ETA)
                        throw FaultHelper.BusinessFault(null, null, "ETD chặng hiện tại không được nhỏ hơn ETA của chặng trước");
                    if (item.ID > 0 && objNext != null && item.ETA >= objNext.ETA)
                        throw FaultHelper.BusinessFault(null, null, "ETA chặng hiện tại không được lớn hơn ETA của chặng sau");
                    if (model.ORD_Order.Count(c => c.RouteDetailID > 0 && c.RouteDetailID == item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Chặng đã có đơn hàng. Không được sửa");

                    if (model.ORD_RouteDetail.Count(c => c.RouteID == ordRouteId && c.ID != item.ID && c.SortOrder == item.SortOrder) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Thứ tự chặng đã sử dụng");

                    var obj = model.ORD_RouteDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new ORD_RouteDetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.RouteID = ordRouteId;
                        obj.RouteDetailStatusID = -(int)SYSVarType.RouteDetailStatusOpen;
                        obj.RouteDetailStatusOPSID = -(int)SYSVarType.RouteDetailStatusOPSPlan;
                        model.ORD_RouteDetail.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        if (objNext != null && item.ETA != obj.ETA)
                        {
                            objNext.ETD = item.ETA;
                        }
                    }
                    obj.Code = item.Code;
                    obj.DetailName = item.DetailName;
                    obj.SortOrder = item.SortOrder;
                    obj.TransportModeID = item.TransportModeID;
                    obj.RouteDetailStatusModeID = item.RouteDetailStatusModeID;
                    obj.LocationFromID = item.LocationFromID > 0 ? item.LocationFromID : null;
                    obj.LocationToID = item.LocationToID > 0 ? item.LocationToID : null;
                    obj.LocationDepotID = item.LocationDepotID > 0 ? item.LocationDepotID : null;
                    obj.ServiceOfOrderID = item.ServiceOfOrderID > 0 ? item.ServiceOfOrderID : null;

                    obj.ETA = item.ETA;
                    obj.ETD = item.ETD;
                    obj.ATA = item.ATA;
                    obj.ATD = item.ATD;
                    obj.ETARequest = item.ETARequest;
                    obj.ETDRequest = item.ETDRequest;

                    obj.PartnerFromID = item.PartnerFromID > 0 ? item.PartnerFromID : null;
                    obj.PartnerToID = item.PartnerToID > 0 ? item.PartnerToID : null;
                    obj.PartnerDepotID = item.PartnerDepotID > 0 ? item.PartnerDepotID : null;

                    obj.VesselID = item.VesselID > 0 ? item.VesselID : null;
                    obj.VesselMasterCode = item.VesselMasterCode;
                    obj.IsMain = item.IsMain;

                    model.SaveChanges();
                    result = obj.ID;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_RouteDetailDelete(int id)
        {
            try
            {
                //int iModeJoin = -(int)SYSVarType.RouteDetailStatusModeJoin;
                //int iModeTranport = -(int)SYSVarType.RouteDetailStatusModeTranport;
                //int iModeSplit = -(int)SYSVarType.RouteDetailStatusModeSplit;
                //int iModeDirect = -(int)SYSVarType.RouteDetailStatusModeDirect;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.ORD_RouteDetail.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "không tìm thấy dữ liệu cần xóa");
                    if (model.ORD_Order.Count(c => c.RouteDetailID > 0 && c.RouteDetailID == obj.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Có dữ liệu đơn hàng. Không được xóa!");

                    foreach (var item in model.ORD_RouteDetail.Where(c => c.RouteID == obj.RouteID && c.SortOrder > obj.SortOrder))
                    {
                        item.SortOrder--;
                    }

                    model.ORD_RouteDetail.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_RouteDetailComplete(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_RouteDetailComplete(model, Account, id);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_RouteDetailRun(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_RouteDetailRun(model, Account, id);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOCATVessel ORDOrderRoute_RouteDetail_AddVessel(DTOCATVessel item, int cuspartnerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    item.Code = item.Code.Trim().ToUpper();
                    item.VesselName = item.VesselName.Trim();

                    if (model.CAT_Vessel.Count(c => c.Code.ToUpper() == item.Code && c.ID != item.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng");

                    var objCusPartner = model.CUS_Partner.FirstOrDefault(c => c.ID == cuspartnerid);
                    if (objCusPartner == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy đối tác");

                    var obj = model.CAT_Vessel.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Vessel();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Vessel.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.Code = item.Code;
                    obj.VesselName = item.VesselName;
                    obj.PartnerID = objCusPartner.PartnerID;
                    model.SaveChanges();
                    item.ID = obj.ID;
                    item.Code = obj.Code;
                    item.VesselName = obj.VesselName;
                    item.PartnerID = obj.PartnerID;
                    return item;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }
        public DTOORDRouteData ORDOrderRoute_LocationData()
        {
            try
            {
                DTOORDRouteData result = new DTOORDRouteData();
                result.ListLocation = new List<DTOORDRouteLocation>();
                result.ListPartner = new List<DTOORDRoutePartner>();
                result.ListVessel = new List<DTOCATVessel>();

                int iSeaPort = -(int)SYSVarType.TypeOfPartnerSeaPort;
                int iCarrier = -(int)SYSVarType.TypeOfPartnerCarrier;

                using (var model = new DataEntities())
                {
                    result.ListLocation = model.CUS_Location.Where(c => c.CustomerID == Account.SYSCustomerID && c.LocationID > 1 && !string.IsNullOrEmpty(c.Code)).Select(c => new DTOORDRouteLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationName = c.LocationName,
                        LocationID = c.LocationID,
                        CusPartID = c.CusPartID > 0 ? c.CusPartID.Value : -1
                    }).ToList();

                    result.ListPartner = model.CUS_Partner.Where(c => c.CustomerID == Account.SYSCustomerID).Select(c => new DTOORDRoutePartner
                        {
                            ID = c.ID,
                            Code = c.PartnerCode,
                            PartnerName = c.CAT_Partner.PartnerName,
                            TypeOfPartnerID = c.CAT_Partner.TypeOfPartnerID == iSeaPort ? 1 : c.CAT_Partner.TypeOfPartnerID == iCarrier ? 2 : 3,
                            CATPartnerID = c.PartnerID
                        }).ToList();
                    result.ListPartner.Insert(0, new DTOORDRoutePartner { ID = -1, Code = string.Empty, PartnerName = string.Empty, TypeOfPartnerID = 1 });

                    result.ListVessel = model.CAT_Vessel.Where(c => !string.IsNullOrEmpty(c.Code)).Select(c => new DTOCATVessel
                    {
                        ID = c.ID,
                        Code = c.Code,
                        VesselName = c.VesselName,
                        PartnerID = c.PartnerID,
                        PartnerName = c.CAT_Partner.PartnerName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //STMS-2404
        public void ORDOrderRoute_CreateOrderChilds(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_CreateOrderChilds(model, Account, id);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_ClearOrderChilds(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    MultiMode_ClearOrderChilds(model, Account, id);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        public DTOResult ORDOrderRoute_RouteDetail_RouteContainerList(string request, int routeDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_RouteContainer.Where(c => c.RouteDetailID == routeDetailID).Select(c => new DTOORDRouteContainer
                    {
                        ID = c.ID,
                        RouteDetailID = c.RouteDetailID,
                        PackingID = c.PackingID,
                        PackingCode = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        ContainerNo = c.ContainerNo,
                        SealNo1 = c.SealNo1,
                        SealNo2 = c.SealNo2,
                        Ton = c.Ton,
                        Note1 = c.Note1,
                        Note = c.Note,
                        Note2 = c.Note2,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteContainer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOORDRouteContainer ORDOrderRoute_RouteDetail_RouteContainerGet(int id)
        {
            try
            {
                DTOORDRouteContainer result = new DTOORDRouteContainer();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        result = model.ORD_RouteContainer.Where(c => c.ID == id).Select(c => new DTOORDRouteContainer
                        {
                            ID = c.ID,
                            RouteDetailID = c.RouteDetailID,
                            PackingID = c.PackingID,
                            PackingCode = c.CAT_Packing.Code,
                            PackingName = c.CAT_Packing.PackingName,
                            ContainerNo = c.ContainerNo,
                            SealNo1 = c.SealNo1,
                            SealNo2 = c.SealNo2,
                            Ton = c.Ton,
                            Note1 = c.Note1,
                            Note = c.Note,
                            Note2 = c.Note2,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ID = -1;
                        result.PackingID = -1;
                        var objPack = model.CAT_Packing.Where(c => c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20).FirstOrDefault();
                        if (objPack != null) result.PackingID = objPack.ID;
                        result.Ton = 0;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public long ORDOrderRoute_RouteDetail_RouteContainerSave(DTOORDRouteContainer item, int routeDetailID)
        {
            try
            {
                long result = -1;
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.ORD_RouteContainer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new ORD_RouteContainer();
                        obj.CreatedDate = DateTime.Now;
                        obj.CreatedBy = Account.UserName;
                        obj.RouteDetailID = routeDetailID;
                        model.ORD_RouteContainer.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.PackingID = item.PackingID;
                    obj.ContainerNo = item.ContainerNo;
                    obj.SealNo1 = item.SealNo1;
                    obj.SealNo2 = item.SealNo2;
                    obj.Ton = item.Ton;
                    obj.Note = item.Note;
                    obj.Note1 = item.Note1;
                    obj.Note2 = item.Note2;

                    model.SaveChanges();
                    result = obj.ID;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_RouteDetail_RouteContainerDetele(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.ORD_RouteContainer.FirstOrDefault(c => c.ID == id);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "không tìm thấy dữ liệu cần xóa");
                    if (model.ORD_RouteGroupProduct.Count(c => c.RouteContainerID == obj.ID) > 0)
                        throw FaultHelper.BusinessFault(null, null, "Có dữ liệu nhóm hàng. Không được xóa!");

                    model.ORD_RouteContainer.Remove(obj);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult ORDOrderRoute_RouteDetail_RouteProductList(string request, int routeDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_RouteProduct.Where(c => c.ORD_RouteGroupProduct.RouteDetailID == routeDetailID).Select(c => new DTOORDRouteGroupProduct
                    {
                        ID = c.ID,
                        RouteDetailID = c.ORD_RouteGroupProduct.RouteDetailID,
                        RouteContainerID = c.ORD_RouteGroupProduct.RouteContainerID,
                        GroupProductID = c.ORD_RouteGroupProduct.GroupProductID,
                        GroupProductCode = c.ORD_RouteGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductName = c.ORD_RouteGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        Ton = c.ORD_RouteGroupProduct.Ton,
                        Note1 = c.ORD_RouteGroupProduct.Note1,
                        Note2 = c.ORD_RouteGroupProduct.Note2,
                        ProductID = c.ORD_Product.ProductID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        CBM = c.ORD_RouteGroupProduct.CBM,
                        Quantity = c.Quantity
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteGroupProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ORDOrderRoute_RouteDetail_RouteProductNotInList(string request, int routeID, int routeDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstOrderID = model.ORD_RouteOrder.Where(c => c.RouteID == routeID && c.ORD_Order.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => c.OrderID).ToList();

                    var lisproduct = model.ORD_RouteProduct.Where(c => c.ORD_RouteGroupProduct.RouteDetailID == routeDetailID).Select(c => c.ProductID).ToList();

                    var query = model.ORD_Product.Where(c => lstOrderID.Contains(c.ORD_GroupProduct.OrderID) && !lisproduct.Contains(c.ProductID)).Select(c => new DTOORDRouteGroupProductNotUSe
                    {
                        ORDProductID = c.ID,
                        ORDGroupProductID = c.GroupProductID,
                        GroupProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                        GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        Ton = c.ORD_GroupProduct.Ton,
                        Note1 = c.ORD_GroupProduct.Note1,
                        Note2 = c.ORD_GroupProduct.Note2,
                        ProductID = c.ProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        CBM = c.ORD_GroupProduct.CBM,
                        Quantity = c.Quantity
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteGroupProductNotUSe>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void ORDOrderRoute_RouteDetail_RouteProductNotInSaveList(List<int> lst, int routeDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var lstProduct = model.ORD_Product.Where(c => lst.Contains(c.ID)).Select(c => new
                    {
                        ORDProductID = c.ID,
                        ORDGroupProductID = c.GroupProductID,
                        Ton = c.ORD_GroupProduct.Ton,
                        Note1 = c.ORD_GroupProduct.Note1,
                        Note2 = c.ORD_GroupProduct.Note2,
                        ProductID = c.ProductID,
                        ProductCode = c.CUS_Product.Code,
                        ProductName = c.CUS_Product.ProductName,
                        CBM = c.ORD_GroupProduct.CBM,
                        Quantity = c.Quantity
                    }).ToList();

                    foreach (var item in lstProduct)
                    {

                        ORD_RouteGroupProduct objGroup = new ORD_RouteGroupProduct();
                        objGroup.CreatedDate = DateTime.Now;
                        objGroup.CreatedBy = Account.UserName;
                        objGroup.RouteDetailID = routeDetailID;
                        objGroup.RouteContainerID = null;
                        objGroup.GroupProductID = item.ORDGroupProductID;
                        objGroup.Ton = item.Ton;
                        objGroup.CBM = item.CBM;
                        objGroup.Quantity = item.Quantity;
                        objGroup.Note1 = item.Note1;
                        objGroup.Note2 = item.Note2;
                        model.ORD_RouteGroupProduct.Add(objGroup);

                        ORD_RouteProduct objProduct = new ORD_RouteProduct();
                        objProduct.CreatedDate = DateTime.Now;
                        objProduct.CreatedBy = Account.UserName;
                        objProduct.ORD_RouteGroupProduct = objGroup;
                        objProduct.ProductID = item.ORDProductID;
                        objProduct.Quantity = item.Quantity;

                        model.ORD_RouteProduct.Add(objProduct);

                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult ORDOrderRoute_RouteDetail_RouteProduct_ContainerList(string request, int routeDetailID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.ORD_RouteContainer.Where(c => c.RouteDetailID == routeDetailID).Select(c => new DTOORDRouteContainer
                    {
                        ID = c.ID,
                        RouteDetailID = c.RouteDetailID,
                        PackingID = c.PackingID,
                        PackingCode = c.CAT_Packing.Code,
                        PackingName = c.CAT_Packing.PackingName,
                        ContainerNo = c.ContainerNo,
                        SealNo1 = c.SealNo1,
                        SealNo2 = c.SealNo2,
                        Ton = c.Ton,
                        Note1 = c.Note1,
                        Note = c.Note,
                        Note2 = c.Note2,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOORDRouteContainer>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void ORDOrderRoute_RouteDetail_RouteProduct_UpdateContainer(int ordRouteGroup, int ordRouteCont)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var objRouteGroup = model.ORD_RouteGroupProduct.FirstOrDefault(c => c.ID == ordRouteGroup);
                    if (objRouteGroup == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy Nhóm hàng");
                    var objRouteCont = model.ORD_RouteContainer.FirstOrDefault(c => c.ID == ordRouteCont);
                    if (objRouteCont == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy container");

                    objRouteGroup.RouteContainerID = objRouteCont.ID;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Multi mode
        private void MultiMode_CreateOrderChilds(DataEntities model, AccountItem account, int id)
        {
            if (model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == id).Count() == 0)
            {
                var lstOrder = model.ORD_RouteOrder.Where(c => c.RouteID == id).Select(c => new { c.ID, c.OrderID, c.ORD_Order.Code, c.ORD_Order.RequestDate, c.ORD_Order.CAT_TransportMode.TransportModeID }).ToList();
                var lstOrderID = lstOrder.Select(c => c.OrderID).ToList();
                var lstORDContainer = model.ORD_Container.Where(c => lstOrderID.Contains(c.OrderID)).Select(c => new
                {
                    c.ID,
                    c.OrderID,
                    c.ORD_Order.PartnerID,
                    c.PackingID,
                    c.LocationFromID,
                    c.LocationToID,
                    c.LocationDepotID,
                    c.LocationDepotReturnID,
                    c.Note,
                    c.Note1,
                    c.Note2
                }).ToList();
                var lstORDProduct = model.ORD_Product.Where(c => lstOrderID.Contains(c.ORD_GroupProduct.OrderID)).Select(c => new
                {
                    c.ORD_GroupProduct.ID,
                    c.ORD_GroupProduct.OrderID,
                    c.ORD_GroupProduct.LocationFromID,
                    c.ORD_GroupProduct.LocationToID,
                    c.ORD_GroupProduct.GroupOfProductID,
                    c.ORD_GroupProduct.SOCode,
                    c.ORD_GroupProduct.DNCode,
                    c.ORD_GroupProduct.Ton,
                    c.ORD_GroupProduct.CBM,
                    c.ORD_GroupProduct.Quantity,
                    c.ORD_GroupProduct.PriceOfGOPID,
                    c.ORD_GroupProduct.PackingID,
                    c.ORD_GroupProduct.TempMin,
                    c.ORD_GroupProduct.TempMax,
                    c.ORD_GroupProduct.Note1,
                    c.ORD_GroupProduct.Note2,

                    PROProductID = c.ProductID,
                    PROPackingID = c.PackingID,
                    PROQuantity = c.Quantity,
                    c.ExchangeTon,
                    c.ExchangeCBM,
                    c.ExchangeQuantity,
                    PROTempMax = c.TempMax,
                    PROTempMin = c.TempMin
                }).ToList();
                var lstRouteDetail = model.ORD_RouteDetail.Where(c => c.RouteID == id).Select(c => new
                {
                    c.ID,
                    c.Code,
                    c.SortOrder,
                    c.RouteDetailStatusModeID,
                    c.TransportModeID,
                    SysVarTransportModeID = c.CAT_TransportMode.TransportModeID,
                    c.ServiceOfOrderID,
                    SysVarServiceOfOrderID = c.CAT_ServiceOfOrder.ServiceOfOrderID,
                    //c.PartnerID,
                    c.PartnerDepotID,
                    c.LocationFromID,
                    c.LocationToID,
                    c.LocationDepotID,
                    c.VesselID,
                    c.VesselMasterCode,
                    c.ETD,
                    c.ETDRequest,
                    c.ETA,
                    c.ETARequest
                }).OrderBy(c => c.SortOrder).ToList();
                var dicLinkContainer = new Dictionary<int, List<ORD_Container>>();
                foreach (var container in lstORDContainer)
                {
                    dicLinkContainer.Add(container.ID, new List<ORD_Container>());
                }
                int sortlast = 0;

                //create join ltl to fcl
                //var lstLTLtoFCL = lstRouteDetail.Where(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL1 || c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL2).ToList();
                //if (lstLTLtoFCL.Count == 2)
                //{
                //    var state1 = lstLTLtoFCL.FirstOrDefault(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL1);
                //    var state2 = lstLTLtoFCL.FirstOrDefault(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeLTLtoFCL2);
                //    if (state1 != null && state2 != null)
                //    {
                //        foreach (var order in lstOrder.Where(c => c.TransportModeID == -(int)SYSVarType.TransportModeFTL || c.TransportModeID == -(int)SYSVarType.TransportModeLTL))
                //        {
                //            if (lstORDProduct.Where(c => c.OrderID == order.OrderID).Count() > 0)
                //            {
                //                var objOrder = new ORD_Order();
                //                objOrder.CreatedBy = account.UserName;
                //                objOrder.CreatedDate = DateTime.Now;
                //                objOrder.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                //                objOrder.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                //                objOrder.CustomerID = account.SYSCustomerID;
                //                objOrder.SYSCustomerID = account.SYSCustomerID;
                //                objOrder.IsOPS = true;

                //                objOrder.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                //                objOrder.AllowCoLoad = true;
                //                objOrder.Code = "";
                //                objOrder.ServiceOfOrderID = state1.ServiceOfOrderID;
                //                objOrder.TransportModeID = -(int)SYSVarType.TransportModeLTL;
                //                objOrder.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                //                objOrder.RequestDate = order.RequestDate;
                //                objOrder.ETD = state1.ETD;
                //                objOrder.ETA = state1.ETA;
                //                objOrder.ETARequest = state1.ETARequest;
                //                objOrder.ETDRequest = state1.ETDRequest;
                //                objOrder.IsClosed = false;
                //                objOrder.IsHot = false;
                //                objOrder.ParentID = order.OrderID;

                //                model.ORD_Order.Add(objOrder);

                //                foreach (var product in lstORDProduct.Where(c => c.OrderID == order.OrderID))
                //                {
                //                    var objGroupProduct = new ORD_GroupProduct();
                //                    objGroupProduct.ORD_Order = objOrder;
                //                    objGroupProduct.CreatedBy = account.UserName;
                //                    objGroupProduct.CreatedDate = DateTime.Now;

                //                    objGroupProduct.SOCode = product.SOCode;
                //                    objGroupProduct.GroupOfProductID = product.GroupOfProductID;
                //                    objGroupProduct.Ton = product.Ton;
                //                    objGroupProduct.CBM = product.CBM;
                //                    objGroupProduct.Quantity = product.Quantity;
                //                    objGroupProduct.PriceOfGOPID = product.PriceOfGOPID;
                //                    objGroupProduct.PackingID = product.PackingID;
                //                    objGroupProduct.LocationToID = state1.LocationToID;
                //                    objGroupProduct.ETD = state1.ETD;
                //                    objGroupProduct.LocationFromID = product.LocationFromID;
                //                    objGroupProduct.ETA = state1.ETA;
                //                    if (objGroupProduct.ETD.HasValue)
                //                        objGroupProduct.ETDStart = objGroupProduct.ETD.Value.AddHours(-2);
                //                    if (objGroupProduct.ETA.HasValue)
                //                        objGroupProduct.ETAStart = objGroupProduct.ETA.Value.AddHours(-2);
                //                    objGroupProduct.DNCode = product.DNCode;
                //                    objGroupProduct.ETARequest = state1.ETARequest;
                //                    objGroupProduct.ETDRequest = state1.ETDRequest;
                //                    objGroupProduct.TempMax = product.TempMax;
                //                    objGroupProduct.TempMin = product.TempMin;
                //                    objGroupProduct.Note1 = product.Note1;
                //                    objGroupProduct.Note2 = product.Note2;

                //                    model.ORD_GroupProduct.Add(objGroupProduct);

                //                    var objProduct = new ORD_Product();
                //                    objProduct.ORD_GroupProduct = objGroupProduct;
                //                    objProduct.CreatedBy = account.UserName;
                //                    objProduct.CreatedDate = DateTime.Now;
                //                    objProduct.ExchangeTon = product.ExchangeTon;
                //                    objProduct.ExchangeCBM = product.ExchangeCBM;
                //                    objProduct.ExchangeQuantity = product.ExchangeQuantity;
                //                    objProduct.ProductID = product.PROProductID;
                //                    objProduct.Quantity = product.PROQuantity;
                //                    objProduct.PackingID = product.PROPackingID;

                //                    model.ORD_Product.Add(objProduct);
                //                }
                //            }


                //        }

                //    }
                //}

                //create join ltl

                //create join fcl
                if (lstRouteDetail.Where(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeFCL).Count() > 0)
                {
                    foreach (var routedetail in lstRouteDetail.Where(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeFCL).OrderBy(c => c.SortOrder))
                    {
                        sortlast = routedetail.SortOrder;
                        foreach (var order in lstOrder.Where(c => c.TransportModeID == -(int)SYSVarType.TransportModeFCL))
                        {
                            if (lstORDContainer.Where(c => c.OrderID == order.OrderID).Count() > 0)
                            {
                                var objOrder = new ORD_Order();
                                objOrder.CreatedBy = account.UserName;
                                objOrder.CreatedDate = DateTime.Now;
                                objOrder.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                                objOrder.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                                objOrder.CustomerID = account.SYSCustomerID;
                                objOrder.SYSCustomerID = account.SYSCustomerID;
                                objOrder.IsOPS = true;

                                objOrder.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                                objOrder.AllowCoLoad = true;
                                objOrder.Code = order.Code + "_" + routedetail.Code;
                                objOrder.ServiceOfOrderID = routedetail.ServiceOfOrderID;
                                objOrder.TransportModeID = -(int)SYSVarType.TransportModeFCL;
                                objOrder.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                                objOrder.RequestDate = order.RequestDate;
                                objOrder.DateConfig = order.RequestDate;
                                objOrder.ETD = routedetail.ETD;
                                objOrder.ETA = routedetail.ETA;
                                objOrder.ETARequest = routedetail.ETARequest;
                                objOrder.ETDRequest = routedetail.ETDRequest;
                                objOrder.IsClosed = false;
                                objOrder.IsHot = false;
                                objOrder.ParentID = order.OrderID;
                                objOrder.RouteDetailID = routedetail.ID;

                                model.ORD_Order.Add(objOrder);

                                foreach (var container in lstORDContainer.Where(c => c.OrderID == order.OrderID))
                                {
                                    var objContainer = new ORD_Container();
                                    objContainer.ORD_Order = objOrder;
                                    objContainer.CreatedBy = account.UserName;
                                    objContainer.CreatedDate = DateTime.Now;
                                    objContainer.PackingID = container.PackingID;
                                    objContainer.ContainerNo = "";
                                    objContainer.Note = container.Note;
                                    objContainer.LocationToID = routedetail.LocationToID;
                                    objContainer.ETD = routedetail.ETD;
                                    objContainer.ETDOld = routedetail.ETD;
                                    objContainer.LocationFromID = container.LocationFromID;
                                    objContainer.ETA = routedetail.ETA;
                                    objContainer.ETAOld = routedetail.ETA;
                                    objContainer.PartnerID = routedetail.PartnerDepotID;
                                    objContainer.LocationDepotID = routedetail.LocationDepotID;
                                    objContainer.LocationDepotReturnID = routedetail.LocationDepotID;
                                    objContainer.ETDRequest = routedetail.ETDRequest;
                                    objContainer.ETARequest = routedetail.ETARequest;
                                    objContainer.CutOffTime = routedetail.ETARequest;
                                    objContainer.VesselID = routedetail.VesselID;
                                    objContainer.VesselMasterCode = routedetail.VesselMasterCode;
                                    //objContainer.LocationDepotID = con.LocationDepotID;
                                    //objContainer.LocationDepotReturnID = con.LocationDepotReturnID;
                                    objContainer.Note1 = container.Note1;
                                    objContainer.Note2 = container.Note2;

                                    model.ORD_Container.Add(objContainer);
                                    dicLinkContainer[container.ID].Add(objContainer);
                                }
                            }
                        }
                    }
                }

                //direct fcl
                foreach (var routedetail in lstRouteDetail.Where(c => c.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeTranport && c.SortOrder > sortlast).OrderBy(c => c.SortOrder))
                {
                    sortlast = routedetail.SortOrder;
                    foreach (var order in lstOrder.Where(c => c.TransportModeID == -(int)SYSVarType.TransportModeFCL))
                    {
                        if (lstORDContainer.Where(c => c.OrderID == order.OrderID).Count() > 0)
                        {
                            var objOrder = new ORD_Order();
                            objOrder.CreatedBy = account.UserName;
                            objOrder.CreatedDate = DateTime.Now;
                            objOrder.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                            objOrder.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                            objOrder.CustomerID = account.SYSCustomerID;
                            objOrder.SYSCustomerID = account.SYSCustomerID;
                            objOrder.IsOPS = false;

                            objOrder.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                            objOrder.AllowCoLoad = true;
                            objOrder.Code = order.Code + "_" + routedetail.Code;
                            objOrder.ServiceOfOrderID = routedetail.ServiceOfOrderID;
                            objOrder.TransportModeID = routedetail.TransportModeID;
                            objOrder.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                            objOrder.RequestDate = order.RequestDate;
                            objOrder.DateConfig = order.RequestDate;
                            objOrder.ETD = routedetail.ETD;
                            objOrder.ETA = routedetail.ETA;
                            objOrder.ETARequest = routedetail.ETARequest;
                            objOrder.ETDRequest = routedetail.ETDRequest;
                            objOrder.IsClosed = false;
                            objOrder.IsHot = false;
                            objOrder.ParentID = order.OrderID;
                            objOrder.RouteDetailID = routedetail.ID;

                            model.ORD_Order.Add(objOrder);

                            foreach (var container in lstORDContainer.Where(c => c.OrderID == order.OrderID))
                            {
                                var objContainer = new ORD_Container();
                                objContainer.ORD_Order = objOrder;
                                objContainer.CreatedBy = account.UserName;
                                objContainer.CreatedDate = DateTime.Now;
                                objContainer.PackingID = container.PackingID;
                                objContainer.ContainerNo = "";
                                objContainer.Note = container.Note;
                                objContainer.LocationToID = routedetail.LocationToID;
                                objContainer.ETD = routedetail.ETD;
                                objContainer.ETDOld = routedetail.ETD;
                                objContainer.LocationFromID = routedetail.LocationFromID;
                                objContainer.ETA = routedetail.ETA;
                                objContainer.ETAOld = routedetail.ETA;
                                objContainer.PartnerID = routedetail.PartnerDepotID;
                                objContainer.LocationDepotID = routedetail.LocationDepotID;
                                objContainer.ETDRequest = routedetail.ETDRequest;
                                objContainer.ETARequest = routedetail.ETARequest;
                                objContainer.CutOffTime = routedetail.ETARequest;
                                objContainer.VesselID = routedetail.VesselID;
                                objContainer.VesselMasterCode = routedetail.VesselMasterCode;
                                //objContainer.LocationDepotID = con.LocationDepotID;
                                //objContainer.LocationDepotReturnID = con.LocationDepotReturnID;
                                objContainer.Note1 = container.Note1;
                                objContainer.Note2 = container.Note2;

                                model.ORD_Container.Add(objContainer);
                                dicLinkContainer[container.ID].Add(objContainer);
                            }
                        }
                    }
                }

                //div fcl
                foreach (var routedetail in lstRouteDetail.Where(c => c.SortOrder > sortlast).OrderBy(c => c.SortOrder))
                {
                    sortlast = routedetail.SortOrder;
                    foreach (var order in lstOrder.Where(c => c.TransportModeID == -(int)SYSVarType.TransportModeFCL))
                    {
                        if (lstORDContainer.Where(c => c.OrderID == order.OrderID).Count() > 0)
                        {
                            var objOrder = new ORD_Order();
                            objOrder.CreatedBy = account.UserName;
                            objOrder.CreatedDate = DateTime.Now;
                            objOrder.StatusOfOrderID = -(int)SYSVarType.StatusOfOrderNew;
                            objOrder.StatusOfPlanID = -(int)SYSVarType.StatusOfPlanWaiting;

                            objOrder.CustomerID = account.SYSCustomerID;
                            objOrder.SYSCustomerID = account.SYSCustomerID;
                            objOrder.IsOPS = true;

                            objOrder.TypeOfOrderID = -(int)SYSVarType.TypeOfOrderDirect;
                            objOrder.AllowCoLoad = true;
                            objOrder.Code = order.Code + "_" + routedetail.Code;
                            objOrder.ServiceOfOrderID = routedetail.ServiceOfOrderID;
                            objOrder.TransportModeID = routedetail.TransportModeID;
                            objOrder.TypeOfContractID = -(int)SYSVarType.TypeOfContractMain;
                            objOrder.RequestDate = order.RequestDate;
                            objOrder.DateConfig = order.RequestDate;
                            objOrder.ETD = routedetail.ETD;
                            objOrder.ETA = routedetail.ETA;
                            objOrder.ETARequest = routedetail.ETARequest;
                            objOrder.ETDRequest = routedetail.ETDRequest;
                            objOrder.IsClosed = false;
                            objOrder.IsHot = false;
                            objOrder.ParentID = order.OrderID;
                            objOrder.RouteDetailID = routedetail.ID;

                            model.ORD_Order.Add(objOrder);

                            foreach (var container in lstORDContainer.Where(c => c.OrderID == order.OrderID))
                            {
                                var objContainer = new ORD_Container();
                                objContainer.ORD_Order = objOrder;
                                objContainer.CreatedBy = account.UserName;
                                objContainer.CreatedDate = DateTime.Now;
                                objContainer.PackingID = container.PackingID;
                                objContainer.ContainerNo = "";
                                objContainer.Note = container.Note;
                                objContainer.LocationToID = container.LocationToID;
                                objContainer.ETD = routedetail.ETD;
                                objContainer.ETDOld = routedetail.ETD;
                                objContainer.LocationFromID = routedetail.LocationFromID;
                                objContainer.ETA = routedetail.ETA;
                                objContainer.ETAOld = routedetail.ETA;
                                objContainer.PartnerID = routedetail.PartnerDepotID;
                                objContainer.LocationDepotID = routedetail.LocationDepotID;
                                objContainer.LocationDepotReturnID = routedetail.LocationDepotID;
                                objContainer.ETDRequest = routedetail.ETDRequest;
                                objContainer.ETARequest = routedetail.ETARequest;
                                objContainer.CutOffTime = routedetail.ETARequest;
                                objContainer.VesselID = routedetail.VesselID;
                                objContainer.VesselMasterCode = routedetail.VesselMasterCode;
                                //objContainer.LocationDepotID = con.LocationDepotID;
                                //objContainer.LocationDepotReturnID = con.LocationDepotReturnID;
                                objContainer.Note1 = container.Note1;
                                objContainer.Note2 = container.Note2;

                                model.ORD_Container.Add(objContainer);
                                dicLinkContainer[container.ID].Add(objContainer);
                            }
                        }
                    }
                }

                model.SaveChanges();

                if (dicLinkContainer.Count > 0)
                {
                    foreach (var order in lstOrder)
                    {
                        foreach (var container in lstORDContainer.Where(c => c.OrderID == order.OrderID))
                        {
                            if (dicLinkContainer.ContainsKey(container.ID))
                            {
                                foreach (var item in dicLinkContainer[container.ID])
                                {
                                    var obj = new ORD_RouteOrderDetail();
                                    obj.CreatedBy = account.UserName;
                                    obj.CreatedDate = DateTime.Now;
                                    obj.RouteOrderID = order.ID;
                                    obj.ContainerID = container.ID;
                                    obj.LinkContainerID = item.ID;
                                    model.ORD_RouteOrderDetail.Add(obj);
                                }
                            }
                        }
                    }
                    model.SaveChanges();
                }

                //var lstOrderAddID = model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.IsOPS == true && c.ORD_RouteDetail.RouteID == id).Select(c => c.ID).ToList();
                //ORDOrder_ToOPS(lstOrderAddID); 
            }
        }

        private void MultiMode_AddOrder(DataEntities model, AccountItem account, int routeid, List<int> lstOrderID)
        {
            if (routeid > 0 && lstOrderID.Count > 0)
            {
                bool flag = false;
                foreach (var orderid in lstOrderID)
                {
                    if (model.OPS_Container.Where(c => c.ORD_Container.OrderID == orderid).Count() == 0 &&
                        model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.OrderID == orderid).Count() == 0)
                    {
                        if (model.ORD_RouteOrder.Where(c => c.RouteID == routeid && c.OrderID == orderid).Count() == 0)
                        {
                            var obj = new ORD_RouteOrder();
                            obj.CreatedBy = account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.RouteID = routeid;
                            obj.OrderID = orderid;
                            model.ORD_RouteOrder.Add(obj);
                        }
                        var objOrder = model.ORD_Order.FirstOrDefault(c => c.ID == orderid);
                        if (objOrder != null)
                        {
                            objOrder.IsOPS = false;
                            objOrder.ModifiedBy = account.UserName;
                            objOrder.ModifiedDate = DateTime.Now;
                        }

                        flag = true;
                    }
                }
                if (flag)
                    model.SaveChanges();
            }
        }

        private void MultiMode_RemoveOrder(DataEntities model, AccountItem account, List<int> lstRouteOrderID)
        {
            if (lstRouteOrderID.Count > 0)
            {
                var first = model.ORD_RouteOrder.Where(c => lstRouteOrderID.Contains(c.ID)).Select(c => new { c.RouteID }).FirstOrDefault();
                if (first != null)
                {
                    int id = first.RouteID;
                    if (model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.RouteDetailID > 0 && c.OPS_Container.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0 &&
                        model.OPS_Container.Where(c => c.ORD_Container.ORD_Order.RouteDetailID > 0 && c.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0 &&
                        model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.RouteDetailID > 0 && c.ORD_GroupProduct.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0)
                    {
                        foreach (var routeorder in model.ORD_RouteOrder.Where(c => lstRouteOrderID.Contains(c.ID)))
                        {
                            var objOrder = model.ORD_Order.FirstOrDefault(c => c.ID == routeorder.OrderID);
                            if (objOrder != null)
                            {
                                objOrder.IsOPS = true;
                                objOrder.ModifiedBy = account.UserName;
                                objOrder.ModifiedDate = DateTime.Now;
                            }

                            model.ORD_RouteOrder.Remove(routeorder);
                        }
                        model.SaveChanges();
                    }
                }
            }
        }

        private void MultiMode_Approved(DataEntities model, AccountItem account, int id)
        {
            var obj = model.ORD_Route.FirstOrDefault(c => c.ID == id);
            if (obj != null)
            {
                obj.RouteStatusID = -(int)SYSVarType.RouteStatusApproved;
                obj.ModifiedBy = account.UserName;
                obj.ModifiedDate = DateTime.Now;

                var lstOrderAddID = model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.IsOPS == true && c.ORD_RouteDetail.RouteID == id).Select(c => c.ID).ToList();
                ORDOrder_ToOPS(lstOrderAddID);
            }
        }

        private void MultiMode_UnApproved(DataEntities model, AccountItem account, int id)
        {
            var obj = model.ORD_Route.FirstOrDefault(c => c.ID == id);
            if (obj != null)
            {
                if (model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == id).Count() > 0)
                {
                    if (model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.ORD_GroupProduct.ORD_Order.RouteDetailID > 0 && c.ORD_GroupProduct.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0 &&
                        model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_Container.ORD_Container.ORD_Order.RouteDetailID > 0 && c.OPS_Container.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0)
                    {
                        foreach (var tocontainer in model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.RouteDetailID > 0 && c.OPS_Container.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            model.OPS_COTOContainer.Remove(tocontainer);
                        }
                        foreach (var opscontainer in model.OPS_Container.Where(c => c.ORD_Container.ORD_Order.RouteDetailID > 0 && c.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            model.OPS_Container.Remove(opscontainer);
                        }
                        foreach (var togroupproduct in model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.RouteDetailID > 0 && c.ORD_GroupProduct.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            model.OPS_DITOGroupProduct.Remove(togroupproduct);
                        }
                        foreach (var ordgroupproduct in model.ORD_GroupProduct.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            //model.ORD_GroupProduct.Remove(ordgroupproduct);
                        }
                        foreach (var ordcontainer in model.ORD_Container.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            //model.ORD_Container.Remove(ordcontainer);
                        }
                        foreach (var ordstatus in model.ORD_OrderStatus.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                        {
                            //model.ORD_OrderStatus.Remove(ordstatus);
                        }
                        foreach (var ordorder in model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == id))
                        {
                            //model.ORD_Order.Remove(ordorder);
                        }
                        model.SaveChanges();
                    }
                    else
                        throw FaultHelper.BusinessFault(null, null, "Has tomaster");
                }

                obj.RouteStatusID = -(int)SYSVarType.RouteStatusOpen;
                obj.ModifiedBy = account.UserName;
                obj.ModifiedDate = DateTime.Now;
            }
        }

        private void MultiMode_ClearOrderChilds(DataEntities model, AccountItem account, int id)
        {
            if (model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == id).Count() > 0)
            {
                if (model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.ORD_GroupProduct.ORD_Order.RouteDetailID > 0 && c.ORD_GroupProduct.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0 &&
                    model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_Container.ORD_Container.ORD_Order.RouteDetailID > 0 && c.OPS_Container.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id).Count() == 0)
                {
                    foreach (var routeorderdetail in model.ORD_RouteOrderDetail.Where(c => c.ORD_RouteOrder.RouteID == id))
                    {
                        model.ORD_RouteOrderDetail.Remove(routeorderdetail);
                    }
                    foreach (var tocontainer in model.OPS_COTOContainer.Where(c => c.OPS_Container.ORD_Container.ORD_Order.RouteDetailID > 0 && c.OPS_Container.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.OPS_COTOContainer.Remove(tocontainer);
                    }
                    foreach (var opscontainer in model.OPS_Container.Where(c => c.ORD_Container.ORD_Order.RouteDetailID > 0 && c.ORD_Container.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.OPS_Container.Remove(opscontainer);
                    }
                    foreach (var togroupproduct in model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.RouteDetailID > 0 && c.ORD_GroupProduct.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.OPS_DITOGroupProduct.Remove(togroupproduct);
                    }
                    foreach (var ordgroupproduct in model.ORD_GroupProduct.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.ORD_GroupProduct.Remove(ordgroupproduct);
                    }
                    foreach (var ordcontainer in model.ORD_Container.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.ORD_Container.Remove(ordcontainer);
                    }
                    foreach (var ordstatus in model.ORD_OrderStatus.Where(c => c.ORD_Order.RouteDetailID > 0 && c.ORD_Order.ORD_RouteDetail.RouteID == id))
                    {
                        model.ORD_OrderStatus.Remove(ordstatus);
                    }
                    foreach (var ordorder in model.ORD_Order.Where(c => c.RouteDetailID > 0 && c.ORD_RouteDetail.RouteID == id))
                    {
                        model.ORD_Order.Remove(ordorder);
                    }
                    model.SaveChanges();
                }
                else
                    throw FaultHelper.BusinessFault(null, null, "Has tomaster");
            }
        }

        private void MultiMode_RouteDetailRun(DataEntities model, AccountItem account, int routedetailid)
        {
            var obj = model.ORD_RouteDetail.FirstOrDefault(c => c.ID == routedetailid);
            if (obj != null)
            {
                obj.RouteDetailStatusOPSID = -(int)SYSVarType.RouteDetailStatusOPSRun;
                obj.ModifiedBy = account.UserName;
                obj.ModifiedDate = DateTime.Now;
                if (obj.ATD != null)
                    obj.ATD = obj.ETD;
                model.SaveChanges();
            }
        }

        private void MultiMode_RouteDetailComplete(DataEntities model, AccountItem account, int routedetailid)
        {
            var obj = model.ORD_RouteDetail.FirstOrDefault(c => c.ID == routedetailid);
            if (obj != null)
            {
                obj.RouteDetailStatusOPSID = -(int)SYSVarType.RouteDetailStatusOPSComplete;
                obj.ModifiedBy = account.UserName;
                obj.ModifiedDate = DateTime.Now;
                if (obj.ATD == null)
                    obj.ATD = obj.ETD;
                if (obj.ATA == null)
                    obj.ATA = obj.ETA;
                model.SaveChanges();

                var next = model.ORD_RouteDetail.FirstOrDefault(c => c.RouteID == obj.RouteID && c.SortOrder == obj.SortOrder + 1);
                if (next != null)
                {
                    if (obj.RouteDetailStatusModeID == -(int)SYSVarType.RouteDetailStatusModeFCL && obj.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderOther)
                    {
                        foreach (var ordcontainer in model.ORD_Container.Where(c => c.ORD_Order.RouteDetailID == next.ID))
                        {
                            ordcontainer.VesselID = obj.VesselID;
                            ordcontainer.VesselMasterCode = obj.VesselMasterCode;
                            ordcontainer.DateVesselCome = obj.ATA;
                        }
                        model.SaveChanges();
                    }
                }
            }
        }

        private void MultiMode_Delete(DataEntities model, AccountItem account, int id)
        {
            var obj = model.ORD_Route.FirstOrDefault(c => c.ID == id);
            if (obj != null)
            {
                obj.RouteStatusID = -(int)SYSVarType.RouteStatusClosed;
                obj.ModifiedBy = account.UserName;
                obj.ModifiedDate = DateTime.Now;
                model.SaveChanges();
            }
        }
        #endregion
    }
}