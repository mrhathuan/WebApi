using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Kendo.Mvc.Extensions;
using Data;
using DTO;
using System.ServiceModel;
using Kendo.Mvc;
using System.Globalization;

namespace Business
{
    public class BLMonitor : Base, IBase
    {
        #region Common
        public List<DTOMONTractor> TractorOwner_List()
        {
            try
            {
                var result = new List<DTOMONTractor>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOMONTractor
                    {
                        ID = c.CAT_Vehicle.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        LocationID = c.CAT_Vehicle.LocationID,
                        LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : "",
                        LocationAddress = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Address : "",
                        LocationDistrictName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_District.DistrictName : "",
                        LocationProvinceName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_Province.ProvinceName : "",

                        RomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        RomoocRegNo = c.CAT_Vehicle.CAT_Romooc.RegNo
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONTruck> TruckOwner_List()
        {
            try
            {
                var result = new List<DTOMONTruck>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.VehicleID > 0 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOMONTruck
                    {
                        ID = c.CAT_Vehicle.ID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        GPSCode = c.CAT_Vehicle.GPSCode,
                        MinWeight = c.CAT_Vehicle.MinWeight,
                        RegWeight = c.CAT_Vehicle.RegWeight,
                        MaxWeight = c.CAT_Vehicle.MaxWeight,
                        MinCapacity = c.CAT_Vehicle.MinCapacity,
                        RegCapacity = c.CAT_Vehicle.RegCapacity,
                        MaxCapacity = c.CAT_Vehicle.MaxCapacity,
                        Lat = c.CAT_Vehicle.Lat,
                        Lng = c.CAT_Vehicle.Lng,
                        LocationID = c.CAT_Vehicle.LocationID,
                        LocationCode = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Code : "",
                        LocationAddress = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.Address : "",
                        LocationDistrictName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_District.DistrictName : "",
                        LocationProvinceName = c.CAT_Vehicle.LocationID > 0 ? c.CAT_Vehicle.CAT_Location.CAT_Province.ProvinceName : "",
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONRomooc> RomoocOwner_List()
        {
            try
            {
                var result = new List<DTOMONRomooc>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.RomoocID > 0).Select(c => new DTOMONRomooc
                    {
                        ID = c.CAT_Romooc.ID,
                        RegNo = c.CAT_Romooc.RegNo,
                        NoOfDelivery = c.CAT_Romooc.NoOfDelivery,
                        MaxWeight = c.CAT_Romooc.MaxWeight,
                        RegCapacity = c.CAT_Romooc.RegCapacity,
                        HasContainer = c.CAT_Romooc.HasContainer,
                        Lat = c.CAT_Romooc.Lat,
                        Lng = c.CAT_Romooc.Lng,
                        LocationID = c.CAT_Romooc.LocationID,
                        LocationCode = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Code : "",
                        LocationAddress = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.Address : "",
                        LocationDistrictName = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.CAT_District.DistrictName : "",
                        LocationProvinceName = c.CAT_Romooc.LocationID > 0 ? c.CAT_Romooc.CAT_Location.CAT_Province.ProvinceName : "",
                        IsLaden = false,
                    }).ToList();

                    var lstStatusLaden = new List<int>() { -(int)SYSVarType.StatusOfCOContainerShipLaden, -(int)SYSVarType.StatusOfCOContainerIMLaden, -(int)SYSVarType.StatusOfCOContainerEXLaden, -(int)SYSVarType.StatusOfCOContainerLOLaden };
                    foreach (var item in result.Where(c => c.HasContainer))
                    {
                        var query = model.OPS_COTOContainer.Where(c => c.OPS_Container.RomoocID == item.ID && c.OPS_Container.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeRunning &&
                            lstStatusLaden.Contains(c.StatusOfCOContainerID) && c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer);
                        item.IsLaden = query.Count() > 0;

                        item.ListOrder = new List<DTOMONRomooc_ORDCO>();
                        foreach (var obj in query)
                        {
                            var newobj = new DTOMONRomooc_ORDCO();
                            newobj.CustomerCode = obj.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code;
                            newobj.Ton = obj.OPS_Container.ORD_Container.Ton;
                            newobj.ContainerType = obj.OPS_Container.ORD_Container.CAT_Packing.Code;
                            item.ListOrder.Add(newobj);
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void TractorOwner_UpdateFromGPS(List<DTOMONVehicle> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst.Where(c => c.ID > 0 && c.Lat > 0 && c.Lng > 0))
                    {
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void TruckOwner_UpdateFromGPS(List<DTOMONVehicle> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst.Where(c => c.ID > 0 && c.Lat > 0 && c.Lng > 0))
                    {
                        var obj = model.CAT_Vehicle.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.Lat = item.Lat;
                            obj.Lng = item.Lng;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        //Dùng
        public DTOResult Tractor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        DriverID = c.DriverID,
                        DriverName = c.DriverName != null ? c.DriverName : "",
                        Cellphone = c.Cellphone != null ? c.Cellphone : "",
                        ListVendorID = c.CUS_Vehicle.Select(d => d.CustomerID).ToList(),
                        IsOwn = c.CUS_Vehicle.Count(d => d.CustomerID == Account.SYSCustomerID) > 0,
                        MaxWeight = c.MaxWeight,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Truck_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Vehicle.Where(c => c.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOOPSVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        DriverID = c.DriverID,
                        DriverName = c.DriverName != null ? c.DriverName : "",
                        Cellphone = c.Cellphone != null ? c.Cellphone : "",
                        ListVendorID = c.CUS_Vehicle.Select(d => d.CustomerID).ToList(),
                        IsOwn = c.CUS_Vehicle.Count(d => d.CustomerID == Account.SYSCustomerID) > 0,
                        MaxWeight = c.MaxWeight,
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Romooc_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Romooc.Select(c => new DTOMONVehicle
                    {
                        ID = c.ID,
                        VendorID = c.CurrentVendorID > 0 ? c.CurrentVendorID : -1,

                        RegNo = c.RegNo
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult TractorByVendorID_List(int? vendorID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null)
                        vendorID = Account.SYSCustomerID;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new CATVehicle
                    {
                        ID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult RomoocByVendorID_List(int? vendorID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null)
                        vendorID = Account.SYSCustomerID;
                    var query = model.CUS_Romooc.Where(c => c.CustomerID == vendorID).Select(c => new CATRomooc
                    {
                        ID = c.RomoocID,
                        RegNo = c.CAT_Romooc.RegNo
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult TruckByVendorID_List(int? vendorID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null)
                        vendorID = Account.SYSCustomerID;
                    var query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new CATVehicle
                    {
                        ID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Driver_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone,
                        CardNumber = c.CAT_Driver.CardNumber
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DITOMasterRouting_List(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITO.Where(c => c.IsOPS && c.DITOMasterID == masterID && (locationID.HasValue ? (c.CAT_Routing.LocationToID == locationID.Value || c.CAT_Routing.LocationFromID == locationID.Value) : true)).Select(c => new DTOMONRouting
                        {
                            TOID = c.ID,
                            RoutingName = c.CAT_Routing.CAT_Location.Location + " - " + c.CAT_Routing.CAT_Location1.Location
                        }).ToList();
                    var objNew = new DTOMONRouting();
                    objNew.TOID = -1;
                    objNew.RoutingName = " ";
                    query.Insert(0, objNew);
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOMONRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult COTOMasterRouting_List(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTO.Where(c => c.IsOPS && c.COTOMasterID == masterID && (locationID.HasValue ? (c.CAT_Routing.LocationToID == locationID.Value || c.CAT_Routing.LocationFromID == locationID.Value) : true)).Select(c => new DTOMONRouting
                    {
                        TOID = c.ID,
                        RoutingName = c.CAT_Routing.CAT_Location.Location + " - " + c.CAT_Routing.CAT_Location1.Location
                    }).ToList();
                    var objNew = new DTOMONRouting();
                    objNew.TOID = -1;
                    objNew.RoutingName = " ";
                    query.Insert(0, objNew);
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOMONRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATTrouble_List(bool isCO)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    int typeID = -(int)SYSVarType.TypeOfGroupTroubleDI;
                    if (isCO)
                        typeID = -(int)SYSVarType.TypeOfGroupTroubleCO;
                    var query = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == typeID).Select(c => new CATGroupOfTrouble
                    {
                        ID = c.ID,
                        Code = c.Code,
                        Name = c.Name
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<CATGroupOfTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var iVendor = -(int)SYSVarType.TypeOfCustomerVEN;
                    var iBoth = -(int)SYSVarType.TypeOfCustomerBOTH;

                    var query = model.CUS_Customer.Where(c => c.TypeOfCustomerID == iVendor || c.TypeOfCustomerID == iBoth && c.IsSystem == false && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOMONVendor
                    {
                        VendorID = c.ID,
                        VendorName = c.CustomerName,
                        VendorCode = c.Code,
                    }).ToList();
                    result.Data = query as IEnumerable<DTOMONVendor>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult Customer_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    query.Insert(0, new DTOCustomer { ID = -1, Code = " ", CustomerName = " " });
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATLocation_List(string request, List<int> ignore)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    ignore.Add(1);
                    var query = model.CAT_Location.Where(c => ignore.Count == 0 || !ignore.Contains(c.ID)).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Location = c.Location,
                        Code = c.Code,
                        Address = c.Address,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        CountryName = c.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_District.DistrictName
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATStock_List(string request, int cusID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Location.Where(c => Account.ListCustomerID.Contains(c.CustomerID) && c.CusPartID == null).Select(c => new DTOCATLocation
                    {
                        ID = c.ID,
                        Location = c.CAT_Location.Location,
                        Code = c.Code,
                        Address = c.CAT_Location.Address,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        CountryName = c.CAT_Location.CAT_Country.CountryName,
                        ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                        DistrictName = c.CAT_Location.CAT_District.DistrictName
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CATVehicle Vehicle_Create(string vehicleNo, int? vendorID, int vehicleType, double maxWeight)
        {
            try
            {
                CATVehicle result = new CATVehicle();
                using (var model = new DataEntities())
                {
                    switch (vehicleType)
                    {
                        case 1:
                            vehicleType = -(int)SYSVarType.TypeOfVehicleTractor;
                            break;
                        case 2:
                            vehicleType = -(int)SYSVarType.TypeOfVehicleTruck;
                            break;
                    }
                    var rs = CATVehicle_Create(model, vehicleNo, vendorID, vehicleType, maxWeight);
                    result.ID = rs.ID;
                    result.RegNo = rs.RegNo;
                    result.MaxWeight = rs.MaxWeight;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public CATVehicle Romooc_Create(string vehicleNo, int? vendorID, int vehicleType, double maxWeight)
        {
            try
            {
                CATVehicle result = new CATVehicle();
                if (vendorID > 0)
                {
                    using (var model = new DataEntities())
                    {
                        var qr = model.CAT_Romooc.FirstOrDefault(c => c.RegNo.ToUpper().Trim() == vehicleNo.ToUpper().Trim());
                        if (qr == null)
                        {
                            qr = new CAT_Romooc();
                            qr.CreatedBy = Account.UserName;
                            qr.CreatedDate = DateTime.Now;
                            qr.RegNo = vehicleNo;
                            qr.CurrentVendorID = vendorID == null ? Account.SYSCustomerID : vendorID.Value;
                            qr.MaxWeight = maxWeight;
                            qr.NoOfDelivery = 2;
                            model.CAT_Romooc.Add(qr);
                        }
                        var objCus = model.CUS_Romooc.FirstOrDefault(c => c.CustomerID == vendorID.Value && c.RomoocID == qr.ID);
                        if (objCus == null)
                        {
                            // Tạo cusvehicle
                            objCus = new CUS_Romooc();
                            objCus.CAT_Romooc = qr;
                            objCus.CustomerID = vendorID.Value;
                            objCus.CreatedBy = Account.UserName;
                            objCus.CreatedDate = DateTime.Now;
                            model.CUS_Romooc.Add(objCus);
                            model.SaveChanges();
                        }
                        model.SaveChanges();
                        result.ID = qr.ID;
                        result.RegNo = qr.RegNo;
                        result.MaxWeight = qr.MaxWeight;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Operation

        #region Variables
        const string DICodePrefix = "DI";
        const string DICodeNum = "0000000";
        const string COCodePrefix = "CO";
        const string COCodeNum = "0000000";
        #endregion


        private CAT_Vehicle CATVehicle_Create(DataEntities model, string vehicleNo, int? vendorID, int vehicleType, double maxWeight)
        {
            if (vendorID > 0)
            {
                var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo.ToUpper().Trim() == vehicleNo.ToUpper().Trim());
                if (objVehicle == null)
                {
                    objVehicle = new CAT_Vehicle();

                    objVehicle.RegNo = vehicleNo;
                    if (vendorID > 0)
                        objVehicle.CurrentVendorID = vendorID;
                    objVehicle.TypeOfVehicleID = vehicleType;
                    objVehicle.IsOwn = false;
                    objVehicle.MaxWeight = maxWeight;

                    objVehicle.CreatedBy = Account.UserName;
                    objVehicle.CreatedDate = DateTime.Now;
                    model.CAT_Vehicle.Add(objVehicle);
                }

                // Tạo cusvehicle
                var objCus = model.CUS_Vehicle.FirstOrDefault(c => c.CustomerID == vendorID.Value && c.VehicleID == objVehicle.ID);
                if (objCus == null)
                {
                    objCus = new CUS_Vehicle();
                    objCus.CAT_Vehicle = objVehicle;
                    objCus.CustomerID = vendorID.Value;
                    objCus.CreatedBy = Account.UserName;
                    objCus.CreatedDate = DateTime.Now;
                    model.CUS_Vehicle.Add(objCus);
                }
                model.SaveChanges();

                return objVehicle;
            }
            else
                throw FaultHelper.BusinessFault(null, null, "vendor fail");
        }


        #endregion

        private DTOSYSSetting ORD_SystemSetting_Get(DataEntities model)
        {
            var objSetting = HelperSYSSetting.SYSSettingSystem_GetBySYSCustomerID(model, Account.SYSCustomerID);
            if (objSetting != null)
            {
                var objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationFromID);
                if (objCheck == null)
                    objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
                objCheck = model.CAT_Location.FirstOrDefault(c => c.ID == objSetting.LocationToID);
                if (objCheck != null)
                    objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
            }
            else
            {
                objSetting = new DTOSYSSetting();
                objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
                objSetting.LocationFromID = model.CAT_Location.FirstOrDefault().ID;
            }
            return objSetting;
        }
        #endregion

        #region ControlTower

        public DTOResult MONControlTower_OrderList(string request, DateTime dfrom, DateTime dto, bool isRunning, bool isComplete)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {

                    int iMinStatus = -(int)SYSVarType.StatusOfDITOMasterTendered;
                    int iMaxStatus = -(int)SYSVarType.StatusOfDITOMasterReceived;
                    int iComplete = -(int)SYSVarType.DITOGroupProductStatusComplete;

                    if (!isRunning && !isComplete)
                        return result;
                    if (isRunning && !isComplete)
                    {
                        iMaxStatus = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                    }
                    if (!isRunning && isComplete)
                    {
                        iMinStatus = -(int)SYSVarType.StatusOfDITOMasterReceived;
                    }
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.VehicleID > 0 && c.ORD_GroupProduct.IsReturn != true
                        && c.OPS_DITOMaster.StatusOfDITOMasterID >= iMinStatus && c.OPS_DITOMaster.StatusOfDITOMasterID <= iMaxStatus
                        && c.OPS_DITOMaster.ETD.HasValue && c.OPS_DITOMaster.ETD >= dfrom
                        && c.OPS_DITOMaster.ETD <= dto && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                        && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID))).Select(c => new DTOMONControlTower_Order
                        {
                            ID = c.ID,
                            DITOMasterID = c.DITOMasterID,
                            DNCode = c.DNCode,
                            WarningCount = model.CAT_Trouble.Count(d => d.DITOMasterID == c.DITOMasterID),
                            DITOMasterCode = c.OPS_DITOMaster.Code,
                            VehicleID = c.OPS_DITOMaster.VehicleID,
                            VehicleNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ETD = c.OPS_DITOMaster.ETD,
                            ETA = c.OPS_DITOMaster.ETA,
                            ATA = c.OPS_DITOMaster.ATA,
                            ATD = c.OPS_DITOMaster.ATD,
                            StatusOfDITOMasterID = c.OPS_DITOMaster.StatusOfDITOMasterID,
                            StatusOfDITOMasterName = c.OPS_DITOMaster.SYS_Var.ValueOfVar,
                            DITOGroupProductStatusID = c.DITOGroupProductStatusID,
                            DITOGroupProductStatusName = c.SYS_Var.ValueOfVar,
                            LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                            LocationToName = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Location,
                            LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                            LocationToCountry = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Country.CountryName,
                            LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.ShortName,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            Description = c.ORD_GroupProduct.Description,
                            ColorClass = c.DITOGroupProductStatusID == iComplete ? "received" : "tendered",
                            IsDNComplete = c.DITOGroupProductStatusID == iComplete,
                            VendorCode = (c.OPS_DITOMaster.VendorOfVehicleID == null || c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID) ? "Xe nhà" : c.OPS_DITOMaster.CUS_Customer.Code,
                            VendorName = (c.OPS_DITOMaster.VendorOfVehicleID == null || c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID) ? "Xe nhà" : c.OPS_DITOMaster.CUS_Customer.CustomerName,
                            IsVehicleVendor = (c.OPS_DITOMaster.VendorOfVehicleID == null || c.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID) ? false : true,
                            DriverName = c.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOMaster.DriverTel1,
                            IsComplete = c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived
                        }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONControlTower_Order>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONMonitor_OrderLog MONControlTower_OrderLogList(int masterID)
        {
            try
            {
                int idito = -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster;
                int iapproved = -(int)SYSVarType.TroubleCostStatusApproved;
                int ireject = -(int)SYSVarType.TroubleCostStatusReject;
                var result = new DTOMONMonitor_OrderLog();
                result.LstTroubleLog = new List<DTOMONMonitor_TroubleLog>();
                using (var model = new DataEntities())
                {
                    var qr = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (qr != null)
                    {
                        result.ATA = qr.ATA == null ? DateTime.Now : qr.ATA;
                        result.ATD = qr.ATD == null ? DateTime.Now : qr.ATD;
                        result.RegNo = qr.CAT_Vehicle.RegNo;
                        result.GPSCode = qr.CAT_Vehicle.GPSCode;
                        result.IsComplete = qr.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived ? true : false;
                    }
                    result.LstTroubleLog = model.FLM_AssetTimeSheet.Where(c => c.TypeOfAssetTimeSheetID == -(int)SYSVarType.TypeOfAssetTimeSheetComplete && c.StatusOfAssetTimeSheetID == idito && c.ReferID == masterID).Select(c => new DTOMONMonitor_TroubleLog
                        {
                            LogType = "perform",
                            MasterID = masterID,
                            LogTime = c.DateToActual,
                            Status = string.Empty,
                            EstimateTime = c.DateTo,
                            TroubleID = -1,
                            CostStatus = -1
                        }).ToList();
                    foreach (var o in result.LstTroubleLog)
                    {
                        if (qr != null)
                        {
                            o.MasterCode = qr.Code;
                            o.RegNo = qr.CAT_Vehicle.RegNo;

                            if (o.LogTime.Value <= o.EstimateTime)
                                o.Status = "đã giao hàng thành công";
                            else
                                o.Status = "đã giao hàng trễ";
                        }
                    }
                    var qrtrouble = model.CAT_Trouble.Where(c => c.DITOMasterID.HasValue && c.DITOMasterID.Value == masterID).Select(c => new DTOMONMonitor_TroubleLog
                    {
                        LogType = "trouble",
                        TroubleID = c.ID,
                        MasterID = masterID,
                        LogTime = c.CreatedDate,
                        Status = c.CAT_GroupOfTrouble.Name,
                        MasterCode = c.OPS_DITOMaster.Code,
                        RegNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                        CostStatus = c.TroubleCostStatusID == iapproved ? 1 : c.TroubleCostStatusID == ireject ? 2 : 0,
                        Cost = c.Cost
                    }).ToList();

                    var qrLocation = qr.OPS_DITOLocation.Where(c => c.DateCome.HasValue).Select(c => new DTOMONMonitor_TroubleLog
                    {
                        TroubleID = -1,
                        LogTime = c.DateCome,
                        Status = c.CAT_Location.Location,
                        LogType = "location",
                    }).ToList();
                    result.LstTroubleLog.AddRange(qrLocation);
                    result.LstTroubleLog.AddRange(qrtrouble);
                    result.LstTroubleLog = result.LstTroubleLog.OrderByDescending(c => c.LogTime).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMAPVehicle MONControlTower_VehicleGPS(int masterID)
        {
            try
            {
                DTOMAPVehicle result = new DTOMAPVehicle();
                using (var model = new DataEntities())
                {
                    var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (master != null && master.VehicleID.HasValue)
                    {
                        result = model.CAT_Vehicle.Where(c => c.ID == master.VehicleID).Select(c => new DTOMAPVehicle
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            GPSCode = c.GPSCode,
                            GroupName = c.CAT_GroupOfVehicle.GroupName,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            DriverName = master.DriverName1,
                            TelNo = master.DriverTel1
                        }).FirstOrDefault();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONMonitor_OPSSummary MONControlTower_FilterByRoute(int routeID, DateTime dfrom, DateTime dto)
        {
            try
            {

                int iDelivery = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                int iReceived = -(int)SYSVarType.StatusOfDITOMasterReceived;

                dfrom = dfrom.Date;
                dto = dto.Date.AddDays(1);
                var result = new DTOMONMonitor_OPSSummary();
                result.TotalCBM = 0;
                result.TotalTon = 0;
                result.TotalTrip = 0;
                result.ReceivedCBM = 0;
                result.ReceivedTon = 0;
                result.ReceivedTrip = 0;
                result.DeliveryCBM = 0;
                result.DeliveryTon = 0;
                result.DeliveryTrip = 0;
                using (var model = new DataEntities())
                {
                    var qrGOP = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.VehicleID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= iDelivery && c.OPS_DITOMaster.StatusOfDITOMasterID <= iReceived && c.ORD_GroupProduct.IsReturn != true
                        && c.OPS_DITOMaster.ETD.HasValue && c.OPS_DITOMaster.ETA.HasValue && c.ORD_GroupProduct.CUS_Routing.RoutingID == routeID
                        && c.OPS_DITOMaster.ETD >= dfrom && c.OPS_DITOMaster.ETD < dto
                        && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                        && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            c.ORD_GroupProduct.Ton,
                            c.ORD_GroupProduct.CBM,
                            c.OPS_DITOMaster.StatusOfDITOMasterID,
                            c.DITOMasterID,

                        }).ToList();

                    if (qrGOP != null)
                    {
                        result.TotalCBM = qrGOP.Sum(c => c.CBM);
                        result.TotalTon = qrGOP.Sum(c => c.Ton);
                        result.TotalTrip = qrGOP.Select(c => c.DITOMasterID).Distinct().Count();

                        result.DeliveryCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Sum(c => c.CBM);
                        result.DeliveryTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Sum(c => c.Ton);
                        result.DeliveryTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Select(c => c.DITOMasterID).Distinct().Count();

                        result.ReceivedCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Sum(c => c.CBM);
                        result.ReceivedTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Sum(c => c.Ton);
                        result.ReceivedTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Select(c => c.DITOMasterID).Distinct().Count();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONMonitor_OPSSummary> MONControlTower_FilterByArea(int areaID, DateTime dfrom, DateTime dto)
        {
            try
            {

                int iDelivery = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                int iReceived = -(int)SYSVarType.StatusOfDITOMasterReceived;

                dfrom = dfrom.Date;
                dto = dto.Date.AddDays(1);
                var result = new List<DTOMONMonitor_OPSSummary>();
                var rsIn = new DTOMONMonitor_OPSSummary();
                rsIn.TotalCBM = 0;
                rsIn.TotalTon = 0;
                rsIn.TotalTrip = 0;
                rsIn.ReceivedCBM = 0;
                rsIn.ReceivedTon = 0;
                rsIn.ReceivedTrip = 0;
                rsIn.DeliveryCBM = 0;
                rsIn.DeliveryTon = 0;
                rsIn.DeliveryTrip = 0;

                var rsOut = new DTOMONMonitor_OPSSummary();
                rsOut.TotalCBM = 0;
                rsOut.TotalTon = 0;
                rsOut.TotalTrip = 0;
                rsOut.ReceivedCBM = 0;
                rsOut.ReceivedTon = 0;
                rsOut.ReceivedTrip = 0;
                rsOut.DeliveryCBM = 0;
                rsOut.DeliveryTon = 0;
                rsOut.DeliveryTrip = 0;

                using (var model = new DataEntities())
                {
                    var qrGOP = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_DITOMaster.VehicleID > 0 && c.OPS_DITOMaster.StatusOfDITOMasterID >= iDelivery && c.OPS_DITOMaster.StatusOfDITOMasterID <= iReceived && c.ORD_GroupProduct.IsReturn != true
                        && c.OPS_DITOMaster.ETD.HasValue && c.OPS_DITOMaster.ETA.HasValue
                        && (c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaFromID == areaID || c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID == areaID)
                        && c.OPS_DITOMaster.ETD >= dfrom && c.OPS_DITOMaster.ETD < dto
                        && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                        && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new
                        {
                            c.ORD_GroupProduct.Ton,
                            c.ORD_GroupProduct.CBM,
                            c.OPS_DITOMaster.StatusOfDITOMasterID,
                            c.DITOMasterID,
                            c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaToID,
                            c.ORD_GroupProduct.CUS_Routing.CAT_Routing.RoutingAreaFromID
                        }).ToList();

                    if (qrGOP != null)
                    {
                        //in
                        rsIn.TotalCBM = qrGOP.Where(c => c.RoutingAreaToID == areaID).Sum(c => c.CBM);
                        rsIn.TotalTon = qrGOP.Where(c => c.RoutingAreaToID == areaID).Sum(c => c.Ton);
                        rsIn.TotalTrip = qrGOP.Where(c => c.RoutingAreaToID == areaID).Select(c => c.DITOMasterID).Distinct().Count();

                        rsIn.DeliveryCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaToID == areaID).Sum(c => c.CBM);
                        rsIn.DeliveryTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaToID == areaID).Sum(c => c.Ton);
                        rsIn.DeliveryTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaToID == areaID).Select(c => c.DITOMasterID).Distinct().Count();

                        rsIn.ReceivedCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaToID == areaID).Sum(c => c.CBM);
                        rsIn.ReceivedTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaToID == areaID).Sum(c => c.Ton);
                        rsIn.ReceivedTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaToID == areaID).Select(c => c.DITOMasterID).Distinct().Count();

                        //out
                        rsOut.TotalCBM = qrGOP.Where(c => c.RoutingAreaFromID == areaID).Sum(c => c.CBM);
                        rsOut.TotalTon = qrGOP.Where(c => c.RoutingAreaFromID == areaID).Sum(c => c.Ton);
                        rsOut.TotalTrip = qrGOP.Where(c => c.RoutingAreaFromID == areaID).Select(c => c.DITOMasterID).Distinct().Count();

                        rsOut.DeliveryCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaFromID == areaID).Sum(c => c.CBM);
                        rsOut.DeliveryTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaFromID == areaID).Sum(c => c.Ton);
                        rsOut.DeliveryTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery && c.RoutingAreaFromID == areaID).Select(c => c.DITOMasterID).Distinct().Count();

                        rsOut.ReceivedCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaFromID == areaID).Sum(c => c.CBM);
                        rsOut.ReceivedTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaFromID == areaID).Sum(c => c.Ton);
                        rsOut.ReceivedTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived && c.RoutingAreaFromID == areaID).Select(c => c.DITOMasterID).Distinct().Count();
                    }
                }

                result.Add(rsIn);
                result.Add(rsOut);
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMON_MainFilter MONControlTower_MainVehicleFilter(DTOMONControlTower_ObjectFilter item)
        {
            try
            {
                DTOMON_MainFilter result = new DTOMON_MainFilter();
                result.lstVehicle = new List<DTOMON_Vehicle>();
                result.Summary = new DTOMONMonitor_OPSSummary();
                result.lstLocation = new List<DTOOPSDITOLocation>();
                using (var model = new DataEntities())
                {
                    int iTendered = -(int)SYSVarType.StatusOfDITOMasterTendered;
                    int iDelivery = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                    int iReceived = -(int)SYSVarType.StatusOfDITOMasterReceived;
                    item.lstVendorID.Add(Account.SYSCustomerID);
                    var qrVehicle = model.CUS_Vehicle.Where(c => c.ID > 1 && (item.lstVendorID.Contains(c.CustomerID) || item.lstVendorID.Count <= 1) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => c.ID).Distinct().ToList();


                    var lstMaster = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID
                    && c.OPS_DITOMaster.VehicleID > 1 && qrVehicle.Contains(c.OPS_DITOMaster.VehicleID.Value) && c.ORD_GroupProduct.IsReturn != true
                    && c.OPS_DITOMaster.StatusOfDITOMasterID >= iTendered && c.OPS_DITOMaster.StatusOfDITOMasterID <= iReceived
                    && (c.ORD_GroupProduct.CUS_Location.CAT_Location.ProvinceID == item.FromProvinceID || item.FromProvinceID < 1)
                    && (c.ORD_GroupProduct.CUS_Location.CAT_Location.DistrictID == item.FromDistrictID || item.FromDistrictID < 1)
                    && (c.ORD_GroupProduct.CUS_Location1.CAT_Location.ProvinceID == item.ToProvinceID || item.ToProvinceID < 1)
                    && (c.ORD_GroupProduct.CUS_Location1.CAT_Location.DistrictID == item.ToDistrictID || item.ToDistrictID < 1)
                        //&& c.OPS_DITOMaster.ETD.HasValue && c.OPS_DITOMaster.ETA.HasValue && c.OPS_DITOMaster.ETD.Value >= dFrom && c.OPS_DITOMaster.ETA.Value <= dTo
                    && Account.ListCustomerID.Contains(c.ORD_GroupProduct.ORD_Order.CustomerID)).Select(c => new { c.DITOMasterID, c.OPS_DITOMaster.VehicleID, c.OPS_DITOMaster.StatusOfDITOMasterID }).Distinct().ToList();


                    var lstVehicleInUse = lstMaster.Select(c => c.VehicleID);
                    var lstVID = new List<int>();
                    var lstMID = new List<int>();

                    #region Loc theo xe
                    if (item.IsVehicleFree)
                    {

                        var lstXeID = qrVehicle.Where(c => !lstVehicleInUse.Contains(c)).ToList();
                        result.lstVehicle.AddRange(model.CAT_Vehicle.Where(c => lstXeID.Contains(c.ID)).Select(c => new DTOMON_Vehicle
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            Status = 0

                        }).ToList());
                    }
                    if (item.IsVehiclePlan)
                    {
                        lstMID.AddRange(lstMaster.Where(c => c.StatusOfDITOMasterID == iTendered).Select(c => c.DITOMasterID.Value).ToList());

                        var lstXeID = lstMaster.Where(c => c.StatusOfDITOMasterID == iTendered).Select(c => c.VehicleID.Value).ToList();
                        result.lstVehicle.AddRange(model.CAT_Vehicle.Where(c => lstXeID.Contains(c.ID)).Select(c => new DTOMON_Vehicle
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            Status = 1

                        }).ToList());
                    }
                    if (item.IsVehicleGoing)
                    {
                        lstMID.AddRange(lstMaster.Where(c => c.StatusOfDITOMasterID == iDelivery).Select(c => c.DITOMasterID.Value).ToList());

                        var lstXeID = lstMaster.Where(c => c.StatusOfDITOMasterID == iDelivery).Select(c => c.VehicleID.Value).ToList();
                        result.lstVehicle.AddRange(model.CAT_Vehicle.Where(c => lstXeID.Contains(c.ID)).Select(c => new DTOMON_Vehicle
                        {
                            ID = c.ID,
                            RegNo = c.RegNo,
                            Lat = c.Lat,
                            Lng = c.Lng,
                            Status = 2

                        }).ToList());
                    }

                    #endregion

                    #region  Thong tin summary Ton, CBM, Trip


                    var qrGOP = model.OPS_DITOGroupProduct.Where(c => lstMID.Contains(c.DITOMasterID.Value)).Select(c => new
                        {
                            c.Ton,
                            c.CBM,
                            c.OPS_DITOMaster.StatusOfDITOMasterID,
                            c.DITOMasterID,
                        }).ToList();

                    if (qrGOP != null)
                    {
                        result.Summary.TotalCBM = qrGOP.Sum(c => c.CBM);
                        result.Summary.TotalTon = qrGOP.Sum(c => c.Ton);
                        result.Summary.TotalTrip = qrGOP.Select(c => c.DITOMasterID).Distinct().Count();

                        result.Summary.TenderCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iTendered).Sum(c => c.CBM);
                        result.Summary.TenderTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iTendered).Sum(c => c.Ton);
                        result.Summary.TenderTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iTendered).Select(c => c.DITOMasterID).Distinct().Count();

                        result.Summary.DeliveryCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Sum(c => c.CBM);
                        result.Summary.DeliveryTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Sum(c => c.Ton);
                        result.Summary.DeliveryTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iDelivery).Select(c => c.DITOMasterID).Distinct().Count();

                        result.Summary.ReceivedCBM = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Sum(c => c.CBM);
                        result.Summary.ReceivedTon = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Sum(c => c.Ton);
                        result.Summary.ReceivedTrip = qrGOP.Where(c => c.StatusOfDITOMasterID == iReceived).Select(c => c.DITOMasterID).Distinct().Count();
                    }

                    #endregion

                    #region  Thong tin Location
                    foreach (var master in lstMaster)
                    {
                        result.lstLocation.AddRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == master.DITOMasterID && c.CAT_Location.Lat.HasValue && c.CAT_Location.Lng.HasValue && c.CAT_Location.Lat != 0 & c.CAT_Location.Lng != 0).OrderBy(c => c.SortOrder).Select(c => new DTOOPSDITOLocation
                        {
                            ID = c.ID,
                            DITOMasterID = c.DITOMasterID,
                            LocationID = c.LocationID,
                            Comment = c.OPS_DITOMaster.Code,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                            LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                            DITOLocationStatusID = c.DITOLocationStatusID,
                            DITOLocationStatusName = c.SYS_Var.ValueOfVar,
                            DateCome = c.DateCome,
                            DateLeave = c.DateLeave,
                            LoadingStart = c.LoadingStart,
                            LoadingEnd = c.LoadingEnd,
                            SortOrder = c.SortOrder,
                            SortOrderReal = c.SortOrderReal,
                            TypeOfTOLocationName = c.SYS_Var1.ValueOfVar,
                            LocationCode = c.CAT_Location.Code,
                            //AssitName = c.OPS_DITOMaster.AssistantName1,
                            DriverName = c.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOMaster.DriverTel1,
                            MasterCode = c.OPS_DITOMaster.Code,
                            RegNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,

                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng
                        }).ToList());
                    }

                    #endregion

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSDITOLocation> MONControlTower_GetLocationByMaster(int masterID)
        {
            try
            {
                var result = new List<DTOOPSDITOLocation>();
                int iEmpty = -(int)SYSVarType.TypeOfTOLocationEmpty;
                int iDelivery = -(int)SYSVarType.TypeOfTOLocationDelivery;
                int iGet = -(int)SYSVarType.TypeOfTOLocationGet;
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID).OrderBy(c => c.SortOrder).Select(c => new DTOOPSDITOLocation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationName = c.CAT_Location.Code,
                        LocationAddress = c.CAT_Location.Address,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        DITOLocationStatusID = c.DITOLocationStatusID,
                        DITOLocationStatusName = c.SYS_Var.ValueOfVar,
                        DateCome = c.DateCome,
                        DateLeave = c.DateLeave,
                        LoadingStart = c.LoadingStart,
                        LoadingEnd = c.LoadingEnd,
                        SortOrder = c.SortOrder,
                        SortOrderReal = c.SortOrderReal,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        TypeOfTOLocationName = c.SYS_Var1.ValueOfVar,
                        LocationCode = c.CAT_Location.Code,
                        //AssitName = c.OPS_DITOMaster.AssistantName1,
                        DriverName = c.OPS_DITOMaster.DriverName1,
                        DriverTel = c.OPS_DITOMaster.DriverTel1,
                        MasterCode = c.OPS_DITOMaster.Code,
                        RegNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                        LocationType = c.TypeOfTOLocationID == iEmpty ? "empty" : c.TypeOfTOLocationID == iGet ? "get" : c.TypeOfTOLocationID == iDelivery ? "delivery" : "get",
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSRouteProblem> MONControlTower_ProblemList()
        {
            try
            {
                List<DTOOPSRouteProblem> result = new List<DTOOPSRouteProblem>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_RouteProblem.Where(c => c.DateEnd >= DateTime.Now).Select(c => new DTOOPSRouteProblem
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        Lat = c.Lat,
                        Lng = c.Lng,
                        VehicleID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        DateStart = c.DateStart,
                        DriverName = c.FLM_Driver.CAT_Driver.FirstName + " " + c.FLM_Driver.CAT_Driver.LastName,
                        TypeOfRouteProblemID = c.TypeOfRouteProblemID,
                        TypeOfRouteProblemName = c.OPS_TypeOfRouteProblem.TypeName,
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DIMonitorMaster_DITOLocationList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID).Select(c => new DTOOPSDITOLocation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        DITOLocationStatusID = c.DITOLocationStatusID,
                        DITOLocationStatusName = c.SYS_Var.ValueOfVar,
                        DateCome = c.DateCome,
                        DateLeave = c.DateLeave,
                        LoadingStart = c.LoadingStart,
                        LoadingEnd = c.LoadingEnd,
                        SortOrder = c.SortOrder,
                        SortOrderReal = c.SortOrderReal,
                        TypeOfTOLocationName = c.SYS_Var1.ValueOfVar,
                        Temp = c.Temp,

                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDITOLocation>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONOPSTOMaster DIMonitor_VehicleTimeGet(int id)
        {
            try
            {
                var result = new DTOMONOPSTOMaster();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOMaster.Where(c => c.ID == id).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        DateFrom = c.ETD,
                        DateTo = c.ETA,
                        StatusID = c.StatusOfDITOMasterID,
                        VendorID = c.VendorOfVehicleID,
                        VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
                        VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                        VendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverName3 = c.DriverID3.HasValue ? c.FLM_Driver2.CAT_Driver.FirstName + " " + c.FLM_Driver2.CAT_Driver.LastName : string.Empty,
                        DriverName4 = c.DriverID4.HasValue ? c.FLM_Driver3.CAT_Driver.FirstName + " " + c.FLM_Driver3.CAT_Driver.LastName : string.Empty,
                        DriverName5 = c.DriverID5.HasValue ? c.FLM_Driver4.CAT_Driver.FirstName + " " + c.FLM_Driver4.CAT_Driver.LastName : string.Empty,
                        DriverTel1 = c.DriverTel1,
                        DriverTel2 = c.DriverTel2,
                        DriverCard1 = c.DriverCard1,
                        DriverCard2 = c.DriverCard2,
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverID4 = c.TypeOfDriverID4,
                        TypeOfDriverID5 = c.TypeOfDriverID5,
                        TypeOfDriverName1 = c.SYS_Var5.ValueOfVar,
                        TypeOfDriverName2 = c.SYS_Var6.ValueOfVar,
                        TypeOfDriverName3 = c.SYS_Var7.ValueOfVar,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        Note1 = c.Note1,
                        Note2 = c.Note2,
                        IsSpotRate = c.IsSpotRate,
                        PriceVendor = c.PriceVendor,
                        ExTotalJoin = c.ExTotalJoin,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExIsOverNight = c.ExIsOverNight,
                        ATA = c.ATA,
                        ATD = c.ATD,
                        ListDriverID = new List<int?>() { c.DriverID1, c.DriverID2, c.DriverID3, c.DriverID4, c.DriverID5 },
                        ListTypeOfDriverID = new List<int?>() { c.TypeOfDriverID1, c.TypeOfDriverID2, c.TypeOfDriverID3, c.TypeOfDriverID4, c.TypeOfDriverID5 }
                    }).FirstOrDefault();

                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.Code = obj.Code;
                        result.ETD = obj.ETD.Value.ToString("dd/MM/yyyy hh:mm");
                        result.ETA = obj.ETA.Value.ToString("dd/MM/yyyy hh:mm");
                        result.DateFrom = obj.DateFrom;
                        result.DateTo = obj.DateTo;
                        result.VendorID = obj.VendorID;
                        result.VehicleID = obj.VehicleID;
                        result.VehicleNo = obj.VehicleNo;
                        result.VendorName = obj.VendorName;
                        result.KMEnd = obj.KMEnd;
                        result.KMStart = obj.KMStart;
                        result.Note1 = obj.Note1;
                        result.Note2 = obj.Note2;
                        result.IsSpotRate = obj.IsSpotRate;
                        result.PriceVendor = obj.PriceVendor;
                        result.ExTotalJoin = obj.ExTotalJoin;
                        result.ExTotalDayOut = obj.ExTotalDayOut;
                        result.ExIsOverWeight = obj.ExIsOverWeight;
                        result.ExIsOverNight = obj.ExIsOverNight;
                        result.IsVehicleVendor = result.VendorID > 0 && result.VendorID != Account.SYSCustomerID;

                        result.ATA = obj.ATA;
                        result.ATD = obj.ATD;

                        result.Driver1 = new DTOMONDriver();
                        result.Driver2 = new DTOMONDriver();
                        result.Driver3 = new DTOMONDriver();

                        result.Driver1.Name = obj.DriverName1;
                        result.Driver2.Name = obj.DriverName2;
                        result.Driver3.Name = obj.DriverName3;

                        result.Driver1.Card = obj.DriverCard1;
                        result.Driver2.Card = obj.DriverCard2;

                        result.Driver1.Tel = obj.DriverTel1;
                        result.Driver2.Tel = obj.DriverTel2;

                        result.Driver1.Role = obj.TypeOfDriverName1;
                        result.Driver2.Role = obj.TypeOfDriverName2;
                        result.Driver3.Role = obj.TypeOfDriverName3;

                        result.Driver1.TypeOfDriverID = obj.TypeOfDriverID1;
                        result.Driver2.TypeOfDriverID = obj.TypeOfDriverID2;
                        result.Driver3.TypeOfDriverID = obj.TypeOfDriverID3;

                        if (!result.VendorID.HasValue || result.VendorID < 1 || result.VehicleID == Account.SYSCustomerID)
                        {
                            result.Driver1.ID = obj.DriverID1 > 0 ? obj.DriverID1.Value : -1;
                            result.Driver2.ID = obj.DriverID2 > 0 ? obj.DriverID2.Value : -1;
                            result.Driver3.ID = obj.DriverID3 > 0 ? obj.DriverID3.Value : -1;
                        }

                        result.ListDriver = new List<DTOMONDriver>();
                        for (int d = 0; d < obj.ListDriverID.Count; d++)
                        {
                            var driverid = obj.ListDriverID[d];
                            if (driverid > 0)
                            {
                                var qrdriver = model.CAT_Driver.FirstOrDefault(c => c.ID == driverid);
                                result.ListDriver.Add(new DTOMONDriver
                                {
                                    ID = qrdriver.ID,
                                    Name = qrdriver.LastName + " " + qrdriver.FirstName,
                                    TypeOfDriverID = obj.ListTypeOfDriverID[d],

                                });
                            }
                        }

                        result.IsComplete = obj.StatusID >= -(int)SYSVarType.StatusOfDITOMasterReceived;
                        result.IsEditable = obj.StatusID >= -(int)SYSVarType.StatusOfDITOMasterTendered;
                        result.IsTransport = obj.StatusID > -(int)SYSVarType.StatusOfDITOMasterTendered && obj.StatusID < -(int)SYSVarType.StatusOfDITOMasterReceived;

                        result.ListRoute = new List<DTOMONRouting>();

                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Trouble CP Phat sinh

        public DTOResult DIMonitorTrouble_List(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI && c.DITOMasterID == masterID
                        && (locationID > 0 ? (c.OPS_DITO.CAT_Routing.LocationFromID == locationID || c.OPS_DITO.CAT_Routing.LocationToID == locationID) : true)).Select(c => new DTOCATTrouble
                        {
                            ID = c.ID,
                            GroupOfTroubleID = c.GroupOfTroubleID,
                            GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                            DITOID = c.DITOID,
                            DITOMasterID = c.DITOMasterID,
                            Description = c.Description,
                            AttachmentFile = c.AttachmentFile,
                            Cost = c.Cost,
                            CostOfCustomer = c.CostOfCustomer,
                            CostOfVendor = c.CostOfVendor,
                            DriverID = c.DriverID,
                            DriverName = c.DriverID > 0 ? c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName : string.Empty,
                            TroubleCostStatusID = c.TroubleCostStatusID,
                            TroubleCostStatusName = c.SYS_Var.ValueOfVar == null ? string.Empty : c.SYS_Var.ValueOfVar,
                            RoutingName = c.DITOID > 0 ? c.OPS_DITO.CAT_Routing.CAT_Location.Location + " - " + c.OPS_DITO.CAT_Routing.CAT_Location1.Location : string.Empty,
                        }).ToList();

                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(obj.Setting);

                    foreach (var item in lst)
                    {
                        var o = query.FirstOrDefault(c => c.GroupOfTroubleID == item.TroubleID);
                        if (o == null)
                        {
                            if (model.CAT_GroupOfTrouble.Count(c => c.ID == item.TroubleID && c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI) > 0)
                            {
                                query.Add(new DTOCATTrouble
                                {
                                    ID = 0,
                                    GroupOfTroubleID = item.TroubleID,
                                    GroupOfTroubleName = item.Name,
                                    TroubleCostStatusName = string.Empty,
                                    Description = string.Empty,
                                    AttachmentFile = string.Empty,
                                    Cost = item.CostValue,
                                });
                            }
                        }
                    }

                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DIMonitorTrouble_NotinList(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {


                    var query = model.CAT_Trouble.Where(c => c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI && c.DITOMasterID == masterID
                        && (locationID > 0 ? (c.OPS_DITO.CAT_Routing.LocationFromID == locationID || c.OPS_DITO.CAT_Routing.LocationToID == locationID) : true)).Select(c => new DTOCATTrouble
                        {
                            ID = c.ID,
                            GroupOfTroubleID = c.GroupOfTroubleID,
                            GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                            DITOID = c.DITOID,
                            DITOMasterID = c.DITOMasterID,
                            Description = c.Description,
                            AttachmentFile = c.AttachmentFile,
                            Cost = c.Cost,
                            RoutingName = c.DITOID > 0 ? c.OPS_DITO.CAT_Routing.CAT_Location.Location + " - " + c.OPS_DITO.CAT_Routing.CAT_Location1.Location : string.Empty,
                        }).ToList();

                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(obj.Setting);

                    foreach (var item in lst)
                    {
                        var o = query.FirstOrDefault(c => c.GroupOfTroubleID == item.TroubleID);
                        if (o == null)
                        {
                            query.Add(new DTOCATTrouble
                            {
                                ID = 0,
                                GroupOfTroubleID = item.TroubleID,
                                GroupOfTroubleName = item.Name,
                                Description = string.Empty,
                                AttachmentFile = string.Empty,
                                Cost = item.CostValue,
                            });
                        }
                    }
                    var lstID = query.Select(c => c.GroupOfTroubleID).ToList();
                    var lstnotin = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI && !lstID.Contains(c.ID)).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();

                    result.Total = lstnotin.Count;
                    result.Data = lstnotin as IEnumerable<DTOCATSYSCustomerTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCATTrouble DIMonitorTrouble_Get(int id)
        {
            try
            {
                DTOCATTrouble result = new DTOCATTrouble();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Trouble.Where(c => c.ID == id).Select(c => new DTOCATTrouble
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        DITOID = c.DITOID,
                        DITOMasterID = c.DITOMasterID,
                        Description = c.Description,
                        AttachmentFile = c.AttachmentFile,
                        Cost = c.Cost,
                        TroubleCostStatusID = c.TroubleCostStatusID,
                        TroubleCostStatusName = c.SYS_Var.ValueOfVar,
                        CostOfCustomer = c.CostOfCustomer,
                        CostOfVendor = c.CostOfVendor,
                        RoutingName = c.DITOID > 0 ? c.OPS_DITO.CAT_Routing.CAT_Location.Location + " - " + c.OPS_DITO.CAT_Routing.CAT_Location1.Location : string.Empty,
                    }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorTrouble_SaveAll(List<DTOCATTrouble> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_Trouble();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
                            model.CAT_Trouble.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.DITOID = item.DITOID > 0 ? item.DITOID : null;
                        obj.DITOMasterID = item.DITOMasterID;
                        obj.Description = item.Description;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.TroubleCostStatusID = item.TroubleCostStatusID == 0 ? -(int)SYSVarType.TroubleCostStatusApproved : item.TroubleCostStatusID;
                        obj.CostOfCustomer = item.CostOfCustomer;
                        obj.CostOfVendor = item.CostOfVendor;
                        obj.DriverID = item.DriverID;
                        model.SaveChanges();
                        item.ID = obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int DIMonitorTrouble_Save(DTOCATTrouble item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                        model.CAT_Trouble.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupOfTroubleID = item.GroupOfTroubleID;
                    obj.DITOID = item.DITOID > 0 ? item.DITOID : null;
                    obj.DITOMasterID = item.DITOMasterID;
                    obj.Description = item.Description;
                    obj.AttachmentFile = item.AttachmentFile;
                    obj.Cost = item.Cost;
                    obj.DriverID = item.DriverID;
                    obj.TroubleCostStatusID = item.TroubleCostStatusID == 0 ? -(int)SYSVarType.TroubleCostStatusOpen : item.TroubleCostStatusID;
                    obj.CostOfCustomer = item.CostOfCustomer;
                    obj.CostOfVendor = item.CostOfVendor;
                    model.SaveChanges();
                    item.ID = obj.ID;
                }
                return item.ID;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorTrouble_SaveList(List<DTOCATSYSCustomerTrouble> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Trouble.Add(obj);

                        obj.GroupOfTroubleID = item.TroubleID;
                        obj.DITOID = null;
                        obj.DITOMasterID = masterID;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                        obj.Description = string.Empty;
                        obj.AttachmentFile = string.Empty;
                        obj.Cost = item.CostValue;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorTrouble_Delete(DTOCATTrouble item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Trouble.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_ApprovedTrouble(int troubleId)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.CAT_Trouble.FirstOrDefault(c => c.ID == troubleId);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_RejectTrouble(int troubleId)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.CAT_Trouble.FirstOrDefault(c => c.ID == troubleId);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusReject;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Update master

        public void DIMonitorMaster_Update(DTOMONOPSTOMaster item, List<DTOMONOPSTODetail> lstDetail)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (objMaster != null)
                    {
                        //Lưu Thông Tin Xe + Tài Xế
                        //if (objMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterReceived)
                        //throw FaultHelper.BusinessFault(null, null, "Chuyến đã hoàn tất, không thể thay đổi!");

                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == item.VehicleNo);

                        if (objVehicle == null && (objMaster.VendorOfVehicleID == null || objMaster.VendorOfVehicleID == Account.SYSCustomerID))
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy xe!"); // chỉ được thêm mới cho xe ngoài (do xe nhà liên quan đến khấu hao)
                        }

                        if (objVehicle == null && objMaster.VendorOfVehicleID.HasValue && objMaster.VendorOfVehicleID != Account.SYSCustomerID)
                            objVehicle = CATVehicle_Create(model, item.VehicleNo, objMaster.VendorOfVehicleID, -(int)SYSVarType.TypeOfVehicleTruck, 5);

                        objMaster.ModifiedBy = Account.UserName;
                        objMaster.ModifiedDate = DateTime.Now;

                        objMaster.VehicleID = objVehicle.ID;

                        objMaster.DriverName1 = !string.IsNullOrEmpty(item.Driver1.Name) ? item.Driver1.Name.Trim() : string.Empty;
                        objMaster.DriverName2 = !string.IsNullOrEmpty(item.Driver2.Name) ? item.Driver2.Name.Trim() : string.Empty;

                        objMaster.DriverTel1 = !string.IsNullOrEmpty(item.Driver1.Tel) ? item.Driver1.Tel.Trim() : string.Empty;
                        objMaster.DriverTel2 = !string.IsNullOrEmpty(item.Driver2.Tel) ? item.Driver2.Tel.Trim() : string.Empty;

                        objMaster.DriverCard1 = !string.IsNullOrEmpty(item.Driver1.Card) ? item.Driver1.Card.Trim() : string.Empty;
                        objMaster.DriverCard2 = !string.IsNullOrEmpty(item.Driver2.Card) ? item.Driver2.Card.Trim() : string.Empty;

                        objMaster.KMStart = item.KMStart;
                        objMaster.KMEnd = item.KMEnd;
                        objMaster.Code = item.Code;
                        objMaster.Note1 = item.Note1;
                        objMaster.Note2 = item.Note2;
                        objMaster.ExIsOverNight = item.ExIsOverNight;
                        objMaster.ExIsOverWeight = item.ExIsOverWeight;
                        objMaster.ExTotalDayOut = item.ExTotalDayOut;
                        objMaster.ExTotalJoin = item.ExTotalJoin;
                        objMaster.IsSpotRate = item.IsSpotRate;
                        objMaster.PriceVendor = item.PriceVendor;

                        var timeSheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ReferID == item.ID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        if (timeSheet != null && item.ATD.HasValue && item.ATA.HasValue)
                        {
                            timeSheet.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetComplete;
                            timeSheet.ModifiedDate = DateTime.Now;
                            timeSheet.ModifiedBy = Account.UserName;
                            timeSheet.DateFromActual = item.ATD.Value;
                            timeSheet.DateToActual = item.ATA.Value;
                        }

                        if (objMaster.ATA != item.ATA || objMaster.ATD != item.ATD)
                        {
                            objMaster.ATA = item.ATA;
                            objMaster.ATD = item.ATD;

                            var qrDN = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == item.ID).ToList();
                            foreach (var dn in qrDN)
                            {
                                dn.ModifiedDate = DateTime.Now;
                                dn.ModifiedBy = Account.UserName;
                                dn.DateFromCome = item.ATD;
                                dn.DateToCome = item.ATA;
                            }
                        }


                        if (objMaster.VendorOfVehicleID == null || objMaster.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            if (item.Driver1.ID > 0)
                                objMaster.DriverID1 = item.Driver1.ID;
                            else
                                objMaster.DriverID1 = null;
                            if (item.Driver2.ID > 0)
                                objMaster.DriverID2 = item.Driver2.ID;
                            else
                                objMaster.DriverID2 = null;
                            if (item.Driver3.ID > 0)
                                objMaster.DriverID3 = item.Driver3.ID;
                            else
                                objMaster.DriverID3 = null;

                            if (item.Driver1.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID1 = item.Driver1.TypeOfDriverID;
                            if (item.Driver2.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID2 = item.Driver2.TypeOfDriverID;
                            if (item.Driver3.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID3 = item.Driver3.TypeOfDriverID;
                        }
                        else
                        {
                            objMaster.DriverID1 = null;
                            objMaster.DriverID2 = null;
                            objMaster.DriverID3 = null;
                        }

                        foreach (var obj in lstDetail)
                        {
                            var objGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == obj.ID);
                            if (objGroup != null)
                            {
                                var cusProduct = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == objGroup.OrderGroupProductID);
                                if (cusProduct != null)
                                {
                                    var packageID = objGroup.ORD_GroupProduct.CAT_Packing.TypeOfPackageID;
                                    if (packageID == -(int)SYSVarType.TypeOfPackingGOPTon && objGroup.TonTranfer != obj.TonTranfer)
                                    {
                                        objGroup.TonTranfer = obj.TonTranfer;
                                        //Quy đổi
                                        if (cusProduct.ExchangeCBM > 0)
                                        {
                                            objGroup.CBMTranfer = Math.Round(objGroup.TonTranfer * cusProduct.ExchangeCBM.Value, 3);
                                            objGroup.CBMBBGN = objGroup.CBMTranfer;
                                        }
                                    }
                                    else if (packageID == -(int)SYSVarType.TypeOfPackingGOPCBM && objGroup.CBMTranfer != obj.CBMTranfer)
                                    {
                                        objGroup.CBMTranfer = obj.CBMTranfer;
                                        //Quy đổi
                                        if (cusProduct.ExchangeTon > 0)
                                        {
                                            objGroup.TonTranfer = Math.Round(objGroup.CBMTranfer * cusProduct.ExchangeTon.Value, 3);
                                            objGroup.TonBBGN = objGroup.TonTranfer;
                                        }
                                    }
                                    else if (packageID == -(int)SYSVarType.TypeOfPackingGOPTU && objGroup.QuantityTranfer != obj.QuantityTranfer)
                                    {
                                        objGroup.QuantityTranfer = obj.QuantityTranfer;
                                        //Quy đổi
                                        if (cusProduct.ExchangeCBM >= 0)
                                        {
                                            objGroup.CBMTranfer = Math.Round(objGroup.QuantityTranfer * cusProduct.ExchangeCBM.Value, 3);
                                            objGroup.CBMBBGN = objGroup.CBMTranfer;
                                        }

                                        if (cusProduct.ExchangeTon >= 0)
                                        {
                                            objGroup.TonTranfer = Math.Round(objGroup.QuantityTranfer * cusProduct.ExchangeTon.Value, 3);
                                            objGroup.TonBBGN = objGroup.TonTranfer;
                                        }
                                    }
                                }
                            }
                        }

                        model.SaveChanges();

                        HelperTimeSheet.Remove(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTO_MONDITO> DIMonitorMaster_Complete(List<DTO_TOMasterActualTime> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var result = new List<DTO_MONDITO>();
                    var l = lst.Select(c => new { c.MasterID, c.ATA, c.ATD }).Distinct().ToList();
                    foreach (var master in l)
                    {
                        var qr = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == master.MasterID);
                        if (qr != null)
                        {
                            qr.ATA = master.ATA;
                            qr.ATD = master.ATD;

                            foreach (var group in model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.MasterID))
                            {
                                if (group.DateFromCome == null)
                                    group.DateFromCome = master.ATD;
                                if (group.DateToCome == null)
                                    group.DateToCome = master.ATA;
                            }
                            HelperFinance.Truck_TimeChange(model, Account, master.MasterID);
                            model.SaveChanges();

                            //*co the se lam giong ben mobile
                            //result.AddRange(ListDITO(model, Account, master.MasterID,qr.CAT_Vehicle.RegNo));
                        }
                        HelperFinance.Truck_CompleteSchedule(model, Account, master.MasterID);
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_CompleteDN(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ditoGroupID in lstID)
                    {
                        var objMaster = model.OPS_DITOGroupProduct.Where(c => c.ID == ditoGroupID && c.DITOMasterID > 0).Select(c => new { ID = c.DITOMasterID.Value }).FirstOrDefault();
                        if (objMaster != null)
                        {
                            HelperFinance.Truck_CompleteSchedule(model, Account, -1, ditoGroupID);
                        }
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_Revert(List<int> lstMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    lstMasterID = lstMasterID.Distinct().ToList();
                    foreach (var masterID in lstMasterID)
                    {
                        // Kiểm tra 
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                        if (master.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterInvoicePart)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến đã nhận chứng từ không được hủy hoàn thành!");
                        if (master != null)
                        {
                            // Danh sách order cần cập nhật status
                            List<int> lstOrderID = new List<int>();
                            // Cập nhật lại status coto
                            foreach (var dito in master.OPS_DITO.Where(c => c.IsOPS).ToList())
                            {
                                dito.ModifiedBy = Account.UserName;
                                dito.ModifiedDate = DateTime.Now;
                                dito.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                            }

                            foreach (var group in master.OPS_DITOGroupProduct.ToList())
                            {
                                // order
                                if (!lstOrderID.Contains(group.ORD_GroupProduct.OrderID))
                                    lstOrderID.Add(group.ORD_GroupProduct.OrderID);

                                group.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                group.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                group.ModifiedBy = Account.UserName;
                                group.ModifiedDate = DateTime.Now;
                            }

                            master.ModifiedBy = Account.UserName;
                            master.ModifiedDate = DateTime.Now;
                            master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;
                            master.TypeOfPaymentDITOMasterID = null;
                            master.PayUserModified = null;
                            master.PayUserNote = null;
                            master.PayVendorModified = null;
                            master.PayVendorNote = null;
                            master.DateReceived = null;
                            model.SaveChanges();

                            #region Cập nhật cho Freight Audit
                            var lstFTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            foreach (var orderid in lstFTL)
                            {
                                var order = model.ORD_Order.FirstOrDefault(c => c.ID == orderid);
                                if (order != null)
                                {
                                    order.ModifiedBy = Account.UserName;
                                    order.ModifiedDate = DateTime.Now;
                                    order.TypeOfPaymentORDOrderID = null;
                                    order.PayCustomerModified = null;
                                    order.PayCustomerNote = null;
                                }
                            }

                            var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => c.OrderGroupProductID).Distinct().ToList();
                            foreach (var groupid in lstLTL)
                            {
                                var group = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == groupid);
                                if (group != null)
                                {
                                    group.ModifiedBy = Account.UserName;
                                    group.ModifiedDate = DateTime.Now;
                                    group.TypeOfPaymentORDGroupProductID = null;
                                    group.PayCustomerModified = null;
                                    group.PayCustomerNote = null;
                                }
                            }
                            model.SaveChanges();
                            #endregion

                            #region Xóa Finance
                            var lstOldPL = model.FIN_PL.Where(c => !c.IsPlanning && c.DITOMasterID == master.ID);
                            foreach (var oldPL in lstOldPL)
                            {
                                foreach (var child in model.FIN_PLDetails.Where(c => c.PLID == oldPL.ID))
                                {
                                    foreach (var group in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == child.ID))
                                        model.FIN_PLGroupOfProduct.Remove(group);

                                    model.FIN_PLDetails.Remove(child);
                                }
                                model.FIN_PL.Remove(oldPL);
                            }

                            #endregion

                            #region Xoa station
                            model.OPS_DITOStation.RemoveRange(master.OPS_DITOStation);
                            model.SaveChanges();
                            #endregion

                            #region Xoa CAT File

                            var qrFile = model.CAT_File.Where(c => c.TypeOfFileID == (int)CATTypeOfFileCode.DIPOD && c.ReferID == masterID);
                            model.CAT_File.RemoveRange(qrFile);

                            #endregion

                            #region Cap nhat timesheet

                            var qrTimeSheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.ReferID == masterID);
                            if (qrTimeSheet != null)
                            {
                                qrTimeSheet.ModifiedBy = Account.UserName;
                                qrTimeSheet.ModifiedDate = DateTime.Now;
                                qrTimeSheet.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetOpen;
                            }

                            #endregion

                            #region Cap nhat location

                            var qrLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID).ToList();
                            foreach (var o in qrLocation)
                            {
                                o.ModifiedBy = Account.UserName;
                                o.ModifiedDate = DateTime.Now;
                                o.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                o.DateCome = null;
                                o.DateLeave = null;
                                o.LoadingEnd = null;
                                o.LoadingStart = null;
                            }
                            HelperFinance.Truck_TimeChange(model, Account, masterID);
                            #endregion

                            // Cập nhật status đơn hàng
                            HelperStatus.ORDOrder_Status(model, Account, lstOrderID);
                        }
                        else
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy lệnh!");
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_RevertDN(List<int> lstID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var ditoGroupID in lstID)
                    {
                        var group = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == ditoGroupID);
                        if (group == null)
                            throw FaultHelper.BusinessFault(DTOErrorString.DAT_NoExists, "");
                        if (group.DITOGroupProductStatusPODID >= -(int)SYSVarType.DITOGroupProductStatusPODPart)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến đã nhận chứng từ không được hủy hoàn thành!");
                        // Thay đổi trạng thái lệnh
                        group.ModifiedBy = Account.UserName;
                        group.ModifiedDate = DateTime.Now;
                        group.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                        model.SaveChanges();

                        // cập nhật cho lệnh
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == group.DITOMasterID);
                        if (master != null)
                        {

                            master.ModifiedBy = Account.UserName;
                            master.ModifiedDate = DateTime.Now;
                            master.TypeOfPaymentDITOMasterID = null;
                            master.PayUserModified = null;
                            master.PayUserNote = null;
                            master.PayVendorModified = null;
                            master.PayVendorNote = null;

                            if (master.OPS_DITOGroupProduct.Count(c => c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete) > 0)
                                master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                            else
                                master.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                            #region Cập nhật cho Freight Audit
                            var lstFTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeFTL).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();
                            foreach (var orderid in lstFTL)
                            {
                                var order = model.ORD_Order.FirstOrDefault(c => c.ID == orderid);
                                if (order != null)
                                {
                                    order.ModifiedBy = Account.UserName;
                                    order.ModifiedDate = DateTime.Now;
                                    order.TypeOfPaymentORDOrderID = null;
                                    order.PayCustomerModified = null;
                                    order.PayCustomerNote = null;
                                }
                            }

                            var lstLTL = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == master.ID && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL).Select(c => c.OrderGroupProductID).Distinct().ToList();
                            foreach (var groupid in lstLTL)
                            {
                                var objGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == groupid);
                                if (objGroup != null)
                                {
                                    objGroup.ModifiedBy = Account.UserName;
                                    objGroup.ModifiedDate = DateTime.Now;
                                    objGroup.TypeOfPaymentORDGroupProductID = null;
                                    objGroup.PayCustomerModified = null;
                                    objGroup.PayCustomerNote = null;
                                }
                            }
                            model.SaveChanges();
                            #endregion

                            // Cập nhật status đơn hàng liên quan
                            var lstOrderID = new List<int>();
                            lstOrderID.Add(group.ORD_GroupProduct.OrderID);

                            #region Xóa Finance
                            var lstOldPL = model.FIN_PL.Where(c => !c.IsPlanning && c.DITOMasterID == master.ID);
                            foreach (var oldPL in lstOldPL)
                            {
                                foreach (var child in model.FIN_PLDetails.Where(c => c.PLID == oldPL.ID))
                                {
                                    foreach (var plGroup in model.FIN_PLGroupOfProduct.Where(c => c.PLDetailID == child.ID))
                                        model.FIN_PLGroupOfProduct.Remove(plGroup);

                                    model.FIN_PLDetails.Remove(child);
                                }
                                model.FIN_PL.Remove(oldPL);
                            }

                            //// Xóa phụ thu của đơn hàng liên quan
                            //foreach (var orderID in lstOrderID)
                            //{
                            //    // Xóa hết pl phụ thu cũ
                            //    foreach (var plOld in model.FIN_PL.Where(c => !c.IsPlanning && c.OrderID == orderID && c.SYSCustomerID == Account.SYSCustomerID && c.DITOMasterID == null && c.VehicleID == null && !c.IsPlanning && c.FIN_PLDetails.Count(d => d.CostID == (int)CATCostType.TypeOfPriceExCredit) > 0))
                            //    {
                            //        foreach (var plDetail in model.FIN_PLDetails.Where(c => c.PLID == plOld.ID))
                            //            model.FIN_PLDetails.Remove(plDetail);
                            //        model.FIN_PL.Remove(plOld);
                            //    }
                            //}
                            model.SaveChanges();
                            #endregion

                            #region Xoa station
                            model.OPS_DITOStation.RemoveRange(master.OPS_DITOStation);
                            model.SaveChanges();
                            #endregion

                            model.SaveChanges();
                            if (lstOrderID.Count > 0)
                            {
                                HelperStatus.ORDOrder_Status(model, Account, lstOrderID);
                            }
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_UpdateDITO(List<DTO_MONDITO> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var obj in lst)
                    {
                        var qr = model.OPS_DITO.FirstOrDefault(c => c.DITOMasterID == obj.MasterID && c.ATA == obj.ATA && c.ATD == obj.ATD && c.LocationToID == obj.LocationToID && c.LocationFromID == obj.LocationFromID);
                        if (qr != null)
                        {
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                            qr.KM = obj.KM;
                        }
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private List<DTO_MONDITO> ListDITO(DataEntities model, AccountItem account, int masterID, string regno)
        {
            List<DTO_MONDITO> lst = new List<DTO_MONDITO>();
            lst = model.OPS_DITO.Where(c => c.DITOMasterID == masterID).Select(c => new DTO_MONDITO
            {
                MasterID = masterID,
                ATA = c.ATA,
                ATD = c.ATD,
                KM = c.KM,
                LocationFromID = c.LocationFromID,
                LocationToID = c.LocationToID,
                RegNo = regno,
            }).ToList();

            return lst;
        }

        public List<DTOCombobox> DIMonitor_ListTypeOfDriver()
        {
            try
            {
                List<DTOCombobox> result = new List<DTOCombobox>();

                using (var model = new DataEntities())
                {
                    result = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.TypeOfDriver).Select(c => new DTOCombobox
                    {
                        ValueInt = c.ID,
                        Text = c.ValueOfVar,
                        ValueString = c.ID == -(int)SYSVarType.TypeOfDriverMain ? "main" : string.Empty,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Trouble

        public DTOMAPVehicle MONControlTower_GetTroubleLocation(int troubleID)
        {
            try
            {

                DTOMAPVehicle result = new DTOMAPVehicle();
                using (var model = new DataEntities())
                {

                    result = model.CAT_Trouble.Where(c => c.ID == troubleID).Select(c => new DTOMAPVehicle
                    {
                        Lat = c.Lat,
                        Lng = c.Lng,
                    }).FirstOrDefault();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region SO

        public DTOResult DIMonitorMaster_SL_List(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID == masterID && c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true).Select(c => new DTOMONOPSTODetail
                    {
                        ID = c.ID,
                        OPSGroupProductID = c.DITOGroupProductID,
                        OPSProductID = c.ID,
                        IsMergeable = false,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        Quantity = c.Quantity,
                        QuantityTranfer = c.QuantityTranfer,
                        QuantityReturn = c.QuantityReturn,
                        QuantityBBGN = c.QuantityBBGN,
                        OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                        GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        GroupProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductID = c.ORD_Product.ProductID,
                        CustomerName = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerID = c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID,
                        SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                        DNCode = c.OPS_DITOGroupProduct.DNCode,
                        LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        LocationToCountry = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Country.CountryName,
                        LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                        LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                        HasCashCollect = c.ORD_Product.ORD_GroupProduct.HasCashCollect,
                        IsReceived = c.OPS_DITOGroupProduct.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete,

                        VendorLoadID = c.OPS_DITOGroupProduct.VendorLoadID,
                        VendorLoadName = c.OPS_DITOGroupProduct.CUS_Customer.CustomerName,
                        VendorUnLoadID = c.OPS_DITOGroupProduct.VendorUnLoadID,
                        VendorUnLoadName = c.OPS_DITOGroupProduct.CUS_Customer1.CustomerName,
                        Note = c.OPS_DITOGroupProduct.Note,
                        Note1 = c.OPS_DITOGroupProduct.Note1,
                        Note2 = c.OPS_DITOGroupProduct.Note2,
                        Price = c.ORD_Product.ORD_GroupProduct.Price,
                        ModifiedBy = c.OPS_DITOGroupProduct.ModifiedBy,
                        ModifiedDate = c.OPS_DITOGroupProduct.ModifiedDate,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTODetail>;
                    var i = 1;
                    foreach (DTOMONOPSTODetail item in result.Data)
                    {
                        item.STT = i++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_SL_Save(List<DTOMONOPSTODetail> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    List<int> lstGr = new List<int>();
                    foreach (var item in lst)
                    {
                        var qrOPSProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.OPSProductID);
                        var qrOPSGroupProduct = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == qrOPSProduct.DITOGroupProductID);
                        lstGr.Add(qrOPSProduct.DITOGroupProductID);
                        if (qrOPSProduct != null)
                        {
                            //cap nhat GoP
                            qrOPSGroupProduct.ModifiedBy = Account.UserName;
                            qrOPSGroupProduct.ModifiedDate = DateTime.Now;
                            qrOPSGroupProduct.VendorLoadID = item.VendorLoadID;
                            qrOPSGroupProduct.VendorUnLoadID = item.VendorUnLoadID;
                            qrOPSGroupProduct.DNCode = item.DNCode;
                            qrOPSGroupProduct.Note = item.Note;
                            qrOPSGroupProduct.Note1 = item.Note1;
                            qrOPSGroupProduct.Note2 = item.Note2;
                            qrOPSGroupProduct.ORD_GroupProduct.Price = item.Price;
                            //cap nhat product
                            qrOPSProduct.ModifiedBy = Account.UserName;
                            qrOPSProduct.ModifiedDate = DateTime.Now;

                            //lam tron
                            item.Quantity = Math.Round(item.Quantity, 6);
                            item.QuantityBBGN = Math.Round(item.QuantityBBGN, 6);
                            item.QuantityReturn = Math.Round(item.QuantityReturn, 6);
                            item.QuantityTranfer = Math.Round(item.QuantityTranfer, 6);

                            qrOPSProduct.Quantity = item.Quantity;
                            qrOPSProduct.QuantityBBGN = item.QuantityBBGN;
                            qrOPSProduct.QuantityReturn = item.QuantityReturn;
                            qrOPSProduct.QuantityTranfer = item.QuantityTranfer;
                            model.SaveChanges();

                            //thay doi SKU
                            if (qrOPSProduct.ORD_Product.ProductID != item.ProductID)
                            {
                                var qrcusproduct = model.CUS_Product.FirstOrDefault(c => c.ID == item.ProductID);
                                if (qrcusproduct != null)
                                {
                                    qrOPSProduct.ORD_Product.ProductID = item.ProductID;
                                    qrOPSProduct.ORD_Product.PackingID = qrcusproduct.PackingID;
                                    model.SaveChanges();
                                }
                            }

                            //tinh lai cho OPS_DITOGroupProduct
                            var lstProduct = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == qrOPSProduct.DITOGroupProductID);

                            if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.Ton = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeTon.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.CBM = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeCBM.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.Quantity = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeQuantity.Value);
                            }

                            //tinh lai cho OPS_DITOGroupProduct BBGN

                            if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.TonBBGN = lstProduct.Sum(c => c.QuantityBBGN * c.ORD_Product.ExchangeTon.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.CBMBBGN = lstProduct.Sum(c => c.QuantityBBGN * c.ORD_Product.ExchangeCBM.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.QuantityBBGN = lstProduct.Sum(c => c.QuantityBBGN * c.ORD_Product.ExchangeQuantity.Value);
                            }

                            //tinh lai cho OPS_DITOGroupProduct Transfer

                            if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.TonTranfer = lstProduct.Sum(c => c.QuantityTranfer * c.ORD_Product.ExchangeTon.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.CBMTranfer = lstProduct.Sum(c => c.QuantityTranfer * c.ORD_Product.ExchangeCBM.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.QuantityTranfer = lstProduct.Sum(c => c.QuantityTranfer * c.ORD_Product.ExchangeQuantity.Value);
                            }

                            //tinh lai cho OPS_DITOGroupProduct Return

                            if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.TonReturn = lstProduct.Sum(c => c.QuantityReturn * c.ORD_Product.ExchangeTon.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.CBMReturn = lstProduct.Sum(c => c.QuantityReturn * c.ORD_Product.ExchangeCBM.Value);
                            }
                            if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                            {
                                qrOPSProduct.OPS_DITOGroupProduct.QuantityReturn = lstProduct.Sum(c => c.QuantityReturn * c.ORD_Product.ExchangeQuantity.Value);
                            }
                        }
                    }
                    model.SaveChanges();
                    HelperFinance.Truck_UpdateGroup(model, Account, lstGr);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMON_TOProductOfGroup> DIMonitor_DITOProductOfGroup(int TOGroupProductID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOMON_TOProductOfGroup> result = new List<DTOMON_TOProductOfGroup>();

                    result = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == TOGroupProductID && c.ORD_Product.ORD_GroupProduct.IsReturn != true).Select(c => new DTOMON_TOProductOfGroup
                    {
                        ID = c.ID,
                        ProductCode = c.ORD_Product.CUS_Product.Code,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        QuantityBBGN_Old = c.QuantityBBGN,
                        QuantityReturn_Old = c.QuantityReturn,
                    }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCombobox> DIMonitor_TOGroupProductCancelReason()
        {
            try
            {
                var result = new List<DTOCombobox>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Reason.Where(c => c.TypeOfReasonID == -(int)SYSVarType.TypeOfReasonTOCancel).Select(c => new DTOCombobox
                    {
                        Text = c.ReasonName,
                        ValueInt = c.ID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_CancelTOGroup(int opsGroupID, int reasonID, string note)
        {
            try
            {
                var result = new DTOResult();

                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int icancel = -(int)SYSVarType.DITOGroupProductStatusCancel;
                    int iwait = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    var qrops = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrops == null)
                        FaultHelper.BusinessFault(null, null, "Không tìm thấy SO");
                    int masterID = qrops.DITOMasterID.Value;
                    qrops.ModifiedBy = Account.UserName;
                    qrops.ModifiedDate = DateTime.Now;
                    qrops.DITOGroupProductStatusID = icancel;
                    qrops.ReasonCancelID = reasonID;
                    qrops.ReasonCancelNote = note;
                    qrops.DITOMasterID = null;
                    model.SaveChanges();
                    //xoa ops location / station
                    model.OPS_DITOStation.RemoveRange(model.OPS_DITOStation.Where(c => c.DITOMasterID == masterID));
                    model.OPS_DITOLocation.RemoveRange(model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID));
                    //cap nhat lai ops location
                    var lstFrom = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.DITOGroupProductStatusID != icancel).Select(c => c.ORD_GroupProduct.CUS_Location.LocationID).Distinct().ToList();
                    var lstToTemp = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.DITOGroupProductStatusID != icancel).Select(c => c.ORD_GroupProduct.CUS_Location1.LocationID).Distinct().ToList();
                    //xóa các id trong lstTo trùng với lstFrom
                    var lstTo = lstToTemp.Where(c => !lstFrom.Contains(c)).ToList();
                    int sortorder = 1;
                    // thiet lap diem empty
                    var eLocation = new OPS_DITOLocation();
                    bool hasToEmpty = false;
                    var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                    if (!string.IsNullOrEmpty(sSet))
                    {
                        var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                        if (oSet != null)
                        {
                            var f = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationFromID);
                            if (f != null)
                            {
                                var sLocation = new OPS_DITOLocation();
                                sLocation.CreatedBy = Account.UserName;
                                sLocation.CreatedDate = DateTime.Now;
                                sLocation.LocationID = f.ID;
                                sLocation.DITOMasterID = masterID;
                                sLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                                sLocation.DITOLocationStatusID = iwait;
                                sLocation.SortOrder = sortorder;
                                sortorder++;
                                model.OPS_DITOLocation.Add(sLocation);
                            }
                            var t = model.CAT_Location.FirstOrDefault(c => c.ID == oSet.LocationToID);
                            if (t != null)
                            {
                                hasToEmpty = true;
                                eLocation.CreatedBy = Account.UserName;
                                eLocation.CreatedDate = DateTime.Now;
                                eLocation.LocationID = t.ID;
                                eLocation.DITOMasterID = masterID;
                                eLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;
                                eLocation.DITOLocationStatusID = iwait;
                                eLocation.SortOrder = sortorder;
                                model.OPS_DITOLocation.Add(eLocation);
                            }
                        }
                    }
                    //diem get / delivery
                    foreach (var fromID in lstFrom)
                    {
                        var location = new OPS_DITOLocation();
                        location.CreatedBy = Account.UserName;
                        location.CreatedDate = DateTime.Now;
                        location.LocationID = fromID;
                        location.DITOMasterID = masterID;
                        location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                        location.DITOLocationStatusID = iwait;
                        location.SortOrder = sortorder;
                        sortorder++;
                        model.OPS_DITOLocation.Add(location);
                    }
                    foreach (var toID in lstTo)
                    {
                        var location = new OPS_DITOLocation();
                        location.CreatedBy = Account.UserName;
                        location.CreatedDate = DateTime.Now;
                        location.LocationID = toID;
                        location.DITOMasterID = masterID;
                        location.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                        location.DITOLocationStatusID = iwait;
                        location.SortOrder = sortorder;
                        sortorder++;
                        model.OPS_DITOLocation.Add(location);
                    }
                    if (hasToEmpty)
                        eLocation.SortOrder = sortorder;

                    model.SaveChanges();

                    if (model.OPS_DITOGroupProduct.Count(c => c.DITOMasterID == masterID && c.DITOGroupProductStatusID != icancel) == 0)
                    {
                        var qrmaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                        if (qrmaster != null)
                        {
                            qrmaster.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterCancel;
                        }
                    }
                    model.SaveChanges();
                    //cap nhat trang thai don hang

                    var lstOrderID = new List<int>();
                    lstOrderID.Add(qrops.ORD_GroupProduct.OrderID);
                    HelperStatus.ORDOrder_Status(model, Account, lstOrderID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_ChangeSOLocation(int cuslocationID, int opsGroupID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var qrOPSGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrOPSGroup.DITOMasterID == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                    if (qrOPSGroup != null)
                    {
                        int locationIDOld = qrOPSGroup.ORD_GroupProduct.CUS_Location1.LocationID;
                        int cusLocationIDOld = qrOPSGroup.ORD_GroupProduct.LocationToID.Value;
                        var qrCusLocation = model.CUS_Location.FirstOrDefault(c => c.ID == cuslocationID);
                        if (qrCusLocation == null)
                            throw FaultHelper.BusinessFault(null, null, "Điểm không tồn tại");


                        //cap nhat lai dito location
                        var count = qrOPSGroup.OPS_DITOMaster.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.CUS_Location1.LocationID == locationIDOld).Count();
                        if (count == 0)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy Location của SO");
                        if (count == 1)
                        {
                            if (model.OPS_DITOLocation.Count(c => c.DITOMasterID == qrOPSGroup.DITOMasterID && c.LocationID == qrCusLocation.LocationID && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery)) == 0)
                            {
                                var qrLocation = qrOPSGroup.OPS_DITOMaster.OPS_DITOLocation.FirstOrDefault(c => c.LocationID == locationIDOld && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery));
                                if (qrLocation != null)
                                {
                                    qrLocation.ModifiedBy = Account.UserName;
                                    qrLocation.ModifiedDate = DateTime.Now;
                                    qrLocation.LocationID = qrCusLocation.LocationID;
                                }
                            }
                        }
                        else
                        {
                            if (model.OPS_DITOLocation.Count(c => c.DITOMasterID == qrOPSGroup.DITOMasterID && c.LocationID == qrCusLocation.LocationID && (c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery || c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery)) == 0)
                            {
                                var newLocation = new OPS_DITOLocation();
                                newLocation.CreatedBy = Account.UserName;
                                newLocation.CreatedDate = DateTime.Now;
                                newLocation.LocationID = qrCusLocation.LocationID;
                                newLocation.DITOMasterID = qrOPSGroup.DITOMasterID.Value;
                                newLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                                newLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                                newLocation.SortOrder = qrOPSGroup.OPS_DITOMaster.OPS_DITOLocation.Count() + 1;
                                model.OPS_DITOLocation.Add(newLocation);
                            }
                        }
                        model.SaveChanges();


                        // neu location trung voi order thi cap nhat lai 
                        if (qrOPSGroup.ORD_GroupProduct.ORD_Order.LocationToID == cusLocationIDOld)
                        {
                            qrOPSGroup.ORD_GroupProduct.ORD_Order.LocationToID = qrCusLocation.ID;
                        }
                        qrOPSGroup.ORD_GroupProduct.CUS_Location1 = qrCusLocation;
                        qrOPSGroup.ORD_GroupProduct.ModifiedBy = Account.UserName;
                        qrOPSGroup.ORD_GroupProduct.ModifiedDate = DateTime.Now;
                        model.SaveChanges();

                        //neu old location khong trung vs locationToID nao trong DITOgroup => xoa
                        bool isChangeLocation = false;
                        var lstLocation = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == qrOPSGroup.DITOMasterID && c.ORD_GroupProduct.LocationToID == cusLocationIDOld).ToList();

                        if (lstLocation.Count == 0)
                        {
                            foreach (var obj in model.OPS_DITOLocation.Where(c => c.DITOMasterID == qrOPSGroup.DITOMasterID && c.LocationID == locationIDOld).ToList())
                            {
                                model.OPS_DITOLocation.Remove(obj);
                                isChangeLocation = true;
                            }
                        }
                        if (isChangeLocation)
                        {
                            model.SaveChanges();
                            int sort = 1;
                            var lst = model.OPS_DITOLocation.Where(c => c.DITOMasterID == qrOPSGroup.DITOMasterID).OrderBy(c => c.SortOrder).ToList();
                            foreach (var obj in lst)
                            {
                                obj.SortOrder = sort;
                                sort++;
                            }
                            model.SaveChanges();
                        }
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại");
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMON_CUSProduct> DIMonitor_GroupProductOfTOGroup(int TOGroupID, int productID)
        {
            try
            {
                var result = new List<DTOMON_CUSProduct>();
                using (var model = new DataEntities())
                {
                    var qrTOGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == TOGroupID);
                    if (qrTOGroup == null)
                        throw FaultHelper.BusinessFault(null, null, "DN không tồn tại");
                    var qrCusGP = model.CUS_GroupOfProductInStock.Where(c => c.StockID == qrTOGroup.ORD_GroupProduct.LocationFromID).Select(c => c.GroupOfProductID).Distinct().ToList();
                    var lstProductID = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == qrTOGroup.DITOMasterID && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).Select(c => c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID);
                    result = model.CUS_Product.Where(c => (productID < 0 || !lstProductID.Contains(c.ID)) && qrCusGP.Contains(c.GroupOfProductID)).Select(c => new DTOMON_CUSProduct
                    {
                        ID = c.ID,
                        ProductCode = c.Code,
                        ProductName = c.ProductName,
                        GroupProductID = c.GroupOfProductID,
                        GroupProductName = c.CUS_GroupOfProduct.GroupName,
                        GroupProductCode = c.CUS_GroupOfProduct.Code,
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_AddGroupProductFromDN(int opsGroupID, DTOMON_CUSProduct item)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    model.EventAccount = Account; model.EventRunning = false;
                    var qrTOGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrTOGroup == null)
                        throw FaultHelper.BusinessFault(null, null, "DN không tồn tại");
                    var qrProduct = model.CUS_Product.FirstOrDefault(c => c.ID == item.ID);
                    if (qrProduct == null)
                        throw FaultHelper.BusinessFault(null, null, "Sản phẩm không tồn tại");

                    #region tao moi ORD

                    var oldORDGroup = qrTOGroup.ORD_GroupProduct;

                    //tao moi ORD_GroupProduct
                    var ordGP = new ORD_GroupProduct();
                    ordGP.OrderID = oldORDGroup.OrderID;
                    ordGP.ContainerID = oldORDGroup.ContainerID;
                    ordGP.GroupOfProductID = item.GroupProductID;
                    ordGP.Description = oldORDGroup.Description;
                    ordGP.SOCode = string.Empty;
                    ordGP.PriceOfGOPID = qrProduct.CUS_GroupOfProduct.PriceOfGOPID;
                    ordGP.PackingID = qrProduct.PackingID;
                    ordGP.LocationFromID = oldORDGroup.LocationFromID;
                    ordGP.LocationToID = oldORDGroup.LocationToID;
                    ordGP.DateConfig = oldORDGroup.DateConfig;
                    ordGP.ETD = oldORDGroup.ETD;
                    ordGP.ETA = oldORDGroup.ETA;
                    ordGP.Price = item.Price;
                    ordGP.CUSRoutingID = oldORDGroup.CUSRoutingID;
                    ordGP.CreatedDate = DateTime.Now;
                    ordGP.CreatedBy = Account.UserName;
                    ordGP.DNCode = oldORDGroup.DNCode;
                    ordGP.ETARequest = oldORDGroup.ETARequest;
                    ordGP.PartnerID = oldORDGroup.PartnerID;
                    ordGP.IsReturn = false;
                    ordGP.Ton = 0;
                    ordGP.CBM = 0;
                    ordGP.Quantity = 0;
                    model.ORD_GroupProduct.Add(ordGP);


                    // them ORD_Product
                    var ordP = new ORD_Product();
                    ordP.ORD_GroupProduct = ordGP;
                    ordP.CreatedBy = Account.UserName;
                    ordP.CreatedDate = DateTime.Now;
                    ordP.ProductID = item.ID;
                    ordP.Quantity = item.Quantity;
                    model.ORD_Product.Add(ordP);


                    #region qui doi tan khoi
                    var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.GroupProductID);
                    if (cusGroup != null)
                    {
                        var cusproduct = qrProduct;
                        if (cusproduct != null)
                        {
                            ordP.PackingID = cusproduct.PackingID;
                            if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                            {
                                ordP.ExchangeTon = 1;
                                ordP.ExchangeCBM = 0;
                                if (cusproduct.Weight.HasValue && cusproduct.Weight.Value > 0 && cusproduct.CBM.HasValue)
                                    ordP.ExchangeCBM = cusproduct.CBM.Value / cusproduct.Weight.Value;
                                ordP.ExchangeQuantity = 0;
                                ordGP.Ton += item.Quantity;
                                ordGP.CBM += item.Quantity * ordP.ExchangeCBM.Value;
                            }
                            if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                            {
                                ordP.ExchangeCBM = 1;
                                ordP.ExchangeTon = 0;
                                if (cusproduct.Weight.HasValue && cusproduct.CBM.Value > 0 && cusproduct.CBM.HasValue)
                                    ordP.ExchangeTon = cusproduct.Weight.Value / cusproduct.CBM.Value;
                                ordP.ExchangeQuantity = 0;
                                ordGP.CBM += item.Quantity;
                                ordGP.Ton += item.Quantity * ordP.ExchangeTon.Value;
                            }
                            if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                            {
                                ordP.ExchangeTon = cusproduct.Weight.HasValue ? cusproduct.Weight.Value : 0;
                                ordP.ExchangeCBM = cusproduct.CBM.HasValue ? cusproduct.CBM.Value : 0;
                                ordP.ExchangeQuantity = 1;
                                ordGP.CBM += item.Quantity * ordP.ExchangeCBM.Value;
                                ordGP.Ton += item.Quantity * ordP.ExchangeTon.Value;
                                ordGP.Quantity += item.Quantity;
                            }
                        }
                    }

                    #endregion

                    #endregion

                    var qrOpsGP = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrOpsGP != null)
                    {
                        #region tao moi OPS_DITOGroupProduct
                        var opsGP = new OPS_DITOGroupProduct();
                        opsGP.ORD_GroupProduct = ordGP;
                        opsGP.DITOMasterID = qrOpsGP.DITOMasterID;
                        opsGP.CBM = ordGP.CBM;
                        opsGP.Ton = ordGP.Ton;
                        opsGP.Quantity = ordGP.Quantity;
                        opsGP.CBMTranfer = ordGP.CBM;
                        opsGP.TonTranfer = ordGP.Ton;
                        opsGP.QuantityTranfer = ordGP.Quantity;
                        opsGP.CBMBBGN = ordGP.CBM;
                        opsGP.QuantityBBGN = ordGP.Quantity;
                        opsGP.TonBBGN = ordGP.Ton;
                        opsGP.QuantityLoading = ordGP.Quantity;
                        opsGP.DNCode = string.Empty;
                        opsGP.QuantityLoading = 0;
                        opsGP.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                        opsGP.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                        opsGP.CreatedDate = DateTime.Now;
                        opsGP.CreatedBy = Account.UserName;
                        opsGP.IsOrigin = qrOpsGP.IsOrigin;
                        opsGP.IsInput = qrOpsGP.IsInput;
                        opsGP.GroupSort = qrOpsGP.GroupSort;
                        opsGP.DateFromCome = qrOpsGP.DateFromCome;
                        opsGP.DateFromLeave = qrOpsGP.DateFromLeave;
                        opsGP.DateFromLoadEnd = qrOpsGP.DateFromLoadEnd;
                        opsGP.DateFromLoadStart = qrOpsGP.DateFromLoadStart;
                        opsGP.DateToCome = qrOpsGP.DateToCome;
                        opsGP.DateToLeave = qrOpsGP.DateToLeave;
                        opsGP.DateToLoadEnd = qrOpsGP.DateToLoadEnd;
                        opsGP.DateToLoadStart = qrOpsGP.DateToLoadStart;
                        opsGP.Note = string.Empty;
                        opsGP.Note1 = string.Empty;
                        opsGP.Note2 = item.Note;
                        opsGP.InvoiceBy = qrOpsGP.InvoiceBy;
                        opsGP.InvoiceDate = qrOpsGP.InvoiceDate;
                        opsGP.InvoiceNote = qrOpsGP.InvoiceNote;
                        opsGP.DateDN = qrOpsGP.DateDN;

                        model.OPS_DITOGroupProduct.Add(opsGP);


                        #endregion

                        #region tao moi OPS_Product

                        var opsProduct = new OPS_DITOProduct();
                        opsProduct.CreatedDate = DateTime.Now;
                        opsProduct.CreatedBy = Account.UserName;
                        opsProduct.OPS_DITOGroupProduct = opsGP;
                        opsProduct.ORD_Product = ordP;
                        opsProduct.Quantity = ordP.Quantity;
                        opsProduct.QuantityTranfer = ordP.Quantity;
                        opsProduct.QuantityBBGN = ordP.Quantity;
                        opsProduct.QuantityReturn = 0;

                        model.OPS_DITOProduct.Add(opsProduct);
                        #endregion
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DIMonitorMaster_NonTenderList(string request, DateTime? fDate, DateTime? tDate)
        {
            try
            {
                var result = new DTOResult();
                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null
                        && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.ORD_GroupProduct.IsReturn != true
                        && c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.TransportModeID == -(int)SYSVarType.TransportModeLTL
                        && (fDate != null && tDate != null ? c.ORD_GroupProduct.ETD >= fDate && c.ORD_GroupProduct.ETD < tDate : true)
                        && ((!isAdmin) ? Account.ListCustomerID.ToList().Contains(c.ORD_GroupProduct.ORD_Order.CustomerID) : true)
                        && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OrderGroupProductID > 0).Select(c => new DTOMONOPSTODetail
                    {
                        ID = c.ID,
                        OPSGroupProductID = c.ID,
                        IsMergeable = false,
                        OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                        ETA = c.ORD_GroupProduct.ETA,
                        ETD = c.ORD_GroupProduct.ETD,
                        Quantity = c.Quantity,
                        Ton = c.Ton,
                        CBM = c.CBM,
                        OrderGroupProductID = c.OrderGroupProductID.Value,
                        GroupProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                        CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                        SOCode = c.ORD_GroupProduct.SOCode,
                        DNCode = c.DNCode,
                        LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                        LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                        LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        LocationToCountry = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Country.CountryName,
                        LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                        LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTODetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_AddGroupProductFromNonTender(int masterID, List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    model.EventAccount = Account; model.EventRunning = false;

                    OPS_DI_TOMaster_Update(model, masterID, lst);

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_GroupProduct_Split(int gopID, double value, int packingType)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == gopID);
                    if (obj != null)
                    {
                        obj.IsSplit = true;
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        var objNew = new OPS_DITOGroupProduct();
                        objNew.CreatedBy = Account.UserName;
                        objNew.CreatedDate = DateTime.Now;

                        objNew.IsSplit = true;
                        objNew.Note = obj.Note;
                        objNew.Note1 = obj.Note1;
                        objNew.Note2 = obj.Note2;
                        objNew.DNCode = obj.DNCode;
                        objNew.IsInput = obj.IsInput;
                        objNew.IsOrigin = obj.IsOrigin;
                        objNew.GroupSort = obj.GroupSort;
                        objNew.OrderGroupProductID = obj.OrderGroupProductID;
                        objNew.DITOGroupProductStatusID = obj.DITOGroupProductStatusID;
                        objNew.DITOGroupProductStatusPODID = obj.DITOGroupProductStatusPODID;
                        objNew.TypeOfDITOGroupProductReturnID = obj.TypeOfDITOGroupProductReturnID;


                        #region Tính theo tỉ lệ
                        double exVal = 1;
                        switch (packingType)
                        {
                            case 1:
                                exVal -= (double)value / obj.Ton;
                                if (obj.Ton > value)
                                {
                                    objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton - value, 5, MidpointRounding.AwayFromZero);
                                    objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM * exVal, 5, MidpointRounding.AwayFromZero);
                                    objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity * exVal, 5, MidpointRounding.AwayFromZero);

                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, 5, MidpointRounding.AwayFromZero);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, 5, MidpointRounding.AwayFromZero);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, 5, MidpointRounding.AwayFromZero);

                                    foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                    {
                                        var itemNew = new OPS_DITOProduct();
                                        itemNew.CreatedBy = Account.UserName;
                                        itemNew.CreatedDate = DateTime.Now;
                                        itemNew.Note = item.Note;
                                        itemNew.OrderProductID = item.OrderProductID;
                                        itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Ton, 5, MidpointRounding.AwayFromZero);

                                        item.ModifiedBy = Account.UserName;
                                        item.ModifiedDate = DateTime.Now;
                                        item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Ton, 5, MidpointRounding.AwayFromZero);

                                        objNew.OPS_DITOProduct.Add(itemNew);
                                    }
                                }
                                break;
                            case 2:
                                exVal -= (double)value / obj.CBM;
                                if (obj.CBM > value)
                                {
                                    objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(obj.CBM - value, 5, MidpointRounding.AwayFromZero);
                                    objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(obj.Ton + exVal, 5, MidpointRounding.AwayFromZero);
                                    objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity * exVal, 5, MidpointRounding.AwayFromZero);

                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, 5, MidpointRounding.AwayFromZero);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, 5, MidpointRounding.AwayFromZero);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, 5, MidpointRounding.AwayFromZero);

                                    foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                    {
                                        var itemNew = new OPS_DITOProduct();
                                        itemNew.CreatedBy = Account.UserName;
                                        itemNew.CreatedDate = DateTime.Now;
                                        itemNew.Note = item.Note;
                                        itemNew.OrderProductID = item.OrderProductID;
                                        itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.CBM, 5, MidpointRounding.AwayFromZero);

                                        item.ModifiedBy = Account.UserName;
                                        item.ModifiedDate = DateTime.Now;
                                        item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.CBM, 5, MidpointRounding.AwayFromZero);

                                        objNew.OPS_DITOProduct.Add(itemNew);
                                    }
                                }
                                break;
                            case 3:
                                exVal -= (double)value / obj.Quantity;
                                if (obj.Quantity > value)
                                {
                                    objNew.Quantity = objNew.QuantityTranfer = objNew.QuantityBBGN = objNew.QuantityLoading = Math.Round(obj.Quantity - value, 5, MidpointRounding.AwayFromZero);
                                    objNew.Ton = objNew.TonTranfer = objNew.TonBBGN = Math.Round(objNew.Quantity * exVal, 5, MidpointRounding.AwayFromZero);
                                    objNew.CBM = objNew.CBMTranfer = objNew.CBMBBGN = Math.Round(objNew.Quantity * exVal, 5, MidpointRounding.AwayFromZero);

                                    obj.Ton = obj.TonTranfer = obj.TonBBGN = Math.Round(obj.Ton - objNew.Ton, 5, MidpointRounding.AwayFromZero);
                                    obj.CBM = obj.CBMTranfer = obj.CBMBBGN = Math.Round(obj.CBM - objNew.CBM, 5, MidpointRounding.AwayFromZero);
                                    obj.Quantity = obj.QuantityTranfer = obj.QuantityBBGN = obj.QuantityLoading = Math.Round(obj.Quantity - objNew.Quantity, 5, MidpointRounding.AwayFromZero);

                                    foreach (var item in model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == obj.ID).ToList())
                                    {
                                        var itemNew = new OPS_DITOProduct();
                                        itemNew.CreatedBy = Account.UserName;
                                        itemNew.CreatedDate = DateTime.Now;
                                        itemNew.Note = item.Note;
                                        itemNew.OrderProductID = item.OrderProductID;
                                        itemNew.Quantity = itemNew.QuantityBBGN = itemNew.QuantityTranfer = Math.Round(objNew.Quantity, 5, MidpointRounding.AwayFromZero);

                                        item.ModifiedBy = Account.UserName;
                                        item.ModifiedDate = DateTime.Now;
                                        item.Quantity = item.QuantityBBGN = item.QuantityTranfer = Math.Round(obj.Quantity, 5, MidpointRounding.AwayFromZero);

                                        objNew.OPS_DITOProduct.Add(itemNew);
                                    }
                                }
                                break;
                        }
                        #endregion

                        model.OPS_DITOGroupProduct.Add(objNew);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_ReturnMissingProductToOPS(int opsGroupID, double quantity)
        {
            try
            {
                var result = new DTOResult();

                using (var model = new DataEntities())
                {
                    var qrOpsGP = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrOpsGP == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    if (qrOpsGP.DITOGroupProductStatusID >= -(int)SYSVarType.DITOGroupProductStatusComplete)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng đã hoàn thành không được chỉnh sửa");
                    var qropsProduct = qrOpsGP.OPS_DITOProduct.FirstOrDefault();
                    if (qropsProduct == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    if (qropsProduct.Quantity < quantity)
                        throw FaultHelper.BusinessFault(null, null, "Số lượng không hợp lệ");

                    #region tao moi OPS_DITOGroupProduct

                    var opsGP = new OPS_DITOGroupProduct();
                    opsGP.ORD_GroupProduct = qrOpsGP.ORD_GroupProduct;
                    opsGP.DITOMasterID = null;
                    opsGP.CBM = 0;
                    opsGP.Ton = 0;
                    opsGP.Quantity = 0;
                    opsGP.CBMTranfer = 0;
                    opsGP.TonTranfer = 0;
                    opsGP.QuantityTranfer = 0;
                    opsGP.CBMBBGN = 0;
                    opsGP.QuantityBBGN = 0;
                    opsGP.TonBBGN = 0;
                    opsGP.QuantityLoading = 0;
                    opsGP.DNCode = string.Empty;
                    opsGP.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    opsGP.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    opsGP.CreatedDate = DateTime.Now;
                    opsGP.CreatedBy = Account.UserName;
                    opsGP.IsOrigin = qrOpsGP.IsOrigin;
                    opsGP.IsInput = true;
                    opsGP.GroupSort = qrOpsGP.GroupSort;
                    opsGP.DateFromCome = null;
                    opsGP.DateFromLeave = null;
                    opsGP.DateFromLoadEnd = null;
                    opsGP.DateFromLoadStart = null;
                    opsGP.DateToCome = null;
                    opsGP.DateToLeave = null;
                    opsGP.DateToLoadEnd = null;
                    opsGP.DateToLoadStart = null;
                    opsGP.Note = qrOpsGP.Note;
                    opsGP.Note1 = qrOpsGP.Note1;
                    opsGP.Note2 = qrOpsGP.Note2;
                    opsGP.InvoiceBy = qrOpsGP.InvoiceBy;
                    opsGP.InvoiceDate = qrOpsGP.InvoiceDate;
                    opsGP.InvoiceNote = qrOpsGP.InvoiceNote;
                    opsGP.DateDN = qrOpsGP.DateDN;

                    model.OPS_DITOGroupProduct.Add(opsGP);


                    #endregion

                    #region tao moi OPS_Product

                    var opsProduct = new OPS_DITOProduct();
                    opsProduct.CreatedDate = DateTime.Now;
                    opsProduct.CreatedBy = Account.UserName;
                    opsProduct.OPS_DITOGroupProduct = opsGP;
                    opsProduct.ORD_Product = qropsProduct.ORD_Product;
                    opsProduct.Quantity = quantity;
                    opsProduct.QuantityTranfer = quantity;
                    opsProduct.QuantityBBGN = quantity;
                    opsProduct.QuantityReturn = 0;
                    model.OPS_DITOProduct.Add(opsProduct);
                    #endregion

                    model.SaveChanges();
                    //cap nhat san luong cu
                    if (qropsProduct.Quantity > 0)
                    {
                        var percentRemain = (qropsProduct.Quantity - quantity) / qropsProduct.Quantity;
                        var qRemain = qropsProduct.Quantity - quantity;
                        qropsProduct.Quantity = qRemain;
                        qropsProduct.QuantityBBGN = qRemain;
                        qropsProduct.QuantityTranfer = qRemain;

                        qrOpsGP.Ton = qrOpsGP.Ton * percentRemain;
                        qrOpsGP.TonBBGN = qrOpsGP.Ton * percentRemain;
                        qrOpsGP.TonTranfer = qrOpsGP.Ton * percentRemain;

                        qrOpsGP.CBM = qrOpsGP.CBM * percentRemain;
                        qrOpsGP.CBMBBGN = qrOpsGP.CBM * percentRemain;
                        qrOpsGP.CBMTranfer = qrOpsGP.CBM * percentRemain;

                        qrOpsGP.Quantity = qrOpsGP.Quantity * percentRemain;
                        qrOpsGP.QuantityBBGN = qrOpsGP.Quantity * percentRemain;
                        qrOpsGP.QuantityTranfer = qrOpsGP.Quantity * percentRemain;
                    }


                    //cap nhat san luong moi
                    var lstProduct = opsGP.OPS_DITOProduct;

                    if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeTon.Value);
                        opsGP.Ton = sum;
                        opsGP.TonBBGN = sum;
                        opsGP.TonTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeCBM.Value);
                        opsGP.CBM = sum;
                        opsGP.CBMBBGN = sum;
                        opsGP.CBMTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeQuantity.Value);
                        opsGP.Quantity = sum;
                        opsGP.QuantityBBGN = sum;
                        opsGP.QuantityReturn = sum;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_CancelMissingProduct(int opsGroupID, double quantity, int reasonID, string reasonNote)
        {
            try
            {
                var result = new DTOResult();

                using (var model = new DataEntities())
                {
                    var qrOpsGP = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrOpsGP == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    var qropsProduct = qrOpsGP.OPS_DITOProduct.FirstOrDefault();
                    if (qropsProduct == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    if (qropsProduct.Quantity < quantity)
                        throw FaultHelper.BusinessFault(null, null, "Số lượng không hợp lệ");
                    #region tao moi OPS_DITOGroupProduct

                    var opsGP = new OPS_DITOGroupProduct();
                    opsGP.ORD_GroupProduct = qrOpsGP.ORD_GroupProduct;
                    opsGP.DITOMasterID = null;
                    opsGP.CBM = 0;
                    opsGP.Ton = 0;
                    opsGP.Quantity = 0;
                    opsGP.CBMTranfer = 0;
                    opsGP.TonTranfer = 0;
                    opsGP.QuantityTranfer = 0;
                    opsGP.CBMBBGN = 0;
                    opsGP.QuantityBBGN = 0;
                    opsGP.TonBBGN = 0;
                    opsGP.QuantityLoading = 0;
                    opsGP.DNCode = string.Empty;
                    opsGP.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusCancel;
                    opsGP.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    opsGP.CreatedDate = DateTime.Now;
                    opsGP.CreatedBy = Account.UserName;
                    opsGP.IsOrigin = qrOpsGP.IsOrigin;
                    opsGP.IsInput = qrOpsGP.IsInput;
                    opsGP.GroupSort = qrOpsGP.GroupSort;
                    opsGP.DateFromCome = null;
                    opsGP.DateFromLeave = null;
                    opsGP.DateFromLoadEnd = null;
                    opsGP.DateFromLoadStart = null;
                    opsGP.DateToCome = null;
                    opsGP.DateToLeave = null;
                    opsGP.DateToLoadEnd = null;
                    opsGP.DateToLoadStart = null;
                    opsGP.Note = qrOpsGP.Note;
                    opsGP.Note1 = qrOpsGP.Note1;
                    opsGP.Note2 = qrOpsGP.Note2;
                    opsGP.InvoiceBy = qrOpsGP.InvoiceBy;
                    opsGP.InvoiceDate = qrOpsGP.InvoiceDate;
                    opsGP.InvoiceNote = qrOpsGP.InvoiceNote;
                    opsGP.DateDN = qrOpsGP.DateDN;
                    opsGP.ReasonCancelID = reasonID;
                    opsGP.ReasonCancelNote = reasonNote;
                    model.OPS_DITOGroupProduct.Add(opsGP);

                    #endregion

                    #region tao moi OPS_Product

                    var opsProduct = new OPS_DITOProduct();
                    opsProduct.CreatedDate = DateTime.Now;
                    opsProduct.CreatedBy = Account.UserName;
                    opsProduct.OPS_DITOGroupProduct = opsGP;
                    opsProduct.ORD_Product = qropsProduct.ORD_Product;
                    opsProduct.Quantity = quantity;
                    opsProduct.QuantityTranfer = quantity;
                    opsProduct.QuantityBBGN = quantity;
                    opsProduct.QuantityReturn = 0;
                    model.OPS_DITOProduct.Add(opsProduct);
                    #endregion


                    model.SaveChanges();

                    //cap nhat san luong cu
                    if (qropsProduct.Quantity > 0)
                    {
                        var percentRemain = (qropsProduct.Quantity - quantity) / qropsProduct.Quantity;
                        var qRemain = qropsProduct.Quantity - quantity;
                        qropsProduct.Quantity = qRemain;
                        qropsProduct.QuantityBBGN = qRemain;
                        qropsProduct.QuantityTranfer = qRemain;

                        qrOpsGP.Ton = qrOpsGP.Ton * percentRemain;
                        qrOpsGP.TonBBGN = qrOpsGP.TonBBGN * percentRemain;
                        qrOpsGP.TonTranfer = qrOpsGP.TonTranfer * percentRemain;

                        qrOpsGP.CBM = qrOpsGP.CBM * percentRemain;
                        qrOpsGP.CBMBBGN = qrOpsGP.CBMBBGN * percentRemain;
                        qrOpsGP.CBMTranfer = qrOpsGP.CBMTranfer * percentRemain;

                        qrOpsGP.Quantity = qrOpsGP.Quantity * percentRemain;
                        qrOpsGP.QuantityBBGN = qrOpsGP.QuantityBBGN * percentRemain;
                        qrOpsGP.QuantityTranfer = qrOpsGP.QuantityTranfer * percentRemain;
                    }


                    //cap nhat san luong moi
                    var lstProduct = opsGP.OPS_DITOProduct;

                    if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeTon.Value);
                        opsGP.Ton = sum;
                        opsGP.TonBBGN = sum;
                        opsGP.TonTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeCBM.Value);
                        opsGP.CBM = sum;
                        opsGP.CBMBBGN = sum;
                        opsGP.CBMTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeQuantity.Value);
                        opsGP.Quantity = sum;
                        opsGP.QuantityBBGN = sum;
                        opsGP.QuantityReturn = sum;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_SplitDN(int opsGroupID, double quantity)
        {
            try
            {
                var result = new DTOResult();

                using (var model = new DataEntities())
                {
                    var qrOpsGP = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsGroupID);
                    if (qrOpsGP == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    var qropsProduct = qrOpsGP.OPS_DITOProduct.FirstOrDefault();
                    if (qropsProduct == null)
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    if (qropsProduct.Quantity < quantity)
                        throw FaultHelper.BusinessFault(null, null, "Số lượng không hợp lệ");

                    #region tao moi OPS_DITOGroupProduct

                    var opsGP = new OPS_DITOGroupProduct();
                    opsGP.ORD_GroupProduct = qrOpsGP.ORD_GroupProduct;
                    opsGP.DITOMasterID = qrOpsGP.DITOMasterID;
                    opsGP.CBM = 0;
                    opsGP.Ton = 0;
                    opsGP.Quantity = 0;
                    opsGP.CBMTranfer = 0;
                    opsGP.TonTranfer = 0;
                    opsGP.QuantityTranfer = 0;
                    opsGP.CBMBBGN = 0;
                    opsGP.QuantityBBGN = 0;
                    opsGP.TonBBGN = 0;
                    opsGP.QuantityLoading = 0;
                    opsGP.DNCode = string.Empty;
                    opsGP.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    opsGP.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    opsGP.CreatedDate = DateTime.Now;
                    opsGP.CreatedBy = Account.UserName;
                    opsGP.IsOrigin = qrOpsGP.IsOrigin;
                    opsGP.IsInput = true;
                    opsGP.GroupSort = qrOpsGP.GroupSort;
                    opsGP.DateFromCome = null;
                    opsGP.DateFromLeave = null;
                    opsGP.DateFromLoadEnd = null;
                    opsGP.DateFromLoadStart = null;
                    opsGP.DateToCome = null;
                    opsGP.DateToLeave = null;
                    opsGP.DateToLoadEnd = null;
                    opsGP.DateToLoadStart = null;
                    opsGP.Note = qrOpsGP.Note;
                    opsGP.Note1 = qrOpsGP.Note1;
                    opsGP.Note2 = qrOpsGP.Note2;
                    opsGP.InvoiceBy = qrOpsGP.InvoiceBy;
                    opsGP.InvoiceDate = qrOpsGP.InvoiceDate;
                    opsGP.InvoiceNote = qrOpsGP.InvoiceNote;
                    opsGP.DateDN = qrOpsGP.DateDN;

                    model.OPS_DITOGroupProduct.Add(opsGP);


                    #endregion

                    #region tao moi OPS_Product

                    var opsProduct = new OPS_DITOProduct();
                    opsProduct.CreatedDate = DateTime.Now;
                    opsProduct.CreatedBy = Account.UserName;
                    opsProduct.OPS_DITOGroupProduct = opsGP;
                    opsProduct.ORD_Product = qropsProduct.ORD_Product;
                    opsProduct.Quantity = quantity;
                    opsProduct.QuantityTranfer = quantity;
                    opsProduct.QuantityBBGN = quantity;
                    opsProduct.QuantityReturn = 0;
                    model.OPS_DITOProduct.Add(opsProduct);
                    #endregion

                    model.SaveChanges();
                    //cap nhat san luong cu
                    if (qropsProduct.Quantity > 0)
                    {
                        var percentRemain = (qropsProduct.Quantity - quantity) / qropsProduct.Quantity;
                        double quantityRemain = qropsProduct.Quantity - quantity;
                        qropsProduct.Quantity = quantityRemain;
                        qropsProduct.QuantityBBGN = quantityRemain;
                        qropsProduct.QuantityTranfer = quantityRemain;

                        qrOpsGP.Ton = qrOpsGP.Ton * percentRemain;
                        qrOpsGP.TonBBGN = qrOpsGP.TonBBGN * percentRemain;
                        qrOpsGP.TonTranfer = qrOpsGP.TonTranfer * percentRemain;

                        qrOpsGP.CBM = qrOpsGP.CBM * percentRemain;
                        qrOpsGP.CBMBBGN = qrOpsGP.CBMBBGN * percentRemain;
                        qrOpsGP.CBMTranfer = qrOpsGP.CBMTranfer * percentRemain;

                        qrOpsGP.Quantity = qrOpsGP.Quantity * percentRemain;
                        qrOpsGP.QuantityBBGN = qrOpsGP.QuantityBBGN * percentRemain;
                        qrOpsGP.QuantityTranfer = qrOpsGP.QuantityTranfer * percentRemain;
                    }


                    //cap nhat san luong moi
                    var lstProduct = opsGP.OPS_DITOProduct;

                    if (lstProduct.Where(c => c.ORD_Product.ExchangeTon.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeTon.Value);
                        opsGP.Ton = sum;
                        opsGP.TonBBGN = sum;
                        opsGP.TonTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeCBM.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeCBM.Value);
                        opsGP.CBM = sum;
                        opsGP.CBMBBGN = sum;
                        opsGP.CBMTranfer = sum;
                    }
                    if (lstProduct.Where(c => c.ORD_Product.ExchangeQuantity.HasValue).Count() > 0)
                    {
                        var sum = lstProduct.Sum(c => c.Quantity * c.ORD_Product.ExchangeQuantity.Value);
                        opsGP.Quantity = sum;
                        opsGP.QuantityBBGN = sum;
                        opsGP.QuantityTranfer = sum;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult DIMonitorMaster_SOPartnerLocation(string request, int customerID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var qrListCusLocaiton = model.CUS_Location.Where(c => c.CUS_Partner.CustomerID == customerID).Select(c => new CUSLocation
                    {
                        ID = c.ID,
                        Code = c.Code,
                        LocationID = c.LocationID,
                        CusPartrCode = c.CUS_Partner.PartnerCode,
                        Address = c.CAT_Location.Address,
                        LocationName = c.LocationName,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = qrListCusLocaiton.Total;
                    result.Data = qrListCusLocaiton.Data as IEnumerable<CUSLocation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCombobox> DIMonitorMaster_SOPartnerList(int customerID)
        {
            try
            {
                var result = new List<DTOCombobox>();
                using (var model = new DataEntities())
                {
                    result = model.CUS_Partner.Where(c => c.CustomerID == customerID).Select(c => new DTOCombobox
                    {
                        Text = c.PartnerCode,
                        ValueInt = c.ID
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int DIMonitorMaster_PartnerLocationSave(DTOCUSPartnerLocation item, int cusPartID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperRouting.CATLocation_DIMonitorMaster_PartnerLocationSave(model, Account, item, cusPartID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_UpdateCashCollection(int ordGroupID, bool value)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var qr = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == ordGroupID);
                    if (qr == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy SO");
                    qr.ModifiedBy = Account.UserName;
                    qr.ModifiedDate = DateTime.Now;
                    qr.HasCashCollect = value;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        /// <summary>
        /// Cập nhật DITOLocation
        /// </summary>
        /// <param name="model"></param>
        /// <param name="mID"></param>
        private void OPS_DI_TOMaster_Update(DataEntities model, int mID, List<int> dataGop)
        {
            var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == mID);
            if (obj != null)
            {
                var dataLocation = new List<DTOOPSDITOLocation>();
                var dataOPS = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == null && dataGop.Contains(c.ID) && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel).ToList();
                foreach (var item in dataOPS)
                {
                    item.ModifiedBy = Account.UserName;
                    item.ModifiedDate = DateTime.Now;
                    item.DITOMasterID = obj.ID;
                }

                var idx = 0;
                var sOrder = model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID && c.LocationID > 0).OrderByDescending(c => c.SortOrder).FirstOrDefault();
                if (sOrder != null)
                    idx = sOrder.SortOrder;

                var dataTemp = new List<int>();
                foreach (var item in dataOPS.Select(c => c.ORD_GroupProduct.CUS_Location.LocationID).Distinct().ToList())
                {
                    if (!dataTemp.Contains(item))
                    {
                        dataTemp.Add(item);
                        var objLocation = model.OPS_DITOLocation.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.LocationID == item);
                        if (objLocation == null)
                        {
                            objLocation = new OPS_DITOLocation();
                            objLocation.CreatedBy = Account.UserName;
                            objLocation.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(objLocation);
                            objLocation.OPS_DITOMaster = obj;
                            objLocation.LocationID = item;
                            objLocation.SortOrder = idx++;
                            objLocation.DateComeEstimate = DateTime.Now;
                            objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                            if (dataOPS.Count(c => c.ORD_GroupProduct.CUS_Location1.LocationID == item) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                        }
                        else
                        {
                            objLocation.ModifiedBy = Account.UserName;
                            objLocation.ModifiedDate = DateTime.Now;
                            if (objLocation.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet && dataOPS.Count(c => c.ORD_GroupProduct.CUS_Location1.LocationID == item) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                        }
                    }
                }
                foreach (var item in dataOPS.Select(c => c.ORD_GroupProduct.CUS_Location1.LocationID).Distinct().ToList())
                {
                    if (!dataTemp.Contains(item))
                    {
                        dataTemp.Add(item);
                        var objLocation = model.OPS_DITOLocation.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.LocationID == item);
                        if (objLocation == null)
                        {
                            objLocation = new OPS_DITOLocation();
                            objLocation.CreatedBy = Account.UserName;
                            objLocation.CreatedDate = DateTime.Now;
                            model.OPS_DITOLocation.Add(objLocation);
                            objLocation.OPS_DITOMaster = obj;
                            objLocation.LocationID = item;
                            objLocation.SortOrder = idx++;
                            objLocation.DateComeEstimate = DateTime.Now;
                            objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                            objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                            if (dataOPS.Count(c => c.ORD_GroupProduct.CUS_Location.LocationID == item) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                        }
                        else
                        {
                            objLocation.ModifiedBy = Account.UserName;
                            objLocation.ModifiedDate = DateTime.Now;
                            if (objLocation.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery && dataOPS.Count(c => c.ORD_GroupProduct.CUS_Location.LocationID == item) > 0)
                                objLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                        }
                    }
                }
                model.SaveChanges();
            }
        }

        #endregion

        #region Timeline

        public DTOMON_Schedule_Data MONControlTower_Schedule(DTOMONControlTower_ObjectFilter item)
        {
            try
            {
                DTOMON_Schedule_Data result = new DTOMON_Schedule_Data();
                result.ListResource = new List<DTOMON_Schedule_Resource>();
                result.ListTask = new List<DTOMON_Schedule_Task>();
                using (var model = new DataEntities())
                {
                    int iTendered = -(int)SYSVarType.StatusOfDITOMasterTendered;
                    int iDelivery = -(int)SYSVarType.StatusOfDITOMasterDelivery;
                    int iReceived = -(int)SYSVarType.StatusOfDITOMasterReceived;
                    item.lstVendorID.Add(Account.SYSCustomerID);
                    result.ListResource = model.CUS_Vehicle.Where(c => c.VehicleID > 1 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOMON_Schedule_Resource
                    {
                        text = c.CAT_Vehicle.RegNo,
                        value = c.VehicleID
                    }).ToList();

                    result.ListTask = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID
                        && c.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPHT && c.VehicleID > 1
                        && c.StatusOfDITOMasterID >= iTendered && c.StatusOfDITOMasterID <= iReceived).Select(c => new DTOMON_Schedule_Task
                        {
                            id = c.ID,
                            MasterID = c.ID,
                            MasterCode = c.Code,
                            ListOrderCode = c.DriverName1,
                            title = c.CAT_Vehicle.RegNo,
                            VehicleID = c.VehicleID.Value,
                            ETD = c.ETD.Value,
                            ETA = c.ETA.Value,
                            summary = false,
                            TotalTrip = 0,
                            SuccessTrip = 0,
                            FailTrip = 0,
                            ActualEnd = c.ATA,
                            ActualStart = c.ATD,
                            Left = 0,
                            Width = 0,
                            StatusID = c.StatusOfDITOMasterID,
                            Status = c.StatusOfDITOMasterID == iTendered ? 1 : c.StatusOfDITOMasterID == iDelivery ? 2 : 3
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_SchedulerSaveChance(DTOOPSDITOMaster item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (qr != null)
                    {
                        qr.ETA = item.ETA;
                        qr.ETD = item.ETD;
                        qr.VehicleID = item.VehicleID;
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Station

        public DTOResult MONControlTower_DIStationList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOStation.Where(c => c.DITOMasterID == masterID).Select(c => new DTOMON_Station
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationName = c.CAT_Location.Location,
                            KM = c.KM,
                            Price = c.Price,
                            Note = c.Note,
                            DateCome = c.DateCome,
                            Address = c.CAT_Location.Address,
                            VehicleID = c.OPS_DITOMaster.VehicleID,
                            IsApproved = c.IsApproved,
                            DITOLocationName = c.OPS_DITOLocation.CAT_Location.Location
                        }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMON_Station>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTower_DIStationNotinList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var vehicleID = model.OPS_DITOMaster.Where(c => c.ID == masterID && c.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => c.VehicleID).FirstOrDefault();
                        var qrMasterStation = model.OPS_DITOStation.Where(c => c.DITOMasterID == masterID).Select(c => c.LocationID).ToList();
                        var ListLocationID = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CAT_Location.Where(c => ListLocationID.Contains(c.ID) && !qrMasterStation.Contains(c.ID)).Select(c => new DTOMON_Station
                        {
                            ID = 0,
                            LocationID = c.ID,
                            LocationName = c.Location,
                            KM = 0,
                            Price = 0,
                            Note = string.Empty,
                            Address = c.Address,
                            VehicleID = vehicleID,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMON_Station>;

                        var dnow = DateTime.Now;
                        foreach (DTOMON_Station station in result.Data)
                        {
                            var qrPriceMonth = model.CAT_StationMonth.FirstOrDefault(c => c.LocationID == station.LocationID && c.DateFrom <= dnow && c.DateTo >= dnow && c.FLM_Asset.VehicleID == vehicleID);
                            if (qrPriceMonth != null)
                                station.Price = qrPriceMonth.Price;
                            else
                            {
                                //var qrPrice = model.CAT_StationPrice.FirstOrDefault(c => c.LocationID == station.LocationID && (c.AssetID == null || c.FLM_Asset.VehicleID == vehicleID));
                                //if (qrPrice != null)
                                //    station.Price = qrPrice.Price;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTower_DILocation(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var query = model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID).Select(c => new DTOMON_OPSLocation
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            SortOrder = c.SortOrder,
                            EstimateWeight = 0
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMON_OPSLocation>;

                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private double GetEstimateWeightOfVehicle(DataEntities model, int masterID, int sortOrder)
        {
            double sum = 0;
            //trong luong xe khi ko co hang
            double? emptyWeight = model.OPS_DITOMaster.Where(c => c.ID == masterID && c.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => c.CAT_Vehicle.EmptyWeight).FirstOrDefault();
            if (emptyWeight == null)
                emptyWeight = 0;
            sum = emptyWeight.Value;
            // list location
            var qrDITOLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == masterID && c.SortOrder <= sortOrder && c.SortOrder > 1).Select(c => c.LocationID).ToList();
            // 
            sum += model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && qrDITOLocation.Contains(c.ORD_GroupProduct.CUS_Location.LocationID)).ToList().Sum(c => c.Ton);
            sum -= model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.ORD_GroupProduct.IsReturn != true && qrDITOLocation.Contains(c.ORD_GroupProduct.CUS_Location1.LocationID)).ToList().Sum(c => c.TonBBGN);
            sum += model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.ORD_GroupProduct.IsReturn == true && qrDITOLocation.Contains(c.ORD_GroupProduct.CUS_Location1.LocationID)).ToList().Sum(c => c.Ton);
            return sum;
        }

        public void MONControlTower_DIStationAdd(int masterID, List<int> ListStationID, DTOMON_OPSLocation opsLocation)
        {
            try
            {
                var dnow = DateTime.Now;
                using (var model = new DataEntities())
                {

                    foreach (var stationID in ListStationID)
                    {
                        //luu station cho master
                        var query = model.OPS_DITOStation.FirstOrDefault(c => c.DITOMasterID == masterID && c.LocationID == stationID && c.DITOLocationID == opsLocation.ID);
                        if (query == null)
                        {
                            query = new OPS_DITOStation();
                            query.DITOMasterID = masterID;
                            query.LocationID = stationID;
                            query.DITOLocationID = opsLocation.ID;
                            query.Price = 0;
                            query.IsMonth = false;
                            query.IsApproved = true;
                            query.CreatedBy = Account.UserName;
                            query.CreatedDate = DateTime.Now;
                            query.DateCome = DateTime.Now;

                            model.OPS_DITOStation.Add(query);
                            model.SaveChanges();

                            //chi phi
                            var vehicleID = model.OPS_DITOMaster.Where(c => c.ID == masterID && c.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => c.VehicleID).FirstOrDefault();
                            var weight = model.OPS_DITOMaster.Where(c => c.ID == masterID && c.StatusOfDITOMasterID != -(int)SYSVarType.StatusOfDITOMasterPHT).Select(c => c.CAT_Vehicle.RegWeight).FirstOrDefault();
                            var qrPriceMonth = model.CAT_StationMonth.FirstOrDefault(c => c.LocationID == stationID && c.DateFrom <= dnow && c.DateTo >= dnow && c.FLM_Asset.VehicleID == vehicleID);
                            if (qrPriceMonth != null)
                            {
                                query.Price = qrPriceMonth.Price;
                                query.IsMonth = true;
                            }
                            else
                            {
                                var qrPrice = model.CAT_StationPrice.Where(c => c.LocationID == stationID && c.Ton > weight).OrderBy(c => c.Ton).FirstOrDefault();
                                if (qrPrice != null)
                                    query.Price = qrPrice.Price;
                            }
                            model.SaveChanges();
                            //end chi phi
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_DIStationRemove(List<int> ListDITOStationID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in ListDITOStationID)
                    {
                        var query = model.OPS_DITOStation.FirstOrDefault(c => c.ID == id);
                        if (query != null)
                        {
                            model.OPS_DITOStation.Remove(query);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_DIStationApprove(int id, bool value)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOStation.FirstOrDefault(c => c.ID == id);
                    if (query != null)
                    {
                        query.IsApproved = value;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_DIStationSaveChanges(List<DTOMON_Station> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst)
                    {
                        var query = model.OPS_DITOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (query != null)
                        {
                            query.ModifiedBy = Account.UserName;
                            query.ModifiedDate = DateTime.Now;
                            query.DateCome = item.DateCome;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region hang tra ve

        public DTOResult DIMonitorMaster_GOPReturnList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<DTOMONOPSTODetail> lst = new List<DTOMONOPSTODetail>();
                    var qreturn = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID == masterID && c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn == true).Select(c => new DTOMONOPSTODetail
                    {
                        ID = c.ID,
                        OPSProductID = c.ID,
                        OPSGroupProductID = c.DITOGroupProductID,
                        IsMergeable = false,
                        OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                        GroupProductID = c.OPS_DITOGroupProduct.ORD_GroupProduct.GroupOfProductID,
                        ETA = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETA,
                        ETD = c.OPS_DITOGroupProduct.ORD_GroupProduct.ETD,
                        CBM = c.OPS_DITOGroupProduct.CBM,
                        Ton = c.OPS_DITOGroupProduct.Ton,
                        QuantityReturn = c.QuantityReturn,
                        OrderGroupProductID = c.OPS_DITOGroupProduct.OrderGroupProductID.Value,
                        GroupProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                        SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                        DNCode = c.OPS_DITOGroupProduct.DNCode,
                        Note = c.OPS_DITOGroupProduct.Note1,
                        LocationToID = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID,
                        LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code,
                        LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                        LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        LocationToCountry = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Country.CountryName,
                        LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                        LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                        ProductID = c.ORD_Product.ProductID,
                        ProductName = c.ORD_Product.CUS_Product.ProductName,
                        Price = c.ORD_Product.ORD_GroupProduct.Price,
                        InvoiceReturnBy = c.OPS_DITOGroupProduct.InvoiceReturnBy,
                        InvoiceReturnNote = c.OPS_DITOGroupProduct.InvoiceReturnNote,
                        InvoiceReturnDate = c.OPS_DITOGroupProduct.InvoiceReturnDate,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = qreturn.Total;
                    result.Data = qreturn.Data as IEnumerable<DTOMONOPSTODetail>;

                    var idx = 1;
                    foreach (DTOMONOPSTODetail item in result.Data)
                    {
                        item.STT = idx++;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_GOPReturnSave(List<DTOMONOPSTODetail> data, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var query = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.OPSProductID);
                        if (query != null)
                        {
                            query.ModifiedBy = Account.UserName;
                            query.ModifiedDate = DateTime.Now;
                            query.Quantity = item.Quantity;
                            query.QuantityBBGN = item.Quantity;
                            query.QuantityReturn = item.Quantity;
                            query.QuantityTranfer = item.Quantity;
                            query.OPS_DITOGroupProduct.InvoiceReturnBy = item.InvoiceReturnBy;
                            query.OPS_DITOGroupProduct.InvoiceReturnDate = item.InvoiceReturnDate;
                            query.OPS_DITOGroupProduct.InvoiceReturnNote = item.InvoiceReturnNote;
                            query.ORD_Product.ORD_GroupProduct.Price = item.Price;
                            query.OPS_DITOGroupProduct.Note1 = item.Note;
                            #region qui doi tan khoi
                            var ordProduct = model.ORD_Product.FirstOrDefault(c => c.ProductID == query.ORD_Product.ProductID && c.GroupProductID == query.OPS_DITOGroupProduct.OrderGroupProductID);
                            ordProduct.Quantity = item.Quantity;
                            #endregion

                            #region tinh lai SL ORD_GroupProduct
                            var ordGP = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == query.OPS_DITOGroupProduct.OrderGroupProductID);
                            if (ordGP.ORD_Product.FirstOrDefault() != null)
                            {
                                //tinh lai cho ORD_GroupProduct
                                ordGP.Ton = ordGP.ORD_Product.Sum(c => c.Quantity * c.ExchangeTon.Value);
                                ordGP.CBM = ordGP.ORD_Product.Sum(c => c.Quantity * c.ExchangeCBM.Value);
                                ordGP.Quantity = ordGP.ORD_Product.Sum(c => c.Quantity * c.ExchangeQuantity.Value);

                                query.OPS_DITOGroupProduct.CBM = ordGP.CBM;
                                query.OPS_DITOGroupProduct.Ton = ordGP.Ton;
                                query.OPS_DITOGroupProduct.Quantity = ordGP.Quantity;
                                query.OPS_DITOGroupProduct.CBMTranfer = ordGP.CBM;
                                query.OPS_DITOGroupProduct.TonTranfer = ordGP.Ton;
                                query.OPS_DITOGroupProduct.QuantityTranfer = ordGP.Quantity;
                                query.OPS_DITOGroupProduct.CBMBBGN = ordGP.CBM;
                                query.OPS_DITOGroupProduct.QuantityBBGN = ordGP.Quantity;
                                query.OPS_DITOGroupProduct.TonBBGN = ordGP.Ton;
                                query.OPS_DITOGroupProduct.QuantityLoading = ordGP.Quantity;

                            }
                            #endregion
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_GOPReturnDeleteList(List<int> lst)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var opsDITOProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item);
                        if (opsDITOProduct == null)
                            throw FaultHelper.BusinessFault(null, null, "Hàng đã được xóa");

                        foreach (var detail in model.FIN_PLGroupOfProduct.Where(c => c.GroupOfProductID == opsDITOProduct.DITOGroupProductID))
                            model.FIN_PLGroupOfProduct.Remove(detail);
                        foreach (var detail in model.KPI_KPITime.Where(c => c.DITOGroupProductID == opsDITOProduct.DITOGroupProductID))
                            model.KPI_KPITime.Remove(detail);


                        var opsGroupProduct = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsDITOProduct.DITOGroupProductID);
                        var ordGroupProduct = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == opsGroupProduct.OrderGroupProductID.Value);

                        //xoa ops
                        if (opsGroupProduct.OPS_DITOProduct.Count == 1)
                        {
                            model.OPS_DITOProduct.Remove(opsDITOProduct);
                            model.OPS_DITOGroupProduct.Remove(opsGroupProduct);
                        }
                        else
                        {
                            model.OPS_DITOProduct.Remove(opsDITOProduct);
                            model.SaveChanges();
                            var opsGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == opsDITOProduct.DITOGroupProductID);
                            opsGroup.Ton = opsGroup.OPS_DITOProduct.Sum(c => c.Quantity * (c.ORD_Product.ExchangeTon.HasValue ? c.ORD_Product.ExchangeTon.Value : 0));
                            opsGroup.CBM = opsGroup.OPS_DITOProduct.Sum(c => c.Quantity * (c.ORD_Product.ExchangeCBM.HasValue ? c.ORD_Product.ExchangeCBM.Value : 0));
                            opsGroup.Quantity = opsGroup.OPS_DITOProduct.Sum(c => c.Quantity);
                        }

                        //xoa ord

                        if (ordGroupProduct != null)
                        {
                            if (ordGroupProduct.OPS_DITOGroupProduct.Count == 1)
                            {
                                if (model.OPS_DITOProduct.Count(c => c.OrderProductID == opsDITOProduct.OrderProductID) == 1)
                                {
                                    model.ORD_Product.Remove(ordGroupProduct.ORD_Product.FirstOrDefault(c => c.ID == opsDITOProduct.OrderProductID));
                                }
                                if (ordGroupProduct.ORD_Product.Count == 0)
                                {
                                    model.ORD_GroupProduct.Remove(ordGroupProduct);
                                }
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void DIMonitorMaster_GOPReturnAdd(DTOMONProductReturn item)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qrOrdGP = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == item.OrderGroupID);//qr SO cua order
                    var qrMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.MasterID);// qr master
                    var CusGP = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.GroupProductID);
                    if (qrOrdGP != null && qrMaster != null)
                    {

                        var qrOPSProductReturn = model.OPS_DITOProduct.FirstOrDefault(c => c.ORD_Product.ORD_GroupProduct.ReturnID == item.OrderGroupID && c.ORD_Product.ProductID == item.ProductID && c.OPS_DITOGroupProduct.DITOMasterID == item.MasterID);
                        if (qrOPSProductReturn == null)
                        {
                            #region tao moi ORD_GroupProduct
                            var qrORDGroupProductReturn = new ORD_GroupProduct();
                            qrORDGroupProductReturn.OrderID = qrOrdGP.OrderID;
                            qrORDGroupProductReturn.ContainerID = qrOrdGP.ContainerID;
                            qrORDGroupProductReturn.GroupOfProductID = item.GroupProductID;
                            qrORDGroupProductReturn.Description = qrOrdGP.Description;
                            qrORDGroupProductReturn.SOCode = string.Empty;
                            qrORDGroupProductReturn.PriceOfGOPID = CusGP.PriceOfGOPID;
                            qrORDGroupProductReturn.PackingID = qrOrdGP.PackingID;
                            qrORDGroupProductReturn.LocationFromID = qrOrdGP.LocationFromID;
                            qrORDGroupProductReturn.LocationToID = qrOrdGP.LocationToID;
                            qrORDGroupProductReturn.DateConfig = qrOrdGP.DateConfig;
                            qrORDGroupProductReturn.ETD = qrOrdGP.ETD;
                            qrORDGroupProductReturn.ETA = qrOrdGP.ETA;
                            qrORDGroupProductReturn.Price = item.Price; // cap nhat gia
                            qrORDGroupProductReturn.CUSRoutingID = qrOrdGP.CUSRoutingID;
                            qrORDGroupProductReturn.CreatedDate = DateTime.Now;
                            qrORDGroupProductReturn.CreatedBy = Account.UserName;
                            qrORDGroupProductReturn.DNCode = qrOrdGP.DNCode;
                            qrORDGroupProductReturn.ETARequest = qrOrdGP.ETARequest;
                            qrORDGroupProductReturn.PartnerID = qrOrdGP.PartnerID;
                            qrORDGroupProductReturn.IsReturn = true;
                            qrORDGroupProductReturn.ReturnID = item.OrderGroupID;
                            qrORDGroupProductReturn.Ton = 0;
                            qrORDGroupProductReturn.CBM = 0;
                            qrORDGroupProductReturn.Quantity = 0;
                            model.ORD_GroupProduct.Add(qrORDGroupProductReturn);
                            #endregion

                            #region them ORD_Product
                            var qrORDProductReturn = new ORD_Product();
                            qrORDProductReturn.ORD_GroupProduct = qrORDGroupProductReturn;
                            qrORDProductReturn.CreatedBy = Account.UserName;
                            qrORDProductReturn.CreatedDate = DateTime.Now;
                            qrORDProductReturn.ProductID = item.ProductID;
                            model.ORD_Product.Add(qrORDProductReturn);
                            #endregion

                            qrORDProductReturn.Quantity = item.Quantity;

                            #region qui doi tan khoi
                            var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.GroupProductID);
                            if (cusGroup != null)
                            {
                                var cusproduct = model.CUS_Product.FirstOrDefault(c => c.ID == item.ProductID);
                                if (cusproduct != null)
                                {
                                    qrORDProductReturn.PackingID = cusproduct.PackingID;
                                    if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                    {
                                        qrORDProductReturn.ExchangeTon = 1;
                                        qrORDProductReturn.ExchangeCBM = 0;
                                        qrORDProductReturn.ExchangeQuantity = 0;
                                        if (cusproduct.Weight.HasValue && cusproduct.Weight.Value > 0 && cusproduct.CBM.HasValue)
                                        {
                                            qrORDProductReturn.ExchangeCBM = cusproduct.CBM.Value / cusproduct.Weight.Value;
                                            qrORDProductReturn.ExchangeQuantity = 1 / cusproduct.Weight.Value;
                                        }
                                        qrORDGroupProductReturn.Ton += item.Quantity;
                                        qrORDGroupProductReturn.CBM += item.Quantity * qrORDProductReturn.ExchangeCBM.Value;
                                        qrORDGroupProductReturn.Quantity += item.Quantity * qrORDProductReturn.ExchangeQuantity.Value;
                                    }
                                    if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                    {
                                        qrORDProductReturn.ExchangeCBM = 1;
                                        qrORDProductReturn.ExchangeTon = 0;
                                        qrORDProductReturn.ExchangeQuantity = 0;
                                        if (cusproduct.Weight.HasValue && cusproduct.CBM.Value > 0 && cusproduct.CBM.HasValue)
                                        {
                                            qrORDProductReturn.ExchangeTon = cusproduct.Weight.Value / cusproduct.CBM.Value;
                                            qrORDProductReturn.ExchangeQuantity = 1 / cusproduct.CBM.Value;
                                        }
                                        qrORDGroupProductReturn.CBM += item.Quantity;
                                        qrORDGroupProductReturn.Ton += item.Quantity * qrORDProductReturn.ExchangeTon.Value;
                                        qrORDGroupProductReturn.Quantity += item.Quantity * qrORDProductReturn.ExchangeQuantity.Value;
                                    }
                                    if (cusproduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                    {
                                        qrORDProductReturn.ExchangeTon = cusproduct.Weight.HasValue ? cusproduct.Weight.Value : 0;
                                        qrORDProductReturn.ExchangeCBM = cusproduct.CBM.HasValue ? cusproduct.CBM.Value : 0;
                                        qrORDProductReturn.ExchangeQuantity = 1;
                                        qrORDGroupProductReturn.CBM += item.Quantity * qrORDProductReturn.ExchangeCBM.Value;
                                        qrORDGroupProductReturn.Ton += item.Quantity * qrORDProductReturn.ExchangeTon.Value;
                                        qrORDGroupProductReturn.Quantity += item.Quantity;
                                    }
                                }
                            }
                            #endregion

                            //ops
                            var qrOpsGP = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.DITOMasterID == item.MasterID && c.OrderGroupProductID == item.OrderGroupID);
                            if (qrOpsGP != null)
                            {

                                #region tao moi OPS_DITOGroupProduct
                                var qrOPSGroupProductReturn = new OPS_DITOGroupProduct();
                                qrOPSGroupProductReturn.ORD_GroupProduct = qrORDGroupProductReturn;
                                qrOPSGroupProductReturn.DITOMasterID = item.MasterID;
                                qrOPSGroupProductReturn.CBM = qrORDGroupProductReturn.CBM;
                                qrOPSGroupProductReturn.Ton = qrORDGroupProductReturn.Ton;
                                qrOPSGroupProductReturn.Quantity = qrORDGroupProductReturn.Quantity;
                                qrOPSGroupProductReturn.CBMTranfer = qrORDGroupProductReturn.CBM;
                                qrOPSGroupProductReturn.TonTranfer = qrORDGroupProductReturn.Ton;
                                qrOPSGroupProductReturn.QuantityTranfer = qrORDGroupProductReturn.Quantity;
                                qrOPSGroupProductReturn.CBMBBGN = qrORDGroupProductReturn.CBM;
                                qrOPSGroupProductReturn.QuantityBBGN = qrORDGroupProductReturn.Quantity;
                                qrOPSGroupProductReturn.TonBBGN = qrORDGroupProductReturn.Ton;
                                qrOPSGroupProductReturn.QuantityLoading = qrORDGroupProductReturn.Quantity;
                                qrOPSGroupProductReturn.DNCode = string.Empty;
                                qrOPSGroupProductReturn.QuantityLoading = 0;
                                qrOPSGroupProductReturn.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusComplete;
                                qrOPSGroupProductReturn.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODComplete;
                                qrOPSGroupProductReturn.CreatedDate = DateTime.Now;
                                qrOPSGroupProductReturn.CreatedBy = Account.UserName;
                                qrOPSGroupProductReturn.IsOrigin = qrOpsGP.IsOrigin;
                                qrOPSGroupProductReturn.IsInput = qrOpsGP.IsInput;
                                qrOPSGroupProductReturn.GroupSort = qrOpsGP.GroupSort;
                                qrOPSGroupProductReturn.DateFromCome = qrOpsGP.DateFromCome;
                                qrOPSGroupProductReturn.DateFromLeave = qrOpsGP.DateFromLeave;
                                qrOPSGroupProductReturn.DateFromLoadEnd = qrOpsGP.DateFromLoadEnd;
                                qrOPSGroupProductReturn.DateFromLoadStart = qrOpsGP.DateFromLoadStart;
                                qrOPSGroupProductReturn.DateToCome = qrOpsGP.DateToCome;
                                qrOPSGroupProductReturn.DateToLeave = qrOpsGP.DateToLeave;
                                qrOPSGroupProductReturn.DateToLoadEnd = qrOpsGP.DateToLoadEnd;
                                qrOPSGroupProductReturn.DateToLoadStart = qrOpsGP.DateToLoadStart;
                                qrOPSGroupProductReturn.Note = string.Empty;
                                qrOPSGroupProductReturn.Note1 = item.Note;
                                qrOPSGroupProductReturn.Note2 = string.Empty;
                                qrOPSGroupProductReturn.InvoiceBy = qrOpsGP.InvoiceBy;
                                qrOPSGroupProductReturn.InvoiceDate = qrOpsGP.InvoiceDate;
                                qrOPSGroupProductReturn.InvoiceNote = qrOpsGP.InvoiceNote;
                                qrOPSGroupProductReturn.InvoiceReturnBy = item.InvoiceReturnBy;
                                qrOPSGroupProductReturn.InvoiceReturnDate = item.InvoiceReturnDate;
                                qrOPSGroupProductReturn.InvoiceReturnNote = item.InvoiceReturnNote;
                                qrOPSGroupProductReturn.DateDN = qrOpsGP.DateDN;

                                model.OPS_DITOGroupProduct.Add(qrOPSGroupProductReturn);


                                #endregion

                                #region tao moi OPS_Product
                                qrOPSProductReturn = new OPS_DITOProduct();
                                qrOPSProductReturn.CreatedDate = DateTime.Now;
                                qrOPSProductReturn.CreatedBy = Account.UserName;
                                qrOPSProductReturn.OPS_DITOGroupProduct = qrOPSGroupProductReturn;
                                qrOPSProductReturn.ORD_Product = qrORDProductReturn;
                                model.OPS_DITOProduct.Add(qrOPSProductReturn);
                                #endregion

                                qrOPSProductReturn.Quantity = qrORDProductReturn.Quantity;
                                qrOPSProductReturn.QuantityTranfer = qrORDProductReturn.Quantity;
                                qrOPSProductReturn.QuantityBBGN = qrORDProductReturn.Quantity;
                                qrOPSProductReturn.QuantityReturn = 0;

                            }
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Hàng trả về này đã có ,chọn hàng trả về khác");
                        }
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "SO không tồn tại");
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCombobox> DIMonitor_DITOGroupProductList(int masterID)
        {
            try
            {
                var result = new List<DTOCombobox>();
                using (var model = new DataEntities())
                {
                    var qr = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == masterID && c.ORD_GroupProduct.IsReturn != true).Select(c => new
                    {
                        Text = "(" + c.ORD_GroupProduct.ORD_Order.Code + ")" + c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                        ValueInt = c.OrderGroupProductID.Value
                    }).Distinct().ToList();
                    result = qr.Select(c => new DTOCombobox
                    {
                        Text = c.Text,
                        ValueInt = c.ValueInt
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCUSProduct> DIMonitor_CUSProductList(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOCUSProduct> result = new List<DTOCUSProduct>();
                    //list customer
                    var qrmaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    List<int> lstCus = new List<int>();
                    if (qrmaster != null)
                    {
                        lstCus = qrmaster.OPS_DITOGroupProduct.Select(c => c.ORD_GroupProduct.ORD_Order.CustomerID).Distinct().ToList();
                    }
                    //list gop return from list customer
                    List<CUSGroupOfProduct> lstReturnGOP = new List<CUSGroupOfProduct>();
                    foreach (var o in lstCus)
                    {
                        result.AddRange(model.CUS_Product.Where(c => c.CUS_GroupOfProduct.CustomerID == o).Select(c => new DTOCUSProduct
                        {
                            ID = c.ID,
                            ProductName = c.ProductName,
                            Code = c.Code,
                            GroupOfProductID = c.GroupOfProductID,
                            HasReturn = c.CUS_GroupOfProduct.HasReturn,
                        }).ToList());
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<CUSGroupOfProduct> DIMonitorMaster_CUSGOPList(int masterID)
        {
            try
            {
                var result = new List<CUSGroupOfProduct>();
                using (var model = new DataEntities())
                {
                    //list customer
                    var qrmaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    List<int> lstCus = new List<int>();
                    if (qrmaster != null)
                    {
                        lstCus = qrmaster.OPS_DITOGroupProduct.Select(c => c.ORD_GroupProduct.ORD_Order.CustomerID).Distinct().ToList();
                    }
                    result = model.CUS_GroupOfProduct.Where(c => lstCus.Contains(c.CustomerID) && c.HasReturn == true && c.CUS_Product.Count > 0).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        GroupName = c.GroupName,
                        Code = c.Code,
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Notification

        public List<DTOMON_WFL_Message> MONControlTower_GetAllNotification()
        {
            try
            {
                var result = new List<DTOMON_WFL_Message>();
                var dfrom = DateTime.Now.AddDays(-3);
                var dto = DateTime.Now;
                using (var model = new DataEntities())
                {
                    result = model.WFL_Message.Where(c => c.WFL_Action.TypeOfActionID == (int)WFLTypeOfAction.MessageTMS && c.WFL_Action.WFL_Event.Code.Substring(0, 3) == "OPS"
                        && c.CreatedDate >= dfrom && c.CreatedDate <= dto && c.WFL_Action.UserID == Account.UserID).Select(c => new DTOMON_WFL_Message
                    {
                        Message = c.Message,
                        CreatedDate = c.CreatedDate,
                        ActionCode = c.WFL_Action.WFL_Event.Code
                    }).OrderByDescending(c => c.CreatedDate).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ToMaster

        public DTOResult MONControlTower_TruckRead(string request, int? vendorID, DateTime? dfrom, DateTime? dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null || vendorID < 0)
                    {
                        vendorID = Account.SYSCustomerID;
                    }
                    List<DTOMONCT_Vehicle> query = new List<DTOMONCT_Vehicle>();

                    if (vendorID != Account.SYSCustomerID)
                    {
                        query = model.CUS_Vehicle.Where(c => c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            Status = "",
                        }).Distinct().ToList();
                    }
                    else
                    {
                        query = model.FLM_Asset.Where(c => c.VehicleID.HasValue && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.VehicleID.Value,
                            RegNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            Status = "",
                        }).Distinct().ToList();

                        foreach (DTOMONCT_Vehicle item in query)
                        {
                            var qr = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.FLM_Asset.VehicleID == item.ID && ((dfrom == null || dto == null) || (dfrom <= c.DateTo && dto >= c.DateFrom)));
                            if (qr != null)
                            {
                                if (qr.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetComplete && qr.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetReject)
                                    switch (qr.StatusOfAssetTimeSheetID)
                                    {
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster:
                                            item.Status = "Chở hàng";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                            item.Status = "Chở hàng";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                            item.Status = "Bảo dưỡng";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                            item.Status = "Đăng kiểm";
                                            break;
                                        case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                            item.Status = "Sửa chữa";
                                            break;
                                    }
                                else
                                {
                                    item.Status = "Rảnh";
                                }

                            }
                            else
                            {
                                item.Status = "Rảnh";
                            }
                        }
                    }

                    var rs = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = rs.Total;
                    result.Data = rs.Data as IEnumerable<DTOMONCT_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_ChangeVehicle(int masterID, int vehicleID, int vendorID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qrmaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (qrmaster == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không còn tồn tại");
                    if (qrmaster.StatusOfDITOMasterID > -(int)SYSVarType.StatusOfDITOMasterTendered)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến đã chạy không thể thay xe");
                    qrmaster.ModifiedBy = Account.UserName;
                    qrmaster.ModifiedDate = DateTime.Now;
                    qrmaster.VehicleID = vehicleID;
                    qrmaster.VendorOfVehicleID = vendorID < 0 ? Account.SYSCustomerID : vendorID;
                    var qrTimesheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ReferID == masterID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    if (qrTimesheet != null)
                    {
                        qrTimesheet.ModifiedBy = Account.UserName;
                        qrTimesheet.ModifiedDate = DateTime.Now;
                        var qrAsset = model.FLM_Asset.Where(c => c.SYSCustomerID == qrmaster.VendorOfVehicleID && c.VehicleID == vehicleID).Select(c => c.ID).FirstOrDefault();
                        if (qrAsset > 0)
                        {
                            qrTimesheet.AssetID = qrAsset;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region change driver

        public void MONControlTower_ChangeDriver(int masterID, int driverID, int typeOfDriver, string reason)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (objMaster != null)
                    {

                        objMaster.ModifiedBy = Account.UserName;
                        objMaster.ModifiedDate = DateTime.Now;
                        var qrcatDriver = model.FLM_Driver.FirstOrDefault(c => c.ID == driverID);
                        switch (typeOfDriver)
                        {
                            case 1://tai xe
                                if (objMaster.DriverID1 != driverID)
                                {
                                    objMaster.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                    objMaster.DriverID1 = driverID;
                                    if (qrcatDriver != null)
                                    {
                                        objMaster.DriverName1 = qrcatDriver.CAT_Driver.LastName + " " + qrcatDriver.CAT_Driver.FirstName;
                                    }
                                    var qrTimeSheetDriver = model.FLM_AssetTimeSheetDriver.FirstOrDefault(c => c.FLM_AssetTimeSheet.ReferID == masterID && c.FLM_AssetTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.IsMain && !c.IsReject && c.DriverID == driverID);
                                    if (qrTimeSheetDriver != null)
                                    {
                                        qrTimeSheetDriver.IsReject = true;
                                        qrTimeSheetDriver.ModifiedBy = Account.UserName;
                                        qrTimeSheetDriver.ModifiedDate = DateTime.Now;

                                        var obj = new FLM_AssetTimeSheetDriver();
                                        obj.CreatedBy = Account.UserName;
                                        obj.CreatedDate = DateTime.Now;
                                        obj.DriverID = driverID;
                                        obj.IsMain = true;
                                        obj.IsReject = false;
                                        obj.AssetTimeSheetID = qrTimeSheetDriver.AssetTimeSheetID;
                                        model.FLM_AssetTimeSheetDriver.Add(obj);
                                    }
                                }
                                break;
                            case 2://phu lai
                                objMaster.TypeOfDriverID2 = -(int)SYSVarType.TypeOfDriverEx;
                                objMaster.DriverID2 = driverID;
                                if (qrcatDriver != null)
                                {
                                    objMaster.DriverName2 = qrcatDriver.CAT_Driver.LastName + " " + qrcatDriver.CAT_Driver.FirstName;
                                }
                                break;
                            case 3://boc xep
                                objMaster.TypeOfDriverID3 = -(int)SYSVarType.TypeOfDriverLoad;
                                objMaster.DriverID3 = driverID;
                                break;
                            default:
                                objMaster.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                                objMaster.DriverID1 = driverID;
                                break;

                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTower_DriverRead(string request, DateTime? dfrom, DateTime? dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        Cellphone = c.CAT_Driver.Cellphone,
                        CardNumber = c.CAT_Driver.CardNumber,
                        Note = "Rảnh",
                        IsUse = false,
                    }).ToList();
                    foreach (var item in query)
                    {
                        var qrTimeSheetDriver = model.FLM_AssetTimeSheetDriver.FirstOrDefault(c => ((c.FLM_AssetTimeSheet.DateTo > dfrom && c.FLM_AssetTimeSheet.DateFrom < dfrom) || (c.FLM_AssetTimeSheet.DateTo > dto && c.FLM_AssetTimeSheet.DateFrom < dto)) && c.FLM_AssetTimeSheet.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetReject && c.FLM_AssetTimeSheet.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetComplete && c.IsMain && !c.IsReject && c.DriverID == item.ID);
                        if (qrTimeSheetDriver != null)
                        {
                            item.Note = "Bận";
                            item.IsUse = true;
                        }
                    }
                    var data = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = data.Total;
                    result.Data = data.Data as IEnumerable<DTOFLMDriver>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONDriver> MONControlTower_SupDriverRead(int masterID)
        {
            List<DTOMONDriver> result = new List<DTOMONDriver>();
            using (var model = new DataEntities())
            {
                var qrMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                if (qrMaster != null)
                {
                    if (qrMaster.DriverID2 > 0)
                    {
                        result.Add(new DTOMONDriver
                        {
                            ID = qrMaster.DriverID2.Value,
                            Name = qrMaster.FLM_Driver1.CAT_Driver.LastName + " " + qrMaster.FLM_Driver1.CAT_Driver.FirstName,
                            TypeOfDriverID = qrMaster.TypeOfDriverID2,
                            TypeOfDriverName = qrMaster.SYS_Var5.ValueOfVar,
                            Role = qrMaster.TypeOfDriverID2 == -(int)SYSVarType.TypeOfDriverLoad ? "load" : "ex",
                            Card = qrMaster.FLM_Driver1.CAT_Driver.CardNumber
                        });
                    }
                    if (qrMaster.DriverID3 > 0)
                    {
                        result.Add(new DTOMONDriver
                        {
                            ID = qrMaster.DriverID3.Value,
                            Name = qrMaster.FLM_Driver2.CAT_Driver.LastName + " " + qrMaster.FLM_Driver2.CAT_Driver.FirstName,
                            TypeOfDriverID = qrMaster.TypeOfDriverID3,
                            TypeOfDriverName = qrMaster.SYS_Var6.ValueOfVar,
                            Role = qrMaster.TypeOfDriverID3 == -(int)SYSVarType.TypeOfDriverLoad ? "load" : "ex",
                            Card = qrMaster.FLM_Driver2.CAT_Driver.CardNumber
                        });
                    }
                    if (qrMaster.DriverID4 > 0)
                    {
                        result.Add(new DTOMONDriver
                        {
                            ID = qrMaster.DriverID4.Value,
                            Name = qrMaster.FLM_Driver3.CAT_Driver.LastName + " " + qrMaster.FLM_Driver3.CAT_Driver.FirstName,
                            TypeOfDriverID = qrMaster.TypeOfDriverID4,
                            TypeOfDriverName = qrMaster.SYS_Var7.ValueOfVar,
                            Role = qrMaster.TypeOfDriverID4 == -(int)SYSVarType.TypeOfDriverLoad ? "load" : "ex",
                            Card = qrMaster.FLM_Driver3.CAT_Driver.CardNumber
                        });
                    }
                    if (qrMaster.DriverID5 > 0)
                    {
                        result.Add(new DTOMONDriver
                        {
                            ID = qrMaster.DriverID5.Value,
                            Name = qrMaster.FLM_Driver4.CAT_Driver.LastName + " " + qrMaster.FLM_Driver4.CAT_Driver.FirstName,
                            TypeOfDriverID = qrMaster.TypeOfDriverID5,
                            TypeOfDriverName = qrMaster.SYS_Var8.ValueOfVar,
                            Role = qrMaster.TypeOfDriverID5 == -(int)SYSVarType.TypeOfDriverLoad ? "load" : "ex",
                            Card = qrMaster.FLM_Driver4.CAT_Driver.CardNumber
                        });
                    }
                }
            }

            return result;
        }

        public void MONControlTower_ChangeSupDriver(int masterID, List<DTOMONDriver> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (qr != null)
                    {

                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;

                        //xoa het cac phu xe

                        qr.DriverID2 = null;
                        qr.TypeOfDriverID2 = null;
                        qr.DriverName2 = string.Empty;
                        qr.DriverTel2 = string.Empty;
                        qr.DriverCard2 = string.Empty;

                        qr.DriverID3 = null;
                        qr.TypeOfDriverID3 = null;

                        qr.DriverID4 = null;
                        qr.TypeOfDriverID4 = null;

                        qr.DriverID5 = null;
                        qr.TypeOfDriverID5 = null;

                        //cap nhat phu xe

                        foreach (var obj in lst)
                        {
                            if (qr.DriverID2 == null)
                            {
                                qr.DriverID2 = obj.ID;
                                qr.TypeOfDriverID2 = obj.TypeOfDriverID;
                            }
                            else if (qr.DriverID3 == null)
                            {
                                qr.DriverID3 = obj.ID;
                                qr.TypeOfDriverID3 = obj.TypeOfDriverID;
                            }
                            else if (qr.DriverID4 == null)
                            {
                                qr.DriverID4 = obj.ID;
                                qr.TypeOfDriverID4 = obj.TypeOfDriverID;
                            }
                            else if (qr.DriverID5 == null)
                            {
                                qr.DriverID5 = obj.ID;
                                qr.TypeOfDriverID5 = obj.TypeOfDriverID;
                            }
                        }

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region FLMDriverTimeSheet
        public List<DTOFLMVehicle> MONControlTower_TimeSheet_VehicleList()
        {
            try
            {
                var result = new List<DTOFLMVehicle>();
                using (var model = new DataEntities())
                {
                    int iTrk = -(int)SYSVarType.TypeOfAssetTruck;
                    int iTrr = -(int)SYSVarType.TypeOfAssetTractor;

                    result = model.FLM_Asset.Where(c => c.VehicleID > 0 && c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == iTrk || c.TypeOfAssetID == iTrr)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        AssetID = c.VehicleID.Value,
                        RegNo = c.CAT_Vehicle.RegNo,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        GroupOfVehicleID = -1,
                        GroupOfVehicleName = "",
                        TypeOfAssetID = c.TypeOfAssetID == iTrk ? 1 : 2
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMON_TimeSheetDriver MONControlTower_TimeSheet_VehicleTimeList(DateTime dateFrom, DateTime dateTo, bool isOpen, bool isAccept, bool isReject, bool isGet, bool isComplete, bool isRunning)
        {
            try
            {
                var rs = new DTOMON_TimeSheetDriver();
                var result = new List<DTOFLMAssetTimeSheet>();
                var iCOTOMaster = -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster;
                var iDITOMaster = -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster;

                dateFrom = dateFrom.Date;
                dateTo = dateTo.AddDays(1).Date;

                var lstStatus = new List<int>();

                if (isOpen)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetOpen);
                }
                if (isAccept)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetAccept);
                }
                if (isRunning)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetRunning);
                }
                if (isReject)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetReject);
                }

                if (isGet)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetGet);
                }
                if (isComplete)
                {
                    lstStatus.Add(-(int)SYSVarType.TypeOfAssetTimeSheetComplete);
                }
                using (var model = new DataEntities())
                {
                    //typeID: 1 chuyen xe tai, 2 chuyen xe cong, 0 la bảo trì đăng kiểm sửa chữa
                    var query = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.VehicleID > 0 && c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.DateFrom >= dateFrom && c.DateFrom <= dateTo && lstStatus.Contains(c.TypeOfAssetTimeSheetID)).Select(c => new DTOFLMAssetTimeSheet
                    {
                        ID = c.ID,
                        AssetID = c.FLM_Asset.VehicleID.Value,
                        DateFrom = c.DateFromActual,
                        DateTo = c.DateToActual,
                        StatusOfAssetTimeSheetName = c.SYS_Var.ValueOfVar,
                        StatusOfAssetTimeSheetID = c.StatusOfAssetTimeSheetID,
                        TypeOfAssetTimeSheetID = c.TypeOfAssetTimeSheetID,
                        ReferID = c.ReferID,
                        TypeID = c.StatusOfAssetTimeSheetID == iDITOMaster ? 1 : c.StatusOfAssetTimeSheetID == iCOTOMaster ? 2 : 0,
                        Note = ""
                    }).ToList();

                    var lstReSource = new List<DTOFLMVehicle>();
                    var lstVehicle = query.Select(c => c.AssetID).Distinct().ToList();
                    int iTrk = -(int)SYSVarType.TypeOfAssetTruck;

                    lstReSource = model.FLM_Asset.Where(c => lstVehicle.Contains(c.VehicleID.Value)).Select(c => new DTOFLMVehicle
                    {
                        ID = c.ID,
                        AssetID = c.VehicleID.Value,
                        RegNo = c.CAT_Vehicle.RegNo,
                        TypeOfVehicleName = c.SYS_Var.ValueOfVar,
                        GroupOfVehicleID = -1,
                        GroupOfVehicleName = "",
                        TypeOfAssetID = c.TypeOfAssetID == iTrk ? 1 : 2
                    }).ToList();

                    // cap nhat label cho item va set lai typeid
                    foreach (var item in query)
                    {

                        item.TypeID = 0;
                        switch (item.TypeOfAssetTimeSheetID)
                        {
                            default: item.TypeID = 0;
                                break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetOpen: item.TypeID = 2; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetReject: item.TypeID = 1; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetAccept: item.TypeID = 3; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetRunning: item.TypeID = -2; break;
                            case -(int)SYSVarType.TypeOfAssetTimeSheetComplete: item.TypeID = -5; break;
                        }
                        result.Add(item);
                    }
                    rs.ListEvent = result;
                    rs.ListReSource = lstReSource;
                }
                return rs;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public MON_DTOFLMDriverTimeSheet MONControlTower_TimeSheet_VehicleTimeGet(int timeID)
        {
            try
            {
                MON_DTOFLMDriverTimeSheet result = new MON_DTOFLMDriverTimeSheet();
                result.ListDriver = new List<DTOFLMDriverTimeSheetDetailDriver>();
                using (var model = new DataEntities())
                {
                    var objTime = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (objTime == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetID:" + timeID);
                    result.TimeSheetID = objTime.ID;
                    result.AssetID = objTime.AssetID;
                    result.AssetNo = objTime.FLM_Asset.VehicleID > 0 ? objTime.FLM_Asset.CAT_Vehicle.RegNo : objTime.FLM_Asset.RomoocID > 0 ? objTime.FLM_Asset.CAT_Romooc.RegNo : objTime.FLM_Asset.CAT_Container.ContainerNo;

                    result.StatusOfAssetTimeSheetName = objTime.SYS_Var.ValueOfVar;
                    result.StatusOfAssetTimeSheetID = objTime.StatusOfAssetTimeSheetID;
                    result.DateFrom = objTime.DateFrom;
                    result.DateTo = objTime.DateTo;
                    result.DateFromActual = objTime.DateFromActual;
                    result.DateToActual = objTime.DateToActual;
                    result.TypeOfAssetTimeSheetID = objTime.TypeOfAssetTimeSheetID;
                    result.TypeOfAssetTimeSheetName = objTime.SYS_Var1.ValueOfVar;
                    result.IsAccept = false;
                    result.IsAllReject = (objTime.FLM_AssetTimeSheetDriver.Count(c => c.IsReject) == objTime.FLM_AssetTimeSheetDriver.Count()) && (objTime.FLM_AssetTimeSheetDriver.Count() > 0);
                    result.IsEditable = (objTime.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster || objTime.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster) ? false : true;
                    result.IsAddDriver = (result.TypeOfAssetTimeSheetID < -(int)SYSVarType.TypeOfAssetTimeSheetAccept) && (result.IsAllReject);
                    switch (objTime.TypeOfAssetTimeSheetID)
                    {
                        case -(int)SYSVarType.TypeOfAssetTimeSheetOpen:
                            result.StatusValue = 1;
                            break;
                        case -(int)SYSVarType.TypeOfAssetTimeSheetReject:
                            result.StatusValue = 2;
                            break;
                        case -(int)SYSVarType.TypeOfAssetTimeSheetGet:
                            result.StatusValue = 3;
                            result.IsAccept = true;
                            break;
                        case -(int)SYSVarType.TypeOfAssetTimeSheetAccept:
                            result.StatusValue = 4;
                            break;
                        case -(int)SYSVarType.TypeOfAssetTimeSheetRunning:
                            result.StatusValue = 5;
                            break;

                    }
                    result.ListDriver = model.FLM_AssetTimeSheetDriver.Where(c => c.AssetTimeSheetID == objTime.ID).Select(c => new DTOFLMDriverTimeSheetDetailDriver
                    {
                        ID = c.ID,
                        EmployeeCode = c.FLM_Driver.Code,
                        DriverID = c.FLM_Driver.DriverID,
                        LastName = c.FLM_Driver.CAT_Driver.LastName,
                        FirstName = c.FLM_Driver.CAT_Driver.FirstName,
                        Cellphone = c.FLM_Driver.CAT_Driver.Cellphone,
                        CardNumber = c.FLM_Driver.CAT_Driver.CardNumber,
                        Birthday = c.FLM_Driver.CAT_Driver.Birthday,
                        Note = c.FLM_Driver.Note,
                        IsUse = c.FLM_Driver.IsUse,
                        ListDrivingLicence = c.FLM_Driver.CAT_Driver.ListDrivingLicence,
                        IsAssistant = c.FLM_Driver.IsAssistant,
                        IsReject = c.IsReject
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void MONControlTower_TimeSheet_ApproveDriver(int timeDriveID)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    var obj = model.FLM_AssetTimeSheetDriver.FirstOrDefault(c => c.ID == timeDriveID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu ID:" + timeDriveID);
                    var objTimeSheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == obj.AssetTimeSheetID);
                    objTimeSheet.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetAccept;
                    objTimeSheet.ModifiedBy = Account.UserName;
                    objTimeSheet.ModifiedDate = DateTime.Now;

                    //cap nhat thong tin chuyen
                    if (objTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)
                    {
                        var qrMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objTimeSheet.ReferID);
                        if (qrMaster == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                        qrMaster.DriverName1 = obj.FLM_Driver.CAT_Driver.LastName + " " + obj.FLM_Driver.CAT_Driver.FirstName;
                        qrMaster.DriverID1 = obj.DriverID;
                        qrMaster.ModifiedBy = Account.UserName;
                        qrMaster.ModifiedDate = DateTime.Now;
                    }
                    if (objTimeSheet.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster)
                    {
                        var qrMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objTimeSheet.ReferID);
                        if (qrMaster == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                        qrMaster.DriverName1 = obj.FLM_Driver.CAT_Driver.LastName + " " + obj.FLM_Driver.CAT_Driver.FirstName;
                        qrMaster.DriverID1 = obj.DriverID;
                        qrMaster.ModifiedBy = Account.UserName;
                        qrMaster.ModifiedDate = DateTime.Now;
                    }

                    //cap nhat FLM_AssetTimeSheetDriver
                    foreach (var d in objTimeSheet.FLM_AssetTimeSheetDriver)
                    {
                        if (d.ID != timeDriveID && d.IsReject == false)
                        {
                            model.FLM_AssetTimeSheetDriver.Remove(d);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void MONControlTower_TimeSheet_RejectDriver(int timeDriveID)
        {
            try
            {
                using (var model = new DataEntities())
                {

                    var obj = model.FLM_AssetTimeSheetDriver.FirstOrDefault(c => c.ID == timeDriveID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu ID:" + timeDriveID);
                    model.FLM_AssetTimeSheetDriver.Remove(obj);
                    //cap nhat trang thai cho timesheet
                    var objTimeSheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == obj.AssetTimeSheetID);
                    if (objTimeSheet.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetGet && objTimeSheet.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetReject)
                        throw FaultHelper.BusinessFault(null, null, "Tài xế đang chạy không được hủy");
                    objTimeSheet.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetReject;
                    objTimeSheet.ModifiedBy = Account.UserName;
                    objTimeSheet.ModifiedDate = DateTime.Now;
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        public void MONControlTower_ChangeTimeSheetDriver(int timeID, int flmDriverID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var objDriver = model.FLM_Driver.FirstOrDefault(c => c.ID == flmDriverID);

                    var obj = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (obj == null)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu TimeSheetID:" + timeID);
                    obj.TypeOfAssetTimeSheetID = -(int)SYSVarType.TypeOfAssetTimeSheetAccept;
                    //reject tai xe cu
                    int oldDriverID = 0;
                    foreach (var item in obj.FLM_AssetTimeSheetDriver)
                    {
                        if (!item.IsReject)
                        {
                            oldDriverID = item.DriverID;
                            item.IsReject = true;
                            item.ModifiedBy = Account.UserName;
                            item.ModifiedDate = DateTime.Now;
                        }
                    }
                    //tao tai xe moi
                    if (objDriver != null && oldDriverID == objDriver.DriverID)
                    {
                        var itemnew = new FLM_AssetTimeSheetDriver();
                        itemnew.FLM_AssetTimeSheet = obj;
                        itemnew.DriverID = objDriver.DriverID;
                        itemnew.IsReject = false;
                        itemnew.CreatedBy = Account.UserName;
                        itemnew.CreatedDate = DateTime.Now;
                        model.FLM_AssetTimeSheetDriver.Add(itemnew);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOFLMAssetTimeSheetCheck MONControlTower_TimeSheetDriver_CheckComplete(int timeID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOFLMAssetTimeSheetCheck result = new DTOFLMAssetTimeSheetCheck();
                    result = HelperTimeSheet.CheckComplete(model, Account, timeID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_TimeSheetDriverComplete(int timeID, DTOFLMAssetTimeSheetCheck item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTimeSheet.Complete(model, Account, timeID, item);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMON_TimeSheetInfo MONControlTower_TimeSheetDriverQuickInfo(int timeID)
        {
            try
            {
                DTOMON_TimeSheetInfo result = new DTOMON_TimeSheetInfo();
                using (var model = new DataEntities())
                {
                    var qr = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ID == timeID);
                    if (qr != null)
                    {
                        result.Type = qr.SYS_Var.ValueOfVar;
                        result.Status = qr.SYS_Var1.ValueOfVar;
                        if (qr.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster)
                        {
                            var qrMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == qr.ReferID);
                            if (qrMaster != null)
                            {
                                result.MasterCode = qrMaster.Code;
                            }
                        }
                        if (qr.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster)
                        {
                            var qrMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == qr.ReferID);
                            if (qrMaster != null)
                            {
                                result.MasterCode = qrMaster.Code;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.ServiceFault(ex);
            }
        }

        #endregion

        private int CheckTimeBlog(int h)
        {
            switch (h)
            {
                case 0:
                case 1:
                    return 0;
                case 2:
                case 3:
                    return 2;
                case 4:
                case 5:
                    return 4;
                case 6:
                case 7:
                    return 6;
                case 8:
                case 9:
                    return 8;
                case 10:
                case 11:
                    return 10;
            }
            return -1;
        }
        #endregion

        #region ControlTower CO

        public DTOResult MONControlTowerCO_OrderList(string request, DateTime dfrom, DateTime dto, bool isRunning, bool isComplete, bool isLoadAll)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {

                    int iMinStatus = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                    int iMaxStatus = -(int)SYSVarType.StatusOfCOTOMasterReceived;

                    if (!isRunning && !isComplete)
                        return result;
                    if (isRunning && !isComplete)
                    {
                        iMaxStatus = -(int)SYSVarType.StatusOfCOTOMasterDelivery;
                    }
                    if (!isRunning && isComplete)
                    {
                        iMinStatus = -(int)SYSVarType.StatusOfCOTOMasterReceived;
                    }

                    var lstStatus = new List<int>(){
                            -(int)SYSVarType.StatusOfCOContainerIMLaden,
                            -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                            -(int)SYSVarType.StatusOfCOContainerEXLaden,
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOLaden,                            
                            -(int)SYSVarType.StatusOfCOContainerLOEmpty,

                            -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                            -(int)SYSVarType.StatusOfCOContainerShipLaden,
                        };

                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_COTOMaster.VehicleID > 0 && c.IsSplit != true
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= iMinStatus && c.OPS_COTOMaster.StatusOfCOTOMasterID <= iMaxStatus
                        && c.OPS_COTOMaster.ETD >= dfrom && c.OPS_COTOMaster.ETD <= dto && (lstStatus.Contains(c.StatusOfCOContainerID) || isLoadAll)).Select(c => new DTOMONOPSTO
                        {
                            ID = c.ID,
                            MasterID = c.COTOMasterID.Value,
                            MasterCode = c.OPS_COTOMaster.Code,
                            WarningCount = model.CAT_Trouble.Count(d => d.COTOMasterID == c.COTOMasterID),
                            ETA = c.ETA,
                            ETD = c.ETD,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ContainerNo = c.OPS_Container.ContainerNo,
                            VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                            RomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                            IsCompleteCO = c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete ? true : false,
                            IsComplete = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterReceived ? true : false,
                            STT = c.SortOrder - 1,
                            StatusOfCOContainer = c.SYS_Var.ValueOfVar,
                            ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                            TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                            ETDRequest = c.OPS_Container.ORD_Container.ORD_Order.ETDRequest,
                            ETARequest = c.OPS_Container.ORD_Container.ORD_Order.ETARequest,
                            StatusOfCOTOMasterID = c.OPS_COTOMaster.StatusOfCOTOMasterID,
                        }).ToList();

                    var objSetting = ORD_SystemSetting_Get(model);
                    DateTime dtWarning = DateTime.Now;

                    foreach (DTOMONOPSTO item in query)
                    {
                        if (item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered)
                        {
                            if (objSetting.WarningETD)
                            {
                                if (item.ETD.HasValue && item.ETD < dtWarning)
                                {
                                    if (item.ETD < DateTime.Now)
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = DateTime.Now.Subtract(item.ETD.Value).TotalHours;
                                        item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                    else
                                    {
                                        item.IsWarning = true;
                                        item.WarningType = 1;
                                        item.WarningTime = item.ETD.Value.Subtract(DateTime.Now).TotalHours;
                                        item.WarningMsg = "Còn " + Math.Round(item.WarningTime, 1) + " giờ lấy hàng";
                                    }
                                }
                                else if (item.ETDRequest.HasValue && item.ETD.HasValue && item.ETD > item.ETDRequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 12;
                                    item.WarningTime = item.ETD.Value.Subtract(item.ETDRequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ yêu cầu đến kho của khách hàng";
                                }
                            }
                            if (objSetting.WarningETA && item.IsWarning != true)
                            {
                                if (item.ETA.HasValue && item.CutOffTime.HasValue && item.ETA > item.CutOffTime)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 2;
                                    item.WarningTime = item.ETA.Value.Subtract(item.CutOffTime.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ ra cảng / trả container";
                                }
                                else if (item.ETARequest.HasValue && item.ETA.HasValue && item.ETA > item.ETARequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 4;
                                    item.WarningTime = item.ETA.Value.Subtract(item.ETARequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ yêu cầu giao hàng của khách hàng";
                                }
                            }
                        }
                        else if (item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterDelivery)
                        {
                            if (objSetting.WarningETA)
                            {
                                if (item.ETA.HasValue && item.CutOffTime.HasValue && item.ETA > item.CutOffTime)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 2;
                                    item.WarningTime = item.ETA.Value.Subtract(item.CutOffTime.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ ra cảng / trả container";
                                }
                                else if (item.ETARequest.HasValue && item.ETA.HasValue && item.ETA > item.ETARequest)
                                {
                                    item.IsWarning = true;
                                    item.WarningType = 4;
                                    item.WarningTime = item.ETA.Value.Subtract(item.ETARequest.Value).TotalHours;
                                    item.WarningMsg = "Trễ " + Math.Round(item.WarningTime, 1) + " giờ yêu cầu giao hàng của khách hàng";
                                }
                            }
                        }
                    }
                    result.Total = query.ToDataSourceResult(CreateRequest(request)).Total;
                    result.Data = query.ToDataSourceResult(CreateRequest(request)).Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_Complete(List<DTO_TOMasterActualTime> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var l = lst.Select(c => new { c.MasterID, c.ATA, c.ATD }).Distinct().ToList();
                    HelperTOMaster.MONCO_TOContainerComplete_AllList(model, Account, l.Select(c => c.MasterID).Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_CompleteContainer(List<int> ListContainerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    ListContainerID = ListContainerID.Distinct().ToList();
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var containerID in ListContainerID)
                        HelperTOMaster.MONCO_TOContainerComplete_Next(model, Account, containerID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_RevertMaster(List<int> ListMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    ListMasterID = ListMasterID.Distinct().ToList();
                    HelperTOMaster.MONCO_TOContainerUnComplete_AllList(model, Account, ListMasterID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_RevertContainer(List<int> ListContainerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    ListContainerID = ListContainerID.Distinct().ToList();
                    foreach (var OPSContainerID in ListContainerID)
                    {
                        var qrOPSContainer = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == OPSContainerID);
                        if (qrOPSContainer == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPSContainer");

                        qrOPSContainer.ModifiedBy = Account.UserName;
                        qrOPSContainer.ModifiedDate = DateTime.Now;
                        qrOPSContainer.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                        qrOPSContainer.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODWait;
                        //ops location
                        var qrOPSLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == qrOPSContainer.COTOMasterID && (c.LocationID == qrOPSContainer.LocationFromID || c.LocationID == qrOPSContainer.LocationToID)).ToList();
                        foreach (var location in qrOPSLocation)
                        {
                            location.ModifiedBy = Account.UserName;
                            location.ModifiedDate = DateTime.Now;
                            location.COTOLocationStatusID = -(int)SYSVarType.COTOLocationStatusPlan;
                            location.DateCome = null;
                            location.DateLeave = null;
                            location.LoadingEnd = null;
                            location.LoadingStart = null;
                            location.SortOrderReal = null;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONOPSTOMaster MONControlTowerCO_MasterGet(int id)
        {
            try
            {
                var result = new DTOMONOPSTOMaster();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_COTOMaster.Where(c => c.ID == id).Select(c => new
                    {
                        ID = c.ID,
                        Code = c.Code,
                        ETD = c.ETD,
                        ETA = c.ETA,
                        DateFrom = c.ETD,
                        DateTo = c.ETA,
                        StatusID = c.StatusOfCOTOMasterID,
                        RomoocID = c.RomoocID > 0 ? c.RomoocID.Value : -1,
                        VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        VendorName = c.VendorOfVehicleID > 0 && c.VendorOfVehicleID != Account.SYSCustomerID ? c.CUS_Customer.CustomerName : "Xe nhà",
                        VendorID = c.VendorOfVehicleID,
                        VendorRomoocID = c.VendorOfRomoocID,
                        DriverID1 = c.DriverID1,
                        DriverID2 = c.DriverID2,
                        DriverID3 = c.DriverID3,
                        DriverName1 = c.DriverName1,
                        DriverName2 = c.DriverName2,
                        DriverTel1 = c.DriverTel1,
                        DriverTel2 = c.DriverTel2,
                        DriverCard1 = c.DriverCard1,
                        DriverCard2 = c.DriverCard2,
                        TypeOfDriverID1 = c.TypeOfDriverID1,
                        TypeOfDriverID2 = c.TypeOfDriverID2,
                        TypeOfDriverID3 = c.TypeOfDriverID3,
                        TypeOfDriverName1 = c.SYS_Var5.ValueOfVar,
                        TypeOfDriverName2 = c.SYS_Var6.ValueOfVar,
                        TypeOfDriverName3 = c.SYS_Var7.ValueOfVar,
                        KMStart = c.KMStart,
                        KMEnd = c.KMEnd,
                        ATA = c.ATA,
                        ATD = c.ATD,

                        ExTotalJoin = c.ExTotalJoin,
                        ExTotalDayOut = c.ExTotalDayOut,
                        ExIsOverWeight = c.ExIsOverWeight,
                        ExIsOverNight = c.ExIsOverNight,
                        GPSCode = c.VehicleID.HasValue ? c.CAT_Vehicle.GPSCode : string.Empty,
                        HasContainer = c.CAT_Romooc.HasContainer,
                    }).FirstOrDefault();

                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.Code = obj.Code;
                        result.ETD = obj.ETD.ToString("dd/MM/yyyy hh:mm");
                        result.ETA = obj.ETA.ToString("dd/MM/yyyy hh:mm");
                        result.ATA = obj.ATA;
                        result.ATD = obj.ATD;
                        result.VendorName = obj.VendorName;
                        result.VehicleID = obj.VehicleID;
                        result.RomoocID = obj.RomoocID;
                        result.VendorID = obj.VendorID;
                        result.VendorRomoocID = obj.VendorRomoocID;
                        result.VehicleNo = obj.VehicleNo;
                        result.RomoocNo = obj.RomoocNo;
                        result.DateFrom = obj.DateFrom;
                        result.DateTo = obj.DateTo;
                        result.GPSCode = obj.GPSCode;
                        result.KMEnd = obj.KMEnd;
                        result.KMStart = obj.KMStart;
                        result.ExTotalJoin = obj.ExTotalJoin;
                        result.ExTotalDayOut = obj.ExTotalDayOut;
                        result.ExIsOverWeight = obj.ExIsOverWeight;
                        result.ExIsOverNight = obj.ExIsOverNight;

                        result.IsVehicleVendor = result.VendorID > 0 && result.VendorID != Account.SYSCustomerID;
                        result.IsRomoocVendor = result.VendorRomoocID > 0 && result.VendorRomoocID != Account.SYSCustomerID;

                        result.Driver1 = new DTOMONDriver();
                        result.Driver2 = new DTOMONDriver();
                        result.Driver3 = new DTOMONDriver();

                        result.Driver1 = new DTOMONDriver();
                        result.Driver2 = new DTOMONDriver();
                        result.Driver3 = new DTOMONDriver();

                        result.Driver1.Name = obj.DriverName1;
                        result.Driver2.Name = obj.DriverName2;

                        result.Driver1.Card = obj.DriverCard1;
                        result.Driver2.Card = obj.DriverCard2;

                        result.Driver1.Tel = obj.DriverTel1;
                        result.Driver2.Tel = obj.DriverTel2;

                        result.Driver1.Role = obj.TypeOfDriverName1;
                        result.Driver2.Role = obj.TypeOfDriverName2;
                        result.Driver3.Role = obj.TypeOfDriverName3;

                        result.Driver1.TypeOfDriverID = obj.TypeOfDriverID1;
                        result.Driver2.TypeOfDriverID = obj.TypeOfDriverID2;
                        result.Driver3.TypeOfDriverID = obj.TypeOfDriverID3;

                        if (!result.VendorID.HasValue || result.VendorID < 1 || result.VehicleID == Account.SYSCustomerID)
                        {
                            result.Driver1.ID = obj.DriverID1 > 0 ? obj.DriverID1.Value : -1;
                            result.Driver2.ID = obj.DriverID2 > 0 ? obj.DriverID2.Value : -1;
                            result.Driver3.ID = obj.DriverID3 > 0 ? obj.DriverID3.Value : -1;
                        }

                        result.IsComplete = obj.StatusID >= -(int)SYSVarType.StatusOfCOTOMasterReceived;
                        result.IsEditable = obj.StatusID == -(int)SYSVarType.StatusOfCOTOMasterTendered;
                        result.IsTransport = obj.StatusID > -(int)SYSVarType.StatusOfCOTOMasterTendered && obj.StatusID < -(int)SYSVarType.StatusOfCOTOMasterReceived;

                        result.IsRomoocChangable = true;


                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONMonitor_OrderLog MONControlTowerCO_OrderLogList(int masterID)
        {
            try
            {
                int icoto = -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster;
                int iapproved = -(int)SYSVarType.TroubleCostStatusApproved;
                int ireject = -(int)SYSVarType.TroubleCostStatusReject;
                var result = new DTOMONMonitor_OrderLog();
                result.LstTroubleLog = new List<DTOMONMonitor_TroubleLog>();
                using (var model = new DataEntities())
                {
                    var qr = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (qr != null)
                    {
                        result.ATA = qr.ATA;
                        result.ATD = qr.ATD;
                        result.RegNo = qr.CAT_Vehicle.RegNo;
                        result.GPSCode = qr.CAT_Vehicle.GPSCode;
                        result.IsComplete = qr.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived ? true : false;
                    }
                    result.LstTroubleLog = model.FLM_AssetTimeSheet.Where(c => c.StatusOfAssetTimeSheetID == icoto && c.ReferID == masterID).Select(c => new DTOMONMonitor_TroubleLog
                    {
                        MasterID = masterID,
                        LogTime = c.DateToActual,
                        Status = string.Empty,
                        EstimateTime = c.DateTo,
                        TroubleID = -1,
                        CostStatus = -1
                    }).ToList();
                    foreach (var o in result.LstTroubleLog)
                    {
                        if (qr != null)
                        {
                            o.MasterCode = qr.Code;
                            o.RegNo = qr.CAT_Vehicle.RegNo;

                            if (o.LogTime.Value <= o.EstimateTime)
                                o.Status = "đã giao hàng thành công";
                            else
                                o.Status = "đã giao hàng trễ";
                        }
                    }
                    var qrtrouble = model.CAT_Trouble.Where(c => c.COTOMasterID.HasValue && c.COTOMasterID.Value == masterID).Select(c => new DTOMONMonitor_TroubleLog
                    {
                        TroubleID = c.ID,
                        MasterID = masterID,
                        LogTime = c.CreatedDate,
                        Status = c.CAT_GroupOfTrouble.Name,
                        MasterCode = c.OPS_COTOMaster.Code,
                        RegNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                        CostStatus = c.TroubleCostStatusID == iapproved ? 1 : c.TroubleCostStatusID == ireject ? 2 : 0,
                        Cost = c.Cost
                    }).ToList();
                    result.LstTroubleLog.AddRange(qrtrouble);
                    result.LstTroubleLog = result.LstTroubleLog.OrderByDescending(c => c.LogTime).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSDITOLocation> MONControlTowerCO_GetLocationByMaster(int masterID)
        {
            try
            {
                var result = new List<DTOOPSDITOLocation>();
                int iRomooc = -(int)SYSVarType.TypeOfTOLocationRomooc;
                int iDepot = -(int)SYSVarType.TypeOfTOLocationDepot;
                int iSeaport = -(int)SYSVarType.TypeOfTOLocationPort;
                int iStock = -(int)SYSVarType.TypeOfTOLocationStock;
                using (var model = new DataEntities())
                {
                    result = model.OPS_COTOLocation.Where(c => c.COTOMasterID == masterID).OrderBy(c => c.SortOrder).Select(c => new DTOOPSDITOLocation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationName = c.CAT_Location.Code,
                        LocationAddress = c.CAT_Location.Address,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        DITOLocationStatusID = c.COTOLocationStatusID,
                        DITOLocationStatusName = c.SYS_Var.ValueOfVar,
                        DateCome = c.DateCome,
                        DateLeave = c.DateLeave,
                        LoadingStart = c.LoadingStart,
                        LoadingEnd = c.LoadingEnd,
                        SortOrder = c.SortOrder,
                        SortOrderReal = c.SortOrderReal,
                        Lat = c.CAT_Location.Lat,
                        Lng = c.CAT_Location.Lng,
                        DriverName = c.OPS_COTOMaster.DriverName1,
                        DriverTel = c.OPS_COTOMaster.DriverTel1,
                        MasterCode = c.OPS_COTOMaster.Code,
                        RegNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                        TypeOfTOLocationName = c.SYS_Var1.ValueOfVar,
                        LocationCode = c.CAT_Location.Code,
                        LocationType = c.TypeOfTOLocationID == iRomooc ? "romooc" : c.TypeOfTOLocationID == iSeaport ? "seaport" : c.TypeOfTOLocationID == iDepot ? "depot" : c.TypeOfTOLocationID == iStock ? "stock" : "",
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_MasterUpdate(DTOMONOPSTOMaster item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (objMaster != null)
                    {
                        //Lưu Thông Tin Xe + Tài Xế
                        //if (objMaster.StatusOfDITOMasterID == -(int)SYSVarType.StatusOfDITOMasterReceived)
                        //throw FaultHelper.BusinessFault(null, null, "Chuyến đã hoàn tất, không thể thay đổi!");

                        var objVehicle = model.CAT_Vehicle.FirstOrDefault(c => c.RegNo == item.VehicleNo);
                        var objRomooc = model.CAT_Romooc.FirstOrDefault(c => c.RegNo == item.RomoocNo);
                        if (objRomooc == null)
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy romooc!");
                        if (objVehicle == null && (objMaster.VendorOfVehicleID == null || objMaster.VendorOfVehicleID == Account.SYSCustomerID))
                        {
                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy xe!"); // chỉ được thêm mới cho xe ngoài (do xe nhà liên quan đến khấu hao)
                        }

                        if (objVehicle == null && objMaster.VendorOfVehicleID.HasValue && objMaster.VendorOfVehicleID != Account.SYSCustomerID)
                            objVehicle = CATVehicle_Create(model, item.VehicleNo, objMaster.VendorOfVehicleID, -(int)SYSVarType.TypeOfVehicleTruck, 5);

                        objMaster.ModifiedBy = Account.UserName;
                        objMaster.ModifiedDate = DateTime.Now;

                        objMaster.VehicleID = objVehicle.ID;
                        objMaster.RomoocID = objRomooc.ID;

                        objMaster.DriverName1 = !string.IsNullOrEmpty(item.Driver1.Name) ? item.Driver1.Name.Trim() : string.Empty;
                        objMaster.DriverName2 = !string.IsNullOrEmpty(item.Driver2.Name) ? item.Driver2.Name.Trim() : string.Empty;

                        objMaster.DriverTel1 = !string.IsNullOrEmpty(item.Driver1.Tel) ? item.Driver1.Tel.Trim() : string.Empty;
                        objMaster.DriverTel2 = !string.IsNullOrEmpty(item.Driver2.Tel) ? item.Driver2.Tel.Trim() : string.Empty;

                        objMaster.DriverCard1 = !string.IsNullOrEmpty(item.Driver1.Card) ? item.Driver1.Card.Trim() : string.Empty;
                        objMaster.DriverCard2 = !string.IsNullOrEmpty(item.Driver2.Card) ? item.Driver2.Card.Trim() : string.Empty;

                        objMaster.KMStart = item.KMStart;
                        objMaster.KMEnd = item.KMEnd;
                        objMaster.Code = item.Code;
                        objMaster.ExIsOverNight = item.ExIsOverNight;
                        objMaster.ExIsOverWeight = item.ExIsOverWeight;
                        objMaster.ExTotalDayOut = item.ExTotalDayOut;
                        objMaster.ExTotalJoin = item.ExTotalJoin;

                        if (objMaster.ATA != item.ATA || objMaster.ATD != item.ATD)
                        {
                            objMaster.ATA = item.ATA;
                            objMaster.ATD = item.ATD;
                            //HelperFinance.Container_TimeChange(model, Account, item.ID);
                        }


                        if (objMaster.VendorOfVehicleID == null || objMaster.VendorOfVehicleID == Account.SYSCustomerID)
                        {
                            if (item.Driver1.ID > 0)
                                objMaster.DriverID1 = item.Driver1.ID;
                            else
                                objMaster.DriverID1 = null;
                            if (item.Driver2.ID > 0)
                                objMaster.DriverID2 = item.Driver2.ID;
                            else
                                objMaster.DriverID2 = null;
                            if (item.Driver3.ID > 0)
                                objMaster.DriverID3 = item.Driver3.ID;
                            else
                                objMaster.DriverID3 = null;

                            if (item.Driver1.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID1 = item.Driver1.TypeOfDriverID;
                            if (item.Driver2.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID2 = item.Driver2.TypeOfDriverID;
                            if (item.Driver3.TypeOfDriverID > 0)
                                objMaster.TypeOfDriverID3 = item.Driver3.TypeOfDriverID;
                        }
                        else
                        {
                            objMaster.DriverID1 = null;
                            objMaster.DriverID2 = null;
                            objMaster.DriverID3 = null;
                        }

                        model.SaveChanges();

                        HelperTimeSheet.Remove(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                        HelperTimeSheet.Create(model, Account, objMaster.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMON_OPSMaster MONControlTowerCO_MasterActual(int masterID)
        {
            try
            {
                DTOMON_OPSMaster result = new DTOMON_OPSMaster();
                using (var model = new DataEntities())
                {

                    var qr = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (qr == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                    result.ATA = qr.ATA;
                    result.ATD = qr.ATD;
                    result.KM = qr.KM;
                    result.KMStart = qr.KMStart;
                    result.KMEnd = qr.KMEnd;
                    result.ID = qr.ID;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_MasterActualChange(DTOMON_OPSMaster item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.ATA = item.ATA;
                        qr.ATD = item.ATD;
                        qr.KM = item.KM;
                        qr.KMStart = item.KMStart;
                        qr.KMEnd = item.KMEnd;

                        var qrTimeSheet = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.ReferID == item.ID && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster);
                        if (qrTimeSheet != null)
                        {
                            qrTimeSheet.ModifiedBy = Account.UserName;
                            qrTimeSheet.ModifiedDate = DateTime.Now;
                            qrTimeSheet.DateFromActual = item.ATD.HasValue ? item.ATD.Value : qrTimeSheet.DateFromActual;
                            qrTimeSheet.DateToActual = item.ATA.HasValue ? item.ATA.Value : qrTimeSheet.DateToActual;
                        }
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMON_MainFilter MONControlTowerCO_MainFilter(DTOMONControlTower_ObjectFilter item)
        {
            try
            {
                DTOMON_MainFilter result = new DTOMON_MainFilter();
                result.lstVehicle = new List<DTOMON_Vehicle>();
                result.Summary = new DTOMONMonitor_OPSSummary();
                result.COSummary = new List<DTOMONMonitor_OPSCOSummary>();
                result.lstLocation = new List<DTOOPSDITOLocation>();

                var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                using (var model = new DataEntities())
                {
                    int iTendered = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                    int iDelivery = -(int)SYSVarType.StatusOfCOTOMasterDelivery;
                    int iReceived = -(int)SYSVarType.StatusOfCOTOMasterReceived;
                    item.lstVendorID.Add(Account.SYSCustomerID);

                    result.COSummary = model.CAT_Packing.Where(c => (c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40 || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40R || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO20F || c.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingCO40F)).Select(c => new DTOMONMonitor_OPSCOSummary
                    {
                        PackingID = c.ID,
                        Total = 0,
                        TypeOfContainer = c.PackingName,
                    }).ToList();

                    var lstMaster = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                    && c.OPS_COTOMaster.StatusOfCOTOMasterID >= iTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= iReceived
                    && (c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.ProvinceID == item.FromProvinceID || item.FromProvinceID < 1)
                    && (c.OPS_Container.ORD_Container.CUS_Location2.CAT_Location.DistrictID == item.FromDistrictID || item.FromDistrictID < 1)
                    && (c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.ProvinceID == item.ToProvinceID || item.ToProvinceID < 1)
                    && (c.OPS_Container.ORD_Container.CUS_Location3.CAT_Location.DistrictID == item.ToDistrictID || item.ToDistrictID < 1)
                        //&& c.OPS_DITOMaster.ETD.HasValue && c.OPS_DITOMaster.ETA.HasValue && c.OPS_DITOMaster.ETD.Value >= dFrom && c.OPS_DITOMaster.ETA.Value <= dTo
                    && (isAdmin || Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => c.COTOMasterID).Distinct().ToList();

                    #region  Thong tin summary Ton, CBM, Trip


                    var qrGOP = model.OPS_COTOContainer.Where(c => lstMaster.Contains(c.COTOMasterID)).Select(c => new
                    {
                        c.OPS_Container.ORD_Container.Ton,
                        c.OPS_COTOMaster.StatusOfCOTOMasterID,
                        c.COTOMasterID,
                        c.OPS_Container.ORD_Container.PackingID,
                    }).ToList();

                    if (qrGOP != null)
                    {
                        foreach (var pack in result.COSummary)
                        {
                            pack.Total = qrGOP.Count(c => c.PackingID == pack.PackingID);
                        }
                    }

                    #endregion

                    #region  Thong tin Location
                    foreach (var master in lstMaster)
                    {
                        result.lstLocation.AddRange(model.OPS_COTOLocation.Where(c => c.COTOMasterID == master && c.CAT_Location.Lat.HasValue && c.CAT_Location.Lng.HasValue && c.CAT_Location.Lat != 0 & c.CAT_Location.Lng != 0).Select(c => new
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationName = c.CAT_Location.Location,
                            LocationAddress = c.CAT_Location.Address,
                            LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                            LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng
                        }).Distinct().Select(c => new DTOOPSDITOLocation
                        {
                            ID = c.ID,
                            LocationID = c.LocationID,
                            LocationName = c.LocationName,
                            LocationAddress = c.LocationAddress,
                            LocationDistrict = c.LocationDistrict,
                            LocationProvince = c.LocationProvince,
                            Lat = c.Lat,
                            Lng = c.Lng
                        }).ToList());
                    }

                    #endregion

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Tractor vs romooc

        public List<DTOMON_VehicleIconData> MONControlTowerCO_AllVehicle(bool showTractor, bool showRomooc)
        {
            try
            {
                List<DTOMON_VehicleIconData> result = new List<DTOMON_VehicleIconData>();
                using (var model = new DataEntities())
                {
                    var lstTractor = model.CUS_Vehicle.Where(c => c.VehicleID > 1 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).ToList();

                    var lstRomooc = model.CUS_Romooc.Where(c => c.RomoocID > 1 && c.CustomerID == Account.SYSCustomerID).ToList();

                    var qrOPSContainer = model.OPS_Container.Where(c => c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeRunning && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.ORD_Container.ORD_Order.CustomerID))).ToList();

                    List<DTOMON_VehicleIconData> resultRomooc = new List<DTOMON_VehicleIconData>();
                    List<DTOMON_VehicleIconData> resultTractor = new List<DTOMON_VehicleIconData>();
                    List<DTOMON_VehicleIconData> resultConected = new List<DTOMON_VehicleIconData>();

                    #region Xét romooc và cont
                    foreach (var rObj in lstRomooc)
                    {
                        string strR = "m40";
                        if (rObj.CAT_Romooc.RegCapacity == 1)
                            strR = "m20";

                        string strCon = string.Empty;
                        var opscon = qrOPSContainer.FirstOrDefault(c => c.RomoocID == rObj.RomoocID);
                        if (opscon != null)
                        {
                            var qrOPScotocon = opscon.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue).OrderByDescending(c => c.SortOrder).ToList();

                            #region Trường hợp chỉ chở 1 cont
                            if (opscon.ORD_Container.OPS_Container.Count(c => c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeRunning) == 1)
                            {
                                if (qrOPScotocon.Count(c => c.TypeOfStatusContainerID > -(int)SYSVarType.TypeOfStatusContainerWait) == 0)
                                {//trường hợp chưa có chặng nào chạy =>  ko có cont

                                }
                                else
                                {
                                    var qrOPScotoconTransfer = qrOPScotocon.FirstOrDefault(c => c.TypeOfStatusContainerID >= -(int)SYSVarType.TypeOfStatusContainerTranfer);
                                    if (qrOPScotoconTransfer != null)
                                    {
                                        switch (qrOPScotoconTransfer.StatusOfCOContainerID)
                                        {
                                            case -(int)SYSVarType.StatusOfCOContainerGetRomooc:
                                            case -(int)SYSVarType.StatusOfCOContainerReturnRomooc:
                                            case -(int)SYSVarType.StatusOfCOContainerGetEmpty:
                                            case -(int)SYSVarType.StatusOfCOContainerStop:
                                                //Không có container 
                                                break;
                                            case -(int)SYSVarType.StatusOfCOContainerShipEmpty:
                                            case -(int)SYSVarType.StatusOfCOContainerRepairEmpty:
                                                switch (opscon.ORD_Container.PackingID)
                                                {
                                                    case (int)CATPackingCOCode.CO20:
                                                        strCon = "c20e";
                                                        break;
                                                    case (int)CATPackingCOCode.CO40:
                                                        strCon = "c40e";
                                                        break;
                                                    case (int)CATPackingCOCode.CO40H:
                                                        strCon = "c40e";
                                                        break;
                                                    case (int)CATPackingCOCode.Kep:
                                                        strCon = "c40e";
                                                        break;
                                                }
                                                break;
                                            case -(int)SYSVarType.StatusOfCOContainerShipLaden:
                                                switch (opscon.ORD_Container.PackingID)
                                                {
                                                    case (int)CATPackingCOCode.CO20:
                                                        strCon = "c20f";
                                                        break;
                                                    case (int)CATPackingCOCode.CO40:
                                                        strCon = "c40f";
                                                        break;
                                                    case (int)CATPackingCOCode.CO40H:
                                                        strCon = "c40f";
                                                        break;
                                                    case (int)CATPackingCOCode.Kep:
                                                        strCon = "c40f";
                                                        break;
                                                }
                                                break;
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Chở 2 cont
                            else if (opscon.ORD_Container.OPS_Container.Count(c => c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeRunning) == 2)
                            {
                                var qrOPScotoconTransfer = opscon.OPS_COTOContainer.OrderByDescending(c => c.SortOrder).FirstOrDefault(c => c.TypeOfStatusContainerID >= -(int)SYSVarType.TypeOfStatusContainerTranfer);
                                if (qrOPScotoconTransfer != null)
                                {
                                    #region Co 1 chang dang chay
                                    switch (qrOPScotoconTransfer.StatusOfCOContainerID)
                                    {
                                        case -(int)SYSVarType.StatusOfCOContainerGetRomooc:
                                        case -(int)SYSVarType.StatusOfCOContainerReturnRomooc:
                                        case -(int)SYSVarType.StatusOfCOContainerGetEmpty:
                                        case -(int)SYSVarType.StatusOfCOContainerStop:

                                            break;
                                        case -(int)SYSVarType.StatusOfCOContainerShipEmpty:
                                        case -(int)SYSVarType.StatusOfCOContainerRepairEmpty:
                                            switch (opscon.ORD_Container.PackingID)
                                            {
                                                case (int)CATPackingCOCode.CO20:
                                                    strCon = "c20e";
                                                    break;
                                                case (int)CATPackingCOCode.CO40:
                                                    strCon = "c40e";
                                                    break;
                                                case (int)CATPackingCOCode.CO40H:
                                                    strCon = "c40e";
                                                    break;
                                                case (int)CATPackingCOCode.Kep:
                                                    strCon = "c40e";
                                                    break;
                                            }
                                            break;
                                        case -(int)SYSVarType.StatusOfCOContainerShipLaden:
                                            switch (opscon.ORD_Container.PackingID)
                                            {
                                                case (int)CATPackingCOCode.CO20:
                                                    strCon = "c20f";
                                                    break;
                                                case (int)CATPackingCOCode.CO40:
                                                    strCon = "c40f";
                                                    break;
                                                case (int)CATPackingCOCode.CO40H:
                                                    strCon = "c40f";
                                                    break;
                                                case (int)CATPackingCOCode.Kep:
                                                    strCon = "c40f";
                                                    break;
                                            }
                                            break;
                                    }
                                    #endregion
                                }

                                #region Nếu cont đầu tiên chưa full thì phải xét tiếp cont thứ 2
                                if (!strCon.Contains('f'))
                                {
                                    var opscon2 = opscon.ORD_Container.OPS_Container.FirstOrDefault(c => c.OPSContainerTypeID == -(int)SYSVarType.OPSContainerTypeRunning && c.ID != opscon.ID);
                                    if (opscon2 != null)
                                    {
                                        var qrOPScotoconTransfer2 = opscon2.OPS_COTOContainer.FirstOrDefault(c => c.TypeOfStatusContainerID >= -(int)SYSVarType.TypeOfStatusContainerTranfer);
                                        if (qrOPScotoconTransfer2 != null)
                                        {
                                            #region Co 1 chang dang chay
                                            switch (qrOPScotoconTransfer2.StatusOfCOContainerID)
                                            {
                                                case -(int)SYSVarType.StatusOfCOContainerGetRomooc:
                                                case -(int)SYSVarType.StatusOfCOContainerReturnRomooc:
                                                case -(int)SYSVarType.StatusOfCOContainerGetEmpty:
                                                case -(int)SYSVarType.StatusOfCOContainerStop:

                                                    break;
                                                case -(int)SYSVarType.StatusOfCOContainerShipEmpty:
                                                case -(int)SYSVarType.StatusOfCOContainerRepairEmpty:
                                                    //Nếu có con1 thì 20 + 20 = 40 , nếu không có cont1 thì = 20
                                                    if (strCon == "c20e")
                                                        strCon = "c40e";
                                                    else
                                                        strCon = "c20e";
                                                    break;
                                                case -(int)SYSVarType.StatusOfCOContainerShipLaden:
                                                    //Nếu có con1 thì 20 + 20 = 40 , nếu không có cont1 thì = 20
                                                    if (strCon == "c20e")
                                                        strCon = "c40f";
                                                    else
                                                        strCon = "c20f";

                                                    break;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                                #endregion
                            }
                            #endregion
                        }

                        var strIcon = strR;
                        if (strCon != string.Empty)
                            strIcon = strIcon + "_" + strCon;
                        resultRomooc.Add(new DTOMON_VehicleIconData
                        {
                            RomoocID = rObj.RomoocID,
                            RomoocNo = rObj.CAT_Romooc.RegNo,
                            IconCode = strIcon,
                            ID = 0,
                            MasterID = 0,
                            Lat = rObj.CAT_Romooc.LocationID.HasValue ? rObj.CAT_Romooc.CAT_Location.Lat : null,
                            Lng = rObj.CAT_Romooc.LocationID.HasValue ? rObj.CAT_Romooc.CAT_Location.Lng : null,
                        });
                    }
                    #endregion

                    #region Xét tractor
                    List<int> lstConected = new List<int>();
                    foreach (var tObj in lstTractor)
                    {
                        var strT = "t";
                        var qrMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.VehicleID == tObj.VehicleID && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterDelivery);
                        if (qrMaster != null)
                        {
                            var qrR = resultRomooc.FirstOrDefault(c => c.RomoocID == qrMaster.RomoocID.Value);
                            if (qrR != null)
                                strT = strT + "_" + qrR.IconCode;

                            resultConected.Add(new DTOMON_VehicleIconData
                            {
                                ID = tObj.VehicleID,
                                VehicleCode = qrMaster.CAT_Vehicle.RegNo,
                                GPSCode = qrMaster.CAT_Vehicle.GPSCode,
                                MasterID = qrMaster.ID,
                                MasterCode = qrMaster.Code,
                                RomoocID = qrMaster.RomoocID.HasValue ? qrR.RomoocID : null,
                                RomoocNo = qrMaster.RomoocID.HasValue ? qrR.RomoocNo : "",
                                IconCode = strT,
                                Lat = tObj.CAT_Vehicle.LocationID.HasValue ? tObj.CAT_Vehicle.CAT_Location.Lat : null,
                                Lng = tObj.CAT_Vehicle.LocationID.HasValue ? tObj.CAT_Vehicle.CAT_Location.Lng : null,
                            });
                            lstConected.Add(qrR.RomoocID.Value);
                        }
                        else
                        {
                            if (tObj.CAT_Vehicle.CurrentRomoocID.HasValue)
                            {
                                var qrR = resultRomooc.FirstOrDefault(c => c.RomoocID == tObj.CAT_Vehicle.CurrentRomoocID);
                                if (qrR != null)
                                    strT = strT + "_" + qrR.IconCode;
                            }
                            resultTractor.Add(new DTOMON_VehicleIconData
                            {
                                ID = tObj.VehicleID,
                                VehicleCode = tObj.CAT_Vehicle.RegNo,
                                GPSCode = tObj.CAT_Vehicle.GPSCode,
                                MasterID = 0,
                                RomoocID = tObj.CAT_Vehicle.CurrentRomoocID,
                                RomoocNo = tObj.CAT_Vehicle.CurrentRomoocID.HasValue ? tObj.CAT_Vehicle.CAT_Romooc.RegNo : "",
                                IconCode = strT,
                                Lat = tObj.CAT_Vehicle.LocationID.HasValue ? tObj.CAT_Vehicle.CAT_Location.Lat : null,
                                Lng = tObj.CAT_Vehicle.LocationID.HasValue ? tObj.CAT_Vehicle.CAT_Location.Lng : null,
                            });
                        }
                    }
                    #endregion

                    if (showTractor || showRomooc)
                    {
                        result.AddRange(resultConected);
                        if (showTractor)
                            result.AddRange(resultTractor);
                        if (showRomooc)
                            result.AddRange(resultRomooc.Where(c => !lstConected.Contains(c.RomoocID.Value)).ToList());
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region trang thai xe

        public DTOMON_VehicleData MONControlTowerCO_GetVehicleStatus(string vehicleNo)
        {
            try
            {
                DTOMON_VehicleData result = new DTOMON_VehicleData();
                result.VehicleCode = vehicleNo;
                using (var model = new DataEntities())
                {
                    var sReceived = -(int)SYSVarType.StatusOfCOTOMasterReceived;
                    var qr = model.OPS_COTOContainer.FirstOrDefault(c => c.COTOMasterID.HasValue && (c.OPS_COTOMaster.StatusOfCOTOMasterID < sReceived) && c.OPS_COTOMaster.CAT_Vehicle.RegNo.ToUpper() == vehicleNo.ToUpper());
                    if (qr != null)
                    {

                        result.ID = qr.OPS_COTOMaster.VehicleID.Value;
                        result.ContainerNo = qr.OPS_Container.ContainerNo;
                        result.RomoocNo = qr.OPS_COTOMaster.CAT_Romooc.RegNo;
                        result.ContainerTypeName = qr.OPS_Container.ORD_Container.CAT_Packing.Code;
                        result.MasterCode = qr.OPS_COTOMaster.Code;
                        result.VehicleStatus = "run";
                        result.HasContainer = false;
                        result.HasRomooc = false;
                        result.IsRomooc20 = qr.OPS_COTOMaster.CAT_Romooc.RegCapacity == 1;
                        result.ContainerType = "40";
                        switch (qr.OPS_Container.ORD_Container.PackingID)
                        {
                            case (int)CATPackingCOCode.CO20:
                                result.ContainerType = "20";
                                break;
                            case (int)CATPackingCOCode.CO40:
                                result.ContainerType = "40";
                                break;
                            case (int)CATPackingCOCode.CO40H:
                                result.ContainerType = "40";
                                break;
                            case (int)CATPackingCOCode.Kep:
                                result.ContainerType = "kep";
                                break;
                        }

                        // xac dinh lay romooc va cont chua
                        var lComplete = -(int)SYSVarType.COTOLocationStatusLeave;
                        var qrContainerOfMaster = qr.OPS_COTOMaster.OPS_COTOContainer;
                        var qrLocationOfMaster = qr.OPS_COTOMaster.OPS_COTOLocation;

                        var qrGetRomooc = qrLocationOfMaster.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetRomooc);
                        if (qrGetRomooc != null && qrGetRomooc.COTOLocationStatusID == lComplete)
                            result.HasRomooc = true;

                        var qrGetCont = qrLocationOfMaster.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGet || c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationGetDelivery);
                        if (qrGetCont != null && qrGetCont.COTOLocationStatusID == lComplete)
                            result.HasContainer = true;

                        var qrRemoveCont = qrLocationOfMaster.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationDelivery);
                        if (qrRemoveCont != null && qrRemoveCont.COTOLocationStatusID == lComplete)
                            result.HasContainer = false;

                        var qrRemoveRomooc = qrLocationOfMaster.FirstOrDefault(c => c.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationReturnRomooc);
                        if (qrRemoveRomooc != null && qrRemoveRomooc.COTOLocationStatusID == lComplete)
                            result.HasRomooc = false;
                    }
                    else
                    {
                        result.ID = 0;
                        result.ContainerNo = string.Empty;
                        result.RomoocNo = string.Empty;
                        result.ContainerType = string.Empty;
                        result.VehicleStatus = "free";
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ORD container

        public DTOResult MONControlTowerCO_COList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstID = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID).Select(c => c.OPSContainerID).Distinct().ToList();
                    var query = model.OPS_Container.Where(c => lstID.Contains(c.ID)).Select(c => new DTOMONCO_Container
                    {
                        ID = c.ID,
                        OrderCode = c.ORD_Container.ORD_Order.Code,
                        ContainerNo = c.ContainerNo,
                        SealNo1 = c.SealNo1,
                        SealNo2 = c.SealNo2,
                        Ton = c.Ton,
                        HasGetEmpty = c.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport,
                        PackingCode = c.ORD_Container.CAT_Packing.Code,

                        DepotCode = c.ORD_Container.CUS_Location.Code,
                        DepotAddress = c.ORD_Container.CUS_Location.CAT_Location.Address,
                        DepotReturnCode = c.ORD_Container.CUS_Location1.Code,
                        DepotReturnAddress = c.ORD_Container.CUS_Location1.CAT_Location.Address,
                        Note1 = c.ORD_Container.Note1,
                        Note2 = c.ORD_Container.Note2,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCO_Container>;
                    var i = 1;
                    foreach (DTOMONCO_Container item in result.Data)
                    {
                        item.STT = i++;
                        var qr = model.OPS_COTOContainer.FirstOrDefault(c => c.OPSContainerID == item.ID && c.ReasonChangeID > 0);
                        if (qr != null)
                        {
                            item.ReasonChangeName = qr.CAT_Reason1.ReasonName;
                            item.ReasonChangeNote = qr.ReasonChangeNote;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_COEdit(DTOMONCO_Container item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_Container.FirstOrDefault(c => c.ID == item.ID);
                    if (qr == null)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại");
                    qr.ModifiedBy = Account.UserName;
                    qr.ModifiedDate = DateTime.Now;
                    qr.ContainerNo = item.ContainerNo;
                    qr.SealNo1 = item.SealNo1;
                    qr.SealNo2 = item.SealNo2;
                    qr.Ton = item.Ton;
                    qr.ORD_Container.Note1 = item.Note1;
                    qr.ORD_Container.Note2 = item.Note2;
                    model.SaveChanges();
                    HelperTOMaster.MONCO_ChangeOPSContainer(model, Account, item.ID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_RepairContainer(int masterID, int ordContainerID, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qrAllGetEmpty = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID && c.OPS_Container.ContainerID == ordContainerID && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty)).ToList();
                    if (qrAllGetEmpty.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Đơn hàng không có chặng lấy rỗng");
                    var qrAllRepair = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID && c.OPS_Container.ContainerID == ordContainerID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete && c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerRepairEmpty).ToList();
                    var qr = qrAllGetEmpty.FirstOrDefault();
                    if (qrAllRepair.Count == 0)
                    {
                        if (qr.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete)
                            throw FaultHelper.BusinessFault(null, null, "Chặng lấy rỗng đã hoàn thành, không được chỉnh sửa");
                        else
                        {
                            // hoan thanh chang cu
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                            HelperFinance.Container_CompleteSchedule(model, Account, -1, qr.ID);
                            qr.ReasonChangeID = reasonID;
                            qr.ReasonChangeNote = reasonNote;
                        }
                    }

                    foreach (var qrR in qrAllRepair)
                    {
                        qrR.ModifiedBy = Account.UserName;
                        qrR.ModifiedDate = DateTime.Now;
                        qrR.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerComplete;
                        qrR.ReasonChangeID = reasonID;
                        qrR.ReasonChangeNote = reasonNote;
                    }

                    //tao chang di 
                    var obj = new OPS_COTOContainer();
                    obj.CreatedBy = Account.UserName;
                    obj.CreatedDate = DateTime.Now;
                    obj.COTOMasterID = masterID;
                    obj.LocationFromID = qr.LocationToID;
                    obj.LocationToID = locationID;
                    obj.OPSContainerID = qr.OPSContainerID;
                    obj.ETD = qr.ETD;
                    obj.ETA = qr.ETA;
                    obj.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerRepairEmpty;
                    obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                    obj.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODWait;
                    obj.IsLocked = qr.IsLocked;
                    obj.IsSwap = qr.IsSwap;
                    obj.IsSplit = qr.IsSplit;
                    obj.SortOrder = qr.SortOrder;
                    model.OPS_COTOContainer.Add(obj);

                    //tao chang ve

                    var obj2 = new OPS_COTOContainer();
                    obj2.CreatedBy = Account.UserName;
                    obj2.CreatedDate = DateTime.Now;
                    obj2.COTOMasterID = masterID;
                    obj2.LocationFromID = locationID;
                    obj2.LocationToID = qr.LocationToID;
                    obj2.OPSContainerID = qr.OPSContainerID;
                    obj2.ETD = qr.ETD;
                    obj2.ETA = qr.ETA;
                    obj2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerRepairEmpty;
                    obj2.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                    obj2.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODWait;
                    obj2.IsLocked = qr.IsLocked;
                    obj2.IsSwap = qr.IsSwap;
                    obj2.IsSplit = qr.IsSplit;
                    obj2.SortOrder = qr.SortOrder;
                    model.OPS_COTOContainer.Add(obj2);

                    //them location

                    var qrCOTOLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == masterID).OrderBy(c => c.SortOrder).ToList();

                    //
                    var lstSysvarID = new List<int>();
                    lstSysvarID.Add(-(int)SYSVarType.TypeOfTOLocationDelivery);
                    lstSysvarID.Add(-(int)SYSVarType.TypeOfTOLocationGet);
                    lstSysvarID.Add(-(int)SYSVarType.TypeOfTOLocationGetDelivery);

                    int lastSort = 0;
                    var qrFrom = qrCOTOLocation.Where(c => c.LocationID == qr.LocationFromID && lstSysvarID.Contains(c.TypeOfTOLocationID)).ToList();
                    foreach (var item in qrFrom)
                    {
                        var qrTo = qrCOTOLocation.LastOrDefault(c => c.SortOrder > item.SortOrder && c.LocationID == qr.LocationToID && lstSysvarID.Contains(c.TypeOfTOLocationID));
                        if (qrTo != null)
                        {
                            lastSort = qrTo.SortOrder;
                            break;
                        }
                    }

                    //diem bat dau va ket thuc
                    if (lastSort > 0)
                    {
                        //tang sort order cho location sau
                        var lst = qrCOTOLocation.Where(c => c.SortOrder > lastSort).ToList();
                        foreach (var o in lst)
                        {
                            o.ModifiedBy = Account.UserName;
                            o.ModifiedDate = DateTime.Now;
                            o.SortOrder += 2;
                        }

                        //them 2 diem moi

                        var loc1 = new OPS_COTOLocation();
                        loc1.CreatedBy = Account.UserName;
                        loc1.CreatedDate = DateTime.Now;
                        loc1.LocationID = locationID;
                        loc1.COTOMasterID = masterID;
                        loc1.COTOLocationStatusID = -(int)SYSVarType.COTOLocationStatusPlan;
                        loc1.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGet;
                        loc1.SortOrder = lastSort + 1;
                        model.OPS_COTOLocation.Add(loc1);

                        var loc2 = new OPS_COTOLocation();
                        loc2.CreatedBy = Account.UserName;
                        loc2.CreatedDate = DateTime.Now;
                        loc2.LocationID = qr.LocationToID;
                        loc2.COTOMasterID = masterID;
                        loc2.COTOLocationStatusID = -(int)SYSVarType.COTOLocationStatusPlan;
                        loc2.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationGetDelivery;
                        loc2.SortOrder = lastSort + 2;
                        model.OPS_COTOLocation.Add(loc2);
                    }
                    else
                    {
                        throw FaultHelper.BusinessFault(null, null, "Dữ liệu 'COTOLocation' bị lỗi");
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_CutContainer(int masterID, int ordContainerID, int locationID, string containerNo, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    int sEXEmpty = -(int)SYSVarType.StatusOfCOContainerEXEmpty;
                    int sLOEmpty = -(int)SYSVarType.StatusOfCOContainerLOGetEmpty;
                    int sEXRepair = -(int)SYSVarType.StatusOfCOContainerRepairEmpty;
                    int oComplete = -(int)SYSVarType.OPSContainerTypeComplete;

                    //tim 1 chang chua hoan thanh lien quan den ORD
                    var qr = model.OPS_COTOContainer.FirstOrDefault(c => c.COTOMasterID == masterID && c.OPS_Container.ContainerID == ordContainerID && c.OPS_Container.OPSContainerTypeID != oComplete);
                    if (qr == null)
                        throw FaultHelper.BusinessFault(null, null, "Chặng đã hoàn thành, không thể chỉnh sửa");
                    if (qr.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chặng lấy rỗng");

                    // tim chang lay rong cua ORD nay
                    var qrAllGetEmpty = qr.OPS_Container.OPS_COTOContainer.Where(c => c.StatusOfCOContainerID == sEXEmpty || c.StatusOfCOContainerID == sLOEmpty).ToList();
                    if (qrAllGetEmpty.Count == 0)
                        throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chặng lấy rỗng");


                    var qrAllRepair = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID && c.OPS_Container.ContainerID == ordContainerID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete && c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerRepairEmpty).ToList();
                    var qrGetEmpty = qrAllGetEmpty.FirstOrDefault();
                    if (qrAllRepair.Count == 0)
                    {
                        if (qrGetEmpty.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete)
                            throw FaultHelper.BusinessFault(null, null, "Chặng lấy rỗng đã hoàn thành, không được chỉnh sửa");
                        else
                        {
                            qrGetEmpty.ModifiedBy = Account.UserName;
                            qrGetEmpty.ModifiedDate = DateTime.Now;
                            qrGetEmpty.ReasonChangeID = reasonID;
                            qrGetEmpty.ReasonChangeNote = reasonNote;
                        }
                    }

                    //Hoan thanh OPS_Container cu~
                    var curOPSContainer = qr.OPS_Container;
                    curOPSContainer.ModifiedBy = Account.UserName;
                    curOPSContainer.ModifiedDate = DateTime.Now;
                    curOPSContainer.OPSContainerTypeID = -(int)SYSVarType.OPSContainerTypeComplete;
                    //tao moi OPS_Container
                    var newOPSContainer = new OPS_Container();
                    newOPSContainer.CreatedBy = Account.UserName;
                    newOPSContainer.CreatedDate = DateTime.Now;
                    newOPSContainer.ContainerID = curOPSContainer.ContainerID;
                    newOPSContainer.ContainerNo = containerNo;
                    newOPSContainer.RomoocID = curOPSContainer.RomoocID;
                    newOPSContainer.LocationDepotID = curOPSContainer.LocationDepotID;
                    newOPSContainer.LocationDepotReturnID = curOPSContainer.LocationDepotReturnID;
                    newOPSContainer.OPSContainerTypeID = -(int)SYSVarType.OPSContainerTypeOpen;
                    newOPSContainer.Ton = curOPSContainer.Ton;
                    model.OPS_Container.Add(newOPSContainer);

                    //tao chang empty moi gan vao OPS_Container moi
                    var objNew1 = new OPS_COTOContainer();
                    objNew1.CreatedBy = Account.UserName;
                    objNew1.CreatedDate = DateTime.Now;
                    objNew1.OPS_Container = newOPSContainer;
                    objNew1.COTOMasterID = masterID;
                    objNew1.ETD = qrGetEmpty.ETD;
                    objNew1.ETA = qrGetEmpty.ETA;
                    objNew1.LocationFromID = qrGetEmpty.LocationFromID;
                    objNew1.LocationToID = qrGetEmpty.LocationToID;
                    objNew1.SortOrder = 1;
                    objNew1.StatusOfCOContainerID = qrGetEmpty.StatusOfCOContainerID;
                    objNew1.TypeOfStatusContainerID = qrGetEmpty.TypeOfStatusContainerID;
                    objNew1.TypeOfStatusContainerPODID = qrGetEmpty.TypeOfStatusContainerPODID;
                    objNew1.ETDStart = qrGetEmpty.ETDStart;
                    objNew1.ETAStart = qrGetEmpty.ETAStart;
                    objNew1.DateFromCome = qrGetEmpty.DateFromCome;
                    objNew1.DateFromLeave = qrGetEmpty.DateFromLeave;
                    objNew1.DateToCome = qrGetEmpty.DateToCome;
                    objNew1.DateToLeave = qrGetEmpty.DateToLeave;
                    objNew1.CATRoutingID = qrGetEmpty.CATRoutingID;
                    objNew1.InvoiceNo = qrGetEmpty.InvoiceNo;
                    objNew1.InvoiceBy = qrGetEmpty.InvoiceBy;
                    objNew1.InvoiceDate = qrGetEmpty.InvoiceDate;
                    objNew1.ReasonCancelID = qrGetEmpty.ReasonCancelID;
                    objNew1.ReasonCancelNote = qrGetEmpty.ReasonCancelNote;

                    model.OPS_COTOContainer.Add(objNew1);

                    //tao chang tra cong
                    var objNew2 = new OPS_COTOContainer();
                    objNew2.CreatedBy = Account.UserName;
                    objNew2.CreatedDate = DateTime.Now;
                    objNew2.ParentID = qrGetEmpty.ID;
                    objNew2.COTOMasterID = masterID;
                    objNew2.OPSContainerID = qrGetEmpty.OPSContainerID;
                    objNew2.ETD = qrGetEmpty.ETD;
                    objNew2.ETA = qrGetEmpty.ETA;
                    objNew2.LocationFromID = qrGetEmpty.LocationToID;
                    objNew2.LocationToID = locationID; //*
                    objNew2.SortOrder = 2;
                    objNew2.StatusOfCOContainerID = -(int)SYSVarType.StatusOfCOContainerRepairEmpty;
                    objNew2.TypeOfStatusContainerID = qrGetEmpty.TypeOfStatusContainerID;
                    objNew2.TypeOfStatusContainerPODID = qrGetEmpty.TypeOfStatusContainerPODID;
                    objNew2.ETDStart = qrGetEmpty.ETDStart;
                    objNew2.ETAStart = qrGetEmpty.ETAStart;
                    objNew2.DateFromCome = qrGetEmpty.DateFromCome;
                    objNew2.DateFromLeave = qrGetEmpty.DateFromLeave;
                    objNew2.DateToCome = qrGetEmpty.DateToCome;
                    objNew2.DateToLeave = qrGetEmpty.DateToLeave;
                    objNew2.CATRoutingID = qrGetEmpty.CATRoutingID;
                    objNew2.InvoiceNo = qrGetEmpty.InvoiceNo;
                    objNew2.InvoiceBy = qrGetEmpty.InvoiceBy;
                    objNew2.InvoiceDate = qrGetEmpty.InvoiceDate;
                    objNew2.ReasonCancelID = qrGetEmpty.ReasonCancelID;
                    objNew2.ReasonCancelNote = qrGetEmpty.ReasonCancelNote;
                    objNew1.ReasonChangeID = reasonID;
                    objNew1.ReasonChangeNote = reasonNote;

                    model.OPS_COTOContainer.Add(objNew2);

                    var ListLocationDelete = new List<int>();
                    var ListLocationDelete01 = new List<int>();

                    //chuyen chang con lai cung ORD sang OPS_Container moi
                    var lstOPSCOTOCont = qr.OPS_Container.OPS_COTOContainer.Where(c => c.StatusOfCOContainerID != sEXEmpty && c.StatusOfCOContainerID != sLOEmpty && c.StatusOfCOContainerID != sEXRepair);
                    foreach (var cont in lstOPSCOTOCont)
                    {
                        cont.ModifiedBy = Account.UserName;
                        cont.ModifiedDate = DateTime.Now;
                        cont.COTOMasterID = null;
                        cont.OPS_Container = newOPSContainer;
                        cont.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                        ListLocationDelete01.Add(cont.LocationToID);
                    }
                    ListLocationDelete.AddRange(ListLocationDelete01.Distinct());
                    //tra ve cac chang cua OPS_Container chua hoan thanh
                    var qrCO = qr.OPS_COTOMaster.OPS_COTOContainer.Where(c => c.OPSContainerID != qr.OPSContainerID && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete).Select(c => c.OPS_Container).Distinct().ToList();

                    foreach (var cont in qrCO)
                    {
                        var ListLocationDelete02 = new List<int>();
                        foreach (var coto in cont.OPS_COTOContainer.OrderBy(c => c.SortOrder))
                        {
                            coto.ModifiedBy = Account.UserName;
                            coto.ModifiedDate = DateTime.Now;
                            coto.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                            coto.COTOMasterID = null;
                            if (ListLocationDelete02.LastOrDefault() != coto.LocationFromID)
                            {
                                ListLocationDelete02.Add(coto.LocationFromID);
                                ListLocationDelete02.Add(coto.LocationToID);
                            }
                            else
                            {
                                ListLocationDelete02.Add(coto.LocationToID);
                            }
                        }
                        ListLocationDelete.AddRange(ListLocationDelete02);
                    }


                    model.SaveChanges();

                    /* Không thể xóa hết COTOLocaiton để tạo lại vì phải giữ lại chặng đi sửa cont */
                    var maxSort = 0;
                    var qrMasterLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == masterID).ToList();
                    foreach (var item in ListLocationDelete)
                    {
                        var qrdelete = qrMasterLocation.FirstOrDefault(c => c.LocationID == item);
                        if (qrdelete != null)
                        {
                            if (qrdelete.SortOrder > maxSort)
                                maxSort = qrdelete.SortOrder;
                            model.OPS_COTOLocation.Remove(qrdelete);
                        }
                    }

                    //chen diem tra container
                    var loc1 = new OPS_COTOLocation();
                    loc1.CreatedBy = Account.UserName;
                    loc1.CreatedDate = DateTime.Now;
                    loc1.LocationID = locationID;
                    loc1.COTOMasterID = masterID;
                    loc1.COTOLocationStatusID = -(int)SYSVarType.COTOLocationStatusPlan;
                    loc1.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationDelivery;
                    loc1.SortOrder = maxSort;
                    model.OPS_COTOLocation.Add(loc1);

                    model.SaveChanges();
                    //tinh lai sortorder
                    int sort = 1;
                    qrMasterLocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == masterID).OrderBy(c => c.SortOrder).ToList();
                    foreach (var item in qrMasterLocation)
                    {
                        item.ModifiedBy = Account.UserName;
                        item.ModifiedDate = DateTime.Now;
                        item.SortOrder = sort;
                        sort++;
                    }
                    model.SaveChanges();
                    //HelperFinance.Container_CompleteSchedule(model, Account, masterID, null);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCombobox> MONControlTower_ReasonChange()
        {
            try
            {
                var result = new List<DTOCombobox>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_Reason.Where(c => c.TypeOfReasonID == -(int)SYSVarType.TypeOfReasonTOChange).Select(c => new DTOCombobox
                    {
                        ValueInt = c.ID,
                        Text = c.ReasonName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //
        public DTOResult MONControlTowerCO_DepotList(string request, int opsConID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (opsConID > 0)
                    {
                        var qr = model.OPS_Container.FirstOrDefault(c => c.ID == opsConID);
                        if (qr == null)
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại");

                        var query = qr.ORD_Container.ORD_Order.CUS_Partner.CUS_Location.Where(c => c.ID != qr.ORD_Container.ORD_Order.LocationDepotID && c.ID != qr.ORD_Container.ORD_Order.LocationDepotReturnID).Select(c => new CATLocation
                        {
                            ID = c.LocationID,
                            Address = c.CAT_Location.Address,
                            Code = c.Code,
                            Location = c.LocationName,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng,
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<CATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ChangeDepot(int masterID, int opscontainerID, int cuslocationID, int reasionID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_ChangeDepot(model, Account, masterID, opscontainerID, cuslocationID, reasionID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Container Scheduler

        public List<DTOMONOPSTO> MONControlTowerCO_ContainerShedulerResource(DTOMONTimeLineFilter filter)
        {
            try
            {
                var result = new List<DTOMONOPSTO>();
                using (var model = new DataEntities())
                {
                    List<int> lstStatus = new List<int>();
                    if (filter.IsFilterMasterStatus)
                    {
                        lstStatus.Add(-(int)SYSVarType.StatusOfCOTOMasterTendered);
                        lstStatus.Add(-(int)SYSVarType.StatusOfCOTOMasterDelivery);
                    }
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue
                        && (filter.IsFilterMasterStatus || (c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo))
                        && (lstStatus.Count == 0 || lstStatus.Contains(c.OPS_COTOMaster.StatusOfCOTOMasterID))
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                        && (filter.ListORDContainerID.Count == 0 || filter.ListORDContainerID.Contains(c.OPS_Container.ORD_Container.ID))
                        && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => new
                    {
                        ID = c.OPS_Container.ORD_Container.ID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        ContainerNo = c.OPS_Container.ORD_Container.ContainerNo,
                        TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                        Ton = c.OPS_Container.ORD_Container.Ton,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                    }).Distinct().Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        OrderCode = c.OrderCode,
                        ContainerNo = c.ContainerNo,
                        TypeOfContainer = c.TypeOfContainer,
                        ServiceOfOrder = c.ServiceOfOrder,
                        Ton = c.Ton,
                        CustomerCode = c.CustomerCode,
                    }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONContainerScheduler> MONControlTowerCO_ContainerShedulerTask(DTOMONTimeLineFilter filter, List<int> lst)
        {
            try
            {
                var result = new List<DTOMONContainerScheduler>();
                using (var model = new DataEntities())
                {
                    foreach (var id in lst)
                    {
                        List<int> lstStatus = new List<int>();
                        if (filter.IsFilterMasterStatus)
                        {
                            lstStatus.Add(-(int)SYSVarType.StatusOfCOTOMasterTendered);
                            lstStatus.Add(-(int)SYSVarType.StatusOfCOTOMasterDelivery);
                        }
                        var qr = model.OPS_COTOContainer.Where(c => (filter.ListTractorID.Count == 0 || filter.ListTractorID.Contains(c.OPS_COTOMaster.VehicleID.Value))
                            && (lstStatus.Count == 0 || lstStatus.Contains(c.OPS_COTOMaster.StatusOfCOTOMasterID))
                            && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                            && (filter.ListRomoocID.Count == 0 || filter.ListRomoocID.Contains(c.OPS_COTOMaster.RomoocID.Value))
                            && c.COTOMasterID.HasValue && c.OPS_Container.ContainerID == id).Select(c => new
                            {
                                MasterID = c.COTOMasterID,
                                ORDContainerID = c.OPS_Container.ContainerID,
                                ETD = c.OPS_COTOMaster.ETD,
                                ETA = c.OPS_COTOMaster.ETA,
                                ATD = c.OPS_COTOMaster.ATD,
                                ATA = c.OPS_COTOMaster.ATA,
                                SortOrder = c.OPS_COTOMaster.SortOrder,
                            }).Distinct().ToList();

                        foreach (var o in qr)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o.MasterID);
                            if (qrmaster != null)
                            {
                                List<int> lstStatusCont = new List<int>() {
                                    -(int)SYSVarType.StatusOfCOContainerGetEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                                    //-(int)SYSVarType.StatusOfCOContainerRepairEmpty,
                                    //-(int)SYSVarType.StatusOfCOContainerReturnEmpty,
                                    //-(int)SYSVarType.StatusOfCOContainerReturnEmptyFail,
                                    //-(int)SYSVarType.StatusOfCOContainerLOEmpty,
                                    //-(int)SYSVarType.StatusOfCOContainerLOReturnEmpty,
                                };
                                var qrEmpty = model.OPS_COTOContainer.Where(c => c.COTOMasterID == qrmaster.ID && lstStatusCont.Contains(c.StatusOfCOContainerID)).Select(c => new DTOMONDateTime
                                {
                                    Value = c.ID,
                                    From = c.ETD,
                                    To = c.ETA,
                                }).ToList();
                                result.Add(new DTOMONContainerScheduler
                                {
                                    MasterID = o.MasterID.Value,
                                    ETD = o.ETD,
                                    ETA = o.ETA,
                                    ATA = o.ATA,
                                    ATD = o.ATD,
                                    ListContEmpty = qrEmpty,
                                    // ETDEmpty = qrEmpty == null ? null : qrEmpty.ETD,
                                    //ETAEmpty = qrEmpty == null ? null : qrEmpty.ETA,
                                    ORDContainerID = o.ORDContainerID,
                                    VehicleNo = qrmaster.CAT_Vehicle.RegNo,
                                    MasterCode = qrmaster.Code,
                                    IsComplete = qrmaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived,
                                });
                            }
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region COTOContainer

        public DTOResult MONControlTowerCO_TOContainerList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    List<int> lstIgnore = new List<int>(){
                        -(int)SYSVarType.StatusOfCOContainerUnLoad,
                        -(int)SYSVarType.StatusOfCOContainerLoad,
                    };
                    var lst = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID && !lstIgnore.Contains(c.StatusOfCOContainerID) && c.IsSplit == false && (c.ParentID == null || c.IsDuplicateHidden != true) && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        SealNo1 = c.OPS_Container.SealNo1,
                        SealNo2 = c.OPS_Container.SealNo2,
                        RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                        CutOffTime = c.OPS_Container.ORD_Container.CutOffTime,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        MasterID = c.COTOMasterID.Value,
                        MasterCode = c.OPS_COTOMaster.Code,
                        StatusOfCOTOMasterID = c.OPS_COTOMaster.StatusOfCOTOMasterID,
                        VehicleNo = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.CAT_Vehicle.RegNo : string.Empty,
                        RomoocNo = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.CAT_Romooc.RegNo : string.Empty,
                        IsComplete = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterReceived ? true : false,
                        IsCompleteCO = c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete ? true : false,
                        IsRunning = c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerTranfer ? true : false,
                        IsWarning = false,

                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationDepotID = c.OPS_Container.ORD_Container.LocationDepotID,
                        LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : "",
                        LocationDepotAddress = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.CAT_Location.Address : "",
                        LocationDepotReturnID = c.OPS_Container.ORD_Container.LocationDepotReturnID,
                        LocationDepotReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : "",
                        LocationDepotReturnAddress = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.CAT_Location.Address : "",

                        STT = c.COTOSort,
                        SortOrder = c.SortOrder,
                        RomoocID = c.OPS_COTOMaster.RomoocID > 0 ? c.OPS_COTOMaster.RomoocID.Value : -1,
                        VehicleID = c.OPS_COTOMaster.VehicleID > 0 ? c.OPS_COTOMaster.VehicleID.Value : -1,
                        ORDContainerID = c.OPS_Container.ContainerID,
                        OPSContainerID = c.OPSContainerID,
                        IsVendor = c.OPS_COTOMaster.VendorOfVehicleID > 0 && c.OPS_COTOMaster.VendorOfVehicleID.Value != Account.SYSCustomerID ? true : false,
                        ShowAction = false,
                        ServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                        TypeOfStatusContainerID = c.TypeOfStatusContainerID,
                        TypeOfStatusContainerName = c.SYS_Var1.ValueOfVar,
                        StatusOfCOContainerID = c.StatusOfCOContainerID,
                        StatusOfCOContainer = c.SYS_Var.ValueOfVar,

                        IsStart = c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered,
                        IsTranferTO = false,
                        IsCompleteTO = c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete,
                        IsBreakMooc = false,
                        IsBreakTO = c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete,
                        IsEmptyFail = false,
                        IsAvailable = false,
                        IsContinue = false,
                        IsEnd = false,
                        IsExport = false,
                        IsLocal = false,
                        PackingID = -1,
                        PackingQuantity = 0,
                        COTOSort = c.COTOSort,
                        COTOKM = 0,
                        Ton = c.OPS_Container.Ton,
                        IsFirstTO = false,
                    }).OrderBy(c => c.COTOSort).ToList();

                    //int i = 0;
                    //while (i < lst.Count)
                    //{
                    //    var item = lst[i];
                    //    if (model.OPS_COTOContainer.Where(c => c.ID == item.ID && c.ParentID > 0 && c.IsDuplicateHidden == true).Count() > 0)
                    //        lst.Remove(item);
                    //    else
                    //        i++;
                    //}

                    if (lst.Count > 0)
                    {
                        var firstTO = lst[0];
                        var lastTOComplete = lst.Where(c => c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete).OrderByDescending(c => c.COTOSort).FirstOrDefault();
                        if (lastTOComplete == null)
                            lastTOComplete = new DTOMONOPSTO { ID = -1, COTOSort = 0 };
                        var lastTO = lst[lst.Count - 1];

                        bool isAvailable = lst.Where(c => c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete).Count() == 0;
                        if (isAvailable == true)
                        {
                            var vehicle = model.CAT_Vehicle.Where(c => c.ID == lastTO.VehicleID).Select(c => new { c.LocationID }).FirstOrDefault();
                            if (vehicle != null)
                                isAvailable = lastTO.LocationToID == vehicle.LocationID;
                            else
                                isAvailable = false;
                        }
                        bool isContinue = false;
                        List<int> lstOPSContainerIDTranfer = new List<int>();
                        int stt = 1;

                        if (lst.Where(c => c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnStation).Count() == 0)
                        {
                            if (lst.Where(c => c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerReturnRomooc || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerReturnStation)).Count() > 0)
                                isAvailable = true;
                        }
                        if (model.OPS_COTOMaster.Where(c => c.ID != firstTO.MasterID && c.VehicleID == firstTO.VehicleID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
                            c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived).Count() > 0)
                        {
                            if (model.OPS_COTOContainer.Where(c => c.OPS_COTOMaster.VehicleID == firstTO.VehicleID && (c.OPS_COTOMaster.VendorOfVehicleID == null || c.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.ReasonChangeID > 0 && c.ModifiedDate != null).Count() > 0)
                                isContinue = true;
                        }
                        var lstStatusContinueID = new List<int>()
                        {
                            -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                            -(int)SYSVarType.StatusOfCOContainerShipLaden,
                            -(int)SYSVarType.StatusOfCOContainerIMLaden,
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                        };
                        bool isLocal = false;
                        bool isExport = false;
                        int packingid = -1;
                        int packingquantity = 0;
                        var lstPacking = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID).Select(c => new { c.OPS_Container.ORD_Container.PackingID, c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID }).Distinct().ToList();
                        if (lstPacking.Select(c => c.ServiceOfOrderID).Distinct().Count() <= 2)
                        {
                            if (lstPacking.Where(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport).Count() > 0)
                                isLocal = true;
                            if (lstPacking.Where(c => c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport).Count() > 0)
                            {
                                isLocal = true;
                                isExport = true;
                            }
                            if (isLocal || isExport)
                            {
                                packingid = lstPacking[0].PackingID;
                                packingquantity = lstPacking.Where(c => c.PackingID == packingid && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport).Count();
                                if (packingquantity == 0)
                                    packingquantity = lstPacking.Where(c => c.PackingID == packingid && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport).Count();
                            }
                        }
                        var lstStatusLocalID = new List<int>()
                        {
                            -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                            -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                        };
                        bool isRunningOther = model.OPS_COTOMaster.Where(c => c.ID != masterID && c.VehicleID == firstTO.VehicleID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterDelivery).Count() > 0;
                        if (isRunningOther == false)
                            isRunningOther = model.OPS_COTOMaster.Where(c => c.ID != masterID && c.RomoocID == firstTO.RomoocID && (c.VendorOfRomoocID == null || c.VendorOfRomoocID == Account.SYSCustomerID) && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterDelivery).Count() > 0;
                        if (isRunningOther == false)
                        {
                            isRunningOther = lst.Where(c => c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerReturnRomooc || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerReturnStation).Count() > 0;
                        }
                        if (lst.Where(c => c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete).Count() == 0)
                        {
                            if (isAvailable)
                                lastTO.IsAvailable = true;
                            if (isContinue)
                                lastTO.IsContinue = true;
                        }

                        for (int i = 0; i < lst.Count; i++)
                        {
                            var item = lst[i];

                            if (i == 0) item.IsFirstTO = true;

                            if (!item.IsVendor)
                            {
                                if (item.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete && item.COTOSort == lastTOComplete.COTOSort + 1)
                                {
                                    item.IsTranferTO = true;
                                    item.IsBreakTO = true;
                                }
                                if (item.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete)
                                {
                                    item.IsCompleteTO = true;
                                    if (item.COTOSort != lastTO.COTOSort && item.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc)
                                        item.IsBreakMooc = true;
                                }

                                if (item.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete && item.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc)
                                {
                                    if (item.COTOSort == lastTOComplete.COTOSort && item.COTOSort != lastTO.COTOSort)
                                        item.IsBreakMooc = true;
                                    if (item.COTOSort == lastTOComplete.COTOSort && item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport && (item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty)
                                            && lst.Where(c => c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerWait && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport && (c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty)).Count() == 0)
                                    {
                                        item.IsEmptyFail = true;
                                    }
                                }

                                if (i > 0 && item.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete)
                                {
                                    if (lastTO.COTOSort - 1 > 0 && item.COTOSort == lastTO.COTOSort - 2 && lst[lastTO.COTOSort - 1].StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerReturnRomooc)
                                        item.IsEnd = true;
                                    if (item.COTOSort == lastTO.COTOSort - 1)
                                        item.IsEnd = true;
                                }

                                if (isLocal && lstStatusLocalID.Contains(item.StatusOfCOContainerID) && item.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerComplete &&
                                ((packingquantity == 1 && lst.Where(c => c.COTOSort == item.COTOSort).Count() == 1) || (packingquantity == 2 && lst.Where(c => c.COTOSort == item.COTOSort).Count() == 2)))
                                {
                                    item.IsLocal = true;
                                    item.IsExport = true;
                                    item.PackingID = packingid;
                                    item.PackingQuantity = packingquantity;
                                }
                            }
                            else
                            {
                                item.IsAvailable = false;
                                item.IsContinue = false;
                            }

                            //item.ShowAction = isRunningOther == false && (item.IsTranferTO || item.IsCompleteTO || item.IsBreakMooc || item.IsBreakTO || item.IsEmptyFail ||
                            //    item.IsAvailable || item.IsContinue || item.IsEnd || item.IsExport);

                            item.ShowAction = isRunningOther == false && (item.IsTranferTO || item.IsCompleteTO || item.IsBreakTO || item.IsEmptyFail ||
                                item.IsAvailable || item.IsContinue || item.IsEnd || item.IsExport);

                            //
                            if (lst.Count(c => c.COTOSort == item.COTOSort) == 2)
                            {
                                item.Has2Container = true;
                            }
                            //
                            var Location = model.OPS_COTOLocation.FirstOrDefault(c => c.COTOMasterID == item.MasterID && c.SortOrder == item.COTOSort + 1);
                            if (Location != null)
                                item.DateComeEstimate = Location.DateComeEstimate;
                            //
                            var opsCoto = model.OPS_COTO.FirstOrDefault(c => c.COTOMasterID == item.MasterID && c.SortOrder == item.COTOSort);
                            if (opsCoto != null)
                            {
                                item.COTOKM = opsCoto.KM;
                            }
                            item.STT = stt++;
                        }
                    }
                    var lstRemove = new List<DTOMONOPSTO>();
                    foreach (var cosort in lst.Select(c => c.COTOSort).Distinct())
                    {
                        var lstSort = lst.Where(c => c.COTOSort == cosort).ToList();
                        if (lstSort.Count == 1)
                            lstRemove.Add(lstSort[0]);
                        else
                        {
                            var query = lstSort.Where(c => c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerStop);
                            if (query.Count() > 0)
                                lstRemove.AddRange(query.ToList());
                            else
                                lstRemove.AddRange(lstSort);
                        }
                    }

                    var qr = lstRemove.ToDataSourceResult(CreateRequest(request));
                    result.Total = qr.Total;
                    result.Data = qr.Data as IEnumerable<DTOMONOPSTO>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerStop(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_BreakTO(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerRepair(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_RepairEmpty(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerCorrupt(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_ChangeEmpty(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerCutRomooc(int opsTOContainer, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster.MONCO_TOContainer_BreakMooc(model, Account, opsTOContainer, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerStatusChange(int opsTOContainer, bool isCutRomooc, bool isPause, double stopHour, int reasonID, string reasonNote, int? vehicleID, string containerNo, string sealNo1, string sealNo2)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
                    if (qr.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerWait)
                    {
                        HelperTOMaster.MONCO_TOContainerRun(model, Account, opsTOContainer);
                    }
                    else
                    {
                        if (isCutRomooc)
                        {
                            HelperTOMaster.MONCO_TOContainerComplete_Break(model, Account, opsTOContainer, reasonID, reasonNote, vehicleID, stopHour);
                        }
                        else if (isPause)
                        {
                            HelperTOMaster.MONCO_TOContainerComplete_Wait(model, Account, opsTOContainer, reasonID, reasonNote, stopHour);
                        }
                        else
                        {
                            HelperTOMaster.MONCO_TOContainerComplete_Next(model, Account, opsTOContainer);
                        }

                        if (qr.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || qr.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipLaden)
                        {
                            var qrCO = qr.OPS_Container;
                            if (qrCO == null)
                                throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại");
                            qrCO.ModifiedBy = Account.UserName;
                            qrCO.ModifiedDate = DateTime.Now;
                            qrCO.ContainerNo = containerNo;
                            qrCO.SealNo1 = sealNo1;
                            qrCO.SealNo2 = sealNo2;

                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ContainerCompleteCOList(int opsTOContainer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster.MONCO_TOContainer_Complete(model, Account, opsTOContainer);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONControlTowerCO_Continuous(int opsTOContainer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    return HelperTOMaster.MONCO_TOContainer_Continuous(model, Account, opsTOContainer);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_COTOKMUpdate(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var o in model.OPS_COTO.Where(c => c.COTOMasterID == masterID).ToList())
                    {
                        var matrix = model.CAT_LocationMatrix.FirstOrDefault(c => c.LocationFromID == o.LocationFromID && c.LocationToID == o.LocationToID);
                        if (matrix != null)
                        {
                            o.KM = matrix.KM;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_UnComplete(int opsTOContainer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster.MONCO_TOContainer_UnComplete(model, Account, opsTOContainer);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public OPSCOTOMaster MONControlTowerCO_Check_VehicleMaster(int id, int? romoocID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var result = new OPSCOTOMaster();
                    model.EventAccount = Account; model.EventRunning = false;

                    result = model.OPS_COTOMaster.Where(c => (c.VehicleID == id || c.RomoocID == romoocID)
                        && c.StatusOfCOTOMasterID > -(int)SYSVarType.StatusOfCOTOMasterTendered && c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new OPSCOTOMaster
                    {
                        Code = c.Code,
                        ID = c.ID,
                        RomoocID = c.CAT_Vehicle.CurrentRomoocID,
                        VehicleID = c.VehicleID,
                    }).FirstOrDefault();
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Change vehicle



        #endregion

        #region Start offer

        public void MONCO_TOContainer_Start(int opsTOContainer, bool isChangeRomooc)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_Start(model, Account, opsTOContainer, isChangeRomooc);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONCO_TOContainer_StartOffer(int opsTOContainer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int result = 0;
                    model.EventAccount = Account; model.EventRunning = false;
                    var err = (int)HelperTOMaster.MONCO_TOContainer_StartOffer(model, Account, opsTOContainer);
                    switch (err)
                    {
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartScheduleWait:
                            result = 1;
                            break;
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartHasRomooc:
                            result = 2;
                            break;
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartVehicleStand:
                            result = 3;
                            break;
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartRomoocStand:
                            result = 4;
                            break;
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartDuplicate:
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartMoreLocal:
                        case (int)HelperTOMaster_Error.TOContainerComplete_StartDuplicateMoreLocal:
                            result = 5;
                            break;
                        default:
                            result = 0;
                            break;
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_TOContainer_StartOfferData(int opsTOContainer, DTOHelperTOMaster_Start item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster_Start obj = new HelperTOMaster_Start();
                    obj.ListDuplicate = new List<HelperTOMaster_Start_Duplicate>();
                    obj.ListLocal = new List<HelperTOMaster_Start_Local>();
                    foreach (var o in item.ListDuplicate)
                    {
                        obj.ListDuplicate.Add(new HelperTOMaster_Start_Duplicate
                        {
                            ID = o.ID,
                            SortFrom = o.SortFrom,
                            SortTo = o.SortTo,
                        });
                    }
                    foreach (var o in item.ListLocal)
                    {
                        obj.ListLocal.Add(new HelperTOMaster_Start_Local
                        {
                            ID = o.ID,
                            SortOrder = o.SortOrder,
                        });
                    }
                    HelperTOMaster.MONCO_TOContainer_StartOfferData(model, Account, opsTOContainer, obj);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_OrderEXIM(string request, int opsTOContainer)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var qrTOCont = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
                    if (qrTOCont != null)
                    {
                        List<int> lst = new List<int>(){
                            -(int)SYSVarType.StatusOfCOContainerEXLaden,
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                            -(int)SYSVarType.StatusOfCOContainerIMLaden,
                            -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                        };
                        var query = model.OPS_COTOContainer.Where(c => false).Select(c => new DTOMONOPSTO
                        {
                            ID = c.ID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            StatusOfCOContainer = c.SYS_Var.ValueOfVar,
                            SortOrder = c.SortOrder,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToAddress = c.CAT_Location1.Address,

                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_OrderLocalOffer(string request, int opsTOContainer)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var qrTOCont = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
                    var qrmaster = model.OPS_COTOContainer.Where(c => c.COTOMasterID == qrTOCont.COTOMasterID);
                    if (qrTOCont != null)
                    {
                        var query = qrmaster.Where(c => c.ParentID == null && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal).Select(c => new DTOMONOPSTO
                        {
                            ID = c.ID,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            StatusOfCOContainer = c.SYS_Var.ValueOfVar,
                            SortOrder = c.SortOrder,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToAddress = c.CAT_Location1.Address,
                            COTOSort = c.COTOSort,
                        }).OrderBy(c => c.COTOSort).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ket thuc tai bai

        public void MONControlTowerCO_EndStation(int opsTOContainer, int? locationromoocid, int? locationvehicleid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    HelperTOMaster.MONCO_TOContainer_EndStation(model, Account, opsTOContainer, locationromoocid, locationvehicleid);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_StandDetailList(string request, int opsTOContainer)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var qrTOCont = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
                    if (qrTOCont != null)
                    {
                        var query = model.CAT_StandDetail.Where(c => c.VehicleID == qrTOCont.OPS_COTOMaster.VehicleID).Select(c => new DTOCATLocation
                        {
                            ID = c.CAT_Stand.LocationID,
                            Location = c.CAT_Stand.StandName,
                            Code = c.CAT_Stand.Code,
                            Address = c.CAT_Stand.CAT_Location.Address,
                            CountryName = c.CAT_Stand.CAT_Location.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Stand.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Stand.CAT_Location.CAT_District.DistrictName
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOCATLocation> MONControlTowerCO_VehicleLocationDefault(int opsTOContainer)
        {
            try
            {
                List<DTOCATLocation> result = new List<DTOCATLocation>();
                using (var model = new DataEntities())
                {
                    var qrcon = model.OPS_COTOContainer.FirstOrDefault(c => c.COTOMasterID > 0 && c.ID == opsTOContainer);
                    if (qrcon == null)
                        FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                    var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == qrcon.COTOMasterID);
                    if (qrmaster == null)
                        FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");

                    if (qrmaster.VehicleID.HasValue)
                    {
                        var qrstand = model.CAT_StandDetail.FirstOrDefault(c => c.VehicleID == qrmaster.VehicleID && c.IsDefault == true);
                        if (qrstand != null)
                        {
                            result.Add(new DTOCATLocation
                            {
                                ID = qrstand.CAT_Stand.LocationID,
                                Code = qrstand.CAT_Stand.CAT_Location.Code,
                                Location = qrstand.CAT_Stand.CAT_Location.Location,
                                Address = qrstand.CAT_Stand.CAT_Location.Address,
                            });
                        }
                    }
                    if (qrcon.OPS_Container.RomoocID.HasValue)
                    {
                        var qrstand = model.CAT_StandDetail.FirstOrDefault(c => c.RomoocID == qrcon.OPS_Container.RomoocID && c.IsDefault == true);
                        if (qrstand != null)
                        {
                            result.Add(new DTOCATLocation
                            {
                                ID = qrstand.CAT_Stand.LocationID,
                                Code = qrstand.CAT_Stand.CAT_Location.Code,
                                Location = qrstand.CAT_Stand.CAT_Location.Location,
                                Address = qrstand.CAT_Stand.CAT_Location.Address,
                            });
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region muon cont

        public DTOResult MONControlTowerCO_COTONonMasterList(string request, int packingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lstStatus = new List<int>() 
                    { 
                        -(int)SYSVarType.StatusOfCOContainerLOLaden,
                        -(int)SYSVarType.StatusOfCOContainerShipLaden
                    };
                    var query = model.OPS_COTOContainer.Where(c => lstStatus.Contains(c.StatusOfCOContainerID) && c.COTOMasterID == null && c.OPS_Container.ORD_Container.PackingID == packingID && !c.IsSplit && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        ORDContainerID = c.OPS_Container.ContainerID,
                        RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToAddress = c.CAT_Location1.Address
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_UnCompleteMasterList(string request, int packingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    var lstid = model.OPS_COTOContainer.Where(c => c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOLaden && c.COTOMasterID.HasValue && c.OPS_Container.ORD_Container.PackingID == packingID && !c.IsSplit && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal && c.OPS_COTOMaster.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => c.COTOMasterID).Distinct().ToList();
                    var query = model.OPS_COTOMaster.Where(c => lstid.Contains(c.ID)).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        MasterCode = c.Code,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        ETA = c.ETA,
                        ETD = c.ETD,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_OrderLocal(int opsContainerID, List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_OrderLocal(model, Account, opsContainerID, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_OrderLocalByMaster(int opscontainerid, List<int> lstMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_OrderLocalByMaster(model, Account, opscontainerid, lstMasterID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region swap cont

        public DTOResult MONControlTowerCO_SwapCOTONonMasterList(string request, int packingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == null && c.OPS_Container.ORD_Container.PackingID == packingID && !c.IsSplit && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        ORDContainerID = c.OPS_Container.ContainerID,
                        RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToAddress = c.CAT_Location1.Address,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_SwapUnCompleteMasterList(string request, int packingID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {

                    var lstid = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && c.OPS_Container.ORD_Container.PackingID == packingID && !c.IsSplit && c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport && c.OPS_COTOMaster.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => c.COTOMasterID).Distinct().ToList();
                    var query = model.OPS_COTOMaster.Where(c => lstid.Contains(c.ID)).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        MasterCode = c.Code,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        ETA = c.ETA,
                        ETD = c.ETD,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_OrderExport(int opsContainerID, List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_OrderExport(model, Account, opsContainerID, lst);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_OrderExportByMaster(int opscontainerid, List<int> lstMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_OrderExportByMaster(model, Account, opscontainerid, lstMasterID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        public void MONControlTowerCO_ChangeDepotGet(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_ChangeDepotGet(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_AddDepotGet(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_AddDepotGet(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ChangeDepotReturn(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_ChangeDepotReturn(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_AddDepotReturn(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_AddDepotReturn(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_AddStock(int opsTOContainer, int locationID, int reasonID, string reasonNote)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_TOContainer_AddStock(model, Account, opsTOContainer, locationID, reasonID, reasonNote);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_COTOStockRead(string request, int opsCOTOConID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (opsCOTOConID > 0)
                    {
                        var qr = model.OPS_COTOContainer.Where(c => c.ID == opsCOTOConID).Select(c => new
                        {
                            c.LocationFromID,
                            c.LocationToID,
                            c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                        }).FirstOrDefault();

                        if (qr == null)
                            throw FaultHelper.BusinessFault(null, null, "Đơn hàng không tồn tại");

                        var qrStock = model.CUS_Location.Where(c => c.CustomerID == qr.CustomerID && c.CusPartID == null && c.LocationID != qr.LocationFromID && c.LocationID != qr.LocationToID).Select(c => new CATLocation
                        {
                            ID = c.LocationID,
                            Address = c.CAT_Location.Address,
                            Code = c.Code,
                            Location = c.LocationName,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng,
                        }).ToDataSourceResult(CreateRequest(request));


                        result.Total = qrStock.Total;
                        result.Data = qrStock.Data as IEnumerable<CATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult CATLocation_SeaPortList(string request, int opsTOContainer)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var qrTOCont = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
                    if (qrTOCont != null)
                    {
                        //var cusID = qrTOCont.OPS_Container.ORD_Container.ORD_Order.CustomerID;
                        var cusID = qrTOCont.OPS_Container.ORD_Container.ORD_Order.PartnerID;
                        var query = model.CUS_Location.Where(c => c.CusPartID == cusID).Select(c => new DTOCATLocation
                        {
                            ID = c.LocationID,
                            Location = c.CAT_Location.Location,
                            Code = c.Code,
                            Address = c.CAT_Location.Address,
                            Lat = c.CAT_Location.Lat,
                            Lng = c.CAT_Location.Lng,
                            CountryName = c.CAT_Location.CAT_Country.CountryName,
                            ProvinceName = c.CAT_Location.CAT_Province.ProvinceName,
                            DistrictName = c.CAT_Location.CAT_District.DistrictName
                        }).ToDataSourceResult(CreateRequest(request));

                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOCATLocation>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void FindLocationFromCOTOCont(DataEntities model, int opsTOContainer)
        {
            var qr = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == opsTOContainer);
            if (qr != null)
            {
                int locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                int locationToType = -(int)SYSVarType.TypeOfTOLocationEmpty;

                switch (qr.StatusOfCOContainerID)
                {
                    case -(int)SYSVarType.StatusOfCOContainerEXEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerEXLaden:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerIMEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerIMLaden:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerLOGetEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerLOLaden:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerLOReturnEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerRepairEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerReturnEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerShipEmpty:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerShipLaden:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                    case -(int)SYSVarType.StatusOfCOContainerStop:
                        locationFromType = -(int)SYSVarType.TypeOfTOLocationEmpty;
                        locationToType = -(int)SYSVarType.TypeOfTOLocationGet;
                        break;
                }

                var localFrom = model.OPS_COTOLocation.Where(c => c.COTOMasterID == qr.COTOMasterID && c.TypeOfTOLocationID == locationFromType);
                var localTo = model.OPS_COTOLocation.Where(c => c.COTOMasterID == qr.COTOMasterID && c.TypeOfTOLocationID == locationToType);
            }
        }

        #endregion

        #region OPS_COTO

        public DTOResult MONControlTowerCO_OPSCOTORead(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTO.Where(c => c.COTOMasterID == masterID).Select(c => new DTOMONCOTO
                    {
                        ID = c.ID,
                        MasterID = c.COTOMasterID,
                        MasterCode = c.OPS_COTOMaster.Code,
                        VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                        KM = c.KM,
                        KMGPS = c.KMGPS,
                        ApprovedBy = c.ApprovedBy,
                        ApprovedDate = c.ApprovedDate,
                        Ton = c.Ton,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromName = c.CAT_Location.Location,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToName = c.CAT_Location1.Location,
                        LocationToAddress = c.CAT_Location1.Address,
                        StatusName = c.SYS_Var.ValueOfVar,
                        StatusID = c.COTOStatusID,
                        SortOrder = c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCOTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_OPSCOTOSave(List<DTOMONCOTO> lst, int type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var qr = model.OPS_COTO.FirstOrDefault(c => c.ID == item.ID);
                        if (qr != null)
                        {
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                            qr.KM = item.KM;
                            qr.ETD = item.ETD;
                            qr.ETA = item.ETA;
                            if (type == 1)
                            {
                                qr.COTOStatusID = -(int)SYSVarType.COTOStatusComplete;
                            }
                            else if (type == 2)
                            {
                                qr.COTOStatusID = -(int)SYSVarType.COTOStatusOpen;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_OPSCOTOContainerRead(string request, int masterID, int cotoid)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var lst = model.OPS_COTODetail.Where(c => c.COTOID == cotoid).Select(c => c.COTOContainerID).ToList();
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID == masterID && c.ParentID == null && !lst.Contains(c.ID)).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                        TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                        ContainerNo = c.OPS_Container.ContainerNo,
                        RequestDate = c.OPS_Container.ORD_Container.ORD_Order.RequestDate,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        LocationFromID = c.LocationFromID,
                        LocationFromCode = c.CAT_Location.Code,
                        LocationFromAddress = c.CAT_Location.Address,
                        LocationToID = c.LocationToID,
                        LocationToCode = c.CAT_Location1.Code,
                        LocationToAddress = c.CAT_Location1.Address,
                        LocationDepotID = c.OPS_Container.ORD_Container.LocationDepotID,
                        LocationDepotCode = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.Code : "",
                        LocationDepotAddress = c.OPS_Container.ORD_Container.LocationDepotID > 0 ? c.OPS_Container.ORD_Container.CUS_Location.CAT_Location.Address : "",
                        LocationDepotReturnID = c.OPS_Container.ORD_Container.LocationDepotReturnID,
                        LocationDepotReturnCode = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.Code : "",
                        LocationDepotReturnAddress = c.OPS_Container.ORD_Container.LocationDepotReturnID > 0 ? c.OPS_Container.ORD_Container.CUS_Location1.CAT_Location.Address : "",
                        STT = c.COTOSort,
                        SortOrder = c.SortOrder,
                        ServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                        ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                        TypeOfStatusContainerID = c.TypeOfStatusContainerID,
                        TypeOfStatusContainerName = c.SYS_Var1.ValueOfVar,
                        StatusOfCOContainerID = c.StatusOfCOContainerID,
                        StatusOfCOContainer = c.SYS_Var.ValueOfVar,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_OPSCOTODetailRead(string request, int cotoid)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTODetail.Where(c => c.COTOID == cotoid).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        SortOrder = c.OPS_COTO.SortOrder,
                        LocationFromCode = c.OPS_COTO.CAT_Location.Code,
                        LocationFromAddress = c.OPS_COTO.CAT_Location.Address,
                        LocationToCode = c.OPS_COTO.CAT_Location1.Code,
                        LocationToAddress = c.OPS_COTO.CAT_Location1.Address,
                        MasterCode = c.OPS_COTOContainer.OPS_COTOMaster.Code,
                        OrderCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.Code,
                        CustomerCode = c.OPS_COTOContainer.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_COTODeatailAddOPSTOContainer(int id, List<int> lstTOContainerID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_COTODetail.FirstOrDefault(c => c.ID == id);
                    foreach (var item in lstTOContainerID)
                    {
                        var obj = new OPS_COTODetail();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.COTOID = id;
                        obj.COTOContainerID = item;
                        model.OPS_COTODetail.Add(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region Change Plan

        public List<DTOOPSCO_Map_Schedule_Group> MONCTCO_TimelineChangePlan_TractorResource(int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOOPSCO_Map_Schedule_Group> result = new List<DTOOPSCO_Map_Schedule_Group>();
                    if (masterID > 0)
                    {
                        var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                        var qrvehicle = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => new { c.VehicleID, c.VendorOfVehicleID }).FirstOrDefault();
                        var currentVehicle = model.CUS_Vehicle.Where(c => qrvehicle.VehicleID == c.VehicleID && (c.CustomerID == qrvehicle.VendorOfVehicleID || (qrvehicle.VendorOfVehicleID == null && c.CustomerID == Account.SYSCustomerID))).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                            RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                            VendorID = c.CustomerID == Account.SYSCustomerID ? -1 : c.CustomerID,
                            VendorCode = c.CUS_Customer.Code,
                            VendorName = c.CUS_Customer.CustomerName,
                            Text = c.CAT_Vehicle.RegNo,
                            Option1 = "CurrentVehicle",
                        }).ToList();
                        var dataVehHome = model.CUS_Vehicle.Where(c => c.VehicleID > 0 && qrvehicle.VehicleID != c.VehicleID && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                            RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                            VendorID = -1,
                            VendorCode = "Xe nhà",
                            VendorName = "Xe nhà",
                            Text = c.CAT_Vehicle.RegNo
                        }).ToList();
                        var dataVehVend = model.CUS_Vehicle.Where(c => c.VehicleID > 2 && qrvehicle.VehicleID != c.VehicleID && c.CustomerID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.CustomerID) : true) && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                            RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,
                            VendorID = c.CustomerID,
                            VendorCode = c.CUS_Customer.Code,
                            VendorName = c.CUS_Customer.CustomerName,
                            Text = c.CAT_Vehicle.RegNo
                        }).ToList();
                        var dataVend = model.CUS_Customer.Where(c => !c.IsSystem && c.ID != Account.SYSCustomerID && (!isAdmin ? Account.ListCustomerID.ToList().Contains(c.ID) : true) && (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH)).Select(c => new DTOOPSCO_Map_Schedule_Group
                        {
                            ID = c.ID,
                            VehicleID = -1,
                            VehicleNo = string.Empty,
                            RomoocID = -1,
                            RomoocNo = string.Empty,
                            VendorID = c.ID,
                            VendorCode = c.Code,
                            VendorName = c.CustomerName,
                            Text = c.Code
                        }).ToList();
                        var homeGroup = new DTOOPSCO_Map_Schedule_Group();
                        homeGroup.Text = "Xe nhà";
                        homeGroup.ID = -1;
                        homeGroup.VehicleID = -1;
                        homeGroup.VehicleNo = string.Empty;
                        homeGroup.RomoocID = -1;
                        homeGroup.RomoocNo = string.Empty;
                        homeGroup.VendorID = -1;
                        homeGroup.VendorCode = "Xe nhà";
                        homeGroup.VendorName = "Xe nhà";

                        result.AddRange(currentVehicle);
                        result.Add(homeGroup);
                        result.AddRange(dataVehHome);

                        foreach (var item in dataVend)
                        {
                            result.Add(item);
                            result.AddRange(dataVehVend.Where(c => c.VendorID == item.VendorID).ToList());
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSCO_Map_Schedule_Event> MONCTCO_TimelineChangePlan_TractorEvent(List<int> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    List<DTOOPSCO_Map_Schedule_Event> result = new List<DTOOPSCO_Map_Schedule_Event>();
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());
                    lst = lst.Distinct().ToList();


                    //load cac chuyen cua xe hien tai
                    var qrvehicle = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => c.VehicleID).FirstOrDefault();
                    if (qrvehicle != null)
                    {
                        var qrC = model.OPS_COTOContainer.Where(c => c.OPS_COTOMaster.VehicleID == qrvehicle && c.COTOMasterID.HasValue && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new
                        {
                            MasterID = c.COTOMasterID,
                        }).Distinct().ToList();
                        foreach (var o in qrC)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o.MasterID);
                            if (qrmaster != null)
                            {
                                var a = 0;
                                result.Add(new DTOOPSCO_Map_Schedule_Event
                                {
                                    TOMasterID = o.MasterID.Value,
                                    VehicleID = qrvehicle.Value,
                                    Title = "",
                                    StartDate = qrmaster.ETD,
                                    EndDate = qrmaster.ETA,
                                    ETD = qrmaster.ETD.ToString("dd/MM/yyyy hh:mm"),
                                    ETA = qrmaster.ETA.ToString("dd/MM/yyyy hh:mm"),
                                    RomoocNo = qrmaster.CAT_Romooc.RegNo,
                                    Code = qrmaster.Code,
                                    TypeOfGroupID = a,
                                    StatusOfEvent = qrmaster.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 1 : 2,
                                });
                            }
                        }
                    }

                    //load cac chuyen cua xe khac
                    foreach (var id in lst)
                    {
                        var qr = model.OPS_COTOContainer.Where(c => c.OPS_COTOMaster.VehicleID == id && c.OPS_COTOMaster.VehicleID != qrvehicle && c.COTOMasterID.HasValue && c.COTOMasterID != masterID && c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered).Select(c => new
                            {
                                MasterID = c.COTOMasterID,
                                ORDContainerID = c.OPS_Container.ContainerID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                ServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                                StatusOfCOTOMasterID = c.OPS_COTOMaster.StatusOfCOTOMasterID,
                            }).Distinct().ToList();

                        foreach (var o in qr)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o.MasterID);
                            if (qrmaster != null)
                            {
                                var qrEmpty = qrmaster.OPS_COTOContainer.FirstOrDefault(c => c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty);
                                var a = 0;
                                if (o.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                    a = 1;
                                else if (o.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                    a = 2;
                                else if (o.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                    a = 3;
                                else if (o.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                    a = 4;
                                else if (o.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                    a = 5;
                                result.Add(new DTOOPSCO_Map_Schedule_Event
                                {
                                    TOMasterID = o.MasterID.Value,
                                    VehicleID = id,
                                    Title = o.OrderCode,
                                    StartDate = qrmaster.ETD,
                                    EndDate = qrmaster.ETA,
                                    ETD = qrmaster.ETD.ToString("dd/MM/yyyy hh:mm"),
                                    ETA = qrmaster.ETA.ToString("dd/MM/yyyy hh:mm"),
                                    RomoocNo = qrmaster.CAT_Romooc.RegNo,
                                    Code = qrmaster.Code,
                                    TypeOfGroupID = a,
                                    StatusOfEvent = o.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 1 : 2,
                                });
                            }
                        }
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ChangeMasterPlan(int masterID, int planMasterID, bool isChangeMooc, DateTime? etd)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_ChangePlan(model, Account, masterID, planMasterID, isChangeMooc, etd);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONControlTowerCO_MONCO_Continue(int masterID, int opscontainerid)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    return HelperTOMaster.MONCO_Continue(model, Account, opscontainerid, masterID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_ListMasterByTractor(string request, int tractorID, int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOMaster.Where(c => c.ID != masterID && c.VehicleID == tractorID && c.RomoocID > 1 && c.CAT_Romooc.HasContainer == true && c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new DTOMONOPSTO
                    {
                        ID = c.ID,
                        MasterCode = c.Code,
                        ETA = c.ETA,
                        ETD = c.ETD,
                        RomoocNo = c.CAT_Romooc.RegNo,
                        VehicleNo = c.CAT_Vehicle.RegNo,
                        MasterID = c.ID
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSTO>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_MONCO_End(int opscontainerid, int? locationID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_End(model, Account, opscontainerid, locationID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONControlTowerCO_CheckMasterRomooc(int masterID, int planMasterID, DateTime? etd)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var rs = 0;
                    model.EventAccount = Account; model.EventRunning = false;
                    switch (HelperTOMaster.MONCO_ChangePlanCheck(model, Account, masterID, planMasterID, etd))
                    {
                        case HelperTOMaster_Status.MONCO_ChangePlanHasRomooc:
                            rs = 1;
                            break;
                        case HelperTOMaster_Status.None:
                            rs = 0;
                            break;

                    }
                    return rs;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_AddHourEmpty(int opsContainerID, double hour)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_AddHourEmpty(model, Account, opsContainerID, hour);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_MasterChangeETD(int masterID, DateTime etd)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_MasterChangeETD(model, Account, masterID, etd);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        // theo container

        public List<DTOMONOPSTO> MONControlTowerCO_ChangePlanByORDCont_Resource(DTOMONTimeLineFilter filter, int masterID)
        {
            try
            {
                var result = new List<DTOMONOPSTO>();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var qrvehicle = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => new { c.VehicleID, c.VendorOfVehicleID }).FirstOrDefault();
                        if (qrvehicle == null)
                            throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");
                        var currentVehicle = model.CUS_Vehicle.Where(c => qrvehicle.VehicleID == c.VehicleID && (c.CustomerID == qrvehicle.VendorOfVehicleID || (qrvehicle.VendorOfVehicleID == null && c.CustomerID == Account.SYSCustomerID))).Select(c => new DTOMONOPSTO
                        {
                            ID = -1,
                            VehicleID = c.VehicleID,
                            VehicleNo = c.CAT_Vehicle.RegNo,
                            RomoocID = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CurrentRomoocID.Value : -1,
                            RomoocNo = c.CAT_Vehicle.CurrentRomoocID > 0 ? c.CAT_Vehicle.CAT_Romooc.RegNo : string.Empty,

                        }).ToList();
                        result.AddRange(currentVehicle);
                        result.AddRange(model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && c.COTOMasterID != masterID
                            && (filter.IsFilterMasterStatus || (c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo))
                            && c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered
                            && (filter.ListORDContainerID.Count == 0 || filter.ListORDContainerID.Contains(c.OPS_Container.ORD_Container.ID))
                            && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => new
                            {
                                ID = c.OPS_Container.ORD_Container.ID,
                                OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                                ContainerNo = c.OPS_Container.ORD_Container.ContainerNo,
                                TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                                ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                                Ton = c.OPS_Container.ORD_Container.Ton,
                                CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            }).Distinct().Select(c => new DTOMONOPSTO
                            {
                                ID = c.ID,
                                OrderCode = c.OrderCode,
                                ContainerNo = c.ContainerNo,
                                TypeOfContainer = c.TypeOfContainer,
                                ServiceOfOrder = c.ServiceOfOrder,
                                Ton = c.Ton,
                                CustomerCode = c.CustomerCode,
                            }).ToList());
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONContainerScheduler> MONControlTowerCO_ChangePlanByORDCont_Task(DTOMONTimeLineFilter filter, List<int> lst, int masterID)
        {
            try
            {
                var result = new List<DTOMONContainerScheduler>();
                using (var model = new DataEntities())
                {
                    //load chuyen hien tai
                    var qrvehicle = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => c.VehicleID).FirstOrDefault();
                    if (qrvehicle != null)
                    {
                        var qrC = model.OPS_COTOContainer.Where(c => c.OPS_COTOMaster.VehicleID == qrvehicle && c.COTOMasterID.HasValue && c.COTOMasterID != masterID && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived).Select(c => new
                        {
                            MasterID = c.COTOMasterID,
                        }).Distinct().ToList();
                        foreach (var o in qrC)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o.MasterID);
                            if (qrmaster != null)
                            {
                                result.Add(new DTOMONContainerScheduler
                                {
                                    MasterID = o.MasterID.Value,
                                    ETD = qrmaster.ETD,
                                    ETA = qrmaster.ETA,
                                    ATA = qrmaster.ATA,
                                    ATD = qrmaster.ATD,
                                    ORDContainerID = -1,
                                    VehicleNo = qrmaster.CAT_Vehicle.RegNo,
                                    MasterCode = qrmaster.Code,
                                    IsComplete = qrmaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived,

                                });
                            }
                        }
                    }

                    //load cac chuyen con lai
                    foreach (var id in lst)
                    {
                        var qr = model.OPS_COTOContainer.Where(c => (filter.ListTractorID.Count == 0 || filter.ListTractorID.Contains(c.OPS_COTOMaster.VehicleID.Value))
                            && c.OPS_COTOMaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterTendered
                            && (filter.ListRomoocID.Count == 0 || filter.ListRomoocID.Contains(c.OPS_COTOMaster.RomoocID.Value))
                            && c.COTOMasterID.HasValue && c.COTOMasterID != masterID && c.OPS_Container.ContainerID == id).Select(c => new
                            {
                                MasterID = c.COTOMasterID,
                                ORDContainerID = c.OPS_Container.ContainerID,
                                ETD = c.OPS_COTOMaster.ETD,
                                ETA = c.OPS_COTOMaster.ETA,
                                ATD = c.OPS_COTOMaster.ATD,
                                ATA = c.OPS_COTOMaster.ATA,
                            }).Distinct().ToList();

                        foreach (var o in qr)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o.MasterID);
                            if (qrmaster != null && result.Count(c => c.MasterID == o.MasterID) > 0)
                            {
                                var qrEmpty = qrmaster.OPS_COTOContainer.FirstOrDefault(c => c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty);

                                result.Add(new DTOMONContainerScheduler
                                {
                                    MasterID = o.MasterID.Value,
                                    ETD = o.ETD,
                                    ETA = o.ETA,
                                    ATA = o.ATA,
                                    ATD = o.ATD,
                                    ETDEmpty = qrEmpty == null ? null : qrEmpty.ETD,
                                    ETAEmpty = qrEmpty == null ? null : qrEmpty.ETA,
                                    ORDContainerID = o.ORDContainerID,
                                    VehicleNo = qrmaster.CAT_Vehicle.RegNo,
                                    MasterCode = qrmaster.Code,
                                    IsComplete = qrmaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived,
                                });
                            }
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region location

        public DTOResult MONControlTowerCO_MasterLocation(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOLocation.Where(c => c.COTOMasterID == masterID).Select(c => new DTOOPSDITOLocation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        LocationDistrict = c.CAT_Location.CAT_District.DistrictName,
                        LocationProvince = c.CAT_Location.CAT_Province.ProvinceName,
                        DITOLocationStatusID = c.COTOLocationStatusID,
                        DITOLocationStatusName = c.SYS_Var.ValueOfVar,
                        DateCome = c.DateCome,
                        DateLeave = c.DateLeave,
                        SortOrder = c.SortOrder,
                        SortOrderReal = c.SortOrderReal,
                        TypeOfTOLocationName = c.SYS_Var1.ValueOfVar,
                        DateComeEstimate = c.DateComeEstimate,
                        DateLeaveEstimate = c.DateLeaveEstimate,
                    }).OrderBy(c => c.SortOrder).ToDataSourceResult(CreateRequest(request));
                    result.Data = query.Data as IEnumerable<DTOOPSDITOLocation>;
                    result.Total = query.Total;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_MasterLocationUpdate(int masterID, List<DTOMON_OPSTOLocation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == masterID);
                    if (objMaster != null)
                    {
                        foreach (var item in lst)
                        {
                            HelperTOMaster.MONCO_ChangeLocationTime(model, Account, masterID, lst);
                        }
                        model.SaveChanges();
                        HelperFinance.Container_TimeChange(model, Account, masterID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Romooc

        public DTOResult MONControlTowerCO_RomoocList(string request)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Romooc.Select(c => new DTOMONCT_Romooc
                    {
                        ID = c.ID,
                        CurrentVendorID = c.CurrentVendorID > 0 ? c.CurrentVendorID : -1,
                        RomoocNo = c.RegNo,
                        TractorNo = string.Empty,
                        MasterID = null,
                        MasterCode = string.Empty,
                        RomoocStatus = "Rảnh",
                        Lng = c.Lng,
                        Lat = c.Lat,

                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCT_Romooc>;

                    foreach (DTOMONCT_Romooc obj in result.Data)
                    {
                        var qrVehicle = model.CAT_Vehicle.Where(c => c.CurrentRomoocID == obj.ID).FirstOrDefault();
                        if (qrVehicle != null)
                        {
                            obj.TractorNo = qrVehicle.RegNo;
                            obj.RomoocStatus = "Bận";
                            var qrORD = model.OPS_COTOContainer.Where(c => c.OPS_COTOMaster.VehicleID == qrVehicle.ID && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived).FirstOrDefault();
                            if (qrORD != null)
                            {
                                obj.MasterID = qrORD.COTOMasterID;
                                obj.MasterCode = qrORD.OPS_COTOMaster.Code;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_ReturnRomooc(List<int> lstRomoocID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var id in lstRomoocID)
                    {
                        var qr = model.CAT_Vehicle.FirstOrDefault(c => c.CurrentRomoocID == id);
                        if (qr != null)
                        {
                            qr.CurrentRomoocID = null;
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                        }
                        model.SaveChanges();
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Trouble

        public DTOResult MONControlTowerCO_TroubleList(int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO && c.COTOMasterID == masterID).Select(c => new DTOCATTrouble
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        COTOID = c.DITOID,
                        COTOMasterID = c.COTOMasterID,
                        Description = c.Description,
                        AttachmentFile = c.AttachmentFile,
                        Cost = c.Cost,
                        CostOfCustomer = c.CostOfCustomer,
                        CostOfVendor = c.CostOfVendor,
                        DriverID = c.DriverID,
                        DriverName = c.DriverID.HasValue ? c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName : string.Empty,
                        TroubleCostStatusID = c.TroubleCostStatusID,
                        TroubleCostStatusName = c.SYS_Var.ValueOfVar == null ? string.Empty : c.SYS_Var.ValueOfVar,
                        RoutingName = c.COTOID > 0 ? c.OPS_COTO.CAT_Routing.CAT_Location.Location + " - " + c.OPS_COTO.CAT_Routing.CAT_Location1.Location : string.Empty,
                    }).ToList();

                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(obj.Setting);

                    foreach (var item in lst)
                    {
                        var o = query.FirstOrDefault(c => c.GroupOfTroubleID == item.TroubleID);
                        if (o == null)
                        {
                            if (model.CAT_GroupOfTrouble.Count(c => c.ID == item.TroubleID && c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO) > 0)
                            {
                                query.Add(new DTOCATTrouble
                                {
                                    ID = 0,
                                    GroupOfTroubleID = item.TroubleID,
                                    GroupOfTroubleName = item.Name,
                                    TroubleCostStatusName = string.Empty,
                                    Description = string.Empty,
                                    AttachmentFile = string.Empty,
                                    Cost = item.CostValue,
                                });
                            }
                        }
                    }

                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOCATTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_RoutingList(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTO.Where(c => c.IsOPS && c.COTOMasterID == masterID && (locationID.HasValue ? (c.CAT_Routing.LocationToID == locationID.Value || c.CAT_Routing.LocationFromID == locationID.Value) : true)).Select(c => new DTOMONRouting
                    {
                        TOID = c.ID,
                        RoutingName = c.CAT_Routing.CAT_Location.Location + " - " + c.CAT_Routing.CAT_Location1.Location
                    }).ToList();
                    var objNew = new DTOMONRouting();
                    objNew.TOID = -1;
                    objNew.RoutingName = " ";
                    query.Insert(0, objNew);
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOMONRouting>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_TroubleNotinList(int masterID, int? locationID)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {


                    var query = model.CAT_Trouble.Where(c => c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO && c.COTOMasterID == masterID
                        && (locationID > 0 ? (c.OPS_COTO.CAT_Routing.LocationFromID == locationID || c.OPS_COTO.CAT_Routing.LocationToID == locationID) : true)).Select(c => new DTOCATTrouble
                        {
                            ID = c.ID,
                            GroupOfTroubleID = c.GroupOfTroubleID,
                            GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                            COTOID = c.COTOID,
                            COTOMasterID = c.COTOMasterID,
                            Description = c.Description,
                            AttachmentFile = c.AttachmentFile,
                            Cost = c.Cost,
                            RoutingName = c.COTOID > 0 ? c.OPS_COTO.CAT_Routing.CAT_Location.Location + " - " + c.OPS_COTO.CAT_Routing.CAT_Location1.Location : string.Empty,
                        }).ToList();

                    List<DTOCATSYSCustomerTrouble> lst = new List<DTOCATSYSCustomerTrouble>();
                    var obj = model.SYS_Setting.FirstOrDefault(c => c.Key == StringKey && c.SYSCustomerID == Account.SYSCustomerID);
                    if (obj != null)
                        lst = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOCATSYSCustomerTrouble>>(obj.Setting);

                    foreach (var item in lst)
                    {
                        var o = query.FirstOrDefault(c => c.GroupOfTroubleID == item.TroubleID);
                        if (o == null)
                        {
                            query.Add(new DTOCATTrouble
                            {
                                ID = 0,
                                GroupOfTroubleID = item.TroubleID,
                                GroupOfTroubleName = item.Name,
                                Description = string.Empty,
                                AttachmentFile = string.Empty,
                                Cost = item.CostValue,
                            });
                        }
                    }
                    var lstID = query.Select(c => c.GroupOfTroubleID).ToList();
                    var lstnotin = model.CAT_GroupOfTrouble.Where(c => c.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO && !lstID.Contains(c.ID)).Select(c => new DTOCATSYSCustomerTrouble
                    {
                        TroubleID = c.ID,
                        Code = c.Code,
                        Name = c.Name,
                        CostValue = 0,
                        IsUse = false,
                    }).ToList();

                    result.Total = lstnotin.Count;
                    result.Data = lstnotin as IEnumerable<DTOCATSYSCustomerTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_TroubleSaveAll(List<DTOCATTrouble> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            obj = new CAT_Trouble();
                            obj.CreatedBy = Account.UserName;
                            obj.CreatedDate = DateTime.Now;
                            obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                            model.CAT_Trouble.Add(obj);
                        }
                        else
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                        }
                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.COTOID = item.COTOID > 0 ? item.COTOID : null;
                        obj.COTOMasterID = item.COTOMasterID;
                        obj.Description = item.Description;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.DriverID = item.DriverID;
                        obj.TroubleCostStatusID = item.TroubleCostStatusID == 0 ? -(int)SYSVarType.TroubleCostStatusOpen : item.TroubleCostStatusID;
                        obj.CostOfCustomer = item.CostOfCustomer;
                        obj.CostOfVendor = item.CostOfVendor;
                        model.SaveChanges();
                        item.ID = obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONControlTowerCO_TroubleSave(DTOCATTrouble item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null)
                    {
                        obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                        model.CAT_Trouble.Add(obj);
                    }
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                    }
                    obj.GroupOfTroubleID = item.GroupOfTroubleID;
                    obj.COTOID = item.COTOID > 0 ? item.COTOID : null;
                    obj.COTOMasterID = item.COTOMasterID;
                    obj.Description = item.Description;
                    obj.AttachmentFile = item.AttachmentFile;
                    obj.Cost = item.Cost;
                    obj.DriverID = item.DriverID;
                    obj.TroubleCostStatusID = item.TroubleCostStatusID == 0 ? -(int)SYSVarType.TroubleCostStatusOpen : item.TroubleCostStatusID;
                    obj.CostOfCustomer = item.CostOfCustomer;
                    obj.CostOfVendor = item.CostOfVendor;
                    model.SaveChanges();
                    item.ID = obj.ID;

                    var master = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.COTOMasterID);
                    if (master != null)
                    {
                        if (model.OPS_COTOContainer.Count(c => c.COTOMasterID == master.ID && c.TypeOfStatusContainerID == -(int)SYSVarType.TypeOfStatusContainerComplete) == master.OPS_COTOContainer.Count && master.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived)
                        {
                            //bool isFixPriceCUS = false;
                            //bool isFixPriceVEN = false;
                            //HelperFinance.COTOMaster_POD(model, Account, master.ID);
                            model.SaveChanges();
                        }
                    }
                }
                return item.ID;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_TroubleSaveList(List<DTOCATSYSCustomerTrouble> lst, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        model.CAT_Trouble.Add(obj);

                        obj.GroupOfTroubleID = item.TroubleID;
                        obj.COTOID = null;
                        obj.COTOMasterID = masterID;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                        obj.Description = string.Empty;
                        obj.AttachmentFile = string.Empty;
                        obj.Cost = item.CostValue;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_TroubleDelete(DTOCATTrouble item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        model.CAT_Trouble.Remove(obj);
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTowerCO_MasterDriverList(int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                var lst = new List<DTOMONDriver>();
                using (var model = new DataEntities())
                {
                    var qr = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => new
                    {
                        c.DriverID1,
                        c.DriverID2,
                        c.DriverID3,
                        c.DriverID4,
                        c.DriverID5,
                        DriverType1 = c.SYS_Var5.ValueOfVar,
                        DriverType2 = c.SYS_Var6.ValueOfVar,
                        DriverType3 = c.SYS_Var7.ValueOfVar,
                        DriverType4 = c.SYS_Var8.ValueOfVar,
                        DriverType5 = c.SYS_Var9.ValueOfVar,
                    }).FirstOrDefault();
                    if (qr == null)
                        FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại");

                    if (qr.DriverID1.HasValue)
                    {
                        var qrDriver = model.FLM_Driver.Where(c => c.ID == qr.DriverID1).Select(c => new DTOMONDriver
                        {
                            ID = c.CAT_Driver.ID,
                            Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                            Tel = c.CAT_Driver.Cellphone,
                            Card = c.CAT_Driver.CardNumber,
                            TypeOfDriverName = qr.DriverType1
                        }).FirstOrDefault();
                        if (qrDriver != null)
                        {
                            lst.Add(qrDriver);
                        }
                    }
                    if (qr.DriverID2.HasValue)
                    {
                        var qrDriver = model.FLM_Driver.Where(c => c.ID == qr.DriverID2).Select(c => new DTOMONDriver
                        {
                            ID = c.CAT_Driver.ID,
                            Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                            Tel = c.CAT_Driver.Cellphone,
                            Card = c.CAT_Driver.CardNumber,
                            TypeOfDriverName = qr.DriverType2
                        }).FirstOrDefault();
                        if (qrDriver != null)
                        {
                            lst.Add(qrDriver);
                        }
                    }
                    if (qr.DriverID3.HasValue)
                    {
                        var qrDriver = model.FLM_Driver.Where(c => c.ID == qr.DriverID3).Select(c => new DTOMONDriver
                        {
                            ID = c.CAT_Driver.ID,
                            Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                            Tel = c.CAT_Driver.Cellphone,
                            Card = c.CAT_Driver.CardNumber,
                            TypeOfDriverName = qr.DriverType3
                        }).FirstOrDefault();
                        if (qrDriver != null)
                        {
                            lst.Add(qrDriver);
                        }
                    } if (qr.DriverID4.HasValue)
                    {
                        var qrDriver = model.FLM_Driver.Where(c => c.ID == qr.DriverID4).Select(c => new DTOMONDriver
                        {
                            ID = c.CAT_Driver.ID,
                            Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                            Tel = c.CAT_Driver.Cellphone,
                            Card = c.CAT_Driver.CardNumber,
                            TypeOfDriverName = qr.DriverType4
                        }).FirstOrDefault();
                        if (qrDriver != null)
                        {
                            lst.Add(qrDriver);
                        }
                    } if (qr.DriverID5.HasValue)
                    {
                        var qrDriver = model.FLM_Driver.Where(c => c.ID == qr.DriverID5).Select(c => new DTOMONDriver
                        {
                            ID = c.CAT_Driver.ID,
                            Name = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                            Tel = c.CAT_Driver.Cellphone,
                            Card = c.CAT_Driver.CardNumber,
                            TypeOfDriverName = qr.DriverType5
                        }).FirstOrDefault();
                        if (qrDriver != null)
                        {
                            lst.Add(qrDriver);
                        }
                    }
                    result.Total = lst.Count;
                    result.Data = lst;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Tractor Timeline

        public List<DTOMON_Schedule_Resource> MONControlTowerCO_TractorShedulerResource(DTOMONTimeLineFilter filter)
        {
            try
            {
                var result = new List<DTOMON_Schedule_Resource>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo
                        && c.OPS_COTOMaster.VehicleID > 2
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                        && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => new
                        {
                            RegNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            RomoocNo = c.OPS_COTOMaster.CAT_Vehicle.CAT_Romooc.RegNo,
                            VehicleID = c.OPS_COTOMaster.VehicleID.Value,
                        }).Distinct().Select(c => new DTOMON_Schedule_Resource
                        {
                            text = c.RegNo,
                            value = c.VehicleID,
                            RegNo = c.RegNo,
                            RomoocNo = c.RomoocNo,
                        }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMON_Schedule_Task> MONControlTowerCO_TractorShedulerTask(DTOMONTimeLineFilter filter, List<int> lst)
        {
            try
            {
                var result = new List<DTOMON_Schedule_Task>();
                using (var model = new DataEntities())
                {
                    foreach (var id in lst)
                    {
                        var qr = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.VehicleID == id
                            && c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo
                            && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                            ).Select(c => c.COTOMasterID.Value).Distinct().ToList();

                        foreach (var o in qr)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o);
                            if (qrmaster != null)
                            {
                                List<int> lstStatusCont = new List<int>() {
                                    -(int)SYSVarType.StatusOfCOContainerGetEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                                };
                                var qrEmpty = model.OPS_COTOContainer.Where(c => c.COTOMasterID == qrmaster.ID && lstStatusCont.Contains(c.StatusOfCOContainerID)).Select(c => new DTOMONDateTime
                                {
                                    Value = c.ID,
                                    From = c.ETD,
                                    To = c.ETA,
                                }).ToList();

                                result.Add(new DTOMON_Schedule_Task
                                {
                                    MasterID = o,
                                    ETD = qrmaster.ETD,
                                    ETA = qrmaster.ETA,
                                    ActualEnd = qrmaster.ATA,
                                    ActualStart = qrmaster.ATD,
                                    VehicleID = qrmaster.VehicleID.Value,
                                    MasterCode = qrmaster.Code,
                                    ListContEmpty = qrEmpty,
                                    StatusID = qrmaster.StatusOfCOTOMasterID,
                                    title = qrmaster.Code,
                                    Status = qrmaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterReceived ? 1 : 0
                                });
                            }
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        public DTOMON_Schedule_Data MONControlTowerCO_Schedule(DTOMONControlTower_ObjectFilter item)
        {
            try
            {
                DTOMON_Schedule_Data result = new DTOMON_Schedule_Data();
                result.ListResource = new List<DTOMON_Schedule_Resource>();
                result.ListTask = new List<DTOMON_Schedule_Task>();
                using (var model = new DataEntities())
                {
                    int iTendered = -(int)SYSVarType.StatusOfCOTOMasterTendered;
                    int iDelivery = -(int)SYSVarType.StatusOfCOTOMasterDelivery;
                    int iReceived = -(int)SYSVarType.StatusOfCOTOMasterReceived;
                    item.lstVendorID.Add(Account.SYSCustomerID);
                    result.ListResource = model.CUS_Vehicle.Where(c => c.VehicleID > 1 && c.CustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOMON_Schedule_Resource
                    {
                        text = c.CAT_Vehicle.RegNo,
                        value = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo,
                        RomoocNo = c.CAT_Vehicle.CAT_Romooc.RegNo,
                        IsChecked = false,
                    }).ToList();


                    result.ListTask = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.StatusOfCOTOMasterID != -(int)SYSVarType.StatusOfCOTOMasterPHT && c.VehicleID > 1
                        && c.StatusOfCOTOMasterID >= iTendered && c.StatusOfCOTOMasterID <= iReceived).Select(c => new DTOMON_Schedule_Task
                        {
                            id = c.ID,
                            MasterID = c.ID,
                            MasterCode = c.Code,
                            ListOrderCode = c.DriverName1,
                            title = c.CAT_Vehicle.RegNo,
                            VehicleID = c.VehicleID.Value,
                            ETD = c.ETD,
                            ETA = c.ETA,
                            summary = false,
                            TotalTrip = 0,
                            SuccessTrip = 0,
                            FailTrip = 0,
                            ActualEnd = c.ATA == null ? DateTime.Now : c.ATA,
                            ActualStart = c.ATD,
                            Left = 0,
                            Width = 0,
                            StatusID = c.StatusOfCOTOMasterID,
                            Status = c.StatusOfCOTOMasterID == iReceived ? 1 : 0
                        }).ToList();

                    foreach (var o in result.ListTask)
                    {

                        if (o.ActualStart.HasValue && o.ActualEnd.HasValue && o.ActualStart < o.ActualEnd)
                        {
                            double SpanEstimate = o.ETA.Subtract(o.ETD).TotalMinutes;
                            double SpanActual = o.ActualEnd.Value.Subtract(o.ActualStart.Value).TotalMinutes;
                            double startDiff = o.ActualStart.Value.Subtract(o.ETD).TotalMinutes;
                            o.Left = startDiff * 100 / SpanEstimate;
                            o.Width = SpanActual * 100 / SpanEstimate;
                        }
                        var xe = result.ListResource.FirstOrDefault(c => c.value == o.VehicleID);

                        if (xe != null && !xe.IsChecked && (o.StatusID == iDelivery || o.StatusID == iTendered))
                        {
                            var resource = new DTOMON_SchedularResource();
                            resource.RegNo = xe.text;
                            resource.MasterID = o.MasterID;
                            resource.ListLocation = new List<DTOMON_SchedularResourceLocation>();
                            // 93f1-12345|masterID|come/leave;isSuccess;datetime
                            var qrlocation = model.OPS_COTOLocation.Where(c => c.COTOMasterID == o.MasterID).ToList();
                            if (qrlocation.Count > 0)
                            {
                                foreach (var location in qrlocation)
                                {
                                    if (location.TypeOfTOLocationID != -(int)SYSVarType.TypeOfTOLocationEmpty)
                                    {
                                        resource.ListLocation.Add(new DTOMON_SchedularResourceLocation
                                        {
                                            DateTime = location.DateCome,
                                            LocationType = "come",
                                            IsSuccess = true,
                                        });
                                        resource.ListLocation.Add(new DTOMON_SchedularResourceLocation
                                        {
                                            DateTime = location.DateLeave,
                                            LocationType = "leave",
                                            IsSuccess = true,
                                        });

                                    }
                                }
                            }
                            xe.IsChecked = true;
                            xe.text = Newtonsoft.Json.JsonConvert.SerializeObject(resource);
                        }
                    }


                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTowerCO_SchedulerSaveChance(DTOOPSDITOMaster item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var qr = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (qr != null)
                    {
                        qr.ETA = item.ETA.Value;
                        qr.ETD = item.ETD.Value;
                        qr.VehicleID = item.VehicleID;
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Romooc Timeline

        public List<DTOMON_Schedule_Resource> MONControlTowerCO_RomoocShedulerResource(DTOMONTimeLineFilter filter)
        {
            try
            {
                var result = new List<DTOMON_Schedule_Resource>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo
                        && c.OPS_COTOMaster.RomoocID > 1
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                        && (Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString()) || Account.ListCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID))).Select(c => new
                        {
                            RegNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            RomoocNo = c.OPS_COTOMaster.CAT_Vehicle.CAT_Romooc.RegNo,
                            RomoocID = c.OPS_COTOMaster.RomoocID.Value,
                        }).Distinct().Select(c => new DTOMON_Schedule_Resource
                        {
                            text = c.RomoocNo,
                            value = c.RomoocID,
                            RegNo = c.RegNo,
                            RomoocNo = c.RomoocNo,
                        }).ToList();

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMON_Schedule_Task> MONControlTowerCO_RomoocShedulerTask(DTOMONTimeLineFilter filter, List<int> lst)
        {
            try
            {
                var result = new List<DTOMON_Schedule_Task>();
                using (var model = new DataEntities())
                {
                    foreach (var id in lst)
                    {
                        var qr = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPS_COTOMaster.RomoocID == id
                            && c.OPS_COTOMaster.ETD >= filter.DateFrom && c.OPS_COTOMaster.ETA <= filter.DateTo
                            && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived
                            ).Select(c => c.COTOMasterID.Value).Distinct().ToList();

                        foreach (var o in qr)
                        {
                            var qrmaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == o);
                            if (qrmaster != null)
                            {
                                List<int> lstStatusCont = new List<int>() {
                                    -(int)SYSVarType.StatusOfCOContainerGetEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerShipEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                                    -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                                };
                                var qrEmpty = model.OPS_COTOContainer.Where(c => c.COTOMasterID == qrmaster.ID && lstStatusCont.Contains(c.StatusOfCOContainerID)).Select(c => new DTOMONDateTime
                                {
                                    Value = c.ID,
                                    From = c.ETD,
                                    To = c.ETA,
                                }).ToList();

                                result.Add(new DTOMON_Schedule_Task
                                {
                                    MasterID = o,
                                    ETD = qrmaster.ETD,
                                    ETA = qrmaster.ETA,
                                    ActualEnd = qrmaster.ATA,
                                    ActualStart = qrmaster.ATD,
                                    RomoocID = id,
                                    ListContEmpty = qrEmpty,
                                    MasterCode = qrmaster.Code,
                                    StatusID = qrmaster.StatusOfCOTOMasterID,
                                    title = qrmaster.Code,
                                    Status = qrmaster.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterReceived ? 1 : 0
                                });
                            }
                        }
                    }

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Station

        public DTOResult MONControlTower_COStationList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOStation.Where(c => c.COTOMasterID == masterID).Select(c => new DTOMON_Station
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationName = c.CAT_Location.Location,
                        KM = c.KM,
                        Price = c.Price,
                        Note = c.Note,
                        DateCome = c.DateCome,
                        Address = c.CAT_Location.Address,
                        VehicleID = c.OPS_COTOMaster.VehicleID,
                        IsApproved = c.IsApproved,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMON_Station>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTower_COStationNotinList(string request, int masterID)
        {
            try
            {
                var result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var vehicleID = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => c.VehicleID).FirstOrDefault();
                        var qrMasterStation = model.OPS_COTOStation.Where(c => c.COTOMasterID == masterID).Select(c => c.LocationID).ToList();
                        var ListLocationID = model.CAT_PartnerLocation.Where(c => c.CAT_Partner.TypeOfPartnerID == -(int)SYSVarType.TypeOfPartnerStation).Select(c => c.LocationID).Distinct().ToList();
                        var query = model.CAT_Location.Where(c => ListLocationID.Contains(c.ID) && !qrMasterStation.Contains(c.ID)).Select(c => new DTOMON_Station
                        {
                            ID = 0,
                            LocationID = c.ID,
                            LocationName = c.Location,
                            KM = 0,
                            Price = 0,
                            Note = string.Empty,
                            Address = c.Address,
                            VehicleID = vehicleID,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMON_Station>;

                        var dnow = DateTime.Now;
                        foreach (DTOMON_Station station in result.Data)
                        {
                            var qrPriceMonth = model.CAT_StationMonth.FirstOrDefault(c => c.LocationID == station.LocationID && c.DateFrom <= dnow && c.DateTo >= dnow && c.FLM_Asset.VehicleID == vehicleID);
                            if (qrPriceMonth != null)
                                station.Price = qrPriceMonth.Price;
                            else
                            {
                                //var qrPrice = model.CAT_StationPrice.FirstOrDefault(c => c.LocationID == station.LocationID && (c.AssetID == null || c.FLM_Asset.VehicleID == vehicleID));
                                //if (qrPrice != null)
                                //    station.Price = qrPrice.Price;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_COStationAdd(int masterID, List<int> ListStationID)
        {
            try
            {
                var dnow = DateTime.Now;
                using (var model = new DataEntities())
                {
                    //tim ditolocation
                    int toLocationID = 1;
                    var qrMaster = model.OPS_COTOMaster.Where(c => c.ID == masterID).Select(c => new { c.VehicleID, c.OPS_COTOLocation }).FirstOrDefault();
                    if (qrMaster == null)
                        FaultHelper.BusinessFault(null, null, "Chuyến không còn tồn tại");
                    var qrTOLocation = qrMaster.OPS_COTOLocation;
                    var fisrtLocation = qrTOLocation.Where(c => c.SortOrderReal.HasValue).OrderByDescending(c => c.SortOrderReal).FirstOrDefault();
                    if (fisrtLocation == null)
                    {
                        fisrtLocation = qrTOLocation.OrderBy(c => c.SortOrder).FirstOrDefault();
                    }
                    if (fisrtLocation.LocationID.Value > 0)
                        toLocationID = fisrtLocation.ID;

                    foreach (var stationID in ListStationID)
                    {
                        //luu station cho master
                        var query = model.OPS_COTOStation.FirstOrDefault(c => c.COTOMasterID == masterID && c.LocationID == stationID && c.COTOLocationID == toLocationID);
                        if (query == null)
                        {
                            query = new OPS_COTOStation();
                            query.COTOMasterID = masterID;
                            query.LocationID = stationID;
                            query.COTOLocationID = toLocationID;
                            query.Price = 0;
                            query.IsMonth = false;
                            query.IsApproved = true;
                            query.CreatedBy = Account.UserName;
                            query.CreatedDate = DateTime.Now;


                            model.OPS_COTOStation.Add(query);
                            model.SaveChanges();

                            //chi phi
                            var qrPriceMonth = model.CAT_StationMonth.FirstOrDefault(c => c.LocationID == stationID && c.DateFrom <= dnow && c.DateTo >= dnow && c.FLM_Asset.VehicleID == qrMaster.VehicleID);
                            if (qrPriceMonth != null)
                            {
                                query.Price = qrPriceMonth.Price;
                                query.IsMonth = true;
                            }
                            else
                            {
                                //var qrPrice = model.CAT_StationPrice.FirstOrDefault(c => c.LocationID == stationID && (c.AssetID == null || c.FLM_Asset.VehicleID == qrMaster.VehicleID));
                                //if (qrPrice != null)
                                //    query.Price = qrPrice.Price;
                            }
                            model.SaveChanges();
                            //end chi phi
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_COStationRemove(List<int> ListTOStationID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var id in ListTOStationID)
                    {
                        var query = model.OPS_COTOStation.FirstOrDefault(c => c.ID == id);
                        if (query != null)
                        {
                            model.OPS_COTOStation.Remove(query);
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_COStationApprove(int id, bool value)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOStation.FirstOrDefault(c => c.ID == id);
                    if (query != null)
                    {
                        query.IsApproved = value;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_COStationSaveChanges(List<DTOMON_Station> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var item in lst)
                    {
                        var query = model.OPS_COTOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (query != null)
                        {
                            query.ModifiedBy = Account.UserName;
                            query.ModifiedDate = DateTime.Now;
                            query.DateCome = item.DateCome;
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ToMaster change asset

        public DTOResult MONControlTower_TractorRead(string request, int? vendorID, DateTime? dfrom, DateTime? dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null || vendorID < 0)
                    {
                        vendorID = Account.SYSCustomerID;
                    }
                    List<DTOMONCT_Vehicle> lst = new List<DTOMONCT_Vehicle>();

                    if (vendorID != Account.SYSCustomerID)
                    {
                        lst = model.CUS_Vehicle.Where(c => c.CustomerID == vendorID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            Status = "",
                        }).Distinct().ToList();
                    }
                    else
                    {
                        lst = model.FLM_Asset.Where(c => c.VehicleID > 0 && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.VehicleID.Value,
                            RegNo = c.CAT_Vehicle.RegNo,
                            MaxWeight = c.CAT_Vehicle.MaxWeight ?? 0,
                            Lat = c.CAT_Vehicle.Lat,
                            Lng = c.CAT_Vehicle.Lng,
                            Status = "",
                        }).Distinct().ToList();

                        foreach (DTOMONCT_Vehicle item in lst)
                        {
                            item.Status = "Rảnh";
                            if (model.OPS_COTOMaster.Where(c => c.VehicleID == item.ID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfDITOMasterDelivery).Count() > 0)
                            {
                                item.Status = "Bận";
                            }
                            else if (dto != null && dfrom != null)
                            {
                                if (model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.VehicleID == item.ID && dfrom.Value <= c.DateToActual && dto.Value >= c.DateFromActual).Count() > 0)
                                {
                                    item.Status = "Bận";
                                }
                                //var qr = model.FLM_AssetTimeSheet.FirstOrDefault(c => c.FLM_Asset.VehicleID == item.ID && ((dfrom == null || dto == null) || (dfrom <= c.DateTo && dto >= c.DateFrom)));
                                //if (qr != null)
                                //{
                                //    if (qr.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetComplete && qr.TypeOfAssetTimeSheetID != -(int)SYSVarType.TypeOfAssetTimeSheetReject)
                                //    {
                                //        switch (qr.StatusOfAssetTimeSheetID)
                                //        {
                                //            case -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster:
                                //                item.Status = "Chở hàng";
                                //                break;
                                //            case -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster:
                                //                item.Status = "Chở hàng";
                                //                break;
                                //            case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                //                item.Status = "Bảo dưỡng";
                                //                break;
                                //            case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                //                item.Status = "Đăng kiểm";
                                //                break;
                                //            case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                //                item.Status = "Sửa chữa";
                                //                break;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        item.Status = "Rảnh";
                                //    }
                                //}
                            }
                        }
                    }

                    var rs = lst.ToDataSourceResult(CreateRequest(request));
                    result.Total = rs.Total;
                    result.Data = rs.Data as IEnumerable<DTOMONCT_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONControlTower_RomoocRead(string request, int? vendorID, DateTime? dfrom, DateTime? dto, int vehicleID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (vendorID == null || vendorID < 0)
                    {
                        vendorID = Account.SYSCustomerID;
                    }
                    List<DTOMONCT_Vehicle> query = new List<DTOMONCT_Vehicle>();

                    if (vendorID != Account.SYSCustomerID)
                    {
                        query = model.CUS_Romooc.Where(c => c.CustomerID == vendorID).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.RomoocID,
                            RegNo = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            Status = "",
                        }).Distinct().ToList();
                    }
                    else
                    {
                        query = model.CAT_RomoocDefault.Where(c => c.VehicleID == vehicleID).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.RomoocID,
                            RegNo = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            Status = "",
                            SortOrder = c.SortOrder,
                        }).OrderBy(c => c.SortOrder).ToList();

                        var lstid = query.Select(c => c.ID).Distinct().ToList();

                        query.AddRange(model.FLM_Asset.Where(c => c.RomoocID > 0 && !lstid.Contains(c.RomoocID.Value) && !c.IsDisposal && c.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOMONCT_Vehicle
                        {
                            ID = c.RomoocID.Value,
                            RegNo = c.CAT_Romooc.RegNo,
                            MaxWeight = c.CAT_Romooc.MaxWeight ?? 0,
                            Lat = c.CAT_Romooc.Lat,
                            Lng = c.CAT_Romooc.Lng,
                            Status = "",
                            SortOrder = -1,
                        }).ToList());

                        foreach (DTOMONCT_Vehicle item in query)
                        {
                            item.Status = "Rảnh";
                            if (model.OPS_COTOMaster.Where(c => c.RomoocID == item.ID && (c.VendorOfRomoocID == null || c.VendorOfRomoocID == Account.SYSCustomerID) && c.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfDITOMasterDelivery).Count() > 0)
                            {
                                item.Status = "Bận";
                            }
                            else if (dto != null && dfrom != null)
                            {
                                if (model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.RomoocID == item.ID && dfrom.Value <= c.DateToActual && dto.Value >= c.DateFromActual).Count() > 0)
                                {
                                    item.Status = "Bận";
                                }
                            }
                        }
                    }

                    var rs = query.ToDataSourceResult(CreateRequest(request));
                    result.Total = rs.Total;
                    result.Data = rs.Data as IEnumerable<DTOMONCT_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public int MONControlTower_ChangeTractorOffer(int masterID, int vehicleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    int result = 0;
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster_MONReturn err = HelperTOMaster.MONCO_TOContainer_ChangeVehicleOffer(model, Account, masterID, vehicleID);
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_ChangeTractor(int masterID, int vehicleID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_MasterChangeVehicle(model, Account, masterID, vehicleID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONControlTower_ChangeRomooc(int masterID, int romoocID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    HelperTOMaster.MONCO_MasterChangeRomooc(model, Account, masterID, romoocID);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region NewDI

        const string DIVehicleCode = "[Chờ nhập xe]";
        const string COVehicleCode = "[Chờ nhập xe]";
        const string CORomoocCode = "[Chờ nhập romooc]";

        public void MONControlTower_TOMaster_Split(int toID, int? vendorID, int vehicleID, DateTime ETD, DateTime ETA, string driverName, string driverTel, int fLocation, int tLocation)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objTO = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == toID);
                    if (objTO == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến không tồn tại.");
                    if (string.IsNullOrEmpty(driverName) && vendorID == null)
                        throw FaultHelper.BusinessFault(null, null, "Chuyến chưa chọn tài xế.");

                    List<int> dataOPSGroup = new List<int>();
                    List<int> dataOPSLocation = new List<int>();
                    dataOPSGroup = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == objTO.ID && c.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusWaiting).Select(c => c.ID).ToList();
                    dataOPSLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == objTO.ID && c.DITOLocationStatusID != -(int)SYSVarType.DITOLocationStatusLeave).Select(c => c.ID).ToList();

                    var obj = new OPS_DITOMaster();
                    obj.CreatedBy = Account.UserName;
                    obj.CreatedDate = DateTime.Now;
                    obj.Code = "";
                    obj.SYSCustomerID = Account.SYSCustomerID;
                    obj.RateTime = 0;
                    obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterApproved;
                    obj.TypeOfDITOMasterID = objTO.TypeOfDITOMasterID;
                    obj.VehicleID = vehicleID;
                    obj.VendorOfVehicleID = vendorID;
                    obj.DriverName1 = driverName;
                    obj.DriverTel1 = driverTel;
                    obj.ETA = ETA;
                    obj.ETD = ETD;
                    obj.DriverID1 = OPS_FindDriver(model, obj.DriverName1);
                    obj.TypeOfDriverID1 = -(int)SYSVarType.TypeOfDriverMain;
                    obj.SortOrder = 1;
                    obj.TransportModeID = objTO.TransportModeID;

                    OPS_CheckingTime(model, obj.ID, obj.VehicleID, null, obj.ETD, obj.ETA, false);
                    model.OPS_DITOMaster.Add(obj);

                    int idx = 1;
                    var dataLocation = new List<DTOOPSDITOLocation>();
                    //Thêm điểm BD mới nếu là xe nhà
                    OPS_DITOLocation oLocation = new OPS_DITOLocation();
                    oLocation.LocationID = fLocation;
                    oLocation.OPS_DITOMaster = obj;
                    oLocation.CreatedBy = Account.UserName;
                    oLocation.CreatedDate = DateTime.Now;
                    oLocation.DateComeEstimate = obj.ETD;
                    oLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;
                    oLocation.TypeOfTOLocationID = -(int)SYSVarType.TypeOfTOLocationEmpty;

                    var oLs = new DTOOPSDITOLocation();
                    oLs.LocationID = oLocation.LocationID.Value;
                    oLs.DateComeEstimate = oLocation.DateComeEstimate;
                    if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                    {
                        oLocation.SortOrder = idx++;
                        model.OPS_DITOLocation.Add(oLocation);
                        dataLocation.Add(oLs);
                    }

                    //Đổi TOMaster cho Location
                    foreach (var item in dataOPSLocation)
                    {
                        var objLocation = model.OPS_DITOLocation.FirstOrDefault(c => c.ID == item);
                        if (objLocation != null)
                        {
                            objLocation.OPS_DITOMaster = obj;
                            objLocation.DITOLocationStatusID = -(int)SYSVarType.DITOLocationStatusPlan;

                            var oLsx = new DTOOPSDITOLocation();
                            oLsx.LocationID = objLocation.LocationID.Value;
                            oLsx.DateComeEstimate = objLocation.DateComeEstimate;
                            if (objLocation.TypeOfTOLocationID == -(int)SYSVarType.TypeOfTOLocationEmpty)
                            {
                                if (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID)
                                {
                                    objLocation.LocationID = tLocation;
                                    dataLocation.Add(oLsx);
                                    obj.SortOrder = idx++;
                                }
                                else
                                {
                                    model.OPS_DITOLocation.Remove(objLocation);
                                }
                            }
                            else
                            {
                                obj.SortOrder = idx++;
                                dataLocation.Add(oLsx);
                            }
                        }
                    }

                    obj.TotalLocation = idx;

                    //Kiểm tra thiết lập hệ thống => Nếu yêu cầu ràng buộc điểm => Kiểm tra (Chỉ vs xe nhà).
                    var isLocationRequired = false;
                    var sSet = model.SYS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == SYSSettingKey.System.ToString()).Select(c => c.Setting).FirstOrDefault();
                    if (!string.IsNullOrEmpty(sSet))
                    {
                        var oSet = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DTOSYSSetting>>(sSet).FirstOrDefault();
                        if (oSet != null)
                        {
                            isLocationRequired = oSet.HasConstraintTransport;
                        }
                    }
                    if (isLocationRequired && (obj.VendorOfVehicleID == null || obj.VendorOfVehicleID == Account.SYSCustomerID))
                    {
                        var dataGop = model.OPS_DITOGroupProduct.Where(c => dataOPSGroup.Contains(c.ID)).Select(c => new DTOOPSDITOGroupProduct
                        {
                            CATLocationToID = c.ORD_GroupProduct.CUS_Location1.LocationID,
                            CATLocationFromID = c.ORD_GroupProduct.CUS_Location.LocationID,
                            Ton = c.Ton
                        }).ToList();
                        OPSDI_CheckLocationRequired(model, dataGop, dataLocation);
                    }

                    //Đổi TOMaster cho nhóm
                    foreach (var item in dataOPSGroup)
                    {
                        var objGop = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item);
                        if (objGop != null)
                        {
                            objGop.ModifiedBy = Account.UserName;
                            objGop.ModifiedDate = DateTime.Now;
                            objGop.OPS_DITOMaster = obj;
                        }
                    }

                    model.SaveChanges();
                    obj.Code = DICodePrefix + obj.ID.ToString(DICodeNum);
                    model.SaveChanges();
                    //Hoàn thành chuyến cũ.
                    HelperFinance.Truck_CompleteSchedule(model, Account, toID);
                    HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster, null);

                    //Chuyển trạng thái tendered cho chuyến mới.
                    obj.ModifiedBy = Account.UserName;
                    obj.ModifiedDate = DateTime.Now;
                    obj.StatusOfDITOMasterID = -(int)SYSVarType.StatusOfDITOMasterTendered;

                    var sOrder = model.OPS_DITORate.Where(c => c.DITOMasterID == obj.ID).OrderByDescending(c => c.SortOrder).Select(c => c.SortOrder).FirstOrDefault();
                    var objRate = model.OPS_DITORate.FirstOrDefault(c => c.DITOMasterID == obj.ID && c.VendorID == obj.VendorOfVehicleID && c.IsSend == true);
                    if (objRate == null)
                    {
                        objRate = new OPS_DITORate();
                        objRate.CreatedBy = Account.UserName;
                        objRate.CreatedDate = DateTime.Now;
                        objRate.DITOMasterID = obj.ID;
                        objRate.VendorID = obj.VendorOfVehicleID;
                        objRate.SortOrder = sOrder > 0 ? sOrder + 1 : 1;
                        objRate.IsSend = true;
                        objRate.Debit = 0;
                        objRate.IsManual = false;
                        objRate.FirstRateTime = DateTime.Now;
                        objRate.LastRateTime = DateTime.Now.Add(TimeSpan.FromHours(obj.RateTime ?? 2));

                        model.OPS_DITORate.Add(objRate);
                    }
                    else
                    {
                        objRate.ModifiedBy = Account.UserName;
                        objRate.ModifiedDate = DateTime.Now;
                    }
                    objRate.IsAccept = true;
                    model.SaveChanges();

                    var dataDITOLocation = model.OPS_DITOLocation.Where(c => c.DITOMasterID == obj.ID).Select(c => new
                    {
                        c.ID,
                        c.LocationID,
                        c.SortOrder
                    }).OrderBy(c => c.SortOrder).ToList();
                    for (var i = 1; i < dataDITOLocation.Count; i++)
                    {
                        var fID = dataDITOLocation[i - 1].LocationID.Value;
                        var tID = dataDITOLocation[i].LocationID.Value;

                        OPS_DITO objDITO = new OPS_DITO();
                        objDITO.CreatedDate = DateTime.Now;
                        objDITO.CreatedBy = Account.UserName;

                        objDITO.IsOPS = true;
                        objDITO.StatusOfDITOID = -(int)SYSVarType.StatusOfDITOStockPlan;
                        objDITO.SortOrder = i;
                        objDITO.LocationToID = tID;
                        objDITO.LocationFromID = fID;
                        objDITO.DITOMasterID = obj.ID;

                        model.OPS_DITO.Add(objDITO);
                    }
                    model.SaveChanges();

                    HelperTimeSheet.Remove(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);
                    HelperTimeSheet.Create(model, Account, obj.ID, SYSVarType.StatusOfAssetTimeSheetDITOMaster);

                    var SDATA = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID == obj.ID).Select(c => c.ORD_GroupProduct.OrderID).Distinct().ToList();

                    HelperStatus.ORDOrder_Status(model, Account, SDATA);
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private int? OPS_FindDriver(DataEntities model, string DriverName)
        {
            var obj = model.FLM_Driver.FirstOrDefault(c => c.SYSCustomerID == Account.SYSCustomerID && (c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName).ToLower().Trim() == DriverName.ToLower().Trim());
            if (obj != null)
                return obj.ID;
            return null;
        }

        public void OPS_CheckingTime(DataEntities model, int mID, int? vehicleID, int? romoocID, DateTime? ETD, DateTime? ETA, bool isContainer)
        {
            if (ETA.HasValue && ETD.HasValue)
            {
                var strETD = String.Format("{0:d/M HH:mm}", ETD.Value);
                var strETA = String.Format("{0:d/M HH:mm}", ETA.Value);

                if (isContainer)
                {
                    var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                        && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.ReferID != mID
                      && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                    if (objV != null)
                    {
                        var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                        if (objTo != null)
                            throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objV.FLM_Asset.CAT_Vehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objTo.ETD) + " đến: " + String.Format("{0:d/M HH:mm}", objTo.ETA));
                    }
                    else
                    {
                        objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                            && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.FLM_Asset.VehicleID == vehicleID
                            && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                        if (objV != null)
                        {
                            var strCode = string.Empty;
                            switch (objV.StatusOfAssetTimeSheetID)
                            {
                                case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    strCode = "bảo trì";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    strCode = "đăng kiểm";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                    strCode = "sửa chữa";
                                    break;
                            }
                            throw FaultHelper.BusinessFault(null, null, "Đầu kéo " + objV.FLM_Asset.CAT_Vehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFrom) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateTo));
                        }
                    }

                    var objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.RomoocID == romoocID
                        && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.ReferID != mID
                        && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                    if (objR != null)
                    {
                        var objTo = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                        if (objTo != null)
                            throw FaultHelper.BusinessFault(null, null, "Romooc " + objR.FLM_Asset.CAT_Romooc.RegNo + "đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objTo.ETD) + " đến: " + String.Format("{0:d/M HH:mm}", objTo.ETA));
                    }
                    else
                    {
                        objR = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                            && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetCOTOMaster && c.FLM_Asset.RomoocID == romoocID
                            && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                        if (objR != null)
                        {
                            var strCode = string.Empty;
                            switch (objV.StatusOfAssetTimeSheetID)
                            {
                                case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    strCode = "bảo trì";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    strCode = "đăng kiểm";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                    strCode = "sửa chữa";
                                    break;
                            }
                            throw FaultHelper.BusinessFault(null, null, "Romooc " + objV.FLM_Asset.CAT_Vehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFrom) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateTo));
                        }
                    }
                }
                else
                {
                    var objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID && c.FLM_Asset.VehicleID == vehicleID
                        && c.StatusOfAssetTimeSheetID == -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.ReferID != mID
                        && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                    if (objV != null)
                    {
                        var objTo = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == objV.ReferID);
                        if (objTo != null)
                            throw FaultHelper.BusinessFault(null, null, "Xe " + objV.FLM_Asset.CAT_Vehicle.RegNo + " đã phân chuyến. Số: " + objTo.Code + ", từ: " + String.Format("{0:d/M HH:mm}", objTo.ETD) + " đến: " + String.Format("{0:d/M HH:mm}", objTo.ETA));
                    }
                    else
                    {
                        objV = model.FLM_AssetTimeSheet.Where(c => c.FLM_Asset.SYSCustomerID == Account.SYSCustomerID
                            && c.StatusOfAssetTimeSheetID != -(int)SYSVarType.StatusOfAssetTimeSheetDITOMaster && c.FLM_Asset.VehicleID == vehicleID
                            && !((c.DateFrom < ETD && c.DateTo < ETD) || (c.DateFrom > ETA && c.DateTo > ETA))).OrderBy(c => c.DateFrom).FirstOrDefault();
                        if (objV != null)
                        {
                            var strCode = string.Empty;
                            switch (objV.StatusOfAssetTimeSheetID)
                            {
                                case -(int)SYSVarType.StatusOfAssetTimeSheetMaintence:
                                    strCode = "bảo trì";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRegistry:
                                    strCode = "đăng kiểm";
                                    break;
                                case -(int)SYSVarType.StatusOfAssetTimeSheetRepair:
                                    strCode = "sửa chữa";
                                    break;
                            }
                            throw FaultHelper.BusinessFault(null, null, "Xe " + objV.FLM_Asset.CAT_Vehicle.RegNo + " bận " + strCode + ", từ: " + String.Format("{0:d/M HH:mm}", objV.DateFrom) + " đến: " + String.Format("{0:d/M HH:mm}", objV.DateTo));
                        }
                    }
                }
            }
        }

        public void OPSDI_CheckLocationRequired(DataEntities model, List<DTOOPSDITOGroupProduct> dataGop, List<DTOOPSDITOLocation> dataLocation)
        {
            try
            {
                double cWeight = 0;
                for (var i = 0; i < dataLocation.Count; i++)
                {
                    var item = dataLocation[i];
                    var catObj = model.CAT_Location.FirstOrDefault(c => c.ID == item.LocationID);
                    if (catObj != null && item.DateComeEstimate.HasValue)
                    {
                        var dataRequired = OPS_GetLocationRequired(model, item.LocationID.Value);
                        if (dataRequired.Count(c => c.IsOpen == true && c.IsSize == false) > 0)
                        {
                            var dayOfWeek = (int)item.DateComeEstimate.Value.DayOfWeek;
                            var esDate = new DateTime(2000, 1, 1).Add(item.DateComeEstimate.Value.Subtract(item.DateComeEstimate.Value.Date));

                            var objCheck = dataRequired.FirstOrDefault(c => c.IsOpen == true && c.IsSize == false && c.DayOfWeek == dayOfWeek && esDate >= c.TimeFrom && esDate <= c.TimeTo);
                            if (objCheck == null)
                                throw FaultHelper.BusinessFault(null, null, "Điểm" + catObj.Location + " không mở cửa vào tgian: " + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                        }
                        foreach (var o in dataRequired.Where(c => c.IsOpen == false && c.IsSize == false))
                        {
                            if (item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo)
                                throw FaultHelper.BusinessFault(null, null, "Điểm" + catObj.Location + " không mở cửa vào tgian: từ " + String.Format("{0:d/M HH:mm}", o.TimeFrom) + " đến " + String.Format("{0:d/M HH:mm}", o.TimeTo));
                        }
                        //Check trọng tải trước khi vảo điểm.
                        foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                        {
                            if (item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo && o.Weight < cWeight)
                                throw FaultHelper.BusinessFault(null, null, "Điểm" + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                        }
                        foreach (var o in dataGop.Where(c => c.CATLocationFromID == item.LocationID).ToList())
                        {
                            cWeight = cWeight + o.Ton;
                        }
                        foreach (var o in dataGop.Where(c => c.CATLocationToID == item.LocationID).ToList())
                        {
                            cWeight = cWeight - o.Ton;
                        }
                        //Check trọng tải sau khi Load/UnLoad hàng
                        foreach (var o in dataRequired.Where(c => c.IsOpen == true && c.IsSize == true))
                        {
                            if (item.DateComeEstimate > o.TimeFrom && item.DateComeEstimate < o.TimeTo && o.Weight < cWeight)
                                throw FaultHelper.BusinessFault(null, null, "Điểm" + catObj.Location + " không đáp ứng trọng tải. Tgian:" + String.Format("{0:d/M HH:mm}", item.DateComeEstimate.Value));
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOOPSLocationRequired> OPS_GetLocationRequired(DataEntities model, int cID)
        {
            List<DTOOPSLocationRequired> result = new List<DTOOPSLocationRequired>();

            foreach (var item in model.CAT_LocationRequire.Where(c => c.LocationID == cID).Select(c => new
            {
                c.ID,
                c.ConstraintRequireTypeID,
                c.Weight,
                c.TimeFrom,
                c.TimeTo
            }).ToList())
            {
                switch (item.ConstraintRequireTypeID)
                {
                    case -(int)SYSVarType.ConstraintRequireTypeSizeDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue && item.Weight.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(true, true, item.Weight.Value, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeSizeWeek:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue && item.Weight.HasValue)
                        {
                            var fDate = (int)item.TimeFrom.Value.Date.DayOfWeek;
                            var tDate = (int)item.TimeTo.Value.Date.DayOfWeek;
                            if (fDate <= tDate)
                            {
                                for (var i = fDate; i <= tDate; i++)
                                {
                                    var obj = new DTOOPSLocationRequired(true, true, item.Weight.Value, i, new DateTime(2000, 1, 1).Add(item.TimeFrom.Value.Subtract(item.TimeFrom.Value.Date)), new DateTime(2000, 1, 1).Add(item.TimeTo.Value.Subtract(item.TimeTo.Value.Date)));
                                    result.Add(obj);
                                }
                            }
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeOpenWeek:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var fDate = (int)item.TimeFrom.Value.Date.DayOfWeek;
                            var tDate = (int)item.TimeTo.Value.Date.DayOfWeek;
                            if (fDate <= tDate)
                            {
                                for (var i = fDate; i <= tDate; i++)
                                {
                                    var obj = new DTOOPSLocationRequired(false, true, 0, i, new DateTime(2000, 1, 1).Add(item.TimeFrom.Value.Subtract(item.TimeFrom.Value.Date)), new DateTime(2000, 1, 1).Add(item.TimeTo.Value.Subtract(item.TimeTo.Value.Date)));
                                    result.Add(obj);
                                }
                            }
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeOpenDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(false, true, 0, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                    case -(int)SYSVarType.ConstraintRequireTypeCloseDay:
                        if (item.TimeFrom.HasValue && item.TimeTo.HasValue)
                        {
                            var obj = new DTOOPSLocationRequired(false, false, 0, -1, item.TimeFrom.Value, item.TimeTo.Value);
                            result.Add(obj);
                        }
                        break;
                }
            }

            return result;
        }

        #endregion

        #endregion

        #region Container Timeline

        public DTOResult MONCO_TimeLine_Vehicle_List(string request, DateTime fDate, DateTime tDate, int typeOfView, int vendorID, DTOMONCO_FilterTimeline filter)
        {
            try
            {
                fDate = fDate.Date;
                tDate = tDate.Date.AddDays(1);
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (typeOfView == 1)
                    {
                        #region View 1 - chỉ xem

                        var dataTOVeh = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                            && ((vendorID < 0 && (c.OPS_COTOMaster.VendorOfVehicleID == null || c.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID)) || (vendorID > 0 && c.OPS_COTOMaster.VendorOfVehicleID == vendorID))
                            && c.OPS_COTOMaster.VehicleID.HasValue && c.OPS_Container.RomoocID.HasValue
                            && c.IsDuplicateHidden != true && !c.IsSplit && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))
                            && (filter.ListCarrier.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && filter.ListCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value)))
                            && (filter.ListCustomer.Count == 0 || (filter.ListCustomer.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)))
                            && (filter.ListService.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && filter.ListService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)))
                            && (filter.ListSeaPort.Count == 0 || (filter.ListSeaPort.Contains(c.LocationFromID) || filter.ListSeaPort.Contains(c.LocationToID)))
                            && ((filter.IsShowMasterPlan == false && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered) || filter.IsShowMasterPlan == true)

                            && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel).Select(c => new
                            {
                                ID = c.ID,
                                c.COTOMasterID,
                                c.OPS_COTOMaster.Code,
                                c.OPS_COTOMaster.VehicleID,
                                VehicleMaxWeight = c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                                VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                                Location = c.OPS_COTOMaster.CAT_Vehicle.LocationID.HasValue ? c.OPS_COTOMaster.CAT_Vehicle.CAT_Location.Location : string.Empty,
                                Lat = c.OPS_COTOMaster.CAT_Vehicle.Lat ?? 0,
                                Lng = c.OPS_COTOMaster.CAT_Vehicle.Lng ?? 0,
                                c.OPS_COTOMaster.RomoocID,
                                RomoocNo = c.OPS_Container.CAT_Romooc.RegNo,
                                RomoocMaxWeight = c.OPS_Container.CAT_Romooc.MaxWeight,
                                RegCapacity = c.OPS_Container.CAT_Romooc.NoOfDelivery ?? 2,
                                RomoocLocation = c.OPS_Container.CAT_Romooc.LocationID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_Location.Location : string.Empty,
                                GroupOfRomoocName = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty : string.Empty,
                                RomoocLat = c.OPS_Container.CAT_Romooc.Lat ?? 0,
                                RomoocLng = c.OPS_Container.CAT_Romooc.Lng ?? 0,

                            }).ToList();

                        var temp = new List<DTOMONCO_TimeLine_Vehicle>();
                        foreach (var obj in dataTOVeh)
                        {
                            var str = "1-" + obj.VehicleID.ToString() + "--1";
                            if (temp.Count(c => c.Text == str) == 0 && temp.Count(c => c.VehicleID == obj.VehicleID) == 0)
                            {
                                temp.Add(new DTOMONCO_TimeLine_Vehicle
                                {
                                    TypeOfGroupID = 1,
                                    Value = obj.VehicleID.Value,
                                    Text = str,
                                    VehicleID = obj.VehicleID.Value,
                                    RomoocID = -1,
                                    VehicleNo = obj.VehicleNo,
                                    RomoocNo = string.Empty,
                                    MaxWeight = obj.VehicleMaxWeight ?? 0,
                                    VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                    LocationName = string.Empty,
                                    VehicleLocationName = obj.Location ?? string.Empty,
                                    MaxCapacity = 0,
                                    Lat = null,
                                    Lng = null,
                                    VehicleLat = obj.Lat,
                                    VehicleLng = obj.Lng,
                                    GroupOfRomoocName = string.Empty
                                });
                            }
                            if (obj.RomoocID.HasValue)
                            {
                                str = "2-" + obj.VehicleID.ToString() + "-" + obj.RomoocID.Value.ToString();
                                if (temp.Count(c => c.Text == str) == 0)
                                {
                                    temp.Add(new DTOMONCO_TimeLine_Vehicle
                                    {
                                        TypeOfGroupID = 2,
                                        Value = obj.VehicleID.Value,
                                        Text = str,
                                        VehicleID = obj.VehicleID.Value,
                                        RomoocID = obj.RomoocID.Value,
                                        VehicleNo = obj.VehicleNo,
                                        RomoocNo = obj.RomoocNo,
                                        MaxWeight = 0,
                                        VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                        LocationName = obj.RomoocLocation,
                                        VehicleLocationName = obj.Location,
                                        MaxCapacity = obj.RegCapacity,
                                        Lat = obj.RomoocLat,
                                        Lng = obj.RomoocLng,
                                        VehicleLat = obj.Lat,
                                        VehicleLng = obj.Lng,
                                        GroupOfRomoocName = obj.GroupOfRomoocName
                                    });
                                }
                            }
                        }
                        foreach (var item in temp.Where(c => c.RomoocID == -1 && c.TypeOfGroupID == 1).ToList())
                        {
                            if (temp.Count(c => c.VehicleID == item.VehicleID && c.RomoocID > 0) > 0)
                            {
                                temp.Remove(item);
                            }
                        }
                        var query = temp.ToDataSourceResult(CreateRequest(request));
                        result.Data = query.Data as IEnumerable<DTOMONCO_TimeLine_Vehicle>;
                        result.Total = query.Total;
                        #endregion
                    }

                    else if (typeOfView == 2)
                    {
                        #region View 2 - Hiện romooc chờ + thực tế
                        var dataTOVeh = model.OPS_COTOContainer.Where(c => c.COTOMasterID.HasValue && (c.OPS_COTOMaster.VendorOfVehicleID == null || c.OPS_COTOMaster.VendorOfVehicleID == Account.SYSCustomerID) && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOMaster.VehicleID > 2 && c.OPS_Container.RomoocID > 1
                            && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                            {
                                ID = c.ID,
                                c.COTOMasterID,
                                c.OPS_COTOMaster.Code,
                                c.OPS_COTOMaster.VehicleID,
                                VehicleMaxWeight = c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                                VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                                Location = c.OPS_COTOMaster.CAT_Vehicle.LocationID.HasValue ? c.OPS_COTOMaster.CAT_Vehicle.CAT_Location.Location : string.Empty,
                                Lat = c.OPS_COTOMaster.CAT_Vehicle.Lat ?? 0,
                                Lng = c.OPS_COTOMaster.CAT_Vehicle.Lng ?? 0,
                                c.OPS_COTOMaster.RomoocID,
                                RomoocNo = c.OPS_Container.CAT_Romooc.RegNo,
                                RomoocMaxWeight = c.OPS_Container.CAT_Romooc.MaxWeight,
                                RegCapacity = c.OPS_Container.CAT_Romooc.NoOfDelivery ?? 2,
                                RomoocLocation = c.OPS_Container.CAT_Romooc.LocationID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_Location.Location : string.Empty,
                                GroupOfRomoocName = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.GroupName : string.Empty : string.Empty,
                                GroupOfRomoocCode = c.OPS_Container.RomoocID.HasValue ? c.OPS_Container.CAT_Romooc.GroupOfRomoocID.HasValue ? c.OPS_Container.CAT_Romooc.CAT_GroupOfRomooc.Code : string.Empty : string.Empty,
                                RomoocLat = c.OPS_Container.CAT_Romooc.Lat ?? 0,
                                RomoocLng = c.OPS_Container.CAT_Romooc.Lng ?? 0
                            }).ToList();
                        var dataCusVeh = model.CUS_Vehicle.Where(c => c.CustomerID == Account.SYSCustomerID && c.VehicleID > 2 && c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTractor).Select(c => new
                        {
                            c.ID,
                            c.CAT_Vehicle.RegNo,
                            c.CAT_Vehicle.MaxWeight,
                            c.VehicleID,
                            c.CAT_Vehicle.CAT_Location.Location,
                            c.CAT_Vehicle.Lat,
                            c.CAT_Vehicle.Lng
                        }).ToList();
                        var temp = new List<DTOMONCO_TimeLine_Vehicle>();
                        foreach (var obj in dataTOVeh)
                        {
                            var str = "1-" + obj.VehicleID.ToString() + "--1";
                            if (temp.Count(c => c.Text == str) == 0 && temp.Count(c => c.VehicleID == obj.VehicleID) == 0)
                            {
                                temp.Add(new DTOMONCO_TimeLine_Vehicle
                                {
                                    TypeOfGroupID = 1,
                                    Value = obj.VehicleID.Value,
                                    Text = str,
                                    VehicleID = obj.VehicleID.Value,
                                    RomoocID = -1,
                                    VehicleNo = obj.VehicleNo,
                                    RomoocNo = string.Empty,
                                    MaxWeight = obj.VehicleMaxWeight ?? 0,
                                    VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                    LocationName = string.Empty,
                                    VehicleLocationName = obj.Location ?? string.Empty,
                                    MaxCapacity = 0,
                                    Lat = null,
                                    Lng = null,
                                    VehicleLat = obj.Lat,
                                    VehicleLng = obj.Lng,
                                    GroupOfRomoocName = string.Empty,
                                    GroupOfRomoocCode = string.Empty
                                });
                            }
                            if (obj.RomoocID.HasValue)
                            {
                                str = "2-" + obj.VehicleID.ToString() + "-" + obj.RomoocID.Value.ToString();
                                if (temp.Count(c => c.Text == str) == 0)
                                {
                                    temp.Add(new DTOMONCO_TimeLine_Vehicle
                                    {
                                        TypeOfGroupID = 2,
                                        Value = obj.VehicleID.Value,
                                        Text = str,
                                        VehicleID = obj.VehicleID.Value,
                                        RomoocID = obj.RomoocID.Value,
                                        VehicleNo = obj.VehicleNo,
                                        RomoocNo = obj.RomoocNo,
                                        MaxWeight = Math.Min(obj.VehicleMaxWeight ?? 0, obj.RomoocMaxWeight ?? 0),
                                        VehicleMaxWeight = obj.VehicleMaxWeight ?? 0,
                                        LocationName = obj.RomoocLocation,
                                        VehicleLocationName = obj.Location,
                                        MaxCapacity = obj.RegCapacity,
                                        Lat = obj.RomoocLat,
                                        Lng = obj.RomoocLng,
                                        VehicleLat = obj.Lat,
                                        VehicleLng = obj.Lng,
                                        GroupOfRomoocName = obj.GroupOfRomoocName,
                                        GroupOfRomoocCode = obj.GroupOfRomoocCode
                                    });
                                }
                            }
                        }
                        foreach (var item in temp.Where(c => c.RomoocID == -1 && c.TypeOfGroupID == 1).ToList())
                        {
                            if (temp.Count(c => c.VehicleID == item.VehicleID && c.RomoocID > 0) > 0)
                            {
                                temp.Remove(item);
                            }
                        }

                        foreach (var item in dataCusVeh)
                        {
                            var index = temp.IndexOf(temp.FirstOrDefault(c => c.VehicleID == item.VehicleID));
                            if (index == -1)
                                index = 0;

                            temp.Insert(index, new DTOMONCO_TimeLine_Vehicle
                            {
                                TypeOfGroupID = 2,
                                Value = item.VehicleID,
                                Text = "2-" + item.VehicleID.ToString() + "-0",
                                VehicleID = item.VehicleID,
                                RomoocID = -1,
                                VehicleNo = item.RegNo,
                                RomoocNo = "[Chờ nhập]",
                                MaxWeight = item.MaxWeight ?? 0,
                                VehicleMaxWeight = item.MaxWeight ?? 0,
                                LocationName = string.Empty,
                                VehicleLocationName = item.Location ?? string.Empty,
                                MaxCapacity = 2,
                                Lat = null,
                                Lng = null,
                                VehicleLat = item.Lat,
                                VehicleLng = item.Lng,
                                GroupOfRomoocName = string.Empty
                            });
                        }
                        var query = temp.OrderBy(c => c.RomoocID).ToDataSourceResult(CreateRequest(request));
                        result.Data = query.Data as IEnumerable<DTOMONCO_TimeLine_Vehicle>;
                        result.Total = query.Total;
                        #endregion
                    }
                    else if (typeOfView == 3)
                    {
                        #region view 3 - Hiện romooc mặc định + thực tế

                        #endregion
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONCO_Schedule_Data MONCO_TimeLine_Schedule_Data(DateTime fDate, DateTime tDate, List<string> dataRes, DTOMONCO_FilterTimeline filter, int typeOfView)
        {
            try
            {
                fDate = fDate.Date;
                tDate = tDate.Date.AddDays(1);
                DTOMONCO_Schedule_Data result = new DTOMONCO_Schedule_Data();
                result.DataSources = new List<DTOMONCO_Schedule_Event>();
                result.Resources = new List<DTOMONCO_Schedule_Group>();
                var copy = new CopyHelper();
                using (var model = new DataEntities())
                {
                    List<int> dataRom = new List<int>();
                    List<int> dataVeh = new List<int>();
                    var dataEmpty = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerEXEmpty,
                            -(int)SYSVarType.StatusOfCOContainerIMEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOGetEmpty,
                            -(int)SYSVarType.StatusOfCOContainerLOReturnEmpty,
                            -(int)SYSVarType.StatusOfCOContainerRepairEmpty,
                            -(int)SYSVarType.StatusOfCOContainerReturnEmptyFail,
                            -(int)SYSVarType.StatusOfCOContainerReturnEmpty,
                            -(int)SYSVarType.StatusOfCOContainerShipEmpty
                        };
                    foreach (var res in dataRes)
                    {
                        if (!string.IsNullOrEmpty(res))
                        {
                            var s = res.Split('_').ToArray().Select(int.Parse).ToList();
                            if (!dataVeh.Contains(s[0]))
                                dataVeh.Add(s[0]);
                            if (s[1] > 0 && !dataRom.Contains(s[1]))
                                dataRom.Add(s[1]);
                        }
                    }
                    var dataTOVeh = model.OPS_COTOContainer.Where(c => c.DateFromCome != c.DateToCome && c.COTOMasterID.HasValue && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_COTOMaster.VehicleID.HasValue && dataVeh.Contains(c.OPS_COTOMaster.VehicleID.Value)
                        && (filter.ListCarrier.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && filter.ListCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value)))
                        && (filter.ListCustomer.Count == 0 || (filter.ListCustomer.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)))
                        && (filter.ListService.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && filter.ListService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)))
                        && (filter.ListSeaPort.Count == 0 || (filter.ListSeaPort.Contains(c.LocationFromID) || filter.ListSeaPort.Contains(c.LocationToID)))
                        && ((filter.IsShowMasterPlan == false && (c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLoad || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerUnLoad)) || filter.IsShowMasterPlan == true)
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                        && (typeOfView == 1 ? c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetEmpty && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetLaden : true)
                        && !c.IsSplit && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                       {
                           ID = c.ID,
                           c.COTOMasterID,
                           c.OPSContainerID,
                           c.IsDuplicateHidden,
                           c.OPS_COTOMaster.Code,
                           c.OPS_COTOMaster.DriverName1,
                           c.OPS_COTOMaster.DriverTel1,
                           c.OPS_COTOMaster.DriverID1,
                           c.OPS_COTOMaster.VehicleID,
                           c.OPS_COTOMaster.CAT_Vehicle.MaxWeight,
                           c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                           c.OPS_COTOMaster.CAT_Vehicle.RegCapacity,
                           c.OPS_COTOMaster.CreatedDate,
                           c.OPS_COTOMaster.RomoocID,
                           c.StatusOfCOContainerID,
                           c.OPS_COTOMaster.StatusOfCOTOMasterID,
                           c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID,
                           c.ETA,
                           c.ETD,
                           c.DateFromCome,
                           c.DateToCome,
                           c.OPS_Container.Ton,
                           c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                           CATServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                           c.OPS_Container.ORD_Container.ORD_Order.PartnerID,
                           c.LocationFromID,
                           c.LocationToID,
                           c.COTOSort,
                           c.SortOrder,
                           IsEmpty = dataEmpty.Contains(c.StatusOfCOContainerID)
                       }).ToList();
                    var dataTORom = model.OPS_COTOContainer.Where(c => c.DateFromCome != c.DateToCome && c.OPS_Container.ORD_Container.ORD_Order.SYSCustomerID == Account.SYSCustomerID && c.OPS_Container.RomoocID.HasValue && dataRom.Contains(c.OPS_Container.RomoocID.Value)
                        && (filter.ListCarrier.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.PartnerID.HasValue && filter.ListCarrier.Contains(c.OPS_Container.ORD_Container.ORD_Order.PartnerID.Value)))
                        && (filter.ListCustomer.Count == 0 || (filter.ListCustomer.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)))
                        && (filter.ListService.Count == 0 || (c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.HasValue && filter.ListService.Contains(c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID.Value)))
                        && (filter.ListSeaPort.Count == 0 || (filter.ListSeaPort.Contains(c.LocationFromID) || filter.ListSeaPort.Contains(c.LocationToID)))
                        && ((filter.IsShowMasterPlan == false && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLoad || c.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerUnLoad) || filter.IsShowMasterPlan == true)
                        && (typeOfView == 1 ? c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerReturnRomooc && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetEmpty && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerGetLaden && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad : true)
                        && !c.IsSplit && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.DateFromCome.HasValue && c.DateToCome.HasValue && !((c.DateFromCome < fDate && c.DateFromCome < fDate) || (c.DateToCome > tDate && c.DateToCome > tDate))).Select(c => new
                        {
                            c.ID,
                            c.COTOMasterID,
                            c.OPSContainerID,
                            c.IsDuplicateHidden,
                            c.OPS_COTOMaster.Code,
                            c.OPS_COTOMaster.DriverName1,
                            c.OPS_COTOMaster.DriverTel1,
                            c.OPS_COTOMaster.DriverID1,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID.Value : -1,
                            CreatedDate = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.CreatedDate : DateTime.Now,
                            c.StatusOfCOContainerID,
                            StatusOfCOTOMasterID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.StatusOfCOTOMasterID : -1,
                            c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.ServiceOfOrderID,
                            c.ETA,
                            c.ETD,
                            c.DateFromCome,
                            c.DateToCome,
                            c.OPS_Container.RomoocID,
                            c.OPS_Container.CAT_Romooc.RegNo,
                            c.OPS_Container.CAT_Romooc.MaxWeight,
                            c.OPS_Container.CAT_Romooc.NoOfDelivery,
                            c.OPS_Container.Ton,
                            c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CATServiceOfOrderID = c.OPS_Container.ORD_Container.ORD_Order.ServiceOfOrderID,
                            c.OPS_Container.ORD_Container.ORD_Order.PartnerID,
                            c.LocationFromID,
                            c.LocationToID,
                            c.COTOSort,
                            c.SortOrder,
                            IsEmpty = dataEmpty.Contains(c.StatusOfCOContainerID)
                        }).ToList();

                    Dictionary<int, bool> dicValue = new Dictionary<int, bool>();
                    var dataLoad = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerLoad,
                            -(int)SYSVarType.StatusOfCOContainerUnLoad,
                            -(int)SYSVarType.StatusOfCOContainerStop
                        };
                    var dataGet = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerGetLaden,
                            -(int)SYSVarType.StatusOfCOContainerGetEmpty,
                            -(int)SYSVarType.StatusOfCOContainerReturnRomooc
                        };
                    var dataStation = new List<int>
                        {
                            -(int)SYSVarType.StatusOfCOContainerGetRomooc,
                            -(int)SYSVarType.StatusOfCOContainerReturnStation 
                        };
                    foreach (var res in dataRes)
                    {
                        if (!string.IsNullOrEmpty(res))
                        {
                            var s = res.Split('_').ToArray().Select(int.Parse).ToList();
                            var vehID = s[0]; var romID = s[1];
                            if (!dicValue.ContainsKey(vehID) || dicValue[vehID] != true)
                            {
                                dicValue.Add(vehID, true);
                                var dataV = dataTOVeh.Where(c => c.VehicleID == vehID).ToList();
                                foreach (var item in dataV)
                                {
                                    var objE = new DTOMONCO_Schedule_Event();
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }
                                    objE.ID = item.ID;
                                    objE.TOMasterID = item.COTOMasterID ?? -1;
                                    objE.Code = item.Code;
                                    objE.EndDate = item.DateToCome.Value;
                                    objE.StartDate = item.DateFromCome.Value;
                                    objE.GroupID = item.VehicleID.Value;
                                    objE.TypeOfGroupID = 1;
                                    objE.VehicleID = item.VehicleID.Value;
                                    objE.ETA = objE.EndDate.ToString("dd/MM/yyyy hh:mm");
                                    objE.ETD = objE.StartDate.ToString("dd/MM/yyyy hh:mm");
                                    objE.IsNew = DateTime.Now.Subtract(item.CreatedDate).TotalSeconds < 900;
                                    objE.IsDoubleContainer = item.IsDuplicateHidden == false;
                                    objE.IsDuplicateHidden = item.IsDuplicateHidden;
                                    objE.Title = string.Empty; objE.MaxTon = item.MaxWeight ?? 0; objE.MaxQty = 2; objE.Ton = item.Ton;
                                    if (objE.IsDoubleContainer)
                                    {
                                        var dataT = dataTOVeh.Where(c => c.COTOMasterID == item.COTOMasterID && c.OPSContainerID != item.OPSContainerID && (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)).Select(c => c.IsEmpty).Distinct().ToList();
                                        if (dataT.Count > 0)
                                        {
                                            if (item.IsEmpty && dataT.FirstOrDefault() == true)
                                                objE.TypeOfDoubleContainer = 1;
                                            else if (!item.IsEmpty && dataT.FirstOrDefault() == false)
                                                objE.TypeOfDoubleContainer = 2;
                                            else if (item.IsEmpty && dataT.FirstOrDefault() == false)
                                                objE.TypeOfDoubleContainer = 3;
                                        }
                                    }
                                    objE.Title = string.Empty; objE.MaxTon = item.MaxWeight ?? 0; objE.MaxQty = 2; objE.Ton = item.Ton;
                                    if (item.COTOSort == 1)
                                    {
                                        objE.IsStart = true;
                                    }
                                    else if (item.COTOSort == -1)
                                    {
                                        objE.IsEnd = true;
                                    }
                                    else if (item.COTOSort == 0)
                                    {
                                        objE.IsEnd = true;
                                        objE.IsStart = true;
                                    }

                                    List<string> stitle = new List<string>();
                                    if (dataTOVeh.Count(c => c.COTOMasterID == item.COTOMasterID && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal) > 0)
                                    {
                                        objE.IsLocal = true;
                                    }
                                    if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                        objE.IsLocal = true;
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                        stitle.Add("XK");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                        stitle.Add("NK");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                        stitle.Add("CR");
                                    else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                        stitle.Add("CD");
                                    objE.Title = string.Join("-", stitle);

                                    objE.StatusOfEvent = item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : item.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                    if (objE.StatusOfEvent == 1)
                                    {
                                        if (item.VehicleID > 0 && item.RomoocID > 0 && item.DriverName1 != null && item.DriverName1 != string.Empty && item.DriverID1.HasValue)
                                        {
                                            objE.StatusOfEvent = 11;
                                        }
                                    }
                                    objE.TypeOfEvent = 1;
                                    if (item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerShipEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerGetEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerIMEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerEXEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOGetEmpty || item.StatusOfCOContainerID == -(int)SYSVarType.StatusOfCOContainerLOReturnEmpty)
                                    {
                                        objE.ETAEmpty = objE.EndDate;
                                        objE.ETDEmpty = objE.StartDate;
                                    }
                                    objE.Connections = new List<int>();
                                    objE.Option1 = item.CATServiceOfOrderID > 0 ? item.CATServiceOfOrderID.Value.ToString() : "-1";
                                    objE.Option2 = item.CustomerID.ToString();
                                    objE.Option3 = item.PartnerID > 0 ? item.PartnerID.Value.ToString() : "-1";
                                    objE.Option4 = item.LocationFromID.ToString();
                                    objE.Option5 = item.LocationToID.ToString();
                                    result.DataSources.Add(objE);
                                }
                            }
                            var dataR = dataTORom.Where(c => c.RomoocID == romID && (typeOfView == 1 ? c.VehicleID == vehID : true)).ToList();
                            foreach (var item in dataR)
                            {
                                var objE = new DTOMONCO_Schedule_Event();
                                if (item.COTOMasterID.HasValue)
                                {
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }
                                }
                                else
                                {
                                    objE.StatusOfTimeSheet = 1;
                                    if (item.IsEmpty)
                                    {
                                        objE.StatusOfTimeSheet = 2;
                                    }
                                    else if (dataLoad.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 3;
                                    }
                                    else if (dataStation.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 4;
                                    }
                                    else if (dataGet.Contains(item.StatusOfCOContainerID))
                                    {
                                        objE.StatusOfTimeSheet = 5;
                                    }
                                }

                                objE.ID = item.ID;
                                objE.TOMasterID = item.COTOMasterID ?? -1;
                                objE.Code = item.Code;
                                objE.EndDate = item.DateToCome.Value;
                                objE.StartDate = item.DateFromCome.Value;
                                objE.GroupID = item.RomoocID.Value;
                                objE.TypeOfGroupID = 2;
                                objE.VehicleID = vehID;
                                objE.ETA = objE.EndDate.ToString("dd/MM/yyyy hh:mm");
                                objE.ETD = objE.StartDate.ToString("dd/MM/yyyy hh:mm");
                                objE.IsNew = DateTime.Now.Subtract(item.CreatedDate).TotalSeconds < 900;
                                objE.IsDoubleContainer = item.IsDuplicateHidden == false;
                                objE.IsDuplicateHidden = item.IsDuplicateHidden;
                                if (objE.IsDoubleContainer)
                                {
                                    var dataT = dataTORom.Where(c => c.COTOMasterID == item.COTOMasterID && c.OPSContainerID != item.OPSContainerID && (c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport || c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)).Select(c => c.IsEmpty).Distinct().ToList();
                                    if (dataT.Count > 0)
                                    {
                                        if (item.IsEmpty && dataT.FirstOrDefault() == true)
                                            objE.TypeOfDoubleContainer = 1;
                                        else if (!item.IsEmpty && dataT.FirstOrDefault() == false)
                                            objE.TypeOfDoubleContainer = 2;
                                        else if (item.IsEmpty && dataT.FirstOrDefault() == false)
                                            objE.TypeOfDoubleContainer = 3;
                                    }
                                }

                                objE.Title = string.Empty; objE.MaxTon = item.MaxWeight ?? 0; objE.MaxQty = item.NoOfDelivery ?? 2; objE.Ton = item.Ton;

                                if (item.COTOSort == 1)
                                {
                                    objE.IsStart = true;
                                }
                                else if (item.COTOSort == -1)
                                {
                                    objE.IsEnd = true;
                                }
                                else if (item.COTOSort == 0)
                                {
                                    objE.IsEnd = true;
                                    objE.IsStart = true;
                                }

                                List<string> stitle = new List<string>();
                                if (dataTORom.Count(c => c.COTOMasterID == item.COTOMasterID && c.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal) > 0)
                                {
                                    objE.IsLocal = true;
                                }
                                if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocal)
                                    objE.IsLocal = true;
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderExport)
                                    stitle.Add("XK");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderImport)
                                    stitle.Add("NK");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalEmpty)
                                    stitle.Add("CR");
                                else if (item.ServiceOfOrderID == -(int)SYSVarType.ServiceOfOrderLocalLaden)
                                    stitle.Add("CD");
                                objE.Title = string.Join("-", stitle);

                                objE.StatusOfEvent = item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterPlanning || item.StatusOfCOTOMasterID == -(int)SYSVarType.StatusOfCOTOMasterApproved ? 1 : item.StatusOfCOTOMasterID < -(int)SYSVarType.StatusOfCOTOMasterReceived ? 2 : 3;
                                if (objE.StatusOfEvent == 1)
                                {
                                    if (item.VehicleID > 0 && item.RomoocID > 0 && item.DriverName1 != null && item.DriverName1 != string.Empty && item.DriverID1.HasValue)
                                    {
                                        objE.StatusOfEvent = 11;
                                    }
                                }
                                objE.TypeOfEvent = 1;
                                objE.Connections = new List<int>();
                                objE.Option1 = item.CATServiceOfOrderID > 0 ? item.CATServiceOfOrderID.Value.ToString() : "-1";
                                objE.Option2 = item.CustomerID.ToString();
                                objE.Option3 = item.PartnerID > 0 ? item.PartnerID.Value.ToString() : "-1";
                                objE.Option4 = item.LocationFromID.ToString();
                                objE.Option5 = item.LocationToID.ToString();
                                result.DataSources.Add(objE);
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Container tender

        public DTOResult MONCO_TenderList(string request, DateTime dtFrom, DateTime dtTO, List<int> listCustomerID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (listCustomerID == null || listCustomerID.Count == 0)
                        listCustomerID = Account.ListCustomerID.ToList();
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0
                        && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered
                        && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtFrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtTO
                        //&& c.OPS_COTOMaster.VendorOfVehicleID.HasValue && listCustomerID.Contains(c.OPS_COTOMaster.VendorOfVehicleID.Value)
                        && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerLoad && c.StatusOfCOContainerID != -(int)SYSVarType.StatusOfCOContainerUnLoad
                        && c.OPSContainerID > 0 && c.ParentID == null && !c.IsClosed).OrderBy(c => c.COTOMasterID)
                        .Select(c => new DTOMONCOInput
                        {
                            ID = c.ID,
                            MasterID = c.COTOMasterID > 0 ? c.COTOMasterID.Value : -1,
                            MasterCode = c.OPS_COTOMaster.Code,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ATA = c.OPS_COTOMaster.ATA,
                            ATD = c.OPS_COTOMaster.ATD,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            DateFromCome = c.DateFromCome,
                            DateToCome = c.DateToCome,
                            InvoiceBy = c.InvoiceBy,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceDateString = string.Empty,
                            InvoiceNo = c.InvoiceNo,
                            IsInvoice = c.TypeOfStatusContainerPODID == -(int)SYSVarType.TypeOfStatusContainerPODComplete,
                            TypeOfStatusContainerName = c.SYS_Var.ValueOfVar,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                            VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            RomoocNo = c.OPS_COTOMaster.CAT_Romooc.RegNo,
                            COTOSort = c.COTOSort,
                            KM = 0,
                            IsComplete = c.TypeOfStatusContainerID >= -(int)SYSVarType.TypeOfStatusContainerComplete,

                            LocationFromAddress = c.CAT_Location.Address,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,

                            ContainerNo = c.OPS_Container.ContainerNo,
                            SealNo1 = c.OPS_Container.SealNo1,
                            SealNo2 = c.OPS_Container.SealNo2,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as List<DTOMONCOInput>;

                    foreach (DTOMONCOInput obj in result.Data)
                    {
                        if (obj.InvoiceDate.HasValue)
                        {
                            obj.InvoiceDateString = obj.InvoiceDate.Value.ToString("dd/MM");
                        }
                        var opsCoto = model.OPS_COTO.FirstOrDefault(c => c.COTOMasterID == obj.MasterID && c.SortOrder == obj.COTOSort);
                        if (opsCoto != null)
                        {
                            obj.KM = opsCoto.KM;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_TenderSave(DTOPODCOInput item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Note1 = item.Note1;
                        obj.Note2 = item.Note2;
                        obj.DateFromCome = item.DateFromCome;
                        obj.DateToCome = item.DateToCome;
                        obj.InvoiceNo = item.InvoiceNo;
                        obj.OPS_Container.ContainerNo = item.ContainerNo;
                        obj.OPS_Container.SealNo1 = item.SealNo1;
                        obj.OPS_Container.SealNo2 = item.SealNo2;
                        var opsCoto = model.OPS_COTO.FirstOrDefault(c => c.COTOMasterID == obj.COTOMasterID && c.SortOrder == obj.COTOSort);
                        if (opsCoto != null)
                        {
                            opsCoto.KM = item.KM;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_TenderUpdateStatus(List<int> lst, int type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var id in lst)
                    {
                        var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == id);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            if (type == 1)
                            {
                                obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerComplete;
                            }
                            else if (type == 2)
                            {
                                obj.TypeOfStatusContainerID = -(int)SYSVarType.TypeOfStatusContainerWait;
                            }
                        }
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region Container Operation

        public DTOResult MONCO_COTORead(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTO.Where(c => c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                        && c.OPS_COTOMaster.VehicleID > 1
                        && Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString())).Select(c => new DTOMONCOTO
                        {
                            ID = c.ID,
                            MasterID = c.COTOMasterID,
                            MasterCode = c.OPS_COTOMaster.Code,
                            VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            KM = c.KM,
                            KMGPS = c.KMGPS,
                            ApprovedBy = c.ApprovedBy,
                            ApprovedDate = c.ApprovedDate,
                            Ton = c.Ton,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            StatusName = c.SYS_Var.ValueOfVar,
                            StatusID = c.COTOStatusID,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as List<DTOMONCOTO>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_COTOUpdateList(List<DTOMONCOTO> lst, int type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.OPS_COTO.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.KM = item.KM;

                            //approved
                            if (type == 1)
                            {
                                obj.ApprovedBy = Account.UserName;
                                obj.ApprovedDate = DateTime.Now;
                                obj.COTOStatusID = -(int)SYSVarType.COTOStatusComplete;
                            }

                            //unapproved
                            if (type == 2)
                            {
                                obj.ApprovedBy = string.Empty;
                                obj.ApprovedDate = null;
                                obj.COTOStatusID = -(int)SYSVarType.COTOStatusOpen;
                            }
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_COTOUpdateCOTOContainer(int masterID, DTOMONOPSTO item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_COTOUpdateKMGPS(List<DTOMONCOTO> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var qr = model.CAT_LocationMatrix.Where(c => c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID).FirstOrDefault();
                        if (qr == null)
                        {
                            qr = new CAT_LocationMatrix();
                            qr.CreatedBy = Account.UserName;
                            qr.CreatedDate = DateTime.Now;
                            qr.Hour = 0;
                            qr.IsChecked = false;
                            model.CAT_LocationMatrix.Add(qr);
                        }
                        qr.KM = item.KMGPS.HasValue ? item.KM.Value : 0;
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONCO_COTOByMaster(string request, int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTO.Where(c => c.COTOMasterID == masterID).Select(c => new DTOMONCOTO
                        {
                            ID = c.ID,
                            MasterID = c.COTOMasterID,
                            MasterCode = c.OPS_COTOMaster.Code,
                            VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            KM = c.KM,
                            KMGPS = c.KMGPS,
                            ApprovedBy = c.ApprovedBy,
                            ApprovedDate = c.ApprovedDate,
                            Ton = c.Ton,
                            LocationFromID = c.LocationFromID,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationFromAddress = c.CAT_Location.Address,
                            LocationToID = c.LocationToID,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            StatusName = c.SYS_Var.ValueOfVar,
                            StatusID = c.COTOStatusID,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as List<DTOMONCOTO>;

                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_COTOofMasterAdd(DTOMONCOTO item, int masterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_COTO.Where(c => c.LocationFromID == item.LocationFromID && c.LocationToID == item.LocationToID && c.COTOMasterID == masterID).FirstOrDefault();
                    if (qr != null)
                    {
                        FaultHelper.BusinessFault(null, null, "Chặng bị trùng");
                    }
                    qr.CreatedBy = Account.UserName;
                    qr.CreatedDate = DateTime.Now;

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCO_COTOofMasterRomove(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_COTO.Where(c => c.ID == id).FirstOrDefault();
                    if (qr != null)
                    {
                        FaultHelper.BusinessFault(null, null, "Chặng bị trùng");
                    }
                    model.OPS_COTO.Remove(qr);
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }


        #endregion

        #region Dock

        public DTOResult MONDock_VehicleList(string request, int locationID, DateTime dStart, DateTime dEnd)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOMON_Vehicle> data = new List<DTOMON_Vehicle>();
                using (var model = new DataEntities())
                {
                    var qr = model.OPS_TOMasterDockSchedule.Where(c => (locationID < 0 || c.LocationID == locationID)
                        && ((c.DateComeModified >= dStart && c.DateComeModified < dEnd) || (c.DateComeModified >= dEnd && c.DateComeModified < dEnd))).Select(c => new
                    {
                        VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : c.OPS_COTOMaster.VehicleID,
                        VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : c.OPS_COTOMaster.VendorOfVehicleID,
                    }).Distinct().ToList();
                    qr = qr.Where(c => c.VehicleID > 1).ToList();

                    foreach (var item in qr)
                    {
                        var query = model.CUS_Vehicle.Where(c => c.VehicleID == item.VehicleID && c.CustomerID == item.VendorID).Select(c => new DTOMON_Vehicle
                        {
                            ID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            CustomerCode = c.CUS_Customer.Code,
                            CustomerID = c.CustomerID,
                        }).FirstOrDefault();
                        data.Add(query);
                    }
                    var list = data.ToDataSourceResult(CreateRequest(request));
                    result.Total = list.Total;
                    result.Data = list.Data as List<DTOMON_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONDockTimeline> MONDock_RegisterTimeline(List<int?> lstVehicleID, int locationID, DateTime dStart, DateTime dEnd)
        {
            try
            {
                List<DTOMONDockTimeline> result = new List<DTOMONDockTimeline>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_TOMasterDockSchedule.Where(c => (c.OPS_COTOMaster.VehicleID > 1 && lstVehicleID.Contains(c.OPS_COTOMaster.VehicleID)) || (c.OPS_DITOMaster.VehicleID > 1 && lstVehicleID.Contains(c.OPS_DITOMaster.VehicleID))
                        && ((c.DateComeModified >= dStart && c.DateComeModified < dEnd) || (c.DateComeModified >= dEnd && c.DateComeModified < dEnd))).Select(c => new DTOMONDockTimeline
                    {
                        ID = c.ID,
                        DateComeModified = c.DateComeModified,
                        DateComeModifiedEnd = c.DateComeModifiedEnd,
                        VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : c.OPS_DITOMaster.VehicleID,
                        DockStatusID = c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusOpen ? 1 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusChange ? 2 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusApproved ? 3 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusCome ? 4 : 5,
                        DockStatusName = c.SYS_Var.ValueOfVar,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONOPSTODock MONDock_GetInfo(int id)
        {
            try
            {
                DTOMONOPSTODock result = new DTOMONOPSTODock();
                using (var model = new DataEntities())
                {
                    result = model.OPS_TOMasterDockSchedule.Where(c => c.ID == id).Select(c => new DTOMONOPSTODock
                        {
                            ID = c.ID,
                            DateComeModified = c.DateComeModified,
                            DateComeModifiedEnd = c.DateComeModifiedEnd,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : c.OPS_DITOMaster.VehicleID,
                            DockStatusID = c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusOpen ? 1 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusChange ? 2 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusApproved ? 3 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusCome ? 4 : 5,
                            DockStatusName = c.SYS_Var.ValueOfVar,

                            DateCome = c.DateCome,
                            DateComeActual = c.DateComeActual,
                            DateComeApproved = c.DateComeApproved,
                            DateComeApprovedEnd = c.DateComeApprovedEnd,
                            DateComeEnd = c.DateComeEnd,
                            DateLeaveActual = c.DateLeaveActual,
                            DateLeaveApproved = c.DateLeaveApproved,
                            Ton = c.Ton,
                            CBM = c.CBM,
                            Quantity = c.Quantity,

                        }).FirstOrDefault();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONDock_DockTimelineAccept(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_TOMasterDockSchedule.FirstOrDefault(c => c.ID == id);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.TOMasterDockScheduleStatusID = -(int)SYSVarType.TOMasterDockScheduleStatusChange;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONDock_DockUpdateTime(DTOMONOPSTODock item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_TOMasterDockSchedule.FirstOrDefault(c => c.ID == item.ID);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.DateComeModified = item.DateComeModified.Value;
                        qr.DateComeModifiedEnd = item.DateComeModifiedEnd.Value;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region view 2

        public DTOResult MONDock_Manage_VehicleList(string request, int locationID, bool isShowAll, DateTime dStart, DateTime dEnd)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOMON_Vehicle> data = new List<DTOMON_Vehicle>();
                using (var model = new DataEntities())
                {
                    var lst = new List<int> 
                    {
                        -(int)SYSVarType.TOMasterDockScheduleStatusApproved,
                        -(int)SYSVarType.TOMasterDockScheduleStatusCome,
                        -(int)SYSVarType.TOMasterDockScheduleStatusLeave,
                    };
                    if (isShowAll)
                    {
                        lst.Add(-(int)SYSVarType.TOMasterDockScheduleStatusOpen);
                        lst.Add(-(int)SYSVarType.TOMasterDockScheduleStatusChange);
                    }
                    var qr = model.OPS_TOMasterDockSchedule.Where(c => (locationID < 0 || c.LocationID == locationID)
                        && lst.Contains(c.TOMasterDockScheduleStatusID)
                        && ((c.DateComeModified >= dStart && c.DateComeModified < dEnd) || (c.DateComeModified >= dEnd && c.DateComeModified < dEnd))).Select(c => new
                        {
                            VehicleID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VehicleID : c.OPS_COTOMaster.VehicleID,
                            VendorID = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.VendorOfVehicleID : c.OPS_COTOMaster.VendorOfVehicleID,
                        }).Distinct().ToList();
                    qr = qr.Where(c => c.VehicleID > 1).ToList();

                    foreach (var item in qr)
                    {
                        var query = model.CUS_Vehicle.Where(c => c.VehicleID == item.VehicleID && c.CustomerID == item.VendorID).Select(c => new DTOMON_Vehicle
                        {
                            ID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo,
                            CustomerCode = c.CUS_Customer.Code,
                            CustomerID = c.CustomerID,
                        }).FirstOrDefault();
                        data.Add(query);
                    }
                    var list = data.ToDataSourceResult(CreateRequest(request));
                    result.Total = list.Total;
                    result.Data = list.Data as List<DTOMON_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONDockTimeline> MONDock_Manage_Timeline(List<int?> lstVehicleID, int vendorID, bool isShowAll, DateTime dStart, DateTime dEnd)
        {
            try
            {
                List<DTOMONDockTimeline> result = new List<DTOMONDockTimeline>();
                using (var model = new DataEntities())
                {
                    var lst = new List<int> 
                    {
                        -(int)SYSVarType.TOMasterDockScheduleStatusApproved,
                        -(int)SYSVarType.TOMasterDockScheduleStatusCome,
                        -(int)SYSVarType.TOMasterDockScheduleStatusLeave,
                    };
                    if (isShowAll)
                    {
                        lst.Add(-(int)SYSVarType.TOMasterDockScheduleStatusOpen);
                        lst.Add(-(int)SYSVarType.TOMasterDockScheduleStatusChange);
                    }
                    result = model.OPS_TOMasterDockSchedule.Where(c => (c.OPS_COTOMaster.VehicleID > 1 && lstVehicleID.Contains(c.OPS_COTOMaster.VehicleID)) || (c.OPS_DITOMaster.VehicleID > 1 && lstVehicleID.Contains(c.OPS_DITOMaster.VehicleID))
                        && lst.Contains(c.TOMasterDockScheduleStatusID)
                        && ((c.DateComeModified >= dStart && c.DateComeModified < dEnd) || (c.DateComeModified >= dEnd && c.DateComeModified < dEnd))).Select(c => new DTOMONDockTimeline
                        {
                            ID = c.ID,
                            DateComeModified = c.DateComeModified,
                            DateComeModifiedEnd = c.DateComeModifiedEnd,
                            VehicleID = c.COTOMasterID.HasValue ? c.OPS_COTOMaster.VehicleID : c.OPS_DITOMaster.VehicleID,
                            DockStatusID = c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusOpen ? 1 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusChange ? 2 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusApproved ? 3 : c.TOMasterDockScheduleStatusID == -(int)SYSVarType.TOMasterDockScheduleStatusCome ? 4 : 5,
                            DockStatusName = c.SYS_Var.ValueOfVar,
                        }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONDock_Manage_DockList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                List<DTOMON_Vehicle> data = new List<DTOMON_Vehicle>();
                using (var model = new DataEntities())
                {
                    var qr = model.CAT_Dock.Select(c => new DTOCATDock
                    {
                        ID = c.ID,
                        Code = c.Code,
                        DockName = c.DockName,
                    }).ToDataSourceResult(CreateRequest(request));

                    var list = data.ToDataSourceResult(CreateRequest(request));
                    result.Total = list.Total;
                    result.Data = list.Data as List<DTOMON_Vehicle>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONDock_Manage_DockApprove(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var qr = model.OPS_TOMasterDockSchedule.FirstOrDefault(c => c.ID == id);
                    if (qr != null)
                    {
                        qr.ModifiedBy = Account.UserName;
                        qr.ModifiedDate = DateTime.Now;
                        qr.TOMasterDockScheduleStatusID = -(int)SYSVarType.TOMasterDockScheduleStatusApproved;
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }



        #endregion

        #endregion

        #region Approve Cost

        public DTOResult MONCO_TroubleList(string request, DateTime dfom, DateTime dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.COTOMasterID.HasValue && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleCO && c.OPS_COTOMaster.ETD >= dfom && c.OPS_COTOMaster.ETA <= dto).Select(c => new DTOCATTrouble
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        COTOID = c.DITOID,
                        COTOMasterID = c.COTOMasterID,
                        MasterCode = c.OPS_COTOMaster.Code,
                        Description = c.Description,
                        AttachmentFile = c.AttachmentFile,
                        Cost = c.Cost,
                        CostOfCustomer = c.CostOfCustomer,
                        CostOfVendor = c.CostOfVendor,
                        TroubleCostStatusID = c.TroubleCostStatusID,
                        TroubleCostStatusName = c.SYS_Var.ValueOfVar == null ? string.Empty : c.SYS_Var.ValueOfVar,
                        RegNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                        RoutingName = string.Empty,
                        ApprovedBy = c.ApprovedBy,
                        ApprovedDate = c.ApprovedDate,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MON_ApprovedTrouble(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var troubleId in lst)
                    {
                        var qr = model.CAT_Trouble.FirstOrDefault(c => c.ID == troubleId);
                        if (qr != null)
                        {
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                            qr.ApprovedBy = Account.UserName;
                            qr.ApprovedDate = DateTime.Now;
                            qr.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MON_RevertApprovedTrouble(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var troubleId in lst)
                    {
                        var qr = model.CAT_Trouble.FirstOrDefault(c => c.ID == troubleId);
                        if (qr != null)
                        {
                            qr.ModifiedBy = Account.UserName;
                            qr.ModifiedDate = DateTime.Now;
                            qr.ApprovedBy = string.Empty;
                            qr.ApprovedDate = null;
                            qr.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusOpen;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONDI_TroubleList(string request, DateTime dfom, DateTime dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                var StringKey = SYSSettingKey.CATSYSCustomerTrouble.ToString();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered && c.OPS_DITOMaster.StatusOfDITOMasterID <= -(int)SYSVarType.StatusOfDITOMasterReceived && c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI && c.OPS_DITOMaster.ETD >= dfom && c.OPS_DITOMaster.ETA <= dto).Select(c => new DTOCATTrouble
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        COTOID = c.DITOID,
                        COTOMasterID = c.DITOMasterID,
                        MasterCode = c.OPS_DITOMaster.Code,
                        Description = c.Description,
                        AttachmentFile = c.AttachmentFile,
                        Cost = c.Cost,
                        CostOfCustomer = c.CostOfCustomer,
                        CostOfVendor = c.CostOfVendor,
                        TroubleCostStatusID = c.TroubleCostStatusID,
                        TroubleCostStatusName = c.SYS_Var.ValueOfVar == null ? string.Empty : c.SYS_Var.ValueOfVar,
                        RegNo = c.OPS_DITOMaster.CAT_Vehicle.RegNo,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #region Duyệt chi phi xe tai

        public DTOResult MONDI_TroubleRead(string request, DateTime dfrom, DateTime dto)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.CAT_GroupOfTrouble.TypeOfGroupTroubleID == -(int)SYSVarType.TypeOfGroupTroubleDI
                        && c.CreatedDate >= dfrom && c.CreatedDate <= dto
                        && c.DITOMasterID > 0 && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOCATTrouble
                        {
                            ID = c.ID,
                            MasterCode = c.OPS_DITOMaster.Code,
                            GroupOfTroubleID = c.GroupOfTroubleID,
                            GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                            DITOID = c.DITOID,
                            DITOMasterID = c.DITOMasterID,
                            Description = c.Description,
                            AttachmentFile = c.AttachmentFile,
                            Cost = c.Cost,
                            CostOfCustomer = c.CostOfCustomer,
                            CostOfVendor = c.CostOfVendor,
                            DriverID = c.DriverID,
                            DriverName = c.DriverID > 0 ? c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName : string.Empty,
                            TroubleCostStatusID = c.TroubleCostStatusID,
                            TroubleCostStatusName = c.SYS_Var.ValueOfVar == null ? string.Empty : c.SYS_Var.ValueOfVar,
                            RoutingName = string.Empty,
                        }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCATTrouble>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONDI_TroubleApproved(List<DTOCATTrouble> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            FaultHelper.BusinessFault(null, null, "Chi phí không tồn tại");
                        }
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;

                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.DITOID = item.DITOID > 0 ? item.DITOID : null;
                        obj.DITOMasterID = item.DITOMasterID;
                        obj.Description = item.Description;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.CostOfCustomer = item.CostOfCustomer;
                        obj.CostOfVendor = item.CostOfVendor;
                        obj.DriverID = item.DriverID;
                        model.SaveChanges();
                        item.ID = obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONDI_TroubleReject(List<DTOCATTrouble> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in data)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj == null)
                        {
                            FaultHelper.BusinessFault(null, null, "Chi phí không tồn tại");
                        }
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusReject;

                        obj.GroupOfTroubleID = item.GroupOfTroubleID;
                        obj.DITOID = item.DITOID > 0 ? item.DITOID : null;
                        obj.DITOMasterID = item.DITOMasterID;
                        obj.Description = item.Description;
                        obj.AttachmentFile = item.AttachmentFile;
                        obj.Cost = item.Cost;
                        obj.CostOfCustomer = item.CostOfCustomer;
                        obj.CostOfVendor = item.CostOfVendor;
                        obj.DriverID = item.DriverID;
                        model.SaveChanges();
                        item.ID = obj.ID;
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #endregion

        #region Import Data
        const int digitsOfRound = 6;

        public List<DTOMONImport> MONImport_Data(DateTime dtFrom, DateTime dtTO, int cusId)
        {
            try
            {
                List<DTOMONImport> result = new List<DTOMONImport>();
                dtFrom = dtFrom.Date;
                dtTO = dtTO.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.CustomerID == cusId && c.OPS_DITOMaster.ETD >= dtFrom && c.OPS_DITOMaster.ETD < dtTO
                        && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered).Select(c => new DTOMONImport
                        {
                            ID = c.ID,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            ETD = c.ORD_GroupProduct.ETD,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            MasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            DriverTel = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DriverCard = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            RegNo = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? true : false,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadEnd = c.DateToLoadEnd,
                            DateToLoadStart = c.DateToLoadStart,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            //DITOGroupProductStatusPODName = c.SYS_Var1.ValueOfVar,
                            IsOrigin = c.IsOrigin,
                            InvoiceBy = c.InvoiceBy,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            Note = c.Note,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : string.Empty,
                            Description = c.ORD_GroupProduct.Description,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ChipNo = c.OPS_DITOMaster.Note1,
                            Temperature = c.OPS_DITOMaster.Note2,
                            Ton = c.Ton,
                            TonBBGN = c.TonBBGN,
                            TonTranfer = c.TonTranfer,
                            CBM = c.CBM,
                            CBMBBGN = c.CBMBBGN,
                            CBMTranfer = c.CBMTranfer,
                            Quantity = c.Quantity,
                            QuantityBBGN = c.QuantityBBGN,
                            QuantityTranfer = c.QuantityTranfer,
                            VENLoadCodeID = c.VendorLoadID > 0 ? c.VendorLoadID.Value : 0,
                            VENLoadCode = c.VendorLoadID > 0 ? c.CUS_Customer.Code : string.Empty,
                            VENUnLoadCodeID = c.VendorUnLoadID > 0 ? c.VendorUnLoadID.Value : 0,
                            VENUnLoadCode = c.VendorUnLoadID > 0 ? c.CUS_Customer1.Code : string.Empty,
                        }).OrderBy(c => c.ETD).ThenBy(c => c.MasterCode).ThenBy(c => c.OrderCode).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONImport_Index_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.CustomerID == Account.SYSCustomerID ? true : Account.ListCustomerID.Contains(c.CustomerID)) && c.Key == CUSSettingKey.MON.ToString()).Select(c => new DTOCUSSettingMON
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        CustomerID = c.CustomerID,
                        SettingCustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMON>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingMON MONImport_Index_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMON result = new DTOCUSSettingMON();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMON>(obj.Setting);
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingOrder MONImport_ORDOrder_Excel_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingOrder result = new DTOCUSSettingOrder();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingOrder>(obj.Setting);
                            if (result != null)
                            {
                                var objtransport = model.CAT_TransportMode.FirstOrDefault(c => c.ID == result.TypeOfTransportModeID);
                                if (objtransport != null)
                                {
                                    result.IsContainer = objtransport.TransportModeID == -(int)SYSVarType.TransportModeFCL || objtransport.TransportModeID == -(int)SYSVarType.TransportModeLCL;
                                }
                            }
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingMONImport MONImportInput_Index_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONImport result = new DTOCUSSettingMONImport();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMONImport>(obj.Setting);
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONImport_Excel_Import(int sID, List<DTOMONImport> data)
        {
            try
            {
                DTOCUSSettingMON objSetting = MONImport_Index_Setting_Get(sID);
                List<int> lstChangeVen = new List<int>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    //Order by CustomerID
                    data = data.OrderBy(c => c.CustomerID).ToList();

                    //Check code
                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            if (!item.IsNew)
                            {
                                #region Update
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                                if (objSetting.VENLoadCode > 0)
                                {
                                    if (obj.VendorLoadID != item.VENLoadCodeID)
                                    {
                                        lstChangeVen.Add(obj.ID);
                                    }
                                }
                                if (objSetting.VENUnLoadCode > 0)
                                {
                                    if (obj.VendorUnLoadID != item.VENUnLoadCodeID)
                                    {
                                        lstChangeVen.Add(obj.ID);
                                    }
                                }

                                MONImport_Update(ref obj, item, objSetting, model);
                                #endregion
                            }
                            else
                            {
                                #region New

                                OPS_DITOGroupProduct objNew = new OPS_DITOGroupProduct();
                                objNew.CreatedBy = Account.UserName;
                                objNew.CreatedDate = DateTime.Now;

                                objNew.OrderGroupProductID = obj.OrderGroupProductID;
                                objNew.Note = obj.Note;
                                objNew.IsInput = obj.IsInput;
                                objNew.GroupSort = obj.GroupSort;
                                objNew.DNCode = obj.DNCode;
                                objNew.DITOGroupProductStatusID = obj.DITOGroupProductStatusID;
                                objNew.DateFromCome = obj.DateFromCome;
                                objNew.DateFromLeave = obj.DateFromLeave;
                                objNew.DateFromLoadStart = obj.DateFromLoadStart;
                                objNew.DateFromLoadEnd = obj.DateFromLoadEnd;
                                objNew.DateToCome = obj.DateToCome;
                                objNew.DateToLeave = obj.DateToLeave;
                                objNew.DateToLoadStart = obj.DateToLoadStart;
                                objNew.DateToLoadEnd = obj.DateToLoadEnd;
                                objNew.Note1 = obj.Note1;
                                objNew.Note2 = obj.Note2;
                                objNew.IsOrigin = obj.IsOrigin;

                                objNew.InvoiceBy = Account.UserName;
                                objNew.InvoiceDate = item.InvoiceDate;
                                objNew.InvoiceNote = item.InvoiceNote;

                                objNew.DateDN = obj.DateDN;
                                objNew.DITOGroupProductStatusPODID = obj.DITOGroupProductStatusPODID;
                                objNew.CUSRoutingID = obj.CUSRoutingID;
                                objNew.TonReturn = obj.TonReturn;
                                objNew.CBMReturn = obj.CBMReturn;
                                objNew.QuantityReturn = obj.QuantityReturn;
                                objNew.TypeOfDITOGroupProductReturnID = obj.TypeOfDITOGroupProductReturnID;
                                objNew.DateConfig = obj.DateConfig;
                                objNew.CATRoutingID = obj.CATRoutingID;
                                objNew.InvoiceReturnBy = obj.InvoiceReturnBy;
                                objNew.InvoiceReturnDate = obj.InvoiceReturnDate;
                                objNew.InvoiceReturnNote = obj.InvoiceReturnNote;
                                objNew.FINSort = obj.FINSort;
                                objNew.IsSplit = obj.IsSplit;
                                objNew.VendorLoadID = obj.VendorLoadID;
                                objNew.VendorUnLoadID = obj.VendorUnLoadID;
                                objNew.VendorLoadContractID = obj.VendorLoadContractID;
                                objNew.VendorUnLoadContractID = obj.VendorUnLoadContractID;
                                if (item.VehicleID > 0)
                                {
                                    objNew.DITOMasterID = obj.DITOMasterID;
                                }
                                else
                                {
                                    objNew.DITOMasterID = null;
                                }

                                model.OPS_DITOGroupProduct.Add(objNew);

                                MONImport_Update(ref objNew, item, objSetting, model);
                                objNew.Ton = item.Ton;
                                objNew.CBM = item.CBM;
                                objNew.Quantity = item.Quantity;
                                #endregion
                            }
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Số thứ tự không hợp lệ.");
                        }
                    }
                    model.SaveChanges();

                    HelperFinance.Truck_UpdateGroup(model, Account, lstChangeVen.Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void MONImport_Update(ref OPS_DITOGroupProduct obj, DTOMONImport item, DTOCUSSettingMON objSetting, DataEntities model)
        {
            if (objSetting.DNCode > 0)
                obj.DNCode = item.DNCode;

            if (objSetting.SOCode > 0)
                obj.ORD_GroupProduct.SOCode = item.SOCode;

            if (objSetting.IsInvoice > 0)
                obj.DITOGroupProductStatusPODID = item.IsInvoice ? (-(int)SYSVarType.DITOGroupProductStatusPODComplete) : (-(int)SYSVarType.DITOGroupProductStatusPODWait);

            if (objSetting.DateFromCome > 0)
                obj.DateFromCome = item.DateFromCome;

            if (objSetting.DateFromLeave > 0)
                obj.DateFromLeave = item.DateFromLeave;

            if (objSetting.DateFromLoadEnd > 0)
                obj.DateFromLoadEnd = item.DateFromLoadEnd;

            if (objSetting.DateFromLoadStart > 0)
                obj.DateFromLoadStart = item.DateFromLoadStart;

            if (objSetting.DateToCome > 0)
                obj.DateToCome = item.DateToCome;

            if (objSetting.DateToLeave > 0)
                obj.DateToLeave = item.DateToLeave;

            if (objSetting.DateToLoadEnd > 0)
                obj.DateToLoadEnd = item.DateToLoadEnd;

            if (objSetting.DateToLoadStart > 0)
                obj.DateToLoadStart = item.DateToLoadStart;

            if (objSetting.InvoiceDate > 0)
                obj.InvoiceDate = item.InvoiceDate;

            if (objSetting.InvoiceNote > 0)
                obj.InvoiceNote = item.InvoiceNote;

            if (objSetting.Note > 0)
                obj.Note = item.Note;

            if (objSetting.Note1 > 0)
                obj.Note1 = item.Note1;

            if (objSetting.Note2 > 0)
                obj.Note2 = item.Note2;

            if (objSetting.ChipNo > 0 && obj.DITOMasterID > 0)
                obj.OPS_DITOMaster.Note1 = item.ChipNo;

            if (objSetting.Temperature > 0 && obj.DITOMasterID > 0)
                obj.OPS_DITOMaster.Note2 = item.Temperature;

            if (objSetting.Ton > 0)
                obj.Ton = item.Ton;

            if (objSetting.CBM > 0)
                obj.CBM = item.CBM;

            if (objSetting.Quantity > 0)
                obj.Quantity = item.Quantity;

            if (objSetting.TonBBGN > 0)
                obj.TonBBGN = item.TonBBGN;

            if (objSetting.TonTranfer > 0)
                obj.TonTranfer = item.TonTranfer;

            if (objSetting.CBMBBGN > 0)
                obj.CBMBBGN = item.CBMBBGN;

            if (objSetting.CBMTranfer > 0)
                obj.CBMTranfer = item.CBMTranfer;

            if (objSetting.QuantityBBGN > 0)
                obj.QuantityBBGN = item.QuantityBBGN;

            if (objSetting.QuantityTranfer > 0)
                obj.QuantityTranfer = item.QuantityTranfer;

            if (objSetting.VENLoadCode > 0)
                obj.VendorLoadID = item.VENLoadCodeID;

            if (objSetting.VENUnLoadCode > 0)
                obj.VendorUnLoadID = item.VENUnLoadCodeID;

            // Trường hợp tạo mới
            if (item.IsNew)
            {
                int? orderGroupID = obj.OrderGroupProductID;
                var oldORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == orderGroupID);
                var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == oldORDGroup.GroupOfProductID);
                var cusProduct = model.CUS_Product.FirstOrDefault(c => c.ID == oldORDGroup.ORD_Product.FirstOrDefault().ProductID);

                #region Tạo mới OPS_Product

                var opsProduct = new OPS_DITOProduct();
                opsProduct.CreatedDate = DateTime.Now;
                opsProduct.CreatedBy = Account.UserName;
                opsProduct.OPS_DITOGroupProduct = obj;
                opsProduct.ORD_Product = oldORDGroup.ORD_Product.FirstOrDefault();
                opsProduct.QuantityReturn = 0;
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                {
                    opsProduct.Quantity = obj.Ton;
                    opsProduct.QuantityTranfer = obj.TonTranfer;
                    opsProduct.QuantityBBGN = obj.TonBBGN;
                }
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                {
                    opsProduct.Quantity = obj.CBM;
                    opsProduct.QuantityTranfer = obj.CBMTranfer;
                    opsProduct.QuantityBBGN = obj.CBMBBGN;
                }
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                {
                    opsProduct.Quantity = obj.Quantity;
                    opsProduct.QuantityTranfer = obj.QuantityTranfer;
                    opsProduct.QuantityBBGN = obj.QuantityBBGN;
                }
                model.OPS_DITOProduct.Add(opsProduct);
                #endregion
            }
            else
            {
                #region Cập nhật cho OPSProduct
                int DITOGroupProductID = obj.ID;
                var opsProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == DITOGroupProductID);
                if (opsProduct != null)
                {
                    opsProduct.ModifiedDate = DateTime.Now;
                    opsProduct.ModifiedBy = Account.UserName;
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                    {
                        opsProduct.Quantity = obj.Ton;
                        opsProduct.QuantityTranfer = obj.TonTranfer;
                        opsProduct.QuantityBBGN = obj.TonBBGN;
                    }
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                    {
                        opsProduct.Quantity = obj.CBM;
                        opsProduct.QuantityTranfer = obj.CBMTranfer;
                        opsProduct.QuantityBBGN = obj.CBMBBGN;
                    }
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                    {
                        opsProduct.Quantity = obj.Quantity;
                        opsProduct.QuantityTranfer = obj.QuantityTranfer;
                        opsProduct.QuantityBBGN = obj.QuantityBBGN;
                    }
                }
                #endregion
            }
        }


        public DTOResult MONImportInput_Index_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.CustomerID == Account.SYSCustomerID ? true : Account.ListCustomerID.Contains(c.CustomerID)) && c.Key == CUSSettingKey.MONImport.ToString()).Select(c => new DTOCUSSettingMONImport
                    {
                        ID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        CustomerID = c.CustomerID,
                        SettingCustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMONImport>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONInputExport> MONImportInput_Excel_Export(int sID, DateTime dtFrom, DateTime dtTO)
        {
            try
            {
                dtFrom = dtFrom.Date;
                dtTO = dtTO.Date.AddDays(1);

                List<DTOMONInputExport> result = new List<DTOMONInputExport>();
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONImport objSetting = MONImportInput_Index_Setting_Get(sID);

                    if (objSetting.CUSSettingOrderID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Chưa thiết lập template import đơn hàng");

                    var objSettingOrder = MONImport_ORDOrder_Excel_Setting_Get(objSetting.CUSSettingOrderID);

                    if (objSettingOrder.CustomerID < 1)
                        throw FaultHelper.BusinessFault(null, null, "Template import đơn hàng chưa thiết lập khách hàng");

                    var objtransportmode = model.CAT_TransportMode.FirstOrDefault(c => c.ID == objSettingOrder.TypeOfTransportModeID);
                    if (objtransportmode != null && (objtransportmode.TransportModeID == -(int)SYSVarType.TransportModeFTL || objtransportmode.TransportModeID == -(int)SYSVarType.TransportModeLTL))
                    {
                        result = model.OPS_DITOGroupProduct.Where(c => c.DITOMasterID > 0 && c.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel
                            && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered && c.ORD_GroupProduct.ORD_Order.CustomerID == objSettingOrder.CustomerID
                            && c.ORD_GroupProduct.ORD_Order.SYSCustomerID == Account.SYSCustomerID
                            && (objSetting.IsImportOnReceived ? true : c.OPS_DITOMaster.StatusOfDITOMasterID < -(int)SYSVarType.StatusOfDITOMasterReceived)
                            && c.OPS_DITOMaster.ETD >= dtFrom && c.OPS_DITOMaster.ETD < dtTO
                            && (objSetting.IsReturnSetting == false ? c.ORD_GroupProduct.IsReturn != true : true)).Select(c => new DTOMONInputExport
                            {
                                ID = c.ID,
                                DITOMasterID = c.DITOMasterID.Value,
                                MasterCode = c.OPS_DITOMaster.Code,
                                VendorCode = c.OPS_DITOMaster.VendorOfVehicleID == null ? "" : c.OPS_DITOMaster.CUS_Customer.Code,
                                VehicleNo = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : "",
                                VehicleID = c.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOMaster.VehicleID.Value : -1,
                                MasterNote = c.OPS_DITOMaster.Note,
                                MasterSortOrder = c.OPS_DITOMaster.SortOrder,
                                MasterGroupVehicle = c.OPS_DITOMaster.GroupOfVehicleID > 0 ? c.OPS_DITOMaster.CAT_GroupOfVehicle.Code : "",
                                DriverName = c.OPS_DITOMaster.DriverName1,
                                DriverTel = c.OPS_DITOMaster.DriverTel1,
                                MasterETDDate_Time = c.OPS_DITOMaster.ETD,
                                MasterETADate_Time = c.OPS_DITOMaster.ETA,
                                Price = c.ORD_GroupProduct.Price > 0 ? c.ORD_GroupProduct.Price.Value : 0,
                                IsReturn = c.ORD_GroupProduct.IsReturn,
                                ProductID = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID,
                                OrderID = c.ORD_GroupProduct.OrderID,
                                OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                                GroupProductID = c.ORD_GroupProduct.GroupOfProductID.Value,
                                PackingID = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID,
                                TypeOfPacking = c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.ORD_GroupProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3,
                                CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                DistributorCode = c.ORD_GroupProduct.CUS_Partner.PartnerCode,
                                DistributorName = c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName,
                                DNCode = c.DNCode == null ? "" : c.DNCode,
                                SOCode = c.ORD_GroupProduct.SOCode == null ? "" : c.ORD_GroupProduct.SOCode,
                                RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                RequestDate_Time = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                RequestTime = c.ORD_GroupProduct.ORD_Order.RequestDate,
                                ETD = c.ORD_GroupProduct.ETD,
                                ETA = c.ORD_GroupProduct.ETA,
                                ETARequest = c.ORD_GroupProduct.ETARequest,
                                ETARequestTime = c.ORD_GroupProduct.ETARequest,
                                GroupProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupVehicle = c.ORD_GroupProduct.ORD_Order.GroupOfVehicleID > 0 ? c.ORD_GroupProduct.ORD_Order.CAT_GroupOfVehicle.Code : string.Empty,
                                HasCashCollect = c.ORD_GroupProduct.HasCashCollect,
                                IsHot = c.ORD_GroupProduct.ORD_Order.IsHot,
                                StockID = c.ORD_GroupProduct.LocationFromID.Value,
                                LocationFromID = c.ORD_GroupProduct.LocationFromID.Value,
                                LocationFromCode = c.ORD_GroupProduct.CUS_Location.Code,
                                LocationFromName = c.ORD_GroupProduct.CUS_Location.LocationName,
                                LocationToID = c.ORD_GroupProduct.LocationToID.Value,
                                LocationToCode = c.ORD_GroupProduct.CUS_Location1.Code,
                                LocationToName = c.ORD_GroupProduct.CUS_Location1.LocationName,
                                LocationToAddress = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address,
                                LocationToProvince = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                                LocationToDistrict = c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                                LocationToNote = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note,
                                LocationToNote1 = c.ORD_GroupProduct.CUS_Location1.CAT_Location.Note1,
                                Note = c.ORD_GroupProduct.ORD_Order.Note,
                                Packing = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                                PriceTOMaster = c.ORD_GroupProduct.ORD_Order.RoutePrice,
                                RoutingCode = c.ORD_GroupProduct.CUSRoutingID > 0 ? c.ORD_GroupProduct.CUS_Routing.Code : string.Empty,
                                ServiceOfOrder = string.Empty,
                                TemperatureMax = c.ORD_GroupProduct.TempMax,
                                TemperatureMin = c.ORD_GroupProduct.TempMin,
                                Ton = c.Ton,
                                CBM = c.CBM,
                                Quantity = c.Quantity,
                                PriceTon = c.ORD_GroupProduct.Price,
                                PriceCBM = c.ORD_GroupProduct.Price,
                                PriceQuantity = c.ORD_GroupProduct.Price,
                                TypeOfTransportMode = c.ORD_GroupProduct.ORD_Order.CAT_TransportMode.Name,
                                UserDefine1 = c.ORD_GroupProduct.ORD_Order.UserDefine1,
                                UserDefine2 = c.ORD_GroupProduct.ORD_Order.UserDefine2,
                                UserDefine3 = c.ORD_GroupProduct.ORD_Order.UserDefine3,
                                UserDefine4 = c.ORD_GroupProduct.ORD_Order.UserDefine4,
                                UserDefine5 = c.ORD_GroupProduct.ORD_Order.UserDefine5,
                                UserDefine6 = c.ORD_GroupProduct.ORD_Order.UserDefine6,
                                UserDefine7 = c.ORD_GroupProduct.ORD_Order.UserDefine7,
                                UserDefine8 = c.ORD_GroupProduct.ORD_Order.UserDefine8,
                                UserDefine9 = c.ORD_GroupProduct.ORD_Order.UserDefine9,
                                TonReturn = c.TonReturn,
                                CBMReturn = c.CBMReturn,
                                QuantityReturn = c.QuantityReturn,
                                HasReturn = c.OPS_DITOProduct.Count(p => p.QuantityReturn > 0) > 0,
                            }).OrderBy(c => c.MasterCode).ToList();

                        foreach (var item in result)
                        {
                            if (item.MasterETDDate_Time.HasValue)
                                item.MasterETDDate = item.MasterETDDate_Time.Value.Date;

                            if (item.MasterETADate_Time.HasValue)
                                item.MasterETADate = item.MasterETADate_Time.Value.Date;

                            item.DistributorCodeName = item.DistributorCode + "-" + item.DistributorName;
                            item.LocationFromCodeName = item.LocationFromCode + "-" + item.LocationFromName;
                            item.LocationToCodeName = item.LocationToCode + "-" + item.LocationToName;

                            if (item.IsReturn.HasValue && item.IsReturn == true)
                            {
                                item.Ton = item.TonReturn;
                                item.CBM = item.CBMReturn;
                                item.Quantity = item.QuantityReturn;
                            }
                        }

                        var query = result.GroupBy(c => new { c.VehicleNo, c.MasterETDDate });
                        //Sắp xếp lại sort order cho các chuyển của xe trong ngày

                        foreach (var masterGroup in query)
                        {
                            int sortOrder = 1;
                            foreach (var itemMaster in masterGroup.GroupBy(c => c.MasterETDDate_Time).OrderBy(c => c.Key))
                            {
                                foreach (var item in itemMaster)
                                {
                                    item.MasterSortOrder = sortOrder;
                                }
                                sortOrder++;
                            }
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONImportInput_Excel_Import(int sID, List<DTOMONInputImport> data)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    DTOCUSSettingMONImport objSetting = MONImportInput_Index_Setting_Get(sID);

                    List<int> lstMasterID = new List<int>();
                    foreach (var item in data.Where(c => c.ExcelSuccess && c.DITOMasterID > 0))
                    {
                        var master = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.DITOMasterID);
                        if (master != null)
                        {
                            foreach (var group in item.ListGroup.Where(c => c.OPSGroupID > 0))
                            {
                                var opsGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == group.OPSGroupID);
                                if (opsGroup != null)
                                {
                                    // Cập nhật
                                    if (!group.IsNew)
                                    {
                                        opsGroup.InvoiceReturnDate = group.InvoiceReturnDate;
                                        opsGroup.InvoiceReturnNote = group.InvoiceReturnNote;
                                        opsGroup.ReasonCancelNote = group.ReasonCancelNote;
                                        opsGroup.TonTranfer = group.Ton;
                                        opsGroup.CBMTranfer = group.CBM;
                                        opsGroup.QuantityTranfer = group.Quantity;

                                        var opsProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == opsGroup.ID);
                                        if (opsProduct != null)
                                        {
                                            opsProduct.ModifiedDate = DateTime.Now;
                                            opsProduct.ModifiedBy = Account.UserName;
                                            if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            {
                                                opsProduct.Quantity = group.Ton;
                                                opsProduct.QuantityTranfer = group.Ton;
                                                opsProduct.QuantityBBGN = group.Ton;
                                            }
                                            if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            {
                                                opsProduct.Quantity = group.CBM;
                                                opsProduct.QuantityTranfer = group.CBM;
                                                opsProduct.QuantityBBGN = group.CBM;
                                            }
                                            if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                            {
                                                opsProduct.Quantity = group.Quantity;
                                                opsProduct.QuantityTranfer = group.Quantity;
                                                opsProduct.QuantityBBGN = group.Quantity;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // Thêm mới
                                        #region Tạo mới ORDGroup

                                        var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == group.GroupID);
                                        var cusProduct = model.CUS_Product.FirstOrDefault(c => c.ID == group.ProductID);
                                        var oldORDGroup = opsGroup.ORD_GroupProduct;

                                        //tao moi ORD_GroupProduct
                                        var ordGP = new ORD_GroupProduct();
                                        ordGP.OrderID = oldORDGroup.OrderID;
                                        ordGP.ContainerID = oldORDGroup.ContainerID;
                                        ordGP.GroupOfProductID = group.GroupID;
                                        ordGP.Description = oldORDGroup.Description;
                                        ordGP.SOCode = group.SOCode;
                                        ordGP.PriceOfGOPID = cusGroup.PriceOfGOPID;
                                        ordGP.PackingID = cusProduct.PackingID;
                                        ordGP.LocationFromID = oldORDGroup.LocationFromID;
                                        ordGP.LocationToID = oldORDGroup.LocationToID;
                                        ordGP.DateConfig = oldORDGroup.DateConfig;
                                        ordGP.ETD = oldORDGroup.ETD;
                                        ordGP.ETA = oldORDGroup.ETA;
                                        ordGP.Price = group.Price;
                                        ordGP.CUSRoutingID = oldORDGroup.CUSRoutingID;
                                        ordGP.CreatedDate = DateTime.Now;
                                        ordGP.CreatedBy = Account.UserName;
                                        ordGP.DNCode = oldORDGroup.DNCode;
                                        ordGP.ETARequest = oldORDGroup.ETARequest;
                                        ordGP.PartnerID = oldORDGroup.PartnerID;
                                        ordGP.IsReturn = group.IsReturn;
                                        ordGP.Ton = 0;
                                        ordGP.CBM = 0;
                                        ordGP.Quantity = 0;
                                        ordGP.Note1 = group.Note1;
                                        ordGP.Note2 = group.Note2;
                                        model.ORD_GroupProduct.Add(ordGP);


                                        // them ORD_Product
                                        var ordP = new ORD_Product();
                                        ordP.ORD_GroupProduct = ordGP;
                                        ordP.CreatedBy = Account.UserName;
                                        ordP.CreatedDate = DateTime.Now;
                                        ordP.ProductID = group.ProductID;
                                        ordP.PackingID = cusProduct.PackingID;
                                        model.ORD_Product.Add(ordP);

                                        if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            ordP.Quantity = group.Ton;
                                        if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            ordP.Quantity = group.CBM;
                                        if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                            ordP.Quantity = group.Quantity;

                                        #region qui doi tan khoi
                                        if (cusProduct != null)
                                        {
                                            if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                                            {
                                                ordP.ExchangeTon = 1;
                                                ordP.ExchangeCBM = 0;
                                                if (cusProduct.Weight.HasValue && cusProduct.Weight.Value > 0 && cusProduct.CBM.HasValue)
                                                    ordP.ExchangeCBM = cusProduct.CBM.Value / cusProduct.Weight.Value;
                                                ordP.ExchangeQuantity = 0;
                                                ordGP.Ton += ordP.Quantity;
                                                ordGP.CBM += ordP.Quantity * ordP.ExchangeCBM.Value;
                                            }
                                            if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                                            {
                                                ordP.ExchangeCBM = 1;
                                                ordP.ExchangeTon = 0;
                                                if (cusProduct.Weight.HasValue && cusProduct.CBM.Value > 0 && cusProduct.CBM.HasValue)
                                                    ordP.ExchangeTon = cusProduct.Weight.Value / cusProduct.CBM.Value;
                                                ordP.ExchangeQuantity = 0;
                                                ordGP.CBM += ordP.Quantity;
                                                ordGP.Ton += ordP.Quantity * ordP.ExchangeTon.Value;
                                            }
                                            if (cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                                            {
                                                ordP.ExchangeTon = cusProduct.Weight.HasValue ? cusProduct.Weight.Value : 0;
                                                ordP.ExchangeCBM = cusProduct.CBM.HasValue ? cusProduct.CBM.Value : 0;
                                                ordP.ExchangeQuantity = 1;
                                                ordGP.CBM += ordP.Quantity * ordP.ExchangeCBM.Value;
                                                ordGP.Ton += ordP.Quantity * ordP.ExchangeTon.Value;
                                                ordGP.Quantity += ordP.Quantity;
                                            }
                                        }

                                        #endregion

                                        #endregion

                                        #region Tạo mới OPS_DITOGroupProduct
                                        var opsGP = new OPS_DITOGroupProduct();
                                        opsGP.ORD_GroupProduct = ordGP;
                                        opsGP.DITOMasterID = opsGroup.DITOMasterID;
                                        opsGP.CBM = ordGP.CBM;
                                        opsGP.Ton = ordGP.Ton;
                                        opsGP.Quantity = ordGP.Quantity;
                                        opsGP.CBMTranfer = ordGP.CBM;
                                        opsGP.TonTranfer = ordGP.Ton;
                                        opsGP.QuantityTranfer = ordGP.Quantity;
                                        opsGP.TonBBGN = ordGP.Ton;
                                        opsGP.CBMBBGN = ordGP.CBM;
                                        opsGP.QuantityBBGN = ordGP.Quantity;
                                        opsGP.DNCode = group.DNCode;
                                        opsGP.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                                        opsGP.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                                        opsGP.CreatedDate = DateTime.Now;
                                        opsGP.CreatedBy = Account.UserName;
                                        opsGP.IsOrigin = opsGroup.IsOrigin;
                                        opsGP.IsInput = opsGroup.IsInput;
                                        opsGP.GroupSort = opsGroup.GroupSort;
                                        opsGP.DateFromCome = opsGroup.DateFromCome;
                                        opsGP.DateFromLeave = opsGroup.DateFromLeave;
                                        opsGP.DateFromLoadEnd = opsGroup.DateFromLoadEnd;
                                        opsGP.DateFromLoadStart = opsGroup.DateFromLoadStart;
                                        opsGP.DateToCome = opsGroup.DateToCome;
                                        opsGP.DateToLeave = opsGroup.DateToLeave;
                                        opsGP.DateToLoadEnd = opsGroup.DateToLoadEnd;
                                        opsGP.DateToLoadStart = opsGroup.DateToLoadStart;
                                        opsGP.Note = opsGroup.Note;
                                        opsGP.Note1 = opsGroup.Note1;
                                        opsGP.Note2 = opsGroup.Note2;
                                        opsGP.InvoiceBy = opsGroup.InvoiceBy;
                                        opsGP.InvoiceDate = opsGroup.InvoiceDate;
                                        opsGP.InvoiceNote = opsGroup.InvoiceNote;
                                        opsGP.DateDN = opsGroup.DateDN;
                                        opsGP.InvoiceReturnDate = group.InvoiceReturnDate;
                                        opsGP.InvoiceReturnNote = group.InvoiceReturnNote;
                                        opsGP.ReasonCancelNote = group.ReasonCancelNote;
                                        opsGP.DateConfig = opsGroup.DateConfig;
                                        opsGP.CATRoutingID = opsGroup.CATRoutingID;
                                        // Hàng lấy về từ NPP
                                        if (group.IsReturn == true)
                                        {
                                            opsGP.CBMReturn = ordGP.CBM;
                                            opsGP.TonReturn = ordGP.Ton;
                                            opsGP.QuantityReturn = ordGP.Quantity;
                                            opsGP.CBM = 0;
                                            opsGP.Ton = 0;
                                            opsGP.Quantity = 0;
                                            opsGP.CBMTranfer = 0;
                                            opsGP.TonTranfer = 0;
                                            opsGP.QuantityTranfer = 0;
                                            opsGP.TonBBGN = 0;
                                            opsGP.CBMBBGN = 0;
                                            opsGP.QuantityBBGN = 0;
                                        }
                                        model.OPS_DITOGroupProduct.Add(opsGP);
                                        #endregion

                                        #region Tạo mới OPS_Product

                                        var opsProduct = new OPS_DITOProduct();
                                        opsProduct.CreatedDate = DateTime.Now;
                                        opsProduct.CreatedBy = Account.UserName;
                                        opsProduct.OPS_DITOGroupProduct = opsGP;
                                        opsProduct.ORD_Product = ordP;
                                        opsProduct.Quantity = ordP.Quantity;
                                        opsProduct.QuantityTranfer = ordP.Quantity;
                                        opsProduct.QuantityBBGN = ordP.Quantity;
                                        // Hàng lấy về từ NPP
                                        if (group.IsReturn == true)
                                        {
                                            opsProduct.QuantityReturn = ordP.Quantity;
                                            opsProduct.Quantity = 0;
                                            opsProduct.QuantityTranfer = 0;
                                            opsProduct.QuantityBBGN = 0;
                                        }

                                        model.OPS_DITOProduct.Add(opsProduct);
                                        #endregion
                                    }

                                    if (string.IsNullOrEmpty(opsGroup.ORD_GroupProduct.ORD_Order.Note))
                                    {
                                        opsGroup.ORD_GroupProduct.ORD_Order.Note = group.Note;
                                    }
                                }
                            }

                            lstMasterID.Add(master.ID);
                        }
                    }

                    model.SaveChanges();

                    if (lstMasterID != null && lstMasterID.Count > 0 && objSetting.IsImportOnReceived)
                    {
                        HelperFinance.Truck_UpdateMaster(model, Account, lstMasterID);
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //Import Ext
        public DTOMONExtImportExcel MONExtImport_Data(DateTime dtFrom, DateTime dtTO, int cusId, int sID)
        {
            try
            {
                DTOMONExtImportExcel result = new DTOMONExtImportExcel();
                result.data = new List<DTOMONExtImport>();
                result.lstVehicle = new List<CATVehicle>();
                result.lstVendor = new List<DTOCustomer>();
                dtFrom = dtFrom.Date;
                dtTO = dtTO.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONExt objSetting = MONExtImport_Index_Setting_Get(sID);

                    result.data = model.OPS_DITOGroupProduct.Where(c => c.ORD_GroupProduct.ORD_Order.CustomerID == cusId && c.OPS_DITOMaster.ETD >= dtFrom && c.OPS_DITOMaster.ETD < dtTO
                        && c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID && c.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered
                        && (objSetting.IsReturnSetting == false ? c.ORD_GroupProduct.IsReturn != true : true)).Select(c => new DTOMONExtImport
                        {
                            ID = c.ID,
                            DNCode = c.DNCode,
                            SOCode = c.ORD_GroupProduct.SOCode,
                            OrderCode = c.ORD_GroupProduct.ORD_Order.Code,
                            ETARequest = c.ORD_GroupProduct.ETARequest,
                            MasterETDDate = c.OPS_DITOMaster.ETD,
                            MasterETDDatetime = c.OPS_DITOMaster.ETD,
                            OrderGroupETDDate = c.ORD_GroupProduct.ETD,
                            OrderGroupETDDatetime = c.ORD_GroupProduct.ETD,
                            CustomerID = c.ORD_GroupProduct.ORD_Order.CustomerID,
                            CustomerCode = c.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            CreatedDate = c.ORD_GroupProduct.ORD_Order.CreatedDate,
                            MasterCode = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.Code : string.Empty,
                            DriverName = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverName1 : string.Empty,
                            DriverTel = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverTel1 : string.Empty,
                            DriverCard = c.DITOMasterID.HasValue ? c.OPS_DITOMaster.DriverCard1 : string.Empty,
                            RegNo = c.DITOMasterID.HasValue && c.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            RequestDate = c.ORD_GroupProduct.ORD_Order.RequestDate,
                            LocationFromCode = c.ORD_GroupProduct.LocationFromID.HasValue ? c.ORD_GroupProduct.CUS_Location.Code : string.Empty,
                            LocationToCode = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.Code : string.Empty,
                            LocationToName = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.LocationName : string.Empty,
                            LocationToAddress = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            LocationToProvince = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName : string.Empty,
                            LocationToDistrict = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName : string.Empty,
                            DistributorCode = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                            DistributorName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            DistributorCodeName = c.ORD_GroupProduct.PartnerID > 0 ? c.ORD_GroupProduct.CUS_Partner.PartnerCode + "-" + c.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            Packing = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.Code,
                            PackingName = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.ProductName,
                            IsInvoice = c.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete ? true : false,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateFromLoadEnd = c.DateFromLoadEnd,
                            DateFromLoadStart = c.DateFromLoadStart,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            DateToLoadEnd = c.DateToLoadEnd,
                            DateToLoadStart = c.DateToLoadStart,
                            EconomicZone = c.ORD_GroupProduct.LocationToID.HasValue ? c.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone : string.Empty,
                            //DITOGroupProductStatusPODName = c.SYS_Var1.ValueOfVar,
                            IsOrigin = c.IsOrigin,
                            InvoiceBy = c.InvoiceBy,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceNote = c.InvoiceNote,
                            Note = c.Note,
                            OPSGroupNote1 = c.Note1,
                            OPSGroupNote2 = c.Note2,
                            ORDGroupNote1 = c.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.ORD_GroupProduct.Note2,
                            TOMasterNote1 = c.OPS_DITOMaster.Note1,
                            TOMasterNote2 = c.OPS_DITOMaster.Note2,
                            VendorName = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.CustomerName : string.Empty,
                            VendorCode = c.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOMaster.CUS_Customer.Code : string.Empty,
                            Description = c.ORD_GroupProduct.Description,
                            GroupOfProductCode = c.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            ChipNo = c.OPS_DITOMaster.Note1,
                            Temperature = c.OPS_DITOMaster.Note2,
                            Ton = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.IsKg ? c.Ton * 1000 : c.Ton,
                            TonBBGN = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.IsKg ? c.TonBBGN * 1000 : c.TonBBGN,
                            TonTranfer = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.IsKg ? c.TonTranfer * 1000 : c.TonTranfer,
                            CBM = c.CBM,
                            CBMBBGN = c.CBMBBGN,
                            CBMTranfer = c.CBMTranfer,
                            Quantity = c.Quantity,
                            QuantityBBGN = c.QuantityBBGN,
                            QuantityTranfer = c.QuantityTranfer,
                            VENLoadCodeID = c.VendorLoadID > 0 ? c.VendorLoadID.Value : 0,
                            VENLoadCode = c.VendorLoadID > 0 ? c.CUS_Customer.Code : string.Empty,
                            VENUnLoadCodeID = c.VendorUnLoadID > 0 ? c.VendorUnLoadID.Value : 0,
                            VENUnLoadCode = c.VendorUnLoadID > 0 ? c.CUS_Customer1.Code : string.Empty,
                            TonReturn = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().CUS_Product.IsKg ? c.TonReturn * 1000 : c.TonReturn,
                            CBMReturn = c.CBMReturn,
                            QuantityReturn = c.QuantityReturn,
                            InvoiceReturnNote = c.InvoiceReturnNote,
                            InvoiceReturnDate = c.InvoiceReturnDate,
                            ReasonCancelNote = c.ReasonCancelNote,
                            DateDN = c.DateDN,
                            ProductID = c.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID,
                        }).OrderBy(c => c.MasterCode).ToList();

                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    result.lstVendor = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    DTOCustomer home = new DTOCustomer();
                    home.ID = 0;
                    home.Code = "Xe nhà";
                    home.CustomerName = "Xe nhà";
                    result.lstVendor.Insert(0, home);

                    result.lstVehicle = model.CAT_Vehicle.Select(c => new CATVehicle
                    {
                        ID = c.ID,
                        RegNo = c.RegNo,
                        TypeOfVehicleID = c.TypeOfVehicleID

                    }).ToList();
                }

                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONExtImport_Index_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.CustomerID == Account.SYSCustomerID ? true : Account.ListCustomerID.Contains(c.CustomerID)) && c.Key == CUSSettingKey.MONExt.ToString()).Select(c => new DTOCUSSettingMONExt
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                        CustomerID = c.CustomerID,
                        SettingCustomerName = c.CUS_Customer.CustomerName
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingMONExt>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingMONExt MONExtImport_Index_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingMONExt result = new DTOCUSSettingMONExt();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingMONExt>(obj.Setting);
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONExtImport_Excel_Import(int sID, List<DTOMONExtImport> data)
        {
            try
            {
                DTOCUSSettingMONExt objSetting = MONExtImport_Index_Setting_Get(sID);
                List<int> lstChangeVen = new List<int>();
                List<int> lstOrderID = new List<int>();
                List<DTOORDData_Product> ListProduct = new List<DTOORDData_Product>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var isCus = objSetting.CustomerID < 1 || objSetting.CustomerID == Account.SYSCustomerID;
                    var isAdmin = Account.ListActionCode.Contains(SYSViewCode.ViewAdmin.ToString());

                    ListProduct = model.CUS_Product.Where(c => (isCus && isAdmin ? true : !isCus ? c.CUS_GroupOfProduct.CustomerID == objSetting.CustomerID : Account.ListCustomerID.Contains(c.CUS_GroupOfProduct.CustomerID))).Select(c => new DTOORDData_Product
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupOfProductID = c.GroupOfProductID,
                        ProductName = c.ProductName,
                        PackingID = c.PackingID,
                        PackingTypeGOP = c.PackingID > 0 ? c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon ? 1 : c.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM ? 2 : 3 : 0,
                        Length = c.Length,
                        Height = c.Height,
                        Width = c.Width,
                        Weight = c.Weight,
                        CBM = c.CBM,
                        IsKg = c.IsKg,
                        CustomerID = c.CUS_GroupOfProduct.CustomerID,
                        SortOrder = c.SortOrder,
                        IsDefault = c.IsDefault
                    }).ToList();

                    //Order by CustomerID
                    data = data.OrderBy(c => c.CustomerID).ToList();

                    //Check code
                    foreach (var item in data.Where(c => c.ExcelSuccess))
                    {
                        var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            #region Update
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            if (objSetting.VENLoadCode > 0)
                            {
                                if (obj.VendorLoadID != item.VENLoadCodeID)
                                {
                                    lstChangeVen.Add(obj.ID);
                                }
                            }
                            if (objSetting.VENUnLoadCode > 0)
                            {
                                if (obj.VendorUnLoadID != item.VENUnLoadCodeID)
                                {
                                    lstChangeVen.Add(obj.ID);
                                }
                            }

                            lstOrderID.Add(obj.ORD_GroupProduct.ORD_Order.ID);

                            //Qui đổi
                            var cusProduct = ListProduct.FirstOrDefault(c => c.ID == obj.ORD_GroupProduct.ORD_Product.FirstOrDefault().ProductID && c.CustomerID == obj.ORD_GroupProduct.ORD_Order.CustomerID);

                            if (cusProduct != null)
                            {
                                if (objSetting.IsSKU)
                                {
                                    if (objSetting.Ton > 0 || objSetting.CBM > 0 || objSetting.Quantity > 0)
                                    {
                                        switch (cusProduct.PackingTypeGOP)
                                        {
                                            case 1:
                                                if (cusProduct.IsKg)
                                                    item.Ton = item.Ton / 1000;
                                                if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                    item.Quantity = item.Ton / cusProduct.Weight.Value;
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBM = item.Quantity * cusProduct.CBM.Value;
                                                break;
                                            case 2:
                                                if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                    item.Quantity = item.CBM / cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.Ton = item.Quantity * cusProduct.Weight.Value;
                                                break;
                                            case 3:
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBM = item.Quantity * cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.Ton = item.Quantity * cusProduct.Weight.Value;
                                                break;
                                            default:
                                                break;
                                        }
                                        item.Ton = Math.Round(item.Ton, 5, MidpointRounding.AwayFromZero);
                                        item.CBM = Math.Round(item.CBM, 5, MidpointRounding.AwayFromZero);
                                        item.Quantity = Math.Round(item.Quantity, 5, MidpointRounding.AwayFromZero);
                                    }
                                    if (objSetting.TonBBGN > 0 || objSetting.CBMBBGN > 0 || objSetting.QuantityBBGN > 0)
                                    {
                                        switch (cusProduct.PackingTypeGOP)
                                        {
                                            case 1:
                                                if (cusProduct.IsKg)
                                                    item.TonBBGN = item.TonBBGN / 1000;
                                                if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                    item.QuantityBBGN = item.TonBBGN / cusProduct.Weight.Value;
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMBBGN = item.QuantityBBGN * cusProduct.CBM.Value;
                                                break;
                                            case 2:
                                                if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                    item.QuantityBBGN = item.CBMBBGN / cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonBBGN = item.QuantityBBGN * cusProduct.Weight.Value;
                                                break;
                                            case 3:
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMBBGN = item.QuantityBBGN * cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonBBGN = item.QuantityBBGN * cusProduct.Weight.Value;
                                                break;
                                            default:
                                                break;
                                        }
                                        item.TonBBGN = Math.Round(item.TonBBGN, 5, MidpointRounding.AwayFromZero);
                                        item.CBMBBGN = Math.Round(item.CBMBBGN, 5, MidpointRounding.AwayFromZero);
                                        item.QuantityBBGN = Math.Round(item.QuantityBBGN, 5, MidpointRounding.AwayFromZero);
                                    }
                                    if (objSetting.TonTranfer > 0 || objSetting.CBMTranfer > 0 || objSetting.QuantityTranfer > 0)
                                    {
                                        switch (cusProduct.PackingTypeGOP)
                                        {
                                            case 1:
                                                if (cusProduct.IsKg)
                                                    item.TonTranfer = item.TonTranfer / 1000;
                                                if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                    item.QuantityTranfer = item.TonTranfer / cusProduct.Weight.Value;
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMTranfer = item.QuantityTranfer * cusProduct.CBM.Value;
                                                break;
                                            case 2:
                                                if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                    item.QuantityTranfer = item.CBMTranfer / cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonTranfer = item.QuantityTranfer * cusProduct.Weight.Value;
                                                break;
                                            case 3:
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMTranfer = item.QuantityTranfer * cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonTranfer = item.QuantityTranfer * cusProduct.Weight.Value;
                                                break;
                                            default:
                                                break;
                                        }
                                        item.TonTranfer = Math.Round(item.TonTranfer, 5, MidpointRounding.AwayFromZero);
                                        item.CBMTranfer = Math.Round(item.CBMTranfer, 5, MidpointRounding.AwayFromZero);
                                        item.QuantityTranfer = Math.Round(item.QuantityTranfer, 5, MidpointRounding.AwayFromZero);
                                    }
                                    if (objSetting.TonReturn > 0 || objSetting.CBMReturn > 0 || objSetting.QuantityReturn > 0)
                                    {
                                        switch (cusProduct.PackingTypeGOP)
                                        {
                                            case 1:
                                                if (cusProduct.IsKg)
                                                    item.TonReturn = item.TonReturn / 1000;
                                                if (cusProduct.Weight.HasValue && cusProduct.Weight != 0)
                                                    item.QuantityReturn = item.TonReturn / cusProduct.Weight.Value;
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMReturn = item.QuantityReturn * cusProduct.CBM.Value;
                                                break;
                                            case 2:
                                                if (cusProduct.CBM.HasValue && cusProduct.CBM != 0)
                                                    item.QuantityReturn = item.CBMReturn / cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonReturn = item.QuantityReturn * cusProduct.Weight.Value;
                                                break;
                                            case 3:
                                                if (cusProduct.CBM.HasValue)
                                                    item.CBMReturn = item.QuantityReturn * cusProduct.CBM.Value;
                                                if (cusProduct.Weight.HasValue)
                                                    item.TonReturn = item.QuantityReturn * cusProduct.Weight.Value;
                                                break;
                                            default:
                                                break;
                                        }
                                        item.TonReturn = Math.Round(item.TonReturn, 5, MidpointRounding.AwayFromZero);
                                        item.CBMReturn = Math.Round(item.CBMReturn, 5, MidpointRounding.AwayFromZero);
                                        item.QuantityReturn = Math.Round(item.QuantityReturn, 5, MidpointRounding.AwayFromZero);
                                    }
                                }
                                else
                                {
                                    if (cusProduct.IsKg)
                                    {
                                        if (item.Ton > 0)
                                            item.Ton = item.Ton / 1000;
                                        if (item.TonBBGN > 0)
                                            item.TonBBGN = item.TonBBGN / 1000;
                                        if (item.TonTranfer > 0)
                                            item.TonTranfer = item.TonTranfer / 1000;
                                        if (item.TonReturn > 0)
                                            item.TonReturn = item.TonReturn / 1000;
                                    }
                                }
                            }
                            MONExtImport_Update(ref obj, item, objSetting, model);
                            #endregion
                        }
                        else
                        {
                            throw FaultHelper.BusinessFault(null, null, "Số thứ tự không hợp lệ.");
                        }
                    }
                    model.SaveChanges();

                    HelperFinance.Truck_UpdateGroup(model, Account, lstChangeVen.Distinct().ToList());
                    if (lstOrderID != null && lstOrderID.Count > 0)
                        HelperStatus.ORDOrder_Status(model, Account, lstOrderID.Distinct().ToList());
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private void MONExtImport_Update(ref OPS_DITOGroupProduct obj, DTOMONExtImport item, DTOCUSSettingMONExt objSetting, DataEntities model)
        {
            if (objSetting.DNCode > 0)
                obj.DNCode = item.DNCode;

            if (objSetting.SOCode > 0)
                obj.ORD_GroupProduct.SOCode = item.SOCode;

            if (objSetting.IsInvoice > 0)
                obj.DITOGroupProductStatusPODID = item.IsInvoice ? (-(int)SYSVarType.DITOGroupProductStatusPODComplete) : (-(int)SYSVarType.DITOGroupProductStatusPODWait);

            if (objSetting.DateFromCome > 0)
                obj.DateFromCome = item.DateFromCome;

            if (objSetting.DateFromLeave > 0)
                obj.DateFromLeave = item.DateFromLeave;

            if (objSetting.DateFromLoadEnd > 0)
                obj.DateFromLoadEnd = item.DateFromLoadEnd;

            if (objSetting.DateFromLoadStart > 0)
                obj.DateFromLoadStart = item.DateFromLoadStart;

            if (objSetting.DateToCome > 0)
                obj.DateToCome = item.DateToCome;

            if (objSetting.DateToLeave > 0)
                obj.DateToLeave = item.DateToLeave;

            if (objSetting.DateToLoadEnd > 0)
                obj.DateToLoadEnd = item.DateToLoadEnd;

            if (objSetting.DateToLoadStart > 0)
                obj.DateToLoadStart = item.DateToLoadStart;

            if (objSetting.InvoiceDate > 0)
                obj.InvoiceDate = item.InvoiceDate;

            if (objSetting.InvoiceNote > 0)
                obj.InvoiceNote = item.InvoiceNote;

            if (objSetting.Note > 0)
                obj.Note = item.Note;

            if (objSetting.OPSGroupNote1 > 0)
                obj.Note1 = item.OPSGroupNote1;

            if (objSetting.OPSGroupNote2 > 0)
                obj.Note2 = item.OPSGroupNote2;

            if (objSetting.ORDGroupNote1 > 0)
                obj.ORD_GroupProduct.Note1 = item.ORDGroupNote1;

            if (objSetting.ORDGroupNote2 > 0)
                obj.ORD_GroupProduct.Note2 = item.ORDGroupNote2;

            if (objSetting.TOMasterNote1 > 0)
                obj.OPS_DITOMaster.Note1 = item.TOMasterNote1;

            if (objSetting.TOMasterNote2 > 0)
                obj.OPS_DITOMaster.Note2 = item.TOMasterNote2;

            if (objSetting.ChipNo > 0 && obj.DITOMasterID > 0)
                obj.OPS_DITOMaster.Note1 = item.ChipNo;

            if (objSetting.Temperature > 0 && obj.DITOMasterID > 0)
                obj.OPS_DITOMaster.Note2 = item.Temperature;


            if (objSetting.IsSKU && (objSetting.Ton > 0 || objSetting.CBM > 0 || objSetting.Quantity > 0))
            {
                obj.Ton = item.Ton;
                obj.CBM = item.CBM;
                obj.Quantity = item.Quantity;
            }
            else
            {
                if (objSetting.Ton > 0)
                    obj.Ton = item.Ton;

                if (objSetting.CBM > 0)
                    obj.CBM = item.CBM;

                if (objSetting.Quantity > 0)
                    obj.Quantity = item.Quantity;
            }

            if (objSetting.IsSKU && (objSetting.TonBBGN > 0 || objSetting.CBMBBGN > 0 || objSetting.QuantityBBGN > 0))
            {
                obj.TonBBGN = item.TonBBGN;
                obj.CBMBBGN = item.CBMBBGN;
                obj.QuantityBBGN = item.QuantityBBGN;
            }
            else
            {
                if (objSetting.TonBBGN > 0)
                    obj.TonBBGN = item.TonBBGN;

                if (objSetting.CBMBBGN > 0)
                    obj.CBMBBGN = item.CBMBBGN;

                if (objSetting.QuantityBBGN > 0)
                    obj.QuantityBBGN = item.QuantityBBGN;
            }

            if (objSetting.IsSKU && (objSetting.TonTranfer > 0 || objSetting.CBMTranfer > 0 || objSetting.QuantityTranfer > 0))
            {
                obj.TonTranfer = item.TonTranfer;
                obj.CBMTranfer = item.CBMTranfer;
                obj.QuantityTranfer = item.QuantityTranfer;
            }
            else
            {
                if (objSetting.TonTranfer > 0)
                    obj.TonTranfer = item.TonTranfer;

                if (objSetting.CBMTranfer > 0)
                    obj.CBMTranfer = item.CBMTranfer;

                if (objSetting.QuantityTranfer > 0)
                    obj.QuantityTranfer = item.QuantityTranfer;
            }

            if (objSetting.VENLoadCode > 0)
                obj.VendorLoadID = item.VENLoadCodeID > 0 ? (int?)item.VENLoadCodeID : null;

            if (objSetting.VENUnLoadCode > 0)
                obj.VendorUnLoadID = item.VENUnLoadCodeID > 0 ? (int?)item.VENUnLoadCodeID : null;

            if (objSetting.IsSKU && (objSetting.TonReturn > 0 || objSetting.CBMReturn > 0 || objSetting.QuantityReturn > 0))
            {
                obj.TonReturn = item.TonReturn;
                obj.CBMReturn = item.CBMReturn;
                obj.QuantityReturn = item.QuantityReturn;
            }
            else
            {
                if (objSetting.TonReturn > 0)
                    obj.TonReturn = item.TonReturn;

                if (objSetting.CBMReturn > 0)
                    obj.CBMReturn = item.CBMReturn;

                if (objSetting.QuantityReturn > 0)
                    obj.QuantityReturn = item.QuantityReturn;
            }

            if (objSetting.InvoiceReturnNote > 0)
                obj.InvoiceReturnNote = item.InvoiceReturnNote;

            if (objSetting.InvoiceReturnDate > 0)
                obj.InvoiceReturnDate = item.InvoiceReturnDate;

            if (objSetting.InvoiceReturnNote > 0)
                obj.ReasonCancelNote = item.ReasonCancelNote;

            if (objSetting.DateDN > 0)
                obj.DateDN = item.DateDN;

            // Trường hợp tạo mới
            if (item.IsNew)
            {
                int? orderGroupID = obj.OrderGroupProductID;
                var oldORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == orderGroupID);
                var cusGroup = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == oldORDGroup.GroupOfProductID);
                var cusProduct = model.CUS_Product.FirstOrDefault(c => c.ID == oldORDGroup.ORD_Product.FirstOrDefault().ProductID);

                #region Tạo mới OPS_Product

                var opsProduct = new OPS_DITOProduct();
                opsProduct.CreatedDate = DateTime.Now;
                opsProduct.CreatedBy = Account.UserName;
                opsProduct.OPS_DITOGroupProduct = obj;
                opsProduct.ORD_Product = oldORDGroup.ORD_Product.FirstOrDefault();
                opsProduct.QuantityReturn = 0;
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                {
                    opsProduct.Quantity = obj.Ton;
                    opsProduct.QuantityTranfer = obj.TonTranfer;
                    opsProduct.QuantityBBGN = obj.TonBBGN;
                    opsProduct.QuantityReturn = obj.TonReturn;
                }
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                {
                    opsProduct.Quantity = obj.CBM;
                    opsProduct.QuantityTranfer = obj.CBMTranfer;
                    opsProduct.QuantityBBGN = obj.CBMBBGN;
                    opsProduct.QuantityReturn = obj.CBMReturn;
                }
                if (cusProduct.PackingID > 0 && cusProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                {
                    opsProduct.Quantity = obj.Quantity;
                    opsProduct.QuantityTranfer = obj.QuantityTranfer;
                    opsProduct.QuantityBBGN = obj.QuantityBBGN;
                    opsProduct.QuantityReturn = obj.QuantityReturn;
                }
                model.OPS_DITOProduct.Add(opsProduct);
                #endregion
            }
            else
            {
                #region Cập nhật cho OPSProduct
                int DITOGroupProductID = obj.ID;
                var opsProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == DITOGroupProductID);
                if (opsProduct != null)
                {
                    opsProduct.ModifiedDate = DateTime.Now;
                    opsProduct.ModifiedBy = Account.UserName;
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                    {
                        opsProduct.Quantity = obj.Ton;
                        opsProduct.QuantityTranfer = obj.TonTranfer;
                        opsProduct.QuantityBBGN = obj.TonBBGN;
                        opsProduct.QuantityReturn = obj.TonReturn;
                    }
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                    {
                        opsProduct.Quantity = obj.CBM;
                        opsProduct.QuantityTranfer = obj.CBMTranfer;
                        opsProduct.QuantityBBGN = obj.CBMBBGN;
                        opsProduct.QuantityReturn = obj.CBMReturn;
                    }
                    if (opsProduct.ORD_Product.CUS_Product.PackingID > 0 && opsProduct.ORD_Product.CUS_Product.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                    {
                        opsProduct.Quantity = obj.Quantity;
                        opsProduct.QuantityTranfer = obj.QuantityTranfer;
                        opsProduct.QuantityBBGN = obj.QuantityBBGN;
                        opsProduct.QuantityReturn = obj.QuantityReturn;
                    }
                }
                #endregion
            }

        }
        #endregion

        #region Input

        #region DI FLM fee(chi phí xe tải nhà)
        public DTOResult MONInput_DIFLMFee_List(string request, DateTime dtFrom, DateTime dtTO)
        {
            try
            {
                DTOResult result = new DTOResult();
                dtFrom = dtFrom.Date;
                dtTO = dtTO.Date;
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
                        c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.ETD >= dtFrom && c.ETD < dtTO).Select(c => new DTOMONDIFLMFee
                        {
                            ID = c.ID,
                            DITOMasterID = c.ID,
                            DITOMasterCode = c.Code,
                            VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
                            VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            AETA = c.ATA,
                            AETD = c.ATD,
                            DriverID1 = c.DriverID1 > 0 ? c.DriverID1.Value : -1,
                            DriverName1 = c.DriverID1 > 0 ? c.DriverName1 : string.Empty,
                            DriverName2 = c.DriverID2 > 0 ? c.DriverName2 : string.Empty,
                            TypeOfDriverID1 = c.TypeOfDriverID1 > 0 ? c.TypeOfDriverID1 : -1,
                            DriverID2 = c.DriverID2 > 0 ? c.DriverID2.Value : -1,
                            TypeOfDriverID2 = c.TypeOfDriverID2 > 0 ? c.TypeOfDriverID2 : -1,
                            SortOrder = c.SortOrder,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            TypeOfPaymentDITOMasterID = c.TypeOfPaymentDITOMasterID > 0 ? c.TypeOfPaymentDITOMasterID.Value : -1,
                            TypeOfPaymentName = c.TypeOfPaymentDITOMasterID == -(int)SYSVarType.TypeOfPaymentDITOMasterApproved ? "Đã duyệt" : c.TypeOfPaymentDITOMasterID == -(int)SYSVarType.TypeOfPaymentDITOMasterReject ? "Kiểm tra lại" : "Chờ duyệt",
                            IsApproved = c.TypeOfPaymentDITOMasterID == -(int)SYSVarType.TypeOfPaymentDITOMasterApproved,
                            ExIsOverNight = c.ExIsOverNight.HasValue ? c.ExIsOverNight.Value : false,
                            ExIsOverWeight = c.ExIsOverWeight.HasValue ? c.ExIsOverWeight.Value : false,
                            ExTotalDayOut = c.ExTotalDayOut > 0 ? c.ExTotalDayOut.Value : 0,
                            ExTotalJoin = c.ExTotalJoin > 0 ? c.ExTotalJoin.Value : 0,
                            TotalStationCost = c.OPS_DITOStation.Count(d => d.IsMonth == false) > 0 ? c.OPS_DITOStation.Where(d => d.IsMonth == false).Sum(d => d.Price) : 0,
                            TotalTroubleCost = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0,
                            KmStart = c.KMStart > 0 ? c.KMStart.Value : 0,
                            KmEnd = c.KMEnd > 0 ? c.KMEnd.Value : 0,
                            ApprovedBy = c.ApprovedBy,
                            CreatedBy = c.CreatedBy,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONDIFLMFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //public List<DTOMONDIFLMFeeExcel> MONInput_DIFLMFee_Export(DateTime dtFrom, DateTime dtTo)
        //{
        //    try
        //    {
        //        List<DTOMONDIFLMFeeExcel> result = new List<DTOMONDIFLMFeeExcel>();
        //        dtFrom = dtFrom.Date;
        //        dtTo = dtTo.Date;
        //        using (var model = new DataEntities())
        //        {
        //            result = model.OPS_DITOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
        //                c.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived && c.ETD >= dtFrom && c.ETD < dtTo).Select(c => new DTOMONDIFLMFeeExcel
        //                {
        //                    ID = c.ID,
        //                    DITOMasterID = c.ID,
        //                    DITOMasterCode = c.Code,
        //                    VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
        //                    VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
        //                    ETA = c.ETA,
        //                    ETD = c.ETD,
        //                    AETA = c.ATA,
        //                    AETD = c.ATD,
        //                    Driver1 = c.FLM_Driver != null ? new DTOFLMDriver { ID = c.FLM_Driver.ID, EmployeeCode = c.FLM_Driver.Code, DriverName = c.FLM_Driver.CAT_Driver.FirstName + " " + c.FLM_Driver.CAT_Driver.LastName } : null,
        //                    Driver2 = c.FLM_Driver1 != null ? new DTOFLMDriver { ID = c.FLM_Driver1.ID, EmployeeCode = c.FLM_Driver1.Code, DriverName = c.FLM_Driver1.CAT_Driver.FirstName + " " + c.FLM_Driver1.CAT_Driver.LastName } : null,
        //                    Driver3 = c.FLM_Driver2 != null ? new DTOFLMDriver { ID = c.FLM_Driver2.ID, EmployeeCode = c.FLM_Driver2.Code, DriverName = c.FLM_Driver2.CAT_Driver.FirstName + " " + c.FLM_Driver2.CAT_Driver.LastName } : null,
        //                    Driver4 = c.FLM_Driver3 != null ? new DTOFLMDriver { ID = c.FLM_Driver3.ID, EmployeeCode = c.FLM_Driver3.Code, DriverName = c.FLM_Driver3.CAT_Driver.FirstName + " " + c.FLM_Driver3.CAT_Driver.LastName } : null,
        //                    Driver5 = c.FLM_Driver4 != null ? new DTOFLMDriver { ID = c.FLM_Driver4.ID, EmployeeCode = c.FLM_Driver4.Code, DriverName = c.FLM_Driver4.CAT_Driver.FirstName + " " + c.FLM_Driver4.CAT_Driver.LastName } : null,
        //                    SortOrder = c.SortOrder,
        //                    Note1 = c.Note1,
        //                    Note2 = c.Note2,
        //                    TypeOfPaymentDITOMasterID = c.TypeOfPaymentDITOMasterID > 0 ? c.TypeOfPaymentDITOMasterID.Value : -1,
        //                    IsApproved = c.TypeOfPaymentDITOMasterID == -(int)SYSVarType.TypeOfPaymentDITOMasterApproved,
        //                    ExIsOverNight = c.ExIsOverNight.HasValue ? c.ExIsOverNight.Value : false,
        //                    ExIsOverWeight = c.ExIsOverWeight.HasValue ? c.ExIsOverWeight.Value : false,
        //                    ExTotalDayOut = c.ExTotalDayOut > 0 ? c.ExTotalDayOut.Value : 0,
        //                    ExTotalJoin = c.ExTotalJoin > 0 ? c.ExTotalJoin.Value : 0,
        //                    TotalStationCost = c.OPS_DITOStation.Count(d => d.IsMonth == false) > 0 ? c.OPS_DITOStation.Where(d => d.IsMonth == false).Sum(d => d.Price) : 0,
        //                    TotalTroubleCost = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0,
        //                    KmStart = c.KMStart > 0 ? c.KMStart.Value : 0,
        //                    KmEnd = c.KMEnd > 0 ? c.KMEnd.Value : 0,
        //                    CustomerCode = c.CUS_Customer.Code,
        //                    IsBidding = c.IsBidding,
        //                    CountOfStation = c.OPS_DITOStation.Count(),
        //                    CountOfTrouble = c.CAT_Trouble.Count(),
        //                    CountOfLocation = c.OPS_DITOLocation.Count(),
        //                    ListStationCost = c.OPS_DITOStation.Select(d => new DTOPODOPSDITOStation
        //                    {
        //                        ID = d.ID,
        //                        LocationID = d.LocationID,
        //                        LocationCode = d.CAT_Location.Code,
        //                        LocationName = d.CAT_Location.Location,
        //                        LocationAddress = d.CAT_Location.Address,
        //                        Price = d.Price
        //                    }).ToList(),
        //                    ListTroubleCost = c.CAT_Trouble.Select(e => new DTOPODCATTroubleCost
        //                    {
        //                        ID = e.ID,
        //                        GroupOfTroubleID = e.GroupOfTroubleID,
        //                        GroupOfTroubleCode = e.CAT_GroupOfTrouble.Code,
        //                        GroupOfTroubleName = e.CAT_GroupOfTrouble.Name,
        //                        Cost = e.CostOfVendor,
        //                        Note = e.Description,
        //                    }).OrderBy(e => e.GroupOfTroubleID).ToList(),
        //                    ListLocation = c.OPS_DITOLocation.Select(f => new CATLocation
        //                    {
        //                        ID = f.ID,
        //                        Code = f.CAT_Location.Code,
        //                        GroupOfLocationCode = f.CAT_Location.CAT_GroupOfLocation.Code,
        //                    }).ToList(),
        //                }).ToList();
        //        }
        //        return result;
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        //public void MONInput_DIFLMFee_Import(List<DTOMONDIFLMFeeImport> lst)
        //{
        //    try
        //    {
        //        int iDriver = -(int)SYSVarType.TypeOfDriverMain;
        //        int iDriverEx = -(int)SYSVarType.TypeOfDriverEx;
        //        int iLoader = -(int)SYSVarType.TypeOfDriverLoad;
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;
        //            if (lst != null)
        //            {
        //                foreach (var item in lst.Where(c => c.ExcelSuccess))
        //                {
        //                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.Code == item.DITOMasterCode);
        //                    if (objMaster != null)
        //                    {
        //                        objMaster.ModifiedBy = Account.UserName;
        //                        objMaster.ModifiedDate = DateTime.Now;

        //                        #region lưu tài xế
        //                        //tai xe 1
        //                        if (item.Driver1 != null)
        //                        {
        //                            objMaster.DriverID1 = item.Driver1.ID > 0 ? (int?)item.Driver1.ID : null;
        //                            objMaster.TypeOfDriverID1 = iDriver;

        //                            var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == objMaster.DriverID1);
        //                            if (driver1 != null)
        //                            {
        //                                objMaster.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
        //                                objMaster.DriverTel1 = driver1.CAT_Driver.Cellphone;
        //                                objMaster.DriverCard1 = driver1.CAT_Driver.CardNumber;
        //                            }
        //                            else
        //                            {
        //                                objMaster.DriverName1 = string.Empty;
        //                                objMaster.DriverTel1 = string.Empty;
        //                                objMaster.DriverCard1 = string.Empty;
        //                            }
        //                        }


        //                        //tai xe 2
        //                        if (item.Driver2 != null)
        //                        {
        //                            objMaster.DriverID2 = item.Driver2.ID > 0 ? (int?)item.Driver2.ID : null;
        //                            objMaster.TypeOfDriverID2 = iDriverEx;

        //                            var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == objMaster.DriverID2);
        //                            if (driver2 != null)
        //                            {
        //                                objMaster.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
        //                                objMaster.DriverTel2 = driver2.CAT_Driver.Cellphone;
        //                                objMaster.DriverCard2 = driver2.CAT_Driver.CardNumber;
        //                            }
        //                            else
        //                            {
        //                                objMaster.DriverName2 = string.Empty;
        //                                objMaster.DriverTel2 = string.Empty;
        //                                objMaster.DriverCard2 = string.Empty;
        //                            }
        //                        }

        //                        //tai xe 3
        //                        if (item.Driver3 != null)
        //                        {
        //                            objMaster.DriverID3 = item.Driver3.ID > 0 ? (int?)item.Driver3.ID : null;
        //                            objMaster.TypeOfDriverID3 = iLoader;
        //                        }

        //                        //tai xe 4
        //                        if (item.Driver4 != null)
        //                        {
        //                            objMaster.DriverID4 = item.Driver4.ID > 0 ? (int?)item.Driver4.ID : null;
        //                            objMaster.TypeOfDriverID4 = iLoader;
        //                        }

        //                        //tai xe 5
        //                        if (item.Driver5 != null)
        //                        {
        //                            objMaster.DriverID5 = item.Driver5.ID > 0 ? (int?)item.Driver5.ID : null;
        //                            objMaster.TypeOfDriverID5 = iLoader;
        //                        }
        //                        #endregion

        //                        #region lưu station
        //                        foreach (var station in item.ListStationCost)
        //                        {
        //                            var objStation = model.OPS_DITOStation.FirstOrDefault(c => c.ID == station.ID);
        //                            if (objStation != null)
        //                                objStation.Price = station.Price;
        //                        }
        //                        #endregion

        //                        #region lưu trouble
        //                        foreach (var trouble in item.ListTroubleCost)
        //                        {
        //                            var objTrouble = model.CAT_Trouble.FirstOrDefault(c => c.ID == trouble.ID);
        //                            if (objTrouble != null)
        //                                objTrouble.Cost = trouble.Cost;
        //                            else
        //                            {
        //                                objTrouble = new CAT_Trouble();
        //                                objTrouble.CreatedBy = Account.UserName;
        //                                objTrouble.CreatedDate = DateTime.Now;
        //                                objTrouble.DITOMasterID = item.DITOMasterID;
        //                                objTrouble.GroupOfTroubleID = trouble.GroupOfTroubleID;
        //                                objTrouble.Cost = trouble.Cost;
        //                                objTrouble.CostOfVendor = trouble.Cost;
        //                                objTrouble.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
        //                                objTrouble.Description = trouble.Note;
        //                                objTrouble.AttachmentFile = string.Empty;
        //                                objTrouble.DITOID = null;
        //                                model.CAT_Trouble.Add(objTrouble);
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                    else
        //                        throw FaultHelper.BusinessFault(null, null, "Mã chuyến không tồn tại");



        //                    model.SaveChanges();

        //                }

        //            }
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.ServiceFault(ex);
        //    }
        //}

        public void MONInput_DIFLMFee_Save(DTOMONDIFLMFee item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến ID" + item.DITOMasterID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        obj.Note1 = item.Note1;
                        obj.Note2 = item.Note2;

                        obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                        obj.TypeOfDriverID1 = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1 : null;

                        var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver1 != null)
                        {
                            obj.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
                            obj.DriverTel1 = driver1.CAT_Driver.Cellphone;
                            obj.DriverCard1 = driver1.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName1 = string.Empty;
                            obj.DriverTel1 = string.Empty;
                            obj.DriverCard1 = string.Empty;
                        }

                        obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                        obj.TypeOfDriverID2 = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2 : null;

                        var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver2 != null)
                        {
                            obj.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
                            obj.DriverTel2 = driver2.CAT_Driver.Cellphone;
                            obj.DriverCard2 = driver2.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName2 = string.Empty;
                            obj.DriverTel2 = string.Empty;
                            obj.DriverCard2 = string.Empty;
                        }

                        obj.ExIsOverNight = item.ExIsOverNight;
                        obj.ExIsOverWeight = item.ExIsOverWeight;
                        obj.ExTotalDayOut = item.ExTotalDayOut;
                        obj.ExTotalJoin = item.ExTotalJoin;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_DIFLMFee_Approved(List<int> lst, int type)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    int iStatus = -(int)SYSVarType.TroubleCostStatusApproved;
                    //int iPayment = -(int)SYSVarType.TypeOfPaymentDITOMasterApproved;
                    if (type == 2)
                    {
                        iStatus = -(int)SYSVarType.TroubleCostStatusReject;
                    }


                    foreach (var item in lst)
                    {
                        var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                        {

                            //obj.TypeOfPaymentDITOMasterID = iPayment;
                            if (type == 1)
                            {
                                obj.ApprovedBy = Account.UserName;
                                obj.ApprovedDate = DateTime.Now;
                            }
                            else
                            {
                                obj.ApprovedBy = string.Empty;
                                obj.ApprovedDate = null;
                            }
                            //chi phi phat sinh

                            foreach (var trouble in model.CAT_Trouble.Where(c => c.DITOMasterID == item).ToList())
                            {
                                trouble.TroubleCostStatusID = iStatus;
                                trouble.ModifiedBy = Account.UserName;
                                trouble.ModifiedDate = DateTime.Now;
                            }

                            //tram

                            foreach (var station in model.OPS_DITOStation.Where(c => c.DITOMasterID == item).ToList())
                            {
                                station.IsApproved = type == 1;
                                station.ApprovedBy = Account.UserName;
                                station.ApprovedDate = DateTime.Now;
                            }

                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONFLMDIInputDriver MONInput_DIFLMFee_GetDrivers(int DITOMasterID)
        {
            try
            {
                DTOMONFLMDIInputDriver result = new DTOMONFLMDIInputDriver();
                using (var model = new DataEntities())
                {
                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == DITOMasterID);
                    if (objMaster != null)
                    {
                        result.DITOMasterID = objMaster.ID;
                        result.DriverID1 = objMaster.DriverID1 > 0 ? objMaster.DriverID1 : -1;
                        result.DriverID2 = objMaster.DriverID2 > 0 ? objMaster.DriverID2 : -1;
                        result.DriverID3 = objMaster.DriverID3 > 0 ? objMaster.DriverID3 : -1;
                        result.DriverID4 = objMaster.DriverID4 > 0 ? objMaster.DriverID4 : -1;
                        result.DriverID5 = objMaster.DriverID5 > 0 ? objMaster.DriverID5 : -1;

                        result.TypeOfDriverID1 = objMaster.TypeOfDriverID1 > 0 ? objMaster.TypeOfDriverID1 : -1;
                        result.TypeOfDriverID2 = objMaster.TypeOfDriverID2 > 0 ? objMaster.TypeOfDriverID2 : -1;
                        result.TypeOfDriverID3 = objMaster.TypeOfDriverID3 > 0 ? objMaster.TypeOfDriverID3 : -1;
                        result.TypeOfDriverID4 = objMaster.TypeOfDriverID4 > 0 ? objMaster.TypeOfDriverID4 : -1;
                        result.TypeOfDriverID5 = objMaster.TypeOfDriverID5 > 0 ? objMaster.TypeOfDriverID5 : -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_DIFLMFee_SaveDrivers(DTOMONFLMDIInputDriver item, int DITOMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == DITOMasterID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến ID" + DITOMasterID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                        obj.TypeOfDriverID1 = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1 : null;

                        var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver1 != null)
                        {
                            obj.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
                            obj.DriverTel1 = driver1.CAT_Driver.Cellphone;
                            obj.DriverCard1 = driver1.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName1 = string.Empty;
                            obj.DriverTel1 = string.Empty;
                            obj.DriverCard1 = string.Empty;
                        }

                        obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                        obj.TypeOfDriverID2 = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2 : null;

                        var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver2 != null)
                        {
                            obj.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
                            obj.DriverTel2 = driver2.CAT_Driver.Cellphone;
                            obj.DriverCard2 = driver2.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName2 = string.Empty;
                            obj.DriverTel2 = string.Empty;
                            obj.DriverCard2 = string.Empty;
                        }

                        obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                        obj.TypeOfDriverID3 = item.TypeOfDriverID3 > 0 ? item.TypeOfDriverID3 : null;

                        obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                        obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                        obj.TypeOfDriverID4 = item.TypeOfDriverID4 > 0 ? item.TypeOfDriverID4 : null;
                        obj.TypeOfDriverID5 = item.TypeOfDriverID5 > 0 ? item.TypeOfDriverID5 : null;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_DIFLMFee_TroubleCostList(string request, int DITOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && c.DITOMasterID == DITOMasterID).Select(c => new DTOMONCATTroubleCost
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleCode = c.CAT_GroupOfTrouble.Code,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        Cost = c.CostOfVendor,
                        Note = c.Description,
                        DriverID = c.DriverID,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCATTroubleCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_DIFLMFee_TroubleCostNotIn_List(string request, int DITOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objMaster = model.OPS_DITOMaster.FirstOrDefault(c => c.ID == DITOMasterID);
                    if (objMaster != null)
                    {
                        var hasList = model.CAT_Trouble.Where(c => c.DITOMasterID > 0 && c.DITOMasterID == DITOMasterID).Select(c => c.GroupOfTroubleID).Distinct().ToList();
                        var query = model.CAT_GroupOfTrouble.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOMONCATTrouble
                        {
                            ID = c.ID,
                            GroupOfTroubleCode = c.Code,
                            GroupOfTroubleName = c.Name,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONCATTrouble>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_DIFLMFee_TroubleCostNotIn_SaveList(List<int> lst, int DITOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng GroupID
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.GroupOfTroubleID == item && c.DITOMasterID == DITOMasterID);
                        if (obj != null)
                            throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");
                    }

                    foreach (var item in lst)
                    {
                        var obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.DITOMasterID = DITOMasterID;
                        obj.GroupOfTroubleID = item;
                        obj.Cost = 0;
                        obj.CostOfVendor = 0;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
                        obj.Description = string.Empty;
                        obj.AttachmentFile = string.Empty;
                        obj.DITOID = null;
                        model.CAT_Trouble.Add(obj);
                    }
                    model.SaveChanges();
                    #endregion
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_DIFLMFee_TroubleCost_DeleteList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                            model.CAT_Trouble.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_DIFLMFee_TroubleCostSave(List<DTOMONCATTroubleCost> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.Cost = item.Cost;
                            obj.CostOfVendor = item.Cost;
                            obj.Description = item.Note;
                            obj.DriverID = item.DriverID;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_DIFLMFee_StationCostList(string request, int DITOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOStation.Where(c => c.DITOMasterID > 0 && c.DITOMasterID == DITOMasterID && c.IsMonth == false).Select(c => new DTOMONOPSDITOStation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        Price = c.Price
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSDITOStation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_DIFLMFee_StationCostSave(List<DTOMONOPSDITOStation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.OPS_DITOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                            obj.Price = item.Price;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONCATTrouble> PODGroupOfTrouble_List()
        {
            try
            {
                List<DTOMONCATTrouble> result = new List<DTOMONCATTrouble>();
                using (var model = new DataEntities())
                {
                    result = model.CAT_GroupOfTrouble.Select(c => new DTOMONCATTrouble
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.ID,
                        GroupOfTroubleCode = c.Code,
                        GroupOfTroubleName = c.Name,
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONInput_DIFLMFee_DriverList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EmployeeCode = c.Code,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        IsAssistant = c.IsAssistant
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region CO FLM fee(chi phí xe công nhà)
        public DTOResult MONInput_COFLMFee_List(string request, DateTime dtFrom, DateTime dtTO)
        {
            try
            {
                DTOResult result = new DTOResult();
                dtFrom = dtFrom.Date;
                dtTO = dtTO.Date;
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
                        c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.ETD >= dtFrom && c.ETD < dtTO).Select(c => new DTOMONCOFLMFee
                        {
                            ID = c.ID,
                            COTOMasterID = c.ID,
                            COTOMasterCode = c.Code,
                            VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
                            VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            AETA = c.ATA,
                            AETD = c.ATD,
                            DriverID1 = c.DriverID1 > 0 ? c.DriverID1.Value : -1,
                            TypeOfDriverID1 = c.TypeOfDriverID1 > 0 ? c.TypeOfDriverID1 : -1,
                            DriverID2 = c.DriverID2 > 0 ? c.DriverID2.Value : -1,
                            TypeOfDriverID2 = c.TypeOfDriverID2 > 0 ? c.TypeOfDriverID2 : -1,
                            SortOrder = c.SortOrder,
                            Note1 = string.Empty,
                            Note2 = string.Empty,
                            TypeOfPaymentCOTOMasterID = c.TypeOfPaymentCOTOMasterID > 0 ? c.TypeOfPaymentCOTOMasterID.Value : -1,
                            IsApproved = c.TypeOfPaymentCOTOMasterID == -(int)SYSVarType.TypeOfPaymentCOTOMasterApproved,
                            ExIsOverNight = c.ExIsOverNight.HasValue ? c.ExIsOverNight.Value : false,
                            ExIsOverWeight = c.ExIsOverWeight.HasValue ? c.ExIsOverWeight.Value : false,
                            ExTotalDayOut = c.ExTotalDayOut > 0 ? c.ExTotalDayOut.Value : 0,
                            ExTotalJoin = c.ExTotalJoin > 0 ? c.ExTotalJoin.Value : 0,
                            TotalStationCost = c.OPS_COTOStation.Count(d => d.IsMonth == false) > 0 ? c.OPS_COTOStation.Where(d => d.IsMonth == false).Sum(d => d.Price) : 0,
                            TotalTroubleCost = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0,
                            KmStart = c.KMStart > 0 ? c.KMStart.Value : 0,
                            KmEnd = c.KMEnd > 0 ? c.KMEnd.Value : 0
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCOFLMFee>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        //public List<DTOPODFLMDIInputExcel> MONInput_COFLMFee_Export(DateTime dtFrom, DateTime dtTo)
        //{
        //    try
        //    {
        //        List<DTOPODFLMDIInputExcel> result = new List<DTOPODFLMDIInputExcel>();
        //        dtFrom = dtFrom.Date;
        //        dtTo = dtTo.Date;
        //        using (var model = new DataEntities())
        //        {
        //            result = model.OPS_COTOMaster.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.VendorOfVehicleID == null || c.VendorOfVehicleID == Account.SYSCustomerID) &&
        //                c.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.ETD >= dtFrom && c.ETD < dtTo).Select(c => new DTOPODFLMDIInputExcel
        //                {
        //                    ID = c.ID,
        //                    DITOMasterID = c.ID,
        //                    DITOMasterCode = c.Code,
        //                    VehicleID = c.VehicleID > 0 ? c.VehicleID.Value : -1,
        //                    VehicleNo = c.VehicleID > 0 ? c.CAT_Vehicle.RegNo : string.Empty,
        //                    ETA = c.ETA,
        //                    ETD = c.ETD,
        //                    AETA = c.ATA,
        //                    AETD = c.ATD,
        //                    Driver1 = c.FLM_Driver != null ? new DTOFLMDriver { ID = c.FLM_Driver.ID, EmployeeCode = c.FLM_Driver.Code, DriverName = c.FLM_Driver.CAT_Driver.FirstName + " " + c.FLM_Driver.CAT_Driver.LastName } : null,
        //                    Driver2 = c.FLM_Driver1 != null ? new DTOFLMDriver { ID = c.FLM_Driver1.ID, EmployeeCode = c.FLM_Driver1.Code, DriverName = c.FLM_Driver1.CAT_Driver.FirstName + " " + c.FLM_Driver1.CAT_Driver.LastName } : null,
        //                    Driver3 = c.FLM_Driver2 != null ? new DTOFLMDriver { ID = c.FLM_Driver2.ID, EmployeeCode = c.FLM_Driver2.Code, DriverName = c.FLM_Driver2.CAT_Driver.FirstName + " " + c.FLM_Driver2.CAT_Driver.LastName } : null,
        //                    Driver4 = c.FLM_Driver3 != null ? new DTOFLMDriver { ID = c.FLM_Driver3.ID, EmployeeCode = c.FLM_Driver3.Code, DriverName = c.FLM_Driver3.CAT_Driver.FirstName + " " + c.FLM_Driver3.CAT_Driver.LastName } : null,
        //                    Driver5 = c.FLM_Driver4 != null ? new DTOFLMDriver { ID = c.FLM_Driver4.ID, EmployeeCode = c.FLM_Driver4.Code, DriverName = c.FLM_Driver4.CAT_Driver.FirstName + " " + c.FLM_Driver4.CAT_Driver.LastName } : null,
        //                    SortOrder = c.SortOrder,
        //                    Note1 = c.Note,
        //                    Note2 = "",
        //                    TypeOfPaymentDITOMasterID = c.TypeOfPaymentCOTOMasterID > 0 ? c.TypeOfPaymentCOTOMasterID.Value : -1,
        //                    IsApproved = c.TypeOfPaymentCOTOMasterID == -(int)SYSVarType.TypeOfPaymentDITOMasterApproved,
        //                    ExIsOverNight = c.ExIsOverNight.HasValue ? c.ExIsOverNight.Value : false,
        //                    ExIsOverWeight = c.ExIsOverWeight.HasValue ? c.ExIsOverWeight.Value : false,
        //                    ExTotalDayOut = c.ExTotalDayOut > 0 ? c.ExTotalDayOut.Value : 0,
        //                    ExTotalJoin = c.ExTotalJoin > 0 ? c.ExTotalJoin.Value : 0,
        //                    TotalStationCost = c.OPS_COTOStation.Count(d => d.IsMonth == false) > 0 ? c.OPS_COTOStation.Where(d => d.IsMonth == false).Sum(d => d.Price) : 0,
        //                    TotalTroubleCost = c.CAT_Trouble.Count() > 0 ? c.CAT_Trouble.Sum(d => d.Cost) : 0,
        //                    KmStart = c.KMStart > 0 ? c.KMStart.Value : 0,
        //                    KmEnd = c.KMEnd > 0 ? c.KMEnd.Value : 0,
        //                    CustomerCode = c.CUS_Customer.Code,
        //                    IsBidding = c.IsBidding,
        //                    CountOfStation = c.OPS_COTOStation.Count(),
        //                    CountOfTrouble = c.CAT_Trouble.Count(),
        //                    CountOfLocation = c.OPS_COTOLocation.Count(),
        //                    ListStationCost = c.OPS_COTOStation.Select(d => new DTOPODOPSDITOStation
        //                    {
        //                        ID = d.ID,
        //                        LocationID = d.LocationID,
        //                        LocationCode = d.CAT_Location.Code,
        //                        LocationName = d.CAT_Location.Location,
        //                        LocationAddress = d.CAT_Location.Address,
        //                        Price = d.Price
        //                    }).ToList(),
        //                    ListTroubleCost = c.CAT_Trouble.Select(e => new DTOMONCATTroubleCost
        //                    {
        //                        ID = e.ID,
        //                        GroupOfTroubleID = e.GroupOfTroubleID,
        //                        GroupOfTroubleCode = e.CAT_GroupOfTrouble.Code,
        //                        GroupOfTroubleName = e.CAT_GroupOfTrouble.Name,
        //                        Cost = e.CostOfVendor,
        //                        Note = e.Description,
        //                    }).OrderBy(e => e.GroupOfTroubleID).ToList(),
        //                    ListLocation = c.OPS_COTOLocation.Select(f => new CATLocation
        //                    {
        //                        ID = f.ID,
        //                        Code = f.CAT_Location.Code,
        //                        GroupOfLocationCode = f.CAT_Location.CAT_GroupOfLocation.Code,
        //                    }).ToList(),
        //                }).ToList();
        //        }
        //        return result;
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.BusinessFault(ex);
        //    }
        //}

        //public void MONInput_COFLMFee_Import(List<DTOPODFLMDIInputImport> lst)
        //{
        //    try
        //    {
        //        int iDriver = -(int)SYSVarType.TypeOfDriverMain;
        //        int iDriverEx = -(int)SYSVarType.TypeOfDriverEx;
        //        int iLoader = -(int)SYSVarType.TypeOfDriverLoad;
        //        using (var model = new DataEntities())
        //        {
        //            model.EventAccount = Account; model.EventRunning = false;
        //            if (lst != null)
        //            {
        //                foreach (var item in lst.Where(c => c.ExcelSuccess))
        //                {
        //                    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.Code == item.DITOMasterCode);
        //                    if (objMaster != null)
        //                    {
        //                        objMaster.ModifiedBy = Account.UserName;
        //                        objMaster.ModifiedDate = DateTime.Now;

        //                        #region lưu tài xế
        //                        tai xe 1
        //                        if (item.Driver1 != null)
        //                        {
        //                            objMaster.DriverID1 = item.Driver1.ID > 0 ? (int?)item.Driver1.ID : null;
        //                            objMaster.TypeOfDriverID1 = iDriver;

        //                            var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == objMaster.DriverID1);
        //                            if (driver1 != null)
        //                            {
        //                                objMaster.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
        //                                objMaster.DriverTel1 = driver1.CAT_Driver.Cellphone;
        //                                objMaster.DriverCard1 = driver1.CAT_Driver.CardNumber;
        //                            }
        //                            else
        //                            {
        //                                objMaster.DriverName1 = string.Empty;
        //                                objMaster.DriverTel1 = string.Empty;
        //                                objMaster.DriverCard1 = string.Empty;
        //                            }
        //                        }


        //                        tai xe 2
        //                        if (item.Driver2 != null)
        //                        {
        //                            objMaster.DriverID2 = item.Driver2.ID > 0 ? (int?)item.Driver2.ID : null;
        //                            objMaster.TypeOfDriverID2 = iDriverEx;

        //                            var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == objMaster.DriverID2);
        //                            if (driver2 != null)
        //                            {
        //                                objMaster.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
        //                                objMaster.DriverTel2 = driver2.CAT_Driver.Cellphone;
        //                                objMaster.DriverCard2 = driver2.CAT_Driver.CardNumber;
        //                            }
        //                            else
        //                            {
        //                                objMaster.DriverName2 = string.Empty;
        //                                objMaster.DriverTel2 = string.Empty;
        //                                objMaster.DriverCard2 = string.Empty;
        //                            }
        //                        }

        //                        tai xe 3
        //                        if (item.Driver3 != null)
        //                        {
        //                            objMaster.DriverID3 = item.Driver3.ID > 0 ? (int?)item.Driver3.ID : null;
        //                            objMaster.TypeOfDriverID3 = iLoader;
        //                        }

        //                        tai xe 4
        //                        if (item.Driver4 != null)
        //                        {
        //                            objMaster.DriverID4 = item.Driver4.ID > 0 ? (int?)item.Driver4.ID : null;
        //                            objMaster.TypeOfDriverID4 = iLoader;
        //                        }

        //                        tai xe 5
        //                        if (item.Driver5 != null)
        //                        {
        //                            objMaster.DriverID5 = item.Driver5.ID > 0 ? (int?)item.Driver5.ID : null;
        //                            objMaster.TypeOfDriverID5 = iLoader;
        //                        }
        //                        #endregion

        //                        #region lưu station
        //                        foreach (var station in item.ListStationCost)
        //                        {
        //                            var objStation = model.OPS_COTOStation.FirstOrDefault(c => c.ID == station.ID);
        //                            if (objStation != null)
        //                                objStation.Price = station.Price;
        //                        }
        //                        #endregion

        //                        #region lưu trouble
        //                        foreach (var trouble in item.ListTroubleCost)
        //                        {
        //                            var objTrouble = model.CAT_Trouble.FirstOrDefault(c => c.ID == trouble.ID);
        //                            if (objTrouble != null)
        //                                objTrouble.Cost = trouble.Cost;
        //                            else
        //                            {
        //                                objTrouble = new CAT_Trouble();
        //                                objTrouble.CreatedBy = Account.UserName;
        //                                objTrouble.CreatedDate = DateTime.Now;
        //                                objTrouble.COTOMasterID = item.DITOMasterID;
        //                                objTrouble.GroupOfTroubleID = trouble.GroupOfTroubleID;
        //                                objTrouble.Cost = trouble.Cost;
        //                                objTrouble.CostOfVendor = trouble.Cost;
        //                                objTrouble.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
        //                                objTrouble.Description = trouble.Note;
        //                                objTrouble.AttachmentFile = string.Empty;
        //                                objTrouble.COTOID = null;
        //                                model.CAT_Trouble.Add(objTrouble);
        //                            }
        //                        }
        //                        #endregion
        //                    }
        //                    else
        //                        throw FaultHelper.BusinessFault(null, null, "Mã chuyến không tồn tại");



        //                    model.SaveChanges();

        //                }

        //            }
        //        }
        //    }
        //    catch (FaultException<DTOError> ex)
        //    {
        //        throw ex;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw FaultHelper.ServiceFault(ex);
        //    }
        //}
        public void MONInput_COFLMFee_Save(DTOMONCOFLMFee item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item.ID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến ID" + item.COTOMasterID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        // obj.Note1 = item.Note1;
                        //obj.Note2 = item.Note2;

                        obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                        obj.TypeOfDriverID1 = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1 : null;

                        var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver1 != null)
                        {
                            obj.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
                            obj.DriverTel1 = driver1.CAT_Driver.Cellphone;
                            obj.DriverCard1 = driver1.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName1 = string.Empty;
                            obj.DriverTel1 = string.Empty;
                            obj.DriverCard1 = string.Empty;
                        }

                        obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                        obj.TypeOfDriverID2 = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2 : null;

                        var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver2 != null)
                        {
                            obj.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
                            obj.DriverTel2 = driver2.CAT_Driver.Cellphone;
                            obj.DriverCard2 = driver2.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName2 = string.Empty;
                            obj.DriverTel2 = string.Empty;
                            obj.DriverCard2 = string.Empty;
                        }

                        obj.ExIsOverNight = item.ExIsOverNight;
                        obj.ExIsOverWeight = item.ExIsOverWeight;
                        obj.ExTotalDayOut = item.ExTotalDayOut;
                        obj.ExTotalJoin = item.ExTotalJoin;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_COFLMFee_Approved(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    foreach (var item in lst)
                    {
                        var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == item);
                        if (obj != null && obj.TypeOfPaymentCOTOMasterID != -(int)SYSVarType.TypeOfPaymentCOTOMasterApproved)
                        {
                            obj.ApprovedBy = Account.UserName;
                            obj.ApprovedDate = DateTime.Now;
                            obj.TypeOfPaymentCOTOMasterID = -(int)SYSVarType.TypeOfPaymentCOTOMasterApproved;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONFLMCOInputDriver MONInput_COFLMFee_GetDrivers(int COTOMasterID)
        {
            try
            {
                DTOMONFLMCOInputDriver result = new DTOMONFLMCOInputDriver();
                using (var model = new DataEntities())
                {
                    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == COTOMasterID);
                    if (objMaster != null)
                    {
                        result.COTOMasterID = objMaster.ID;
                        result.DriverID1 = objMaster.DriverID1 > 0 ? objMaster.DriverID1 : -1;
                        result.DriverID2 = objMaster.DriverID2 > 0 ? objMaster.DriverID2 : -1;
                        result.DriverID3 = objMaster.DriverID3 > 0 ? objMaster.DriverID3 : -1;
                        result.DriverID4 = objMaster.DriverID4 > 0 ? objMaster.DriverID4 : -1;
                        result.DriverID5 = objMaster.DriverID5 > 0 ? objMaster.DriverID5 : -1;

                        result.TypeOfDriverID1 = objMaster.TypeOfDriverID1 > 0 ? objMaster.TypeOfDriverID1 : -1;
                        result.TypeOfDriverID2 = objMaster.TypeOfDriverID2 > 0 ? objMaster.TypeOfDriverID2 : -1;
                        result.TypeOfDriverID3 = objMaster.TypeOfDriverID3 > 0 ? objMaster.TypeOfDriverID3 : -1;
                        result.TypeOfDriverID4 = objMaster.TypeOfDriverID4 > 0 ? objMaster.TypeOfDriverID4 : -1;
                        result.TypeOfDriverID5 = objMaster.TypeOfDriverID5 > 0 ? objMaster.TypeOfDriverID5 : -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_COFLMFee_SaveDrivers(DTOMONFLMCOInputDriver item, int COTOMasterID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == COTOMasterID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy chuyến ID" + COTOMasterID);
                    else
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;

                        obj.DriverID1 = item.DriverID1 > 0 ? item.DriverID1 : null;
                        obj.TypeOfDriverID1 = item.TypeOfDriverID1 > 0 ? item.TypeOfDriverID1 : null;

                        var driver1 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID1);
                        if (driver1 != null)
                        {
                            obj.DriverName1 = driver1.CAT_Driver.LastName + " " + driver1.CAT_Driver.FirstName;
                            obj.DriverTel1 = driver1.CAT_Driver.Cellphone;
                            obj.DriverCard1 = driver1.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName1 = string.Empty;
                            obj.DriverTel1 = string.Empty;
                            obj.DriverCard1 = string.Empty;
                        }

                        obj.DriverID2 = item.DriverID2 > 0 ? item.DriverID2 : null;
                        obj.TypeOfDriverID2 = item.TypeOfDriverID2 > 0 ? item.TypeOfDriverID2 : null;

                        var driver2 = model.FLM_Driver.FirstOrDefault(c => c.ID == item.DriverID2);
                        if (driver2 != null)
                        {
                            obj.DriverName2 = driver2.CAT_Driver.LastName + " " + driver2.CAT_Driver.FirstName;
                            obj.DriverTel2 = driver2.CAT_Driver.Cellphone;
                            obj.DriverCard2 = driver2.CAT_Driver.CardNumber;
                        }
                        else
                        {
                            obj.DriverName2 = string.Empty;
                            obj.DriverTel2 = string.Empty;
                            obj.DriverCard2 = string.Empty;
                        }

                        obj.DriverID3 = item.DriverID3 > 0 ? item.DriverID3 : null;
                        obj.TypeOfDriverID3 = item.TypeOfDriverID3 > 0 ? item.TypeOfDriverID3 : null;

                        obj.DriverID4 = item.DriverID4 > 0 ? item.DriverID4 : null;
                        obj.DriverID5 = item.DriverID5 > 0 ? item.DriverID5 : null;
                        obj.TypeOfDriverID4 = item.TypeOfDriverID4 > 0 ? item.TypeOfDriverID4 : null;
                        obj.TypeOfDriverID5 = item.TypeOfDriverID5 > 0 ? item.TypeOfDriverID5 : null;

                        model.SaveChanges();
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_COFLMFee_TroubleCostList(string request, int COTOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CAT_Trouble.Where(c => c.COTOMasterID > 0 && c.COTOMasterID == COTOMasterID).Select(c => new DTOMONCATTroubleCost
                    {
                        ID = c.ID,
                        GroupOfTroubleID = c.GroupOfTroubleID,
                        GroupOfTroubleCode = c.CAT_GroupOfTrouble.Code,
                        GroupOfTroubleName = c.CAT_GroupOfTrouble.Name,
                        Cost = c.CostOfVendor,
                        Note = c.Description,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONCATTroubleCost>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_COFLMFee_TroubleCostNotIn_List(string request, int COTOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var objMaster = model.OPS_COTOMaster.FirstOrDefault(c => c.ID == COTOMasterID);
                    if (objMaster != null)
                    {
                        var hasList = model.CAT_Trouble.Where(c => c.COTOMasterID > 0 && c.COTOMasterID == COTOMasterID).Select(c => c.GroupOfTroubleID).Distinct().ToList();
                        var query = model.CAT_GroupOfTrouble.Where(c => !hasList.Contains(c.ID)).Select(c => new DTOMONCATTrouble
                        {
                            ID = c.ID,
                            GroupOfTroubleCode = c.Code,
                            GroupOfTroubleName = c.Name,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONCATTrouble>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_COFLMFee_TroubleCostNotIn_SaveList(List<int> lst, int COTOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    #region Kiểm tra trùng GroupID
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.GroupOfTroubleID == item && c.COTOMasterID == COTOMasterID);
                        if (obj != null)
                            throw FaultHelper.BusinessFault(null, null, "Mã đã sử dụng!");
                    }

                    foreach (var item in lst)
                    {
                        var obj = new CAT_Trouble();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.COTOMasterID = COTOMasterID;
                        obj.GroupOfTroubleID = item;
                        obj.Cost = 0;
                        obj.CostOfVendor = 0;
                        obj.TroubleCostStatusID = -(int)SYSVarType.TroubleCostStatusApproved;
                        obj.Description = string.Empty;
                        obj.AttachmentFile = string.Empty;
                        obj.COTOID = null;
                        model.CAT_Trouble.Add(obj);
                    }
                    model.SaveChanges();
                    #endregion
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_COFLMFee_TroubleCost_DeleteList(List<int> lst)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item);
                        if (obj != null)
                            model.CAT_Trouble.Remove(obj);
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_COFLMFee_TroubleCostSave(List<DTOMONCATTroubleCost> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.CAT_Trouble.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                        {
                            obj.Cost = item.Cost;
                            obj.CostOfVendor = item.Cost;
                            obj.Description = item.Note;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_COFLMFee_StationCostList(string request, int COTOMasterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_COTOStation.Where(c => c.COTOMasterID > 0 && c.COTOMasterID == COTOMasterID && c.IsMonth == false).Select(c => new DTOMONOPSCOTOStation
                    {
                        ID = c.ID,
                        LocationID = c.LocationID,
                        LocationCode = c.CAT_Location.Code,
                        LocationName = c.CAT_Location.Location,
                        LocationAddress = c.CAT_Location.Address,
                        Price = c.Price
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSCOTOStation>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_COFLMFee_StationCostSave(List<DTOMONOPSCOTOStation> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var obj = model.OPS_COTOStation.FirstOrDefault(c => c.ID == item.ID);
                        if (obj != null)
                            obj.Price = item.Price;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONInput_COFLMFee_DriverList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverID = c.DriverID,
                        EmployeeCode = c.Code,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName,
                        IsAssistant = c.IsAssistant
                    }).ToList();
                    result.Total = query.Count;
                    result.Data = query as IEnumerable<DTOFLMDriver>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region input production (nhap san luong nho)
        public DTOResult MONInput_InputProduction_List(string request, DateTime dtFrom, DateTime dtTO, List<int> listCustomerID, bool hasIsReturn)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    //if (listCustomerID == null || listCustomerID.Count == 0)
                    //    listCustomerID = Account.ListCustomerID.ToList();

                    var query = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID > 0 && c.OPS_DITOGroupProduct.OrderGroupProductID > 0 && (hasIsReturn == true ? true : (c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn != true)) && c.OPS_DITOGroupProduct.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID &&
                        c.OPS_DITOGroupProduct.DITOGroupProductStatusID != -(int)SYSVarType.DITOGroupProductStatusCancel && c.OPS_DITOGroupProduct.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterTendered &&
                        c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate >= dtFrom && c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate < dtTO && !c.OPS_DITOGroupProduct.IsClosed &&
                        listCustomerID.Contains(c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID))
                        .Select(c => new DTOMONInputProduction
                        {
                            ID = c.ID,
                            DITOGroupID = c.DITOGroupProductID,
                            OrderCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.Code,
                            RequestDate = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.RequestDate,
                            PartnerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.CAT_Partner.PartnerName : string.Empty,
                            PartnerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.PartnerID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Partner.PartnerCode : string.Empty,
                            LocationToAddress = c.OPS_DITOGroupProduct.ORD_GroupProduct.LocationToID > 0 ? c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.Address : string.Empty,
                            MasterCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.Code,
                            MasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                            RegNo = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                            IsComplete = c.OPS_DITOGroupProduct.DITOGroupProductStatusID == -(int)SYSVarType.DITOGroupProductStatusComplete ? 1 : 0,
                            IsInvoice = c.OPS_DITOGroupProduct.DITOGroupProductStatusPODID == -(int)SYSVarType.DITOGroupProductStatusPODComplete,
                            InvoiceBy = c.OPS_DITOGroupProduct.InvoiceBy,
                            InvoiceNote = c.OPS_DITOGroupProduct.InvoiceNote,
                            InvoiceDate = c.OPS_DITOGroupProduct.InvoiceDate.HasValue ? c.OPS_DITOGroupProduct.InvoiceDate.Value : DateTime.Now,
                            GroupOfProductCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupOfProductName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_GroupOfProduct.GroupName,
                            IsReturn = c.OPS_DITOGroupProduct.ORD_GroupProduct.IsReturn == true ? true : false,
                            DNCode = c.OPS_DITOGroupProduct.DNCode,
                            ProductName = string.Empty,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            TonBBGN = c.OPS_DITOGroupProduct.TonBBGN,
                            CBMBBGN = c.OPS_DITOGroupProduct.CBMBBGN,
                            QuantityBBGN = c.OPS_DITOGroupProduct.QuantityBBGN,
                            TonTranfer = c.OPS_DITOGroupProduct.TonTranfer,
                            CBMTranfer = c.OPS_DITOGroupProduct.CBMTranfer,
                            QuantityTranfer = c.OPS_DITOGroupProduct.QuantityTranfer,
                            Quantity = c.OPS_DITOGroupProduct.Quantity,
                            TonReturn = c.OPS_DITOGroupProduct.TonReturn,
                            CBMReturn = c.OPS_DITOGroupProduct.CBMReturn,
                            QuantityReturn = c.QuantityReturn,
                            TypeOfDITOGroupProductReturnID = c.OPS_DITOGroupProduct.TypeOfDITOGroupProductReturnID > 0 ? c.OPS_DITOGroupProduct.TypeOfDITOGroupProductReturnID.Value : -1,
                            TypeOfDITOGroupProductReturnName = c.OPS_DITOGroupProduct.TypeOfDITOGroupProductReturnID > 0 ? c.OPS_DITOGroupProduct.OPS_TypeOfDITOGroupProductReturn.TypeName : string.Empty,
                            InvoiceReturnBy = c.OPS_DITOGroupProduct.InvoiceReturnBy,
                            InvoiceReturnNote = c.OPS_DITOGroupProduct.InvoiceReturnNote,
                            InvoiceReturnDate = c.OPS_DITOGroupProduct.InvoiceReturnDate.HasValue ? c.OPS_DITOGroupProduct.InvoiceReturnDate.Value : DateTime.Now,
                            ReturnID = c.OPS_DITOGroupProduct.ORD_GroupProduct.ReturnID,
                            VendorLoadID = c.OPS_DITOGroupProduct.VendorLoadID > 0 ? !c.OPS_DITOGroupProduct.CUS_Customer.IsSystem ? c.OPS_DITOGroupProduct.VendorLoadID.Value : -1 : -1,
                            VendorLoadCode = c.OPS_DITOGroupProduct.VendorLoadID > 0 ? c.OPS_DITOGroupProduct.CUS_Customer.Code : string.Empty,
                            VendorUnLoadID = c.OPS_DITOGroupProduct.VendorUnLoadID > 0 ? !c.OPS_DITOGroupProduct.CUS_Customer1.IsSystem ? c.OPS_DITOGroupProduct.VendorUnLoadID.Value : -1 : -1,
                            VendorUnLoadCode = c.OPS_DITOGroupProduct.VendorUnLoadID > 0 ? c.OPS_DITOGroupProduct.CUS_Customer1.Code : string.Empty,


                            CustomerCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                            SOCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode == null ? string.Empty : c.OPS_DITOGroupProduct.ORD_GroupProduct.SOCode,
                            LocationFromCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location.Code,
                            LocationToCode = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.Code,
                            LocationToName = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.LocationName,
                            LocationToProvince = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_Province.ProvinceName,
                            LocationToDistrict = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.CAT_District.DistrictName,
                            DriverName = c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverName1,
                            DriverTel = c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverTel1,
                            DateFromCome = c.OPS_DITOGroupProduct.DateFromCome,
                            DateFromLeave = c.OPS_DITOGroupProduct.DateFromLeave,
                            DateFromLoadEnd = c.OPS_DITOGroupProduct.DateFromLoadEnd,
                            DateFromLoadStart = c.OPS_DITOGroupProduct.DateFromLoadStart,
                            DateToCome = c.OPS_DITOGroupProduct.DateToCome,
                            DateToLeave = c.OPS_DITOGroupProduct.DateToLeave,
                            DateToLoadEnd = c.OPS_DITOGroupProduct.DateToLoadEnd,
                            DateToLoadStart = c.OPS_DITOGroupProduct.DateToLoadStart,
                            EconomicZone = c.OPS_DITOGroupProduct.ORD_GroupProduct.CUS_Location1.CAT_Location.EconomicZone,
                            Note = c.OPS_DITOGroupProduct.Note,
                            Note1 = c.OPS_DITOGroupProduct.Note1,
                            Note2 = c.OPS_DITOGroupProduct.Note2,
                            Description = c.OPS_DITOGroupProduct.ORD_GroupProduct.Description,
                            VendorName = (c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == null || c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID) ? "Xe nhà" : c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName,
                            StatusOPSMaster = c.OPS_DITOGroupProduct.OPS_DITOMaster.SYS_Var.ValueOfVar,
                            StatusSOPOD = string.Empty,
                            DNABA = c.OPS_DITOGroupProduct.OPS_DITOMaster.Code,
                            ChipNo = c.OPS_DITOGroupProduct.OPS_DITOMaster.Note1,
                            Temperature = c.OPS_DITOGroupProduct.OPS_DITOMaster.Note2,
                            Ton = c.OPS_DITOGroupProduct.Ton,
                            CBM = c.OPS_DITOGroupProduct.CBM,
                            StatusOrder = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.SYS_Var.ValueOfVar,
                            HasReturn = false,
                            TotalReturn = 0,
                            ModifiedBy = c.OPS_DITOGroupProduct.ModifiedBy,

                            ExIsOverNight = c.OPS_DITOGroupProduct.OPS_DITOMaster.ExIsOverNight,
                            ExIsOverWeight = c.OPS_DITOGroupProduct.OPS_DITOMaster.ExIsOverWeight,
                            ExTotalDayOut = c.OPS_DITOGroupProduct.OPS_DITOMaster.ExTotalDayOut,
                            ExTotalJoin = c.OPS_DITOGroupProduct.OPS_DITOMaster.ExTotalJoin,
                            OPSDateConfig = c.OPS_DITOGroupProduct.OPS_DITOMaster.DateConfig,
                            OPSGroupProductDateConfig = c.OPS_DITOGroupProduct.DateConfig,
                            OrderDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.DateConfig,
                            OrderGroupProductDateConfig = c.OPS_DITOGroupProduct.ORD_GroupProduct.DateConfig,
                        }).ToDataSourceResult(CreateRequest(request));

                    var lst = query.Data.Cast<DTOMONInputProduction>().ToList();

                    foreach (var item in lst)
                    {
                        item.InvoiceDateString = item.InvoiceDate.Value.ToString("dd/MM");
                        item.InvoiceReturnDateString = item.InvoiceReturnDate.Value.ToString("dd/MM");
                    }

                    result.Data = lst;
                    result.Total = query.Total;


                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_InputProduction_Save(DTOMONInputProduction item, bool ispod)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    List<int> lstMasterID = new List<int>();

                    var objOPSGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == item.DITOGroupID);
                    if (objOPSGroup == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPS_DITOGroupProduct");
                    var objOPSProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (objOPSProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPS_DITOProduct");
                    var objORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == objOPSGroup.OrderGroupProductID);
                    if (objORDGroup == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy ORD_GroupProduct");
                    var objORDProduct = model.ORD_Product.FirstOrDefault(c => c.ID == objOPSProduct.OrderProductID);
                    if (objORDProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy ORD_Product");

                    #region lam tron

                    item.TonTranfer = Math.Round(item.TonTranfer, 9);
                    item.CBMTranfer = Math.Round(item.CBMTranfer, 9);
                    item.TonBBGN = Math.Round(item.TonBBGN, 9);
                    item.CBMBBGN = Math.Round(item.CBMBBGN, 9);
                    item.TonReturn = Math.Round(item.TonReturn, 6);
                    item.CBMReturn = Math.Round(item.CBMReturn, 6);

                    #endregion
                    //hang tra về
                    if (item.IsReturn)
                    {

                        #region ORD_GroupProduct
                        objORDGroup.ModifiedBy = Account.UserName;
                        objORDGroup.ModifiedDate = DateTime.Now;
                        #endregion

                        #region ORD_Product
                        objORDProduct.ModifiedBy = Account.UserName;
                        objORDProduct.ModifiedDate = DateTime.Now;

                        objORDProduct.Quantity = item.QuantityTranfer;
                        #endregion

                        #region qui doi tan khoi

                        if (objORDProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                        {
                            objORDGroup.Ton += item.QuantityTranfer;
                            objORDGroup.CBM += item.QuantityTranfer * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Quantity += item.QuantityTranfer * objORDProduct.ExchangeQuantity.Value;
                        }
                        if (objORDProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                        {
                            objORDGroup.CBM += item.QuantityTranfer;
                            objORDGroup.Ton += item.QuantityTranfer * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.QuantityTranfer * objORDProduct.ExchangeQuantity.Value;
                        }
                        if (objORDProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                        {
                            objORDGroup.CBM += item.QuantityTranfer * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Ton += item.QuantityTranfer * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.QuantityTranfer;
                        }
                        #endregion

                        #region OPS_DITOGroupProduct
                        objOPSGroup.ModifiedBy = Account.UserName;
                        objOPSGroup.ModifiedDate = DateTime.Now;
                        objOPSGroup.CBMTranfer = objORDGroup.CBM;
                        objOPSGroup.TonTranfer = objORDGroup.Ton;
                        objOPSGroup.QuantityTranfer = objORDGroup.Quantity;
                        #endregion

                        #region OPS_DITOProduct
                        objOPSProduct.ModifiedBy = Account.UserName;
                        objOPSProduct.ModifiedDate = DateTime.Now;
                        objOPSProduct.QuantityTranfer = objORDProduct.Quantity;
                        objOPSProduct.QuantityReturn = item.QuantityReturn;
                        #endregion


                        model.SaveChanges();
                    }
                    else
                    {
                        objOPSGroup.ModifiedBy = Account.UserName;
                        objOPSGroup.ModifiedDate = DateTime.Now;
                        objOPSGroup.OPS_DITOMaster.ExIsOverNight = item.ExIsOverNight;
                        objOPSGroup.OPS_DITOMaster.ExIsOverWeight = item.ExIsOverWeight;
                        objOPSGroup.OPS_DITOMaster.ExTotalDayOut = item.ExTotalDayOut;
                        objOPSGroup.OPS_DITOMaster.ExTotalJoin = item.ExTotalJoin;
                        objOPSGroup.InvoiceNote = item.InvoiceNote;
                        objOPSGroup.InvoiceDate = item.InvoiceDate;

                        if (ispod)
                        {
                            objOPSGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODComplete;
                        }

                        objOPSGroup.TonBBGN = item.TonBBGN;
                        objOPSGroup.CBMBBGN = item.CBMBBGN;
                        objOPSGroup.QuantityBBGN = item.QuantityBBGN;

                        objOPSGroup.TonTranfer = item.TonTranfer;
                        objOPSGroup.CBMTranfer = item.CBMTranfer;
                        objOPSGroup.QuantityTranfer = item.QuantityTranfer;

                        objOPSGroup.DNCode = item.DNCode;

                        objOPSGroup.TonReturn = item.TonReturn;
                        objOPSGroup.CBMReturn = item.CBMReturn;
                        objOPSGroup.QuantityReturn = item.QuantityReturn;
                        objOPSProduct.QuantityReturn = item.QuantityReturn;

                        if (item.VendorLoadID > 0) objOPSGroup.VendorLoadID = item.VendorLoadID;
                        else objOPSGroup.VendorLoadID = null;
                        if (item.VendorUnLoadID > 0) objOPSGroup.VendorUnLoadID = item.VendorUnLoadID;
                        else objOPSGroup.VendorUnLoadID = null;

                        if (string.IsNullOrEmpty(item.InvoiceReturnNote))
                        {
                            objOPSGroup.InvoiceReturnNote = string.Empty;
                            objOPSGroup.InvoiceReturnDate = null;
                            objOPSGroup.InvoiceReturnBy = string.Empty;
                        }
                        else
                        {
                            objOPSGroup.InvoiceReturnNote = item.InvoiceReturnNote;
                            objOPSGroup.InvoiceReturnDate = item.InvoiceReturnDate;
                            objOPSGroup.InvoiceReturnBy = Account.UserName;
                        }

                        if (item.TypeOfDITOGroupProductReturnID > 0)
                            objOPSGroup.TypeOfDITOGroupProductReturnID = item.TypeOfDITOGroupProductReturnID;
                        else objOPSGroup.TypeOfDITOGroupProductReturnID = null;

                        objOPSProduct.QuantityTranfer = item.QuantityTranfer;

                        objOPSGroup.DNCode = item.DNCode;
                        objOPSGroup.ORD_GroupProduct.SOCode = item.SOCode;
                        objOPSGroup.Note = item.Note;
                        objOPSGroup.Note1 = item.Note1;
                        objOPSGroup.Note2 = item.Note2;
                        objOPSGroup.DateFromCome = item.DateFromCome;
                        objOPSGroup.DateFromLeave = item.DateFromLeave;
                        objOPSGroup.DateFromLoadStart = item.DateFromLoadStart;
                        objOPSGroup.DateFromLoadEnd = item.DateFromLoadEnd;
                        objOPSGroup.DateToCome = item.DateToCome;
                        objOPSGroup.DateToLeave = item.DateToLeave;
                        objOPSGroup.DateToLoadStart = item.DateToLoadStart;
                        objOPSGroup.DateToLoadEnd = item.DateToLoadEnd;

                        model.SaveChanges();
                        if (objOPSGroup.DITOGroupProductStatusID < -(int)SYSVarType.DITOGroupProductStatusComplete && ispod)
                        {
                            lstMasterID.Add(objOPSGroup.DITOMasterID.Value);
                            HelperFinance.Truck_CompleteSchedule(model, Account, -1, objOPSGroup.ID);
                            HelperKPI.KPITime_DIPODChange(model, Account, new List<int> { objOPSGroup.ID });
                            HelperStatus.OPSDIMaster_Status(model, Account, lstMasterID);
                        }
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONInput_InputProduction_Vendor_List()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem && (Account.ListActionCode.Contains(ViewAdmin) || Account.ListCustomerID.Contains(c.ID))).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.ShortName
                    }).ToList();
                    query.Insert(0, new DTOCustomer { ID = -1, Code = " ", CustomerName = " " });
                    result.Total = query.Count;
                    result.Data = query;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONInput_InputProduction_ChangeComplete(List<int> lstDITOGroupID, bool isComplete)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    lstDITOGroupID = lstDITOGroupID.Distinct().ToList();
                    List<int> lstUpdate = new List<int>();
                    List<int> lstOrder = new List<int>();
                    var statusDITO = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                    if (isComplete)
                        statusDITO = -(int)SYSVarType.DITOGroupProductStatusComplete;
                    foreach (var groupID in lstDITOGroupID)
                    {
                        var obj = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == groupID);
                        if (obj != null && obj.IsClosed == false)
                        {
                            obj.DITOGroupProductStatusID = statusDITO;
                            if (isComplete)
                                lstUpdate.Add(obj.ID);
                            lstOrder.Add(obj.ORD_GroupProduct.OrderID);
                        }
                    }
                    model.SaveChanges();

                    foreach (var item in lstUpdate)
                    {
                        HelperFinance.Truck_CompleteSchedule(model, Account, -1, item);
                    }

                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOMONInputProductionSplitDN MONInput_InputProduction_SplitDNGet(int DITOGroupProductID)
        {
            try
            {
                DTOMONInputProductionSplitDN result = new DTOMONInputProductionSplitDN();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOProduct.Where(c => c.DITOGroupProductID == DITOGroupProductID).FirstOrDefault();
                    if (obj != null)
                    {
                        result.ID = obj.ID;
                        result.OrderProductID = obj.OrderProductID;
                        result.DITOGroupProductID = obj.DITOGroupProductID;
                        result.InvoiceDate = DateTime.Now;
                        result.InvoiceDateString = DateTime.Now.ToString("dd/MM");
                        result.InvoiceNote = string.Empty;
                        result.QuantityTranfer = obj.QuantityTranfer;
                        result.KMax = result.QuantityTranfer;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_InputProduction_SplitDNSave(DTOMONInputProductionSplitDN item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var objProduct = model.OPS_DITOProduct.Where(c => c.ID == item.ID).FirstOrDefault();
                    if (objProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");


                    var objGroupProduct = model.OPS_DITOGroupProduct.Where(c => c.ID == item.DITOGroupProductID).FirstOrDefault();
                    if (objGroupProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu Group");

                    if (objProduct.QuantityTranfer == item.QuantityTranfer)
                    {
                        objGroupProduct.InvoiceNote = item.InvoiceNote;
                        objGroupProduct.InvoiceDate = item.InvoiceDate;
                        objGroupProduct.InvoiceBy = Account.UserName;
                        objGroupProduct.ModifiedBy = Account.UserName;
                        objGroupProduct.ModifiedDate = DateTime.Now;
                        objGroupProduct.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                    }
                    else
                    {
                        var exTon = objProduct.ORD_Product.ExchangeTon;
                        var exCBM = objProduct.ORD_Product.ExchangeCBM;
                        var exQuan = objProduct.ORD_Product.ExchangeQuantity;
                        var package = objProduct.ORD_Product.CAT_Packing.TypeOfPackageID;

                        OPS_DITOGroupProduct objGroupProductNew = new OPS_DITOGroupProduct();
                        objGroupProductNew.CreatedBy = Account.UserName;
                        objGroupProductNew.CreatedDate = DateTime.Now;
                        model.OPS_DITOGroupProduct.Add(objGroupProductNew);
                        objGroupProductNew.DITOMasterID = objGroupProduct.DITOMasterID;
                        objGroupProductNew.OrderGroupProductID = objGroupProduct.OrderGroupProductID;
                        objGroupProductNew.LockedBy = objGroupProduct.LockedBy;

                        objGroupProductNew.Ton = item.QuantityTranfer * (double)exTon;
                        objGroupProductNew.CBM = item.QuantityTranfer * (double)exCBM;
                        objGroupProductNew.Quantity = item.QuantityTranfer * (double)exQuan;
                        objGroupProductNew.TonTranfer = item.QuantityTranfer * (double)exTon;
                        objGroupProductNew.CBMTranfer = item.QuantityTranfer * (double)exCBM;
                        objGroupProductNew.QuantityTranfer = item.QuantityTranfer * (double)exQuan;
                        objGroupProductNew.TonBBGN = item.QuantityTranfer * (double)exTon;
                        objGroupProductNew.CBMBBGN = item.QuantityTranfer * (double)exCBM;
                        objGroupProductNew.QuantityBBGN = item.QuantityTranfer * (double)exQuan;
                        objGroupProductNew.QuantityLoading = item.QuantityTranfer * (double)exQuan;

                        objGroupProductNew.Note = objGroupProduct.Note;
                        objGroupProductNew.IsInput = objGroupProduct.IsInput;
                        objGroupProductNew.GroupSort = objGroupProduct.GroupSort;
                        objGroupProductNew.DNCode = objGroupProduct.DNCode;
                        objGroupProductNew.DITOGroupProductStatusID = objGroupProduct.DITOGroupProductStatusID;
                        objGroupProductNew.DateFromCome = objGroupProduct.DateFromCome;
                        objGroupProductNew.DateFromLeave = objGroupProduct.DateFromLeave;
                        objGroupProductNew.DateFromLoadStart = objGroupProduct.DateFromLoadStart;
                        objGroupProductNew.DateFromLoadEnd = objGroupProduct.DateFromLoadEnd;
                        objGroupProductNew.DateToCome = objGroupProduct.DateToCome;
                        objGroupProductNew.DateToLeave = objGroupProduct.DateToLeave;
                        objGroupProductNew.DateToLoadStart = objGroupProduct.DateToLoadStart;
                        objGroupProductNew.DateToLoadEnd = objGroupProduct.DateToLoadEnd;
                        objGroupProductNew.Note1 = objGroupProduct.Note1;
                        objGroupProductNew.Note2 = objGroupProduct.Note2;
                        objGroupProductNew.IsOrigin = objGroupProduct.IsOrigin;

                        objGroupProductNew.InvoiceBy = Account.UserName;
                        objGroupProductNew.InvoiceDate = item.InvoiceDate;
                        objGroupProductNew.InvoiceNote = item.InvoiceNote;

                        objGroupProductNew.DateDN = objGroupProduct.DateDN;
                        objGroupProductNew.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                        objGroupProductNew.CUSRoutingID = objGroupProduct.CUSRoutingID;
                        objGroupProductNew.TonReturn = objGroupProduct.TonReturn;
                        objGroupProductNew.CBMReturn = objGroupProduct.CBMReturn;
                        objGroupProductNew.QuantityReturn = objGroupProduct.QuantityReturn;
                        objGroupProductNew.TypeOfDITOGroupProductReturnID = objGroupProduct.TypeOfDITOGroupProductReturnID;
                        objGroupProductNew.DateConfig = objGroupProduct.DateConfig;
                        objGroupProductNew.CATRoutingID = objGroupProduct.CATRoutingID;
                        objGroupProductNew.InvoiceReturnBy = objGroupProduct.InvoiceReturnBy;
                        objGroupProductNew.InvoiceReturnDate = objGroupProduct.InvoiceReturnDate;
                        objGroupProductNew.InvoiceReturnNote = objGroupProduct.InvoiceReturnNote;
                        objGroupProductNew.FINSort = objGroupProduct.FINSort;
                        objGroupProductNew.IsSplit = objGroupProduct.IsSplit;

                        OPS_DITOProduct objProductNew = new OPS_DITOProduct();
                        objProductNew.CreatedBy = Account.UserName;
                        objProductNew.CreatedDate = DateTime.Now;
                        objProductNew.OPS_DITOGroupProduct = objGroupProductNew;
                        objProductNew.OrderProductID = objProduct.OrderProductID;
                        model.OPS_DITOProduct.Add(objProductNew);
                        objProductNew.Quantity = item.QuantityTranfer * (double)exQuan;
                        objProductNew.QuantityTranfer = item.QuantityTranfer * (double)exQuan;
                        objProductNew.QuantityBBGN = item.QuantityTranfer * (double)exQuan;
                        objProductNew.Note = objProduct.Note;
                        objProductNew.QuantityReturn = objProduct.QuantityReturn;
                        objProductNew.QuantityExtReturn = objProduct.QuantityExtReturn;

                        //cap nhat cho item cu
                        objProduct.ModifiedBy = Account.UserName;
                        objProduct.ModifiedDate = DateTime.Now;
                        objProduct.Quantity = objProduct.Quantity - item.QuantityTranfer * (double)exQuan;
                        objProduct.QuantityTranfer = objProduct.QuantityTranfer - item.QuantityTranfer * (double)exQuan;
                        objProduct.QuantityBBGN = objProduct.QuantityBBGN - item.QuantityTranfer * (double)exQuan;

                        objGroupProduct.CreatedBy = Account.UserName;
                        objGroupProduct.CreatedDate = DateTime.Now;
                        objGroupProduct.Ton = objGroupProduct.Ton - item.QuantityTranfer * (double)exTon;
                        objGroupProduct.CBM = objGroupProduct.CBM - item.QuantityTranfer * (double)exCBM;
                        objGroupProduct.Quantity = objGroupProduct.Quantity - item.QuantityTranfer * (double)exQuan;
                        objGroupProduct.TonTranfer = objGroupProduct.TonTranfer - item.QuantityTranfer * (double)exTon;
                        objGroupProduct.CBMTranfer = objGroupProduct.CBMTranfer - item.QuantityTranfer * (double)exCBM;
                        objGroupProduct.QuantityTranfer = objGroupProduct.QuantityTranfer - item.QuantityTranfer * (double)exQuan;
                        objGroupProduct.TonBBGN = objGroupProduct.TonBBGN - item.QuantityTranfer * (double)exTon;
                        objGroupProduct.CBMBBGN = objGroupProduct.CBMBBGN - item.QuantityTranfer * (double)exCBM;
                        objGroupProduct.QuantityBBGN = objGroupProduct.QuantityBBGN - item.QuantityTranfer * (double)exQuan;
                        objGroupProduct.QuantityLoading = objGroupProduct.QuantityLoading - item.QuantityTranfer * (double)exQuan;
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONInputProductionAddReturnData MONInput_InputProduction_AddReturnGet(int DITOGroupProductID)
        {
            try
            {
                DTOMONInputProductionAddReturnData result = new DTOMONInputProductionAddReturnData();
                result.ItemReturn = new DTOMONInputProductionAddReturn();
                result.ListGroupProduct = new List<CUSGroupOfProduct>();
                result.ListProduct = new List<CUSProduct>();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOGroupProduct.Where(c => c.ID == DITOGroupProductID).FirstOrDefault();
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPS_DITOGroupProduct");
                    var customerID = obj.ORD_GroupProduct.ORD_Order.CustomerID;

                    var lstGroupProduct = model.CUS_GroupOfProduct.Where(c => c.HasReturn == true && c.CustomerID == customerID && c.CUS_Product.Count > 0).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.ListGroupProduct.AddRange(lstGroupProduct);
                    var lstGOPID = result.ListGroupProduct.Select(c => c.ID).ToList();

                    var lstProduct = model.CUS_Product.Where(c => lstGOPID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName
                    }).ToList();
                    result.ListProduct.AddRange(lstProduct);

                    var objORDProductReturn = model.ORD_Product.FirstOrDefault(c => c.ORD_GroupProduct.ReturnID == obj.OrderGroupProductID.Value);

                    if (objORDProductReturn != null)
                    {
                        result.ItemReturn = model.OPS_DITOProduct.Where(c => c.OrderProductID == objORDProductReturn.ID).Select(c => new DTOMONInputProductionAddReturn
                        {
                            ID = c.ID,
                            DITOGroupID = obj.ID,
                            GroupProductID = c.ORD_Product.ORD_GroupProduct.GroupOfProductID > 0 ? c.ORD_Product.ORD_GroupProduct.GroupOfProductID.Value : -1,
                            ProductID = c.ORD_Product.ProductID,
                            Quantity = c.Quantity,
                        }).FirstOrDefault();
                    }
                    else
                    {
                        result.ItemReturn.ID = -1;
                        result.ItemReturn.DITOGroupID = -1;
                        result.ItemReturn.GroupProductID = -1;
                        var objGOP = result.ListGroupProduct.FirstOrDefault();
                        if (objGOP != null) result.ItemReturn.GroupProductID = objGOP.ID;
                        result.ItemReturn.ProductID = -1;
                        var objPro = result.ListProduct.Where(c => c.GroupOfProductID == result.ItemReturn.GroupProductID).FirstOrDefault();
                        if (objPro != null) result.ItemReturn.ProductID = objPro.ID;

                        result.ItemReturn.Quantity = obj.Quantity;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONInputProductionAddReturnData MONInput_InputProduction_AddReturn_EditGet(int DITOProductID)
        {
            try
            {
                DTOMONInputProductionAddReturnData result = new DTOMONInputProductionAddReturnData();
                result.ItemReturn = new DTOMONInputProductionAddReturn();
                result.ListGroupProduct = new List<CUSGroupOfProduct>();
                result.ListProduct = new List<CUSProduct>();
                using (var model = new DataEntities())
                {
                    var obj = model.OPS_DITOProduct.Where(c => c.ID == DITOProductID).FirstOrDefault();
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPS_DITOProduct");
                    var objORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == obj.OPS_DITOGroupProduct.ORD_GroupProduct.ReturnID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy ORD_GroupProduct");
                    var objOPSGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.OrderGroupProductID == objORDGroup.ID);
                    if (obj == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy OPS_DITOGroupProduct");
                    var customerID = obj.OPS_DITOGroupProduct.ORD_GroupProduct.ORD_Order.CustomerID;

                    var lstGroupProduct = model.CUS_GroupOfProduct.Where(c => c.HasReturn == true && c.CustomerID == customerID && c.CUS_Product.Count > 0).Select(c => new CUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                        GroupName = c.GroupName
                    }).ToList();
                    result.ListGroupProduct.AddRange(lstGroupProduct);
                    var lstGOPID = result.ListGroupProduct.Select(c => c.ID).ToList();

                    var lstProduct = model.CUS_Product.Where(c => lstGOPID.Contains(c.GroupOfProductID)).Select(c => new CUSProduct
                    {
                        ID = c.ID,
                        GroupOfProductID = c.GroupOfProductID,
                        Code = c.Code,
                        ProductName = c.ProductName
                    }).ToList();
                    result.ListProduct.AddRange(lstProduct);


                    result.ItemReturn.ID = obj.ID;
                    result.ItemReturn.DITOGroupID = objOPSGroup.ID;
                    result.ItemReturn.GroupProductID = obj.ORD_Product.ORD_GroupProduct.GroupOfProductID > 0 ? obj.ORD_Product.ORD_GroupProduct.GroupOfProductID.Value : -1;
                    result.ItemReturn.ProductID = obj.ORD_Product.ProductID;
                    result.ItemReturn.Quantity = obj.Quantity;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_InputProduction_AddReturnSave(DTOMONInputProductionAddReturn item, int DITOGroupProductID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var objOPSGroupOld = model.OPS_DITOGroupProduct.Where(c => c.ID == DITOGroupProductID).FirstOrDefault();
                    if (objOPSGroupOld == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPSGroup");

                    var objOPSProductOld = model.OPS_DITOProduct.FirstOrDefault(c => c.DITOGroupProductID == objOPSGroupOld.ID);
                    if (objOPSProductOld == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPSProduct");

                    var objORDGroupOld = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == objOPSGroupOld.OrderGroupProductID);
                    if (objORDGroupOld == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu ORDGroup");

                    var objORDProductOld = model.ORD_Product.FirstOrDefault(c => c.ID == objOPSProductOld.OrderProductID);
                    if (objORDProductOld == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu ORDProduct");

                    var objCUSGOP = model.CUS_GroupOfProduct.FirstOrDefault(c => c.ID == item.GroupProductID);
                    if (objCUSGOP == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu nhóm hàng");
                    var objCUSProduct = model.CUS_Product.FirstOrDefault(c => c.ID == item.ProductID);
                    if (objCUSProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu hàng");

                    var objORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ReturnID == objORDGroupOld.ID);
                    //chua co tra ve
                    if (objORDGroup == null)
                    {
                        #region ORD_GroupProduct
                        objORDGroup = new ORD_GroupProduct();
                        objORDGroup.CreatedBy = Account.UserName;
                        objORDGroup.CreatedDate = DateTime.Now;
                        objORDGroup.OrderID = objORDGroupOld.OrderID;
                        objORDGroup.ContainerID = objORDGroupOld.ContainerID;

                        objORDGroup.Description = objORDGroupOld.Description;
                        objORDGroup.SOCode = objORDGroupOld.SOCode;
                        objORDGroup.PriceOfGOPID = objCUSGOP.PriceOfGOPID;
                        objORDGroup.PackingID = objORDGroupOld.PackingID;
                        objORDGroup.LocationFromID = objORDGroupOld.LocationFromID;
                        objORDGroup.LocationToID = objORDGroupOld.LocationToID;
                        objORDGroup.DateConfig = objORDGroupOld.DateConfig;
                        objORDGroup.ETD = objORDGroupOld.ETD;
                        objORDGroup.ETA = objORDGroupOld.ETA;
                        objORDGroup.Price = objORDGroupOld.Price;
                        objORDGroup.CUSRoutingID = objORDGroupOld.CUSRoutingID;
                        objORDGroup.DNCode = objORDGroupOld.DNCode;
                        objORDGroup.ETARequest = objORDGroupOld.ETARequest;
                        objORDGroup.PartnerID = objORDGroupOld.PartnerID;
                        objORDGroup.IsReturn = true;
                        objORDGroup.ReturnID = objORDGroupOld.ID;

                        //cap nhat nhom, tan khoi sl
                        objORDGroup.GroupOfProductID = item.GroupProductID;
                        objORDGroup.Ton = 0;
                        objORDGroup.CBM = 0;
                        objORDGroup.Quantity = 0;

                        model.ORD_GroupProduct.Add(objORDGroup);
                        #endregion

                        #region ORD_Product
                        var objORDProduct = new ORD_Product();
                        objORDProduct.ORD_GroupProduct = objORDGroup;
                        objORDProduct.CreatedBy = Account.UserName;
                        objORDProduct.CreatedDate = DateTime.Now;
                        objORDProduct.PackingID = objCUSProduct.PackingID;
                        objORDProduct.ProductID = item.ProductID;
                        objORDProduct.Quantity = item.Quantity;
                        model.ORD_Product.Add(objORDProduct);
                        #endregion

                        #region qui doi tan khoi
                        objORDProduct.PackingID = objCUSProduct.PackingID;
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                        {
                            objORDProduct.ExchangeTon = 1;
                            objORDProduct.ExchangeCBM = 0;
                            objORDProduct.ExchangeQuantity = 0;
                            if (objCUSProduct.Weight > 0 && objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeCBM = objCUSProduct.CBM / objCUSProduct.Weight;
                            if (objCUSProduct.Weight > 0)
                                objORDProduct.ExchangeQuantity = 1 / objCUSProduct.Weight;

                            objORDGroup.Ton += item.Quantity;
                            objORDGroup.CBM += item.Quantity * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Quantity += item.Quantity * objORDProduct.ExchangeQuantity.Value;

                        }
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                        {
                            objORDProduct.ExchangeCBM = 1;
                            objORDProduct.ExchangeTon = 0;
                            objORDProduct.ExchangeQuantity = 0;

                            objORDProduct.ExchangeCBM = 1;
                            if (objCUSProduct.Weight > 0 && objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeTon = objCUSProduct.Weight.Value / objCUSProduct.CBM.Value;
                            if (objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeQuantity = 1 / objCUSProduct.CBM;

                            objORDGroup.CBM += item.Quantity;
                            objORDGroup.Ton += item.Quantity * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.Quantity * objORDProduct.ExchangeQuantity.Value;

                        }
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                        {
                            objORDProduct.ExchangeQuantity = 1;
                            objORDProduct.ExchangeTon = objCUSProduct.Weight > 0 ? objCUSProduct.Weight : 0;
                            objORDProduct.ExchangeCBM = objCUSProduct.CBM > 0 ? objCUSProduct.CBM : 0;

                            objORDGroup.CBM += item.Quantity * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Ton += item.Quantity * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.Quantity;
                        }
                        #endregion

                        #region OPS_DITOGroupProduct
                        var objOPSGroup = new OPS_DITOGroupProduct();
                        objOPSGroup.ORD_GroupProduct = objORDGroup;
                        objOPSGroup.DITOMasterID = objOPSGroupOld.DITOMasterID;
                        objOPSGroup.CBM = objORDGroup.CBM;
                        objOPSGroup.Ton = objORDGroup.Ton;
                        objOPSGroup.Quantity = objORDGroup.Quantity;
                        objOPSGroup.CBMTranfer = objORDGroup.CBM;
                        objOPSGroup.TonTranfer = objORDGroup.Ton;
                        objOPSGroup.QuantityTranfer = objORDGroup.Quantity;
                        objOPSGroup.CBMBBGN = objORDGroup.CBM;
                        objOPSGroup.QuantityBBGN = objORDGroup.Quantity;
                        objOPSGroup.TonBBGN = objORDGroup.Ton;
                        objOPSGroup.QuantityLoading = objORDGroup.Quantity;
                        objOPSGroup.Note1 = objOPSGroupOld.Note;
                        objOPSGroup.DNCode = string.Empty;
                        objOPSGroup.DITOGroupProductStatusID = -(int)SYSVarType.DITOGroupProductStatusWaiting;
                        objOPSGroup.DITOGroupProductStatusPODID = -(int)SYSVarType.DITOGroupProductStatusPODWait;
                        objOPSGroup.CreatedDate = DateTime.Now;
                        objOPSGroup.CreatedBy = Account.UserName;
                        objOPSGroup.IsOrigin = objOPSGroupOld.IsOrigin;
                        objOPSGroup.IsInput = objOPSGroupOld.IsInput;
                        objOPSGroup.GroupSort = objOPSGroupOld.GroupSort;
                        objOPSGroup.DateFromCome = objOPSGroupOld.DateFromCome;
                        objOPSGroup.DateFromLeave = objOPSGroupOld.DateFromLeave;
                        objOPSGroup.DateFromLoadEnd = objOPSGroupOld.DateFromLoadEnd;
                        objOPSGroup.DateFromLoadStart = objOPSGroupOld.DateFromLoadStart;
                        objOPSGroup.DateToCome = objOPSGroupOld.DateToCome;
                        objOPSGroup.DateToLeave = objOPSGroupOld.DateToLeave;
                        objOPSGroup.DateToLoadEnd = objOPSGroupOld.DateToLoadEnd;
                        objOPSGroup.DateToLoadStart = objOPSGroupOld.DateToLoadStart;
                        objOPSGroup.Note = objOPSGroupOld.Note;
                        objOPSGroup.Note1 = objOPSGroupOld.Note1;
                        objOPSGroup.Note2 = objOPSGroupOld.Note2;
                        objOPSGroup.InvoiceBy = objOPSGroupOld.InvoiceBy;
                        objOPSGroup.InvoiceDate = objOPSGroupOld.InvoiceDate;
                        objOPSGroup.InvoiceNote = objOPSGroupOld.InvoiceNote;
                        objOPSGroup.DateDN = objOPSGroupOld.DateDN;

                        model.OPS_DITOGroupProduct.Add(objOPSGroup);
                        #endregion

                        #region OPS_DITOProduct
                        var objOPSProduct = new OPS_DITOProduct();
                        objOPSProduct.CreatedDate = DateTime.Now;
                        objOPSProduct.CreatedBy = Account.UserName;
                        objOPSProduct.OPS_DITOGroupProduct = objOPSGroup;
                        objOPSProduct.ORD_Product = objORDProduct;
                        model.OPS_DITOProduct.Add(objOPSProduct);

                        objOPSProduct.Quantity = objORDProduct.Quantity;
                        objOPSProduct.QuantityTranfer = objORDProduct.Quantity;
                        objOPSProduct.QuantityBBGN = objORDProduct.Quantity;
                        objOPSProduct.QuantityReturn = objORDProduct.Quantity;
                        #endregion
                    }
                    else
                    {
                        var objORDProduct = model.ORD_Product.FirstOrDefault(c => c.GroupProductID == objORDGroup.ID);
                        if (objORDProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu hàng");

                        var objOPSGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.OrderGroupProductID == objORDGroup.ID);
                        if (objOPSGroup == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS Group");

                        var objOPSProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.OrderProductID == objORDProduct.ID);
                        if (objOPSProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS product");

                        #region ORD_GroupProduct
                        objORDGroup.ModifiedBy = Account.UserName;
                        objORDGroup.ModifiedDate = DateTime.Now;
                        objORDGroup.GroupOfProductID = item.GroupProductID;
                        #endregion

                        #region ORD_Product
                        objORDProduct.ModifiedBy = Account.UserName;
                        objORDProduct.ModifiedDate = DateTime.Now;

                        objORDProduct.ProductID = item.ProductID;
                        objORDProduct.Quantity = item.Quantity;
                        #endregion

                        #region qui doi tan khoi
                        objORDProduct.PackingID = objCUSProduct.PackingID;
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTon)
                        {
                            objORDProduct.ExchangeTon = 1;
                            objORDProduct.ExchangeCBM = 0;
                            objORDProduct.ExchangeQuantity = 0;
                            if (objCUSProduct.Weight > 0 && objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeCBM = objCUSProduct.CBM / objCUSProduct.Weight;
                            if (objCUSProduct.Weight > 0)
                                objORDProduct.ExchangeQuantity = 1 / objCUSProduct.Weight;

                            objORDGroup.Ton += item.Quantity;
                            objORDGroup.CBM += item.Quantity * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Quantity += item.Quantity * objORDProduct.ExchangeQuantity.Value;

                        }
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPCBM)
                        {
                            objORDProduct.ExchangeCBM = 1;
                            objORDProduct.ExchangeTon = 0;
                            objORDProduct.ExchangeQuantity = 0;

                            objORDProduct.ExchangeCBM = 1;
                            if (objCUSProduct.Weight > 0 && objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeTon = objCUSProduct.Weight.Value / objCUSProduct.CBM.Value;
                            if (objCUSProduct.CBM > 0)
                                objORDProduct.ExchangeQuantity = 1 / objCUSProduct.CBM;

                            objORDGroup.CBM += item.Quantity;
                            objORDGroup.Ton += item.Quantity * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.Quantity * objORDProduct.ExchangeQuantity.Value;

                        }
                        if (objCUSProduct.CAT_Packing.TypeOfPackageID == -(int)SYSVarType.TypeOfPackingGOPTU)
                        {
                            objORDProduct.ExchangeQuantity = 1;
                            objORDProduct.ExchangeTon = objCUSProduct.Weight > 0 ? objCUSProduct.Weight : 0;
                            objORDProduct.ExchangeCBM = objCUSProduct.CBM > 0 ? objCUSProduct.CBM : 0;

                            objORDGroup.CBM += item.Quantity * objORDProduct.ExchangeCBM.Value;
                            objORDGroup.Ton += item.Quantity * objORDProduct.ExchangeTon.Value;
                            objORDGroup.Quantity += item.Quantity;
                        }
                        #endregion

                        #region OPS_DITOGroupProduct
                        objOPSGroup.ModifiedBy = Account.UserName;
                        objOPSGroup.ModifiedDate = DateTime.Now;
                        objOPSGroup.CBM = objORDGroup.CBM;
                        objOPSGroup.Ton = objORDGroup.Ton;
                        objOPSGroup.Quantity = objORDGroup.Quantity;
                        objOPSGroup.CBMTranfer = objORDGroup.CBM;
                        objOPSGroup.TonTranfer = objORDGroup.Ton;
                        objOPSGroup.QuantityTranfer = objORDGroup.Quantity;
                        objOPSGroup.CBMBBGN = objORDGroup.CBM;
                        objOPSGroup.QuantityBBGN = objORDGroup.Quantity;
                        objOPSGroup.TonBBGN = objORDGroup.Ton;
                        objOPSGroup.QuantityLoading = objORDGroup.Quantity;
                        #endregion

                        #region OPS_DITOProduct
                        objOPSProduct.ModifiedBy = Account.UserName;
                        objOPSProduct.ModifiedDate = DateTime.Now;
                        objOPSProduct.Quantity = objORDProduct.Quantity;
                        objOPSProduct.QuantityTranfer = objORDProduct.Quantity;
                        objOPSProduct.QuantityBBGN = objORDProduct.Quantity;
                        objOPSProduct.QuantityReturn = objORDProduct.Quantity;
                        #endregion
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONInput_InputProduction_AddReturnEditDelete(int DITOProductID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    var objOPSProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == DITOProductID);
                    if (objOPSProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS product");

                    var objOPSGroup = model.OPS_DITOGroupProduct.FirstOrDefault(c => c.ID == objOPSProduct.DITOGroupProductID);
                    if (objOPSGroup == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS Group");

                    var objORDProduct = model.ORD_Product.FirstOrDefault(c => c.ID == objOPSProduct.OrderProductID);
                    if (objORDProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu hàng");

                    var objORDGroup = model.ORD_GroupProduct.FirstOrDefault(c => c.ID == objORDProduct.GroupProductID);
                    if (objOPSGroup == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu ORD_GroupProduct");

                    model.OPS_DITOProduct.Remove(objOPSProduct);
                    model.OPS_DITOGroupProduct.Remove(objOPSGroup);
                    model.ORD_Product.Remove(objORDProduct);
                    model.ORD_GroupProduct.Remove(objORDGroup);


                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        #endregion

        #region Nhap container

        public DTOResult MONCOInput_List(string request, DateTime dtFrom, DateTime dtTO, List<int> listCustomerID, int type)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (listCustomerID == null || listCustomerID.Count == 0)
                        listCustomerID = Account.ListCustomerID.ToList();
                    List<int> lstIgnore = new List<int>(){
                        -(int)SYSVarType.StatusOfCOContainerUnLoad,
                        -(int)SYSVarType.StatusOfCOContainerLoad,
                    };
                    var query = model.OPS_COTOContainer.Where(c => c.COTOMasterID > 0 && c.OPSContainerID > 0 && !c.IsClosed
                        && c.OPS_COTOMaster.SYSCustomerID == Account.SYSCustomerID
                        && ((type == 2 && !lstIgnore.Contains(c.StatusOfCOContainerID) && c.IsDuplicateHidden != true && c.IsSplit == false) || (type == 1 && c.ParentID == null))
                        && c.TypeOfStatusContainerID != -(int)SYSVarType.TypeOfStatusContainerCancel
                        && c.OPS_COTOMaster.StatusOfCOTOMasterID <= -(int)SYSVarType.StatusOfCOTOMasterReceived && c.OPS_COTOMaster.StatusOfCOTOMasterID >= -(int)SYSVarType.StatusOfCOTOMasterTendered
                        && c.OPS_Container.ORD_Container.ORD_Order.RequestDate >= dtFrom && c.OPS_Container.ORD_Container.ORD_Order.RequestDate < dtTO
                        && listCustomerID.Contains(c.OPS_Container.ORD_Container.ORD_Order.CustomerID)).OrderBy(c => c.COTOMasterID)
                        .Select(c => new DTOMONCOInput
                        {
                            ID = c.ID,
                            MasterID = c.COTOMasterID > 0 ? c.COTOMasterID.Value : -1,
                            MasterCode = c.OPS_COTOMaster.Code,
                            OrderCode = c.OPS_Container.ORD_Container.ORD_Order.Code,
                            ETA = c.ETA,
                            ETD = c.ETD,
                            ATA = c.OPS_COTOMaster.ATA,
                            ATD = c.OPS_COTOMaster.ATD,
                            CustomerID = c.OPS_Container.ORD_Container.ORD_Order.CustomerID,
                            CustomerCode = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.Code,
                            CustomerName = c.OPS_Container.ORD_Container.ORD_Order.CUS_Customer.CustomerName,
                            DateFromCome = c.DateFromCome,
                            DateFromLeave = c.DateFromLeave,
                            DateToCome = c.DateToCome,
                            DateToLeave = c.DateToLeave,
                            InvoiceBy = c.InvoiceBy,
                            InvoiceDate = c.InvoiceDate,
                            InvoiceDateString = string.Empty,
                            InvoiceNo = c.InvoiceNo,
                            IsInvoice = c.TypeOfStatusContainerPODID == -(int)SYSVarType.TypeOfStatusContainerPODComplete,
                            TypeOfStatusContainerName = c.SYS_Var.ValueOfVar,
                            Note1 = c.Note1,
                            Note2 = c.Note2,
                            TypeOfContainer = c.OPS_Container.ORD_Container.CAT_Packing.Code,
                            ServiceOfOrder = c.OPS_Container.ORD_Container.ORD_Order.CAT_ServiceOfOrder.Name,
                            VehicleNo = c.OPS_COTOMaster.CAT_Vehicle.RegNo,
                            RomoocNo = c.OPS_COTOMaster.CAT_Romooc.RegNo,
                            COTOSort = c.COTOSort,
                            KM = 0,
                            ExIsOverNight = c.OPS_COTOMaster.ExIsOverNight,
                            ExIsOverWeight = c.OPS_COTOMaster.ExIsOverWeight,
                            IsComplete = c.TypeOfStatusContainerID >= -(int)SYSVarType.TypeOfStatusContainerComplete,

                            LocationFromAddress = c.CAT_Location.Address,
                            LocationFromCode = c.CAT_Location.Code,
                            LocationFromName = c.CAT_Location.Location,
                            LocationToAddress = c.CAT_Location1.Address,
                            LocationToCode = c.CAT_Location1.Code,
                            LocationToName = c.CAT_Location1.Location,
                        }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as List<DTOMONCOInput>;

                    foreach (DTOMONCOInput obj in result.Data)
                    {
                        if (obj.InvoiceDate.HasValue)
                        {
                            obj.InvoiceDateString = obj.InvoiceDate.Value.ToString("dd/MM");
                        }
                        var opsCoto = model.OPS_COTO.FirstOrDefault(c => c.COTOMasterID == obj.MasterID && c.SortOrder == obj.COTOSort);
                        if (opsCoto != null)
                        {
                            obj.KM = opsCoto.KM;
                        }
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONCOInput_Save(DTOPODCOInput item, bool ispod)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var obj = model.OPS_COTOContainer.FirstOrDefault(c => c.ID == item.ID);
                    if (obj != null)
                    {
                        obj.ModifiedBy = Account.UserName;
                        obj.ModifiedDate = DateTime.Now;
                        obj.Note1 = item.Note1;
                        obj.Note2 = item.Note2;
                        obj.OPS_COTOMaster.ExIsOverNight = item.ExIsOverNight;
                        obj.OPS_COTOMaster.ExIsOverWeight = item.ExIsOverWeight;
                        obj.DateFromCome = item.DateFromCome;
                        obj.DateFromLeave = item.DateFromLeave;
                        obj.DateToCome = item.DateToCome;
                        obj.DateToLeave = item.DateToLeave;
                        if (ispod)
                        {
                            obj.InvoiceBy = item.InvoiceBy;
                            obj.InvoiceNo = item.InvoiceNo;
                            obj.InvoiceDate = item.InvoiceDate;
                            if (obj.TypeOfStatusContainerID < -(int)SYSVarType.TypeOfStatusContainerComplete)
                            {
                                HelperTOMaster.MONCO_TOContainerComplete_Next(model, Account, item.ID);
                            }
                            obj.TypeOfStatusContainerPODID = -(int)SYSVarType.TypeOfStatusContainerPODComplete;
                            HelperStatus.ORDOrder_Status(model, Account, new List<int> { obj.OPS_Container.ORD_Container.OrderID });
                        }

                        var opsCoto = model.OPS_COTO.FirstOrDefault(c => c.COTOMasterID == obj.COTOMasterID && c.SortOrder == obj.COTOSort);
                        if (opsCoto != null)
                        {
                            opsCoto.KM = item.KM;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        #endregion

        #region ExtReturn
        public DTOResult MONOPSExtReturn_List(string request, DateTime dFrom, DateTime dTo, List<int> lstCustomer)
        {
            try
            {
                DTOResult result = new DTOResult();
                dFrom = dFrom.Date;
                dTo = dTo.Date.AddDays(1);
                using (var model = new DataEntities())
                {
                    var query = model.OPS_ExtReturnDetail.Where(c => c.OPS_ExtReturn.SYSCustomerID == Account.SYSCustomerID &&
                        c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dFrom &&
                        c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dTo &&
                        lstCustomer.Contains(c.OPS_ExtReturn.CustomerID)).Select(c => new DTOMONOPSExtReturn
                        {
                            ID = c.ID,
                            ExtReturnID = c.ExtReturnID,
                            CustomerID = c.OPS_ExtReturn.CustomerID,
                            CustomerCode = c.OPS_ExtReturn.CUS_Customer.Code,
                            CustomerName = c.OPS_ExtReturn.CUS_Customer.CustomerName,
                            VehicleID = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.VehicleID.Value : -1,
                            VehicleNo = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.CAT_Vehicle.RegNo : string.Empty,
                            VendorID = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.VendorID.Value : -1,
                            VendorCode = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.Code : string.Empty,
                            VendorName = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.CustomerName : string.Empty,
                            DriverID = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.DriverID.Value : -1,
                            DriverName = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.FLM_Driver.CAT_Driver.LastName + " " + c.OPS_ExtReturn.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                            InvoiceDate = c.OPS_ExtReturn.InvoiceDate,
                            InvoiceNo = c.OPS_ExtReturn.InvoiceNo,
                            ProductID = c.OPS_ExtReturn.ProductID,
                            ProductCode = c.OPS_ExtReturn.CUS_Product.Code,
                            Quantity = c.Quantity,
                            IsApproved = c.OPS_ExtReturn.IsApproved,
                            DITOMasterID = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.DITOMasterID.Value : -1,
                            DITOMasterCode = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.OPS_DITOMaster.Code : string.Empty,
                            ExtReturnStatusName = c.OPS_ExtReturn.SYS_Var.ValueOfVar,
                            ExtReturnStatusID = c.OPS_ExtReturn.ExtReturnStatusID,
                            OrderCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                            RequestDate = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.RequestDate,
                            KMax = c.Quantity,
                            ETA = c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETA,
                            ETD = c.OPS_DITOProduct.OPS_DITOGroupProduct.OPS_DITOMaster.ETD,
                            Note = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.Note,
                            ORDGroupNote1 = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.Note1,
                            ORDGroupNote2 = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.Note2,
                        }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSExtReturn>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOMONOPSExtReturn MONOPSExtReturn_Get(int id)
        {
            try
            {
                DTOMONOPSExtReturn result = new DTOMONOPSExtReturn();
                using (var model = new DataEntities())
                {
                    if (id > 0)
                    {
                        var query = model.OPS_ExtReturn.Where(c => c.ID == id).FirstOrDefault();
                        if (query != null)
                        {
                            result.ID = query.ID;
                            result.CustomerID = query.CustomerID;
                            result.CustomerCode = query.CUS_Customer.Code;
                            result.CustomerName = query.CUS_Customer.CustomerName;
                            result.VehicleID = query.VehicleID > 0 ? query.VehicleID.Value : -1;
                            result.VehicleNo = query.VehicleID > 0 ? query.CAT_Vehicle.RegNo : string.Empty;
                            result.VendorID = query.VendorID > 0 ? query.VendorID.Value : -1;
                            result.VendorCode = query.VendorID > 0 ? query.CUS_Customer1.Code : string.Empty;
                            result.VendorName = query.VendorID > 0 ? query.CUS_Customer1.CustomerName : string.Empty;
                            result.DriverID = query.DriverID > 0 ? query.DriverID.Value : -1;
                            result.DriverName = query.DriverID > 0 ? query.FLM_Driver.CAT_Driver.LastName + " " + query.FLM_Driver.CAT_Driver.FirstName : string.Empty;
                            result.InvoiceDate = query.InvoiceDate;
                            result.InvoiceNo = query.InvoiceNo;
                            result.ProductID = query.ProductID;
                            result.GroupProductID = query.CUS_Product.GroupOfProductID;
                            result.ProductCode = query.CUS_Product.Code;
                            result.Quantity = query.Quantity;
                            result.IsApproved = query.IsApproved;
                            result.DITOMasterID = query.DITOMasterID > 0 ? query.DITOMasterID.Value : -1;
                            result.DITOMasterCode = query.DITOMasterID > 0 ? query.OPS_DITOMaster.Code : string.Empty;
                            result.ExtReturnStatusID = query.ExtReturnStatusID;
                            result.Note = query.Note;
                            //result.ListDetail = query.OPS_ExtReturnDetail.Select(c => new DTOMONOPSExtReturnDetail
                            //{
                            //    ID = c.ID,
                            //    OrderID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.ID,
                            //    OrderCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                            //    LocationToID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                            //    LocationTo = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                            //    GroupProductID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                            //    GroupProductCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            //    ProductID = c.OPS_DITOProduct.ORD_Product.CUS_Product.ID,
                            //    ProductCode = c.OPS_DITOProduct.ORD_Product.CUS_Product.Code,
                            //    DITOProductID = c.DITOProductID,
                            //    Quantity = c.Quantity
                            //}).ToList();
                        }
                    }
                    else
                    {
                        result.ID = 0;
                        result.CustomerID = 0;
                        result.InvoiceDate = DateTime.Now;
                        result.IsApproved = false;
                        var objCus = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).FirstOrDefault();
                        if (objCus != null) result.CustomerID = objCus.ID;
                        result.GroupProductID = 0;
                        var objG = model.CUS_GroupOfProduct.Where(c => c.CustomerID == result.CustomerID).FirstOrDefault();
                        result.GroupProductID = objG.ID;
                        result.ProductID = 0;
                        var objP = model.CUS_Product.Where(c => c.GroupOfProductID == result.GroupProductID).FirstOrDefault();
                        if (objP != null) result.ProductID = objP.ID;
                        // result.ListDetail = new List<DTOMONOPSExtReturnDetail>();
                        result.ExtReturnStatusID = -(int)SYSVarType.ExtReturnStatusNormal;
                        result.VehicleID = -1;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public int MONOPSExtReturn_Save(DTOMONOPSExtReturn item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;

                    if (string.IsNullOrEmpty(item.InvoiceNo))
                        throw FaultHelper.BusinessFault(null, null, "Số chứng từ không được trống");
                    if (item.Quantity < 0)
                        throw FaultHelper.BusinessFault(null, null, "Số lượng không chính xác");

                    var objReturnDetail = model.OPS_ExtReturnDetail.FirstOrDefault(c => c.ID == item.ID);
                    if (objReturnDetail == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS_ExtReturnDetail");

                    var objReturn = model.OPS_ExtReturn.FirstOrDefault(c => c.ID == objReturnDetail.ExtReturnID);
                    if (objReturn == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS_ExtReturn");

                    var objOPSProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == objReturnDetail.DITOProductID);
                    if (objOPSProduct == null) throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu OPS_DITOProduct");

                    double range = objReturnDetail.Quantity - item.Quantity;

                    objReturnDetail.ModifiedBy = Account.UserName;
                    objReturnDetail.ModifiedDate = DateTime.Now;
                    objReturnDetail.Quantity = item.Quantity;

                    objReturn.ModifiedBy = Account.UserName;
                    objReturn.ModifiedDate = DateTime.Now;
                    objReturn.InvoiceNo = item.InvoiceNo;
                    objReturn.InvoiceDate = item.InvoiceDate;

                    objOPSProduct.ModifiedBy = Account.UserName;
                    objOPSProduct.ModifiedDate = DateTime.Now;
                    objOPSProduct.QuantityExtReturn = objOPSProduct.QuantityExtReturn - range;

                    objOPSProduct.ORD_Product.ORD_GroupProduct.Note1 = item.ORDGroupNote1;
                    objOPSProduct.ORD_Product.ORD_GroupProduct.Note2 = item.ORDGroupNote2;

                    model.SaveChanges();
                    return objReturnDetail.ID;

                    //var obj = model.OPS_ExtReturn.Where(c => c.ID == item.ID).FirstOrDefault();
                    //if (obj == null)
                    //{
                    //    obj = new OPS_ExtReturn();
                    //    obj.CreatedBy = Account.UserName;
                    //    obj.CreatedDate = DateTime.Now;
                    //    obj.SYSCustomerID = Account.SYSCustomerID;
                    //    model.OPS_ExtReturn.Add(obj);
                    //}
                    //else
                    //{
                    //    obj.ModifiedBy = Account.UserName;
                    //    obj.ModifiedDate = DateTime.Now;
                    //}
                    //obj.InvoiceNo = item.InvoiceNo;
                    //obj.InvoiceDate = item.InvoiceDate;
                    //obj.CustomerID = item.CustomerID;
                    //if (item.VehicleID > 0)
                    //    obj.VehicleID = item.VehicleID;
                    //else obj.VehicleID = null;
                    //if (item.VendorID > 0)
                    //    obj.VendorID = item.VendorID;
                    //else obj.VendorID = null;
                    //if (item.DriverID > 0)
                    //    obj.DriverID = item.DriverID;
                    //else obj.DriverID = null;

                    //obj.IsApproved = item.IsApproved;
                    //// obj.Quantity = item.Quantity;
                    //obj.ProductID = item.ProductID;
                    //if (item.DITOMasterID > 0)
                    //    obj.DITOMasterID = item.DITOMasterID;
                    //else obj.DITOMasterID = null;

                    //obj.Quantity = item.Quantity;
                    //obj.ExtReturnStatusID = item.ExtReturnStatusID;
                    //obj.Note = item.Note;

                    ////kiem tra, set detail
                    //if (item.DITOMasterID > 0 && item.ID < 1)
                    //{
                    //    var list = model.OPS_DITOProduct.Where(d => d.OPS_DITOGroupProduct.DITOMasterID == item.DITOMasterID.Value && d.ORD_Product.ORD_GroupProduct.IsReturn == true &&
                    //         ((d.QuantityExtReturn >= 0 && d.QuantityExtReturn < d.QuantityTranfer) || (d.QuantityExtReturn == null && d.QuantityTranfer > 0))).ToList();
                    //    if (list.Count() > 0)
                    //    {
                    //        if ((list.Sum(c => c.QuantityTranfer) - list.Where(c => c.QuantityExtReturn > 0).Sum(c => c.QuantityExtReturn.Value) == item.Quantity))
                    //        {
                    //            foreach (var detail in list)
                    //            {
                    //                var objDetail = new OPS_ExtReturnDetail();
                    //                objDetail.CreatedDate = DateTime.Now;
                    //                objDetail.CreatedBy = Account.UserName;
                    //                objDetail.DITOProductID = detail.ID;
                    //                objDetail.Quantity = detail.QuantityTranfer;//ko ro
                    //                obj.OPS_ExtReturnDetail.Add(objDetail);

                    //                detail.QuantityExtReturn = detail.QuantityTranfer;
                    //            }
                    //        }
                    //    }
                    //}

                    //model.SaveChanges();

                    // return obj.ID;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOMONOPSExtReturnExport> MONOPSExtReturn_Data(DateTime dFrom, DateTime dTo)
        {
            try
            {
                List<DTOMONOPSExtReturnExport> result = new List<DTOMONOPSExtReturnExport>();
                dFrom = dFrom.Date;
                dTo = dTo.Date;
                using (var model = new DataEntities())
                {
                    result = model.OPS_ExtReturnDetail.Where(c => c.OPS_ExtReturn.SYSCustomerID == Account.SYSCustomerID && c.OPS_ExtReturn.InvoiceDate < dTo && c.OPS_ExtReturn.InvoiceDate > dFrom).Select(c => new DTOMONOPSExtReturnExport
                    {
                        ID = c.ID,
                        CustomerID = c.OPS_ExtReturn.CustomerID,
                        CustomerCode = c.OPS_ExtReturn.CUS_Customer.Code,
                        CustomerName = c.OPS_ExtReturn.CUS_Customer.CustomerName,
                        VehicleID = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.VehicleID.Value : -1,
                        VehicleNo = c.OPS_ExtReturn.VehicleID > 0 ? c.OPS_ExtReturn.CAT_Vehicle.RegNo : string.Empty,
                        VendorID = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.VendorID.Value : -1,
                        VendorCode = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.Code : string.Empty,
                        VendorName = c.OPS_ExtReturn.VendorID > 0 ? c.OPS_ExtReturn.CUS_Customer1.CustomerName : string.Empty,
                        DriverID = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.DriverID.Value : -1,
                        DriverName = c.OPS_ExtReturn.DriverID > 0 ? c.OPS_ExtReturn.FLM_Driver.CAT_Driver.LastName + " " + c.OPS_ExtReturn.FLM_Driver.CAT_Driver.FirstName : string.Empty,
                        InvoiceDate = c.OPS_ExtReturn.InvoiceDate,
                        InvoiceNo = c.OPS_ExtReturn.InvoiceNo,
                        ProductID = c.OPS_ExtReturn.ProductID,
                        ProductCode = c.OPS_ExtReturn.CUS_Product.Code,
                        Quantity = c.OPS_ExtReturn.Quantity,
                        IsApproved = c.OPS_ExtReturn.IsApproved,
                        DITOMasterID = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.DITOMasterID.Value : -1,
                        DITOMasterCode = c.OPS_ExtReturn.DITOMasterID > 0 ? c.OPS_ExtReturn.OPS_DITOMaster.Code : string.Empty,
                        ExtReturnStatusName = c.OPS_ExtReturn.SYS_Var.ValueOfVar,
                        Note = c.OPS_ExtReturn.Note
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONOPSExtReturn_DetailList(string request, int ExtReturnID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_ExtReturnDetail.Where(c => c.ExtReturnID == ExtReturnID).Select(c => new DTOMONOPSExtReturnDetail
                    {
                        ID = c.ID,
                        OrderID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.ID,
                        OrderCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                        LocationToID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                        LocationTo = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                        GroupProductID = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                        GroupProductCode = c.OPS_DITOProduct.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                        ProductID = c.OPS_DITOProduct.ORD_Product.CUS_Product.ID,
                        ProductCode = c.OPS_DITOProduct.ORD_Product.CUS_Product.Code,
                        DITOProductID = c.DITOProductID,
                        Quantity = c.Quantity,
                        KMax = c.Quantity,
                    }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSExtReturnDetail>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONOPSExtReturn_Delete(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var exR in lst)
                    {
                        var obj = model.OPS_ExtReturn.Where(c => c.ID == exR).FirstOrDefault();
                        if (obj != null)
                        {
                            foreach (var item in model.OPS_ExtReturnDetail.Where(c => c.ExtReturnID == obj.ID))
                            {
                                var objProduct = model.OPS_DITOProduct.Where(c => c.ID == item.DITOProductID).FirstOrDefault();
                                if (objProduct != null)
                                {
                                    objProduct.ModifiedBy = Account.UserName;
                                    objProduct.ModifiedDate = DateTime.Now;
                                    objProduct.QuantityExtReturn -= item.Quantity;
                                }
                                model.OPS_ExtReturnDetail.Remove(item);
                            }
                            model.OPS_ExtReturn.Remove(obj);
                            model.SaveChanges();
                        }
                    }
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONOPSExtReturn_Approved(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var exR in lst)
                    {
                        var obj = model.OPS_ExtReturn.Where(c => c.ID == exR).FirstOrDefault();
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.IsApproved = true;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONOPSExtReturn_UnApproved(List<int> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    foreach (var exR in lst)
                    {
                        var obj = model.OPS_ExtReturn.Where(c => c.ID == exR).FirstOrDefault();
                        if (obj != null)
                        {
                            obj.ModifiedBy = Account.UserName;
                            obj.ModifiedDate = DateTime.Now;
                            obj.IsApproved = false;
                        }
                    }
                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONOPSExtReturn_DetailSave(List<DTOMONOPSExtReturnDetail> lst, int ExtReturnID)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.DITOProductID);
                        if (objProduct != null)
                        {
                            var obj = model.OPS_ExtReturnDetail.Where(c => c.ID == item.ID).FirstOrDefault();
                            if (obj == null)
                            {
                                obj = new OPS_ExtReturnDetail();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.ExtReturnID = ExtReturnID;
                                obj.DITOProductID = item.DITOProductID;
                                model.OPS_ExtReturnDetail.Add(obj);
                            }
                            else
                            {
                                obj.ModifiedBy = Account.UserName;
                                obj.ModifiedDate = DateTime.Now;
                            }
                            obj.Quantity = item.Quantity;

                            model.SaveChanges();
                            objProduct.QuantityExtReturn = objProduct.OPS_ExtReturnDetail.Sum(d => d.Quantity);
                            model.SaveChanges();
                        }
                    }
                    // model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONOPSExtReturn_CustomerList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerCUS || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONOPSExtReturn_GOPByCus(int customerid)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_GroupOfProduct.Where(c => c.CustomerID == customerid).Select(c => new DTOCUSGroupOfProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONOPSExtReturn_ProductByGOP(int gopID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Product.Where(c => c.GroupOfProductID == gopID).Select(c => new DTOCUSProduct
                    {
                        ID = c.ID,
                        Code = c.Code,
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOCATVehicle> MONOPSExtReturn_VehicleList(int vendorID)
        {
            try
            {
                List<DTOCATVehicle> result = new List<DTOCATVehicle>();
                using (var model = new DataEntities())
                {
                    if (vendorID > 0 && vendorID != Account.SYSCustomerID)
                    {
                        result = model.CUS_Vehicle.Where(c => c.CustomerID == vendorID).Select(c => new DTOCATVehicle
                        {
                            ID = c.VehicleID,
                            RegNo = c.CAT_Vehicle.RegNo
                        }).ToList();
                    }
                    else
                    {
                        result = model.FLM_Asset.Where(c => c.SYSCustomerID == Account.SYSCustomerID && (c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTruck || c.TypeOfAssetID == -(int)SYSVarType.TypeOfAssetTractor)).Select(c => new DTOCATVehicle
                        {
                            ID = c.VehicleID.Value,
                            RegNo = c.CAT_Vehicle.RegNo
                        }).ToList();
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public List<DTOFLMDriver> MONOPSExtReturn_DriverList()
        {
            try
            {
                List<DTOFLMDriver> result = new List<DTOFLMDriver>();
                using (var model = new DataEntities())
                {
                    result = model.FLM_Driver.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.IsUse && !c.IsAssistant).Select(c => new DTOFLMDriver
                    {
                        ID = c.ID,
                        DriverName = c.CAT_Driver.LastName + " " + c.CAT_Driver.FirstName
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONOPSExtReturn_VendorList()
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                    }).ToList();

                    result.Total = query.Count;
                    result.Data = query.ToArray();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONOPSExtReturn_DetailNotIn(string request, int masterID)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    if (masterID > 0)
                    {
                        var query = model.OPS_DITOProduct.Where(c => c.OPS_DITOGroupProduct.DITOMasterID == masterID && c.ORD_Product.ORD_GroupProduct.IsReturn == true &&
                           ((c.QuantityExtReturn >= 0 && c.QuantityExtReturn < c.QuantityTranfer) || c.QuantityExtReturn == null)).Select(c => new DTOMONOPSExtReturnDetail
                           {
                               ID = c.ID,
                               OrderID = c.ORD_Product.ORD_GroupProduct.OrderID,
                               OrderCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                               LocationToID = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                               LocationTo = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                               GroupProductCode = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                               GroupProductID = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                               ProductID = c.ORD_Product.ProductID,
                               ProductCode = c.ORD_Product.CUS_Product.Code,
                               Quantity = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                               KMax = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                               DITOProductID = c.ID,
                           }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONOPSExtReturnDetail>;
                    }
                    else
                    {
                        var query = model.OPS_DITOProduct.Where(c => c.ORD_Product.ORD_GroupProduct.IsReturn == true && ((c.QuantityExtReturn >= 0 && c.QuantityExtReturn < c.QuantityTranfer) || c.QuantityExtReturn == null)).Select(c => new DTOMONOPSExtReturnDetail
                        {
                            ID = c.ID,
                            OrderID = c.ORD_Product.ORD_GroupProduct.OrderID,
                            OrderCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                            LocationToID = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                            LocationTo = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                            GroupProductCode = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                            GroupProductID = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                            ProductID = c.ORD_Product.CUS_Product.ID,
                            ProductCode = c.ORD_Product.CUS_Product.Code,
                            Quantity = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                            KMax = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                            DITOProductID = c.ID,
                        }).ToDataSourceResult(CreateRequest(request));
                        result.Total = query.Total;
                        result.Data = query.Data as IEnumerable<DTOMONOPSExtReturnDetail>;
                    }
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONTOMaster> MONOPSExtReturn_DITOMasterList(int cusID, int vendorID, int vehicleID)
        {
            try
            {
                List<DTOMONTOMaster> result = new List<DTOMONTOMaster>();
                using (var model = new DataEntities())
                {
                    result = model.OPS_DITOGroupProduct.Where(c => c.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID &&
                        c.ORD_GroupProduct.ORD_Order.CustomerID == cusID).Select(c => new DTOMONTOMaster
                        {
                            TOMasterID = c.OPS_DITOMaster.ID,
                            TOMasterCode = c.OPS_DITOMaster.Code,
                            VehicleID = c.OPS_DITOMaster.VehicleID,
                            VendorID = c.OPS_DITOMaster.VendorOfVehicleID
                        }).Distinct().ToList();
                    if (vendorID > 0)
                        result = result.Where(c => c.VendorID == vendorID).ToList();
                    if (vehicleID > 0)
                        result = result.Where(c => c.VehicleID == vehicleID).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONOPSExtReturn_FindList(string request)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    var query = model.OPS_DITOProduct.Where(c => c.ORD_Product.ORD_GroupProduct.IsReturn == true &&
                       ((c.QuantityExtReturn >= 0 && c.QuantityExtReturn < c.QuantityTranfer) || c.QuantityExtReturn == null) &&
                       c.OPS_DITOGroupProduct.OPS_DITOMaster.StatusOfDITOMasterID >= -(int)SYSVarType.StatusOfDITOMasterReceived &&
                       c.OPS_DITOGroupProduct.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOMONOPSDITOProduct
                       {
                           ID = -1,
                           DITOProduct = c.ID,
                           CustomerID = c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID,
                           CustomerCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                           CustomerName = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                           VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? (c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID ? -1 : c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : -1,
                           VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? (c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID ? "Xe nhà" : c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.Code) : "Xe nhà",
                           OrderID = c.ORD_Product.ORD_GroupProduct.OrderID,
                           OrderCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                           LocationToID = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                           LocationTo = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                           GroupProductCode = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                           GroupProductID = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                           ProductID = c.ORD_Product.ProductID,
                           ProductCode = c.ORD_Product.CUS_Product.Code,
                           VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID.Value : -1,
                           VehicleNo = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                           DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                           DITOMasterCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.Code,
                           Quantity = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                           ETA = c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA,
                           ETD = c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD,

                           ExtReturnStatusID = -(int)SYSVarType.ExtReturnStatusNormal
                       }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSDITOProduct>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public DTOResult MONOPSExtReturn_QuickList(string request, DateTime dtFrom, DateTime dtTo, List<int> lstCustomer)
        {
            try
            {
                DTOResult result = new DTOResult();
                using (var model = new DataEntities())
                {
                    dtFrom = dtFrom.Date;
                    dtTo = dtTo.AddDays(1).Date;
                    var query = model.OPS_DITOProduct.Where(c => c.ORD_Product.ORD_GroupProduct.IsReturn == true
                        && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dtFrom
                        && c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dtTo
                        && ((c.QuantityReturn - c.QuantityExtReturn > 0) || c.QuantityExtReturn == null)
                        && lstCustomer.Contains(c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID)
                        && c.OPS_DITOGroupProduct.OPS_DITOMaster.SYSCustomerID == Account.SYSCustomerID).Select(c => new DTOMONOPSDITOProductQuick
                       {
                           ID = c.ID,
                           CustomerID = c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID,
                           CustomerCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                           CustomerName = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                           VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? (c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID ? -1 : c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value) : -1,
                           VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? (c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID == Account.SYSCustomerID ? "Xe nhà" : c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_GroupOfVehicle.Code) : "Xe nhà",
                           OrderID = c.ORD_Product.ORD_GroupProduct.OrderID,
                           OrderCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                           RequestDate = c.ORD_Product.ORD_GroupProduct.ORD_Order.RequestDate,
                           LocationToID = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID.Value : -1,
                           LocationTo = c.ORD_Product.ORD_GroupProduct.ORD_Order.LocationToID > 0 ? c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Location3.CAT_Location.Location : string.Empty,
                           GroupProductCode = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                           GroupProductID = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                           ProductID = c.ORD_Product.ProductID,
                           ProductCode = c.ORD_Product.CUS_Product.Code,
                           VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID.Value : -1,
                           VehicleNo = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                           DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID,
                           DITOMasterCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.Code,
                           Quantity = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                           KMax = c.QuantityExtReturn > 0 ? c.QuantityTranfer - (double)c.QuantityExtReturn : c.QuantityTranfer,
                           ETA = c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA,
                           ETD = c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD,

                           ExtReturnStatusID = -(int)SYSVarType.ExtReturnStatusNormal,
                           InvoiceDate = DateTime.Now,
                           InvoiceDateString = string.Empty,
                           InvoiceNo = string.Empty,
                       }).ToDataSourceResult(CreateRequest(request));
                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOMONOPSDITOProductQuick>;
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }
        public void MONOPSExtReturn_QuickSave(DTOMONOPSDITOProductQuick item)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    var objProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.ID);
                    if (objProduct != null)
                    {
                        OPS_ExtReturn obj = new OPS_ExtReturn();
                        obj.CreatedBy = Account.UserName;
                        obj.CreatedDate = DateTime.Now;
                        obj.SYSCustomerID = Account.SYSCustomerID;
                        obj.InvoiceNo = item.InvoiceNo;
                        obj.InvoiceDate = item.InvoiceDate;
                        obj.CustomerID = item.CustomerID;

                        obj.IsApproved = item.IsApproved;
                        // obj.Quantity = item.Quantity;
                        obj.ProductID = item.ProductID;
                        if (item.DITOMasterID > 0)
                            obj.DITOMasterID = item.DITOMasterID;
                        else obj.DITOMasterID = null;

                        obj.Quantity = item.Quantity;
                        obj.ExtReturnStatusID = item.ExtReturnStatusID;
                        obj.Note = item.Note;

                        model.OPS_ExtReturn.Add(obj);

                        OPS_ExtReturnDetail objDetail = new OPS_ExtReturnDetail();
                        objDetail.CreatedDate = DateTime.Now;
                        objDetail.CreatedBy = Account.UserName;
                        objDetail.DITOProductID = item.ID;
                        objDetail.Quantity = item.Quantity;
                        objDetail.OPS_ExtReturn = obj;
                        model.OPS_ExtReturnDetail.Add(objDetail);

                        objProduct.QuantityExtReturn = objProduct.QuantityExtReturn == null ? item.Quantity : objProduct.QuantityExtReturn += item.Quantity;

                        model.SaveChanges();
                    }
                    else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOMONOPSExtReturnData MONOPSExtReturn_QuickData()
        {
            try
            {
                DTOMONOPSExtReturnData result = new DTOMONOPSExtReturnData();
                result.ListVehicle = new List<DTOMONCUSVehicle>();
                result.ListVendor = new List<DTOCustomer>();
                using (var model = new DataEntities())
                {
                    result.ListVendor = model.CUS_Customer.Where(c => (c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerVEN || c.TypeOfCustomerID == -(int)SYSVarType.TypeOfCustomerBOTH) && !c.IsSystem).Select(c => new DTOCustomer
                    {
                        ID = c.ID,
                        Code = c.Code,
                        CustomerName = c.CustomerName,
                    }).ToList();

                    List<int> lst = new List<int>();
                    lst = result.ListVendor.Select(c => c.ID).ToList();

                    result.ListVehicle = model.CUS_Vehicle.Where(c => c.CAT_Vehicle.TypeOfVehicleID == -(int)SYSVarType.TypeOfVehicleTruck && c.CAT_Vehicle.ID > 2).Select(c => new DTOMONCUSVehicle
                    {
                        ID = c.ID,
                        CustomerID = c.CustomerID == Account.SYSCustomerID ? -1 : c.CustomerID,
                        VehicleID = c.VehicleID,
                        RegNo = c.CAT_Vehicle.RegNo
                    }).ToList();
                }
                return result;
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOResult MONOPSExtReturn_Setting_List(string request)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOResult result = new DTOResult();
                    string ViewAdmin = SYSViewCode.ViewAdmin.ToString();
                    var query = model.CUS_Setting.Where(c => c.SYSCustomerID == Account.SYSCustomerID && c.Key == CUSSettingKey.ExtReturn.ToString()).Select(c => new DTOCUSSettingExtReturn
                    {
                        SettingID = c.ID,
                        Name = c.Name,
                        CreateBy = c.CreatedBy,
                        CreateDate = c.CreatedDate,
                    }).ToDataSourceResult(CreateRequest(request));

                    result.Total = query.Total;
                    result.Data = query.Data as IEnumerable<DTOCUSSettingExtReturn>;
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public DTOCUSSettingExtReturn MONOPSExtReturn_Setting_Get(int id)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    DTOCUSSettingExtReturn result = new DTOCUSSettingExtReturn();
                    if (id > 0)
                    {
                        var obj = model.CUS_Setting.Where(c => c.ID == id).FirstOrDefault();
                        if (obj != null)
                        {
                            result = Newtonsoft.Json.JsonConvert.DeserializeObject<DTOCUSSettingExtReturn>(obj.Setting);
                        }
                    }
                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public List<DTOMONOPSExtReturnExcel> MONOPSExtReturn_ExcelOnline_Data(DateTime dFrom, DateTime dTo, List<int> lstCustomer)
        {
            try
            {
                dFrom = dFrom.Date;
                dTo = dTo.Date.AddDays(1);
                List<DTOMONOPSExtReturnExcel> result = new List<DTOMONOPSExtReturnExcel>();
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    result = model.OPS_DITOProduct.Where(c => c.ORD_Product.ORD_GroupProduct.IsReturn == true &&
                            c.OPS_DITOGroupProduct.DITOMasterID > 0 &&
                            c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD >= dFrom &&
                            c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD < dTo &&
                            lstCustomer.Contains(c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID) &&
                            (c.QuantityExtReturn == null ? true : (c.QuantityReturn - c.QuantityExtReturn > 0))).Select(c => new DTOMONOPSExtReturnExcel
                            {
                                ID = c.ID,
                                CustomerID = c.ORD_Product.ORD_GroupProduct.ORD_Order.CustomerID,
                                CustomerCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.Code,
                                CustomerName = c.ORD_Product.ORD_GroupProduct.ORD_Order.CUS_Customer.CustomerName,
                                VehicleID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID.Value : -1,
                                VehicleNo = c.OPS_DITOGroupProduct.OPS_DITOMaster.VehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CAT_Vehicle.RegNo : string.Empty,
                                VendorID = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID.Value : -1,
                                VendorCode = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.Code : string.Empty,
                                VendorName = c.OPS_DITOGroupProduct.OPS_DITOMaster.VendorOfVehicleID > 0 ? c.OPS_DITOGroupProduct.OPS_DITOMaster.CUS_Customer.CustomerName : string.Empty,
                                DriverID = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverID1.Value : -1,
                                DriverName = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.DriverName1 : string.Empty,
                                InvoiceDate = c.OPS_DITOGroupProduct.InvoiceReturnDate.HasValue ? c.OPS_DITOGroupProduct.InvoiceReturnDate.Value : DateTime.Now,
                                InvoiceNo = c.OPS_DITOGroupProduct.InvoiceReturnNote,
                                GroupProductCode = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.Code,
                                GroupProductID = c.ORD_Product.ORD_GroupProduct.CUS_GroupOfProduct.ID,
                                ProductID = c.ORD_Product.ProductID,
                                Packing = c.ORD_Product.CUS_Product.Code,
                                QuantityReturn = c.QuantityReturn,
                                QuantityExtReturn = c.QuantityExtReturn,
                                QuantityCurrent = c.QuantityExtReturn.HasValue ? c.QuantityReturn - c.QuantityExtReturn.Value : c.QuantityReturn,
                                Quantity = 0,
                                //IsApproved = c.OPS_ExtReturn.IsApproved,
                                DITOMasterID = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.DITOMasterID.Value : -1,
                                DITOMasterCode = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.Code : string.Empty,
                                ExtReturnStatusCode = "ExtReturnStatusNormal",
                                OrderCode = c.ORD_Product.ORD_GroupProduct.ORD_Order.Code,
                                RequestDate = c.ORD_Product.ORD_GroupProduct.ORD_Order.RequestDate,
                                ETA = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETA : null,
                                ETD = c.OPS_DITOGroupProduct.DITOMasterID.HasValue ? c.OPS_DITOGroupProduct.OPS_DITOMaster.ETD : null,
                                DNCode = c.OPS_DITOGroupProduct.DNCode,
                                SOCode = c.ORD_Product.ORD_GroupProduct.SOCode,
                            }).ToList();

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel MONOPSExtReturn_ExcelOnline_Init(int templateID, DateTime dFrom, DateTime dTo, List<int> lstCustomer, int functionid, string functionkey, bool isreload)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingExtReturn objSetting = new DTOCUSSettingExtReturn();
                    objSetting = MONOPSExtReturn_Setting_Get(templateID);

                    var result = default(SYSExcel);
                    var id = HelperExcel.GetLastID(model, functionid, functionkey);
                    if (id < 1 || isreload == true)
                    {
                        var lst = MONOPSExtReturn_ExcelOnline_Data(dFrom, dTo, lstCustomer);

                        string[] aValue = { "SYSCustomerID", "SettingID", "CreateBy", "CreateDate", "Name", "RowStart", "ColumnIndexMax" };
                        List<string> sValue = new List<string>(aValue);
                        Dictionary<string, string> dicName = GetDataName();
                        if (objSetting != null)
                        {
                            List<Worksheet> data = HelperExcel.GetWorksheetByID(model, id);
                            var ws = data[0];
                            ws.Rows.Clear();

                            double[] arrColumnWidth = new double[objSetting.ColumnIndexMax];
                            for (int i = 0; i < objSetting.ColumnIndexMax; i++)
                            {
                                arrColumnWidth[i] = 100;
                            }
                            ws.Columns = HelperExcel.NewColumns(arrColumnWidth);

                            if (objSetting.RowStart > 1)
                            {
                                #region header
                                var cells = new List<Cell>();
                                foreach (var prop in objSetting.GetType().GetProperties())
                                {
                                    try
                                    {
                                        var p = prop.Name;
                                        if (!sValue.Contains(p))
                                        {
                                            var v = (int)prop.GetValue(objSetting, null);
                                            if (v > 0)
                                            {
                                                if (dicName.ContainsKey(p))
                                                    cells.Add(HelperExcel.NewCell(v - 1, dicName[p], HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                                else
                                                    cells.Add(HelperExcel.NewCell(v - 1, p, HelperExcel.ColorWhite, HelperExcel.ColorGreen));
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }
                                }
                                ws.Rows.Add(HelperExcel.NewRow(0, cells));
                                #endregion

                                #region Body
                                if (lst != null)
                                {
                                    var cRow = objSetting.RowStart - 1;

                                    foreach (var item in lst)
                                    {
                                        cells = new List<Cell>();
                                        foreach (var prop in objSetting.GetType().GetProperties())
                                        {
                                            try
                                            {
                                                var p = prop.Name;
                                                if (!sValue.Contains(p))
                                                {
                                                    var v = (int)prop.GetValue(objSetting, null);
                                                    var val = item.GetType().GetProperty(p).GetValue(item, null);
                                                    var txt = string.Empty;
                                                    if (val != null)
                                                    {
                                                        if (val.GetType() == typeof(DateTime))
                                                        {
                                                            txt = String.Format("{0:dd/MM/yyyy HH:mm}", val);
                                                        }
                                                        else if (val.GetType() == typeof(bool))
                                                        {
                                                            bool value = (bool)val;
                                                            if (value == true)
                                                            {
                                                                txt = "x";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            txt = val.ToString();
                                                        }
                                                    }
                                                    if (v > 0 && v <= objSetting.ColumnIndexMax)
                                                        cells.Add(HelperExcel.NewCell(v - 1, txt));
                                                }
                                            }
                                            catch (Exception)
                                            {
                                            }
                                        }
                                        ws.Rows.Add(HelperExcel.NewRow(cRow, cells));
                                        cRow++;
                                    }
                                }
                                #endregion
                            }

                            result = HelperExcel.GetByKey(model, functionid, functionkey);
                            result.Data = Newtonsoft.Json.JsonConvert.SerializeObject(data);
                            result = HelperExcel.Save(model, Account, result);
                        }
                    }
                    else
                    {
                        result = HelperExcel.GetByID(model, id);
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public Row MONOPSExtReturn_ExcelOnline_Change(int templateID, DateTime dFrom, DateTime dTo, List<int> lstCustomer, long id, int row, List<Cell> cells, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingExtReturn objSetting = new DTOCUSSettingExtReturn();
                    objSetting = MONOPSExtReturn_Setting_Get(templateID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.ColumnIndexMax;
                    int colCheckNote = objSetting.ColumnIndexMax + 1;
                    int colID = objSetting.ColumnIndexMax + 2;
                    int colExtReturnStatusID = objSetting.ColumnIndexMax + 3;
                    int failMax = 2;
                    int failCurrent = 0;

                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    var result = default(Row);

                    var checkRow = ws.Rows.FirstOrDefault(c => c.Index == row);
                    if (checkRow == null)
                    {
                        checkRow = HelperExcel.NewRow(row, cells);
                        ws.Rows.Add(checkRow);
                    }

                    if (checkRow != null)
                    {
                        checkRow.Cells = cells;
                        bool isContinue = true;

                        if (objSetting != null)
                        {
                            string[] aValue = { "SYSCustomerID", "SettingID", "CreateBy", "CreateDate", "Name", "RowStart", "ColumnIndexMax" };
                            List<string> sValue = new List<string>(aValue);

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                var data = MONOPSExtReturn_ExcelOnline_Data(dFrom, dTo, lstCustomer);
                                var lstExtReturnStatus = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ExtReturnStatus).Select(c => new { c.ID, c.Code }).ToList();

                                if (isContinue)
                                {
                                    if (objSetting.InvoiceDate > 0)
                                    {
                                        if (string.IsNullOrEmpty(excelInput["InvoiceDate"]))
                                        {
                                        }
                                        else
                                        {
                                            var _date = new DateTime();
                                            try
                                            {
                                                _date = HelperExcel.ValueToDateVN(excelInput["InvoiceDate"]);
                                            }
                                            catch
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }

                                double quantity = -1;
                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                    {
                                        try
                                        {
                                            quantity = Convert.ToDouble(excelInput["Quantity"]);
                                        }
                                        catch
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    if (quantity <= 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(25, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelInput["ExtReturnStatusCode"]))
                                    {
                                        var status = lstExtReturnStatus.Where(c => c.Code == excelInput["ExtReturnStatusCode"]).FirstOrDefault();
                                        if (status == null)
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colExtReturnStatusID, status.ID.ToString());
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    List<int> lstError = new List<int>();
                                    var lstData = MONOPSExtReturn_ExcelOnline_GetData(excelInput, data, objSetting, ref lstError);

                                    if (lstError != null && lstError.Count > 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(lstError.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    if (isContinue)
                                    {
                                        if (lstData == null || lstData.Count == 0)
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            var resultID = lstData.FirstOrDefault().ID;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colID, resultID.ToString());
                                        }
                                    }
                                }
                            }
                        }

                        HelperExcel.SaveData(model, id, lstWorksheet);
                        HelperExcel.ClearData(checkRow, colCheckChange);
                        result = checkRow;
                    }

                    return result;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public SYSExcel MONOPSExtReturn_ExcelOnline_Import(int templateID, DateTime dFrom, DateTime dTo, List<int> lstCustomer, long id, List<Row> lst, List<string> lstMessageError)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    DTOCUSSettingExtReturn objSetting = new DTOCUSSettingExtReturn();
                    objSetting = MONOPSExtReturn_Setting_Get(templateID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.ColumnIndexMax;
                    int colCheckNote = objSetting.ColumnIndexMax + 1;
                    int colID = objSetting.ColumnIndexMax + 2;
                    int colExtReturnStatusID = objSetting.ColumnIndexMax + 3;
                    int failMax = 2;
                    int failCurrent = 0;
                    int rowEnd = rowStart + 1;
                    if (lst.Count() > 0)
                    {
                        rowEnd = lst[lst.Count() - 1].Index.Value + 1;
                        foreach (var item in lst)
                        {
                            if (item.Index.Value > rowEnd)
                            {
                                rowEnd = item.Index.Value;
                            }
                        }
                    }
                    var lstWorksheet = HelperExcel.GetWorksheetByID(model, id);
                    var ws = lstWorksheet[0];
                    ws.Rows = lst;

                    failCurrent = 0;
                    foreach (var eRow in lst)
                    {
                        if (eRow.Index >= rowStart)
                        {
                            foreach (var cell in eRow.Cells)
                            {
                                if (cell.Index == objSetting.ExtReturnStatusCode - 1)
                                {
                                    if (cell.Value != null && !string.IsNullOrEmpty(cell.Value.ToString()))
                                    {
                                    }
                                    else if (failCurrent >= failMax)
                                    {
                                        rowEnd = eRow.Index.Value;
                                        break;
                                    }
                                    else
                                        failCurrent++;

                                    break;
                                }
                            }
                        }
                    }

                    var data = MONOPSExtReturn_ExcelOnline_Data(dFrom, dTo, lstCustomer);
                    foreach (var checkRow in lst)
                    {
                        if (checkRow.Index < rowStart) continue;
                        if (checkRow.Index >= rowEnd) break;

                        bool isContinue = true;

                        if (objSetting != null)
                        {
                            string[] aValue = { "SYSCustomerID", "SettingID", "CreateBy", "CreateDate", "Name", "RowStart", "ColumnIndexMax" };
                            List<string> sValue = new List<string>(aValue);

                            var excelInput = GetDataValue(checkRow, objSetting, sValue);
                            if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                            {
                                var lstExtReturnStatus = model.SYS_Var.Where(c => c.TypeOfVar == (int)SYSVarType.ExtReturnStatus).Select(c => new { c.ID, c.Code }).ToList();

                                if (isContinue)
                                {
                                    if (objSetting.InvoiceDate > 0)
                                    {
                                        if (string.IsNullOrEmpty(excelInput["InvoiceDate"]))
                                        {
                                        }
                                        else
                                        {
                                            var _date = new DateTime();
                                            try
                                            {
                                                _date = HelperExcel.ValueToDateVN(excelInput["InvoiceDate"]);
                                            }
                                            catch
                                            {
                                                HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(24, lstMessageError));
                                                isContinue = false;
                                            }
                                        }
                                    }
                                }

                                double quantity = -1;
                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelInput["Quantity"]))
                                    {
                                        try
                                        {
                                            quantity = Convert.ToDouble(excelInput["Quantity"]);
                                        }
                                        catch
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(20, lstMessageError));
                                            isContinue = false;
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(19, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    if (quantity <= 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(25, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    if (!string.IsNullOrEmpty(excelInput["ExtReturnStatusCode"]))
                                    {
                                        var status = lstExtReturnStatus.Where(c => c.Code == excelInput["ExtReturnStatusCode"]).FirstOrDefault();
                                        if (status == null)
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(22, lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colExtReturnStatusID, status.ID.ToString());
                                        }
                                    }
                                    else
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(21, lstMessageError));
                                        isContinue = false;
                                    }
                                }

                                if (isContinue)
                                {
                                    List<int> lstError = new List<int>();
                                    var lstData = MONOPSExtReturn_ExcelOnline_GetData(excelInput, data, objSetting, ref lstError);

                                    if (lstError != null && lstError.Count > 0)
                                    {
                                        HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(lstError.FirstOrDefault(), lstMessageError));
                                        isContinue = false;
                                    }

                                    if (isContinue)
                                    {
                                        if (lstData == null || lstData.Count == 0)
                                        {
                                            HelperExcel.CheckErrorFail(checkRow, colCheckChange, colCheckNote, HelperExcel.MessageError(23, lstMessageError));
                                            isContinue = false;
                                        }
                                        else
                                        {
                                            var resultID = lstData.FirstOrDefault().ID;
                                            HelperExcel.CheckErrorSuccess(checkRow, colCheckChange, colCheckNote, colID, resultID.ToString());
                                        }
                                    }
                                }
                            }
                        }
                    }

                    HelperExcel.SaveData(model, id, lstWorksheet);

                    return HelperExcel.GetByID(model, id); ;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public bool MONOPSExtReturn_ExcelOnline_Approve(long id, int templateID, DateTime dFrom, DateTime dTo, List<int> lstCustomer)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = true;

                    var data = MONOPSExtReturn_ExcelOnline_Data(dFrom, dTo, lstCustomer);
                    List<DTOMONOPSDITOProductQuick> lstResult = new List<DTOMONOPSDITOProductQuick>();
                    DTOCUSSettingExtReturn objSetting = new DTOCUSSettingExtReturn();
                    objSetting = MONOPSExtReturn_Setting_Get(templateID);

                    int rowStart = objSetting.RowStart - 1;
                    int colCheckChange = objSetting.ColumnIndexMax;
                    int colCheckNote = objSetting.ColumnIndexMax + 1;
                    int colID = objSetting.ColumnIndexMax + 2;
                    int colExtReturnStatusID = objSetting.ColumnIndexMax + 3;

                    var lstRow = HelperExcel.GetSuccess(model, id, rowStart, colCheckChange, colCheckNote);

                    if (lstRow.Count > 0)
                    {
                        foreach (var checkRow in lstRow)
                        {
                            if (objSetting != null)
                            {
                                string[] aValue = { "SYSCustomerID", "SettingID", "CreateBy", "CreateDate", "Name", "RowStart", "ColumnIndexMax" };
                                List<string> sValue = new List<string>(aValue);

                                var excelInput = GetDataValue(checkRow, objSetting, sValue);
                                if (excelInput.Count(c => !string.IsNullOrEmpty(c.Value)) > 0)
                                {
                                    #region Get Data
                                    string dataID = HelperExcel.GetString(checkRow, colID);
                                    string dataStatus = HelperExcel.GetString(checkRow, colExtReturnStatusID);

                                    int rowID = Convert.ToInt32(dataID);
                                    int statusID = Convert.ToInt32(dataStatus);

                                    string invoiceNo = excelInput["InvoiceNo"];
                                    string dataInvoiceDate = excelInput["InvoiceDate"];
                                    string dataQuantity = excelInput["Quantity"];

                                    DateTime invoiceDate = DateTime.Now;
                                    if (objSetting.InvoiceDate > 0 && !string.IsNullOrEmpty(dataInvoiceDate))
                                    {
                                        invoiceDate = HelperExcel.ValueToDateVN(dataInvoiceDate);
                                    }
                                    double quantity = Convert.ToDouble(dataQuantity);

                                    #endregion

                                    if (data != null && data.Count > 0 && quantity > 0)
                                    {
                                        var obj = data.Where(c => c.ID == rowID).FirstOrDefault();
                                        if (obj != null)
                                        {
                                            DTOMONOPSDITOProductQuick item = new DTOMONOPSDITOProductQuick();
                                            item.ID = obj.ID;
                                            item.CustomerID = obj.CustomerID;
                                            item.InvoiceNo = invoiceNo;
                                            item.InvoiceDate = invoiceDate;
                                            item.IsApproved = false;
                                            item.ExtReturnStatusID = statusID;
                                            item.Quantity = quantity;
                                            item.ProductID = obj.ProductID;
                                            item.DITOMasterID = obj.DITOMasterID;
                                            item.Index = checkRow.Index.Value + 1;
                                            lstResult.Add(item);
                                        }
                                        else
                                        {
                                            throw FaultHelper.BusinessFault(null, null, "Không tìm thấy thông tin");
                                        }
                                    }
                                }
                            }
                        }

                        #region Group
                        var dataSource = new List<DTOMONOPSDITOProductQuick>();
                        using (CopyHelper copy = new CopyHelper())
                        {
                            var query = lstResult.GroupBy(c => c.ID);
                            foreach (var item in query)
                            {
                                if (item.Count() > 1)
                                {
                                    DTOMONOPSDITOProductQuick objProduct = new DTOMONOPSDITOProductQuick();

                                    copy.Copy(item.FirstOrDefault(), objProduct);
                                    objProduct.Quantity = 0;

                                    List<int> lstIndex = new List<int>();
                                    foreach (var itemP in item)
                                    {
                                        objProduct.Quantity += itemP.Quantity;
                                        lstIndex.Add(itemP.Index.Value);
                                    }

                                    var obj = data.Where(c => c.ID == objProduct.ID).FirstOrDefault();
                                    if (objProduct.Quantity > obj.QuantityCurrent)
                                    {
                                        throw FaultHelper.BusinessFault(null, null, "Dòng " + string.Join(",", lstIndex) + " tổng số lượng trả về lớn hơn số lượng còn lại.");
                                    }
                                    dataSource.Add(objProduct);
                                }
                                else
                                {
                                    var obj = data.Where(c => c.ID == item.FirstOrDefault().ID).FirstOrDefault();
                                    if (item.FirstOrDefault().Quantity > obj.QuantityCurrent)
                                    {
                                        throw FaultHelper.BusinessFault(null, null, "Dòng " + item.FirstOrDefault().Index.Value + " tổng số lượng trả về lớn hơn số lượng còn lại.");
                                    }

                                    dataSource.AddRange(item);
                                }
                            }
                        }
                        #endregion

                        MONOPSExtReturn_ExcelOnline_Save(lstResult);
                        return true;
                    }
                    return false;
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        public void MONOPSExtReturn_ExcelOnline_Save(List<DTOMONOPSDITOProductQuick> lst)
        {
            try
            {
                using (var model = new DataEntities())
                {
                    model.EventAccount = Account; model.EventRunning = false;
                    foreach (var item in lst)
                    {
                        var objProduct = model.OPS_DITOProduct.FirstOrDefault(c => c.ID == item.ID);
                        if (objProduct != null)
                        {
                            var objDetail = model.OPS_ExtReturnDetail.Where(c => c.DITOProductID == objProduct.ID && c.OPS_ExtReturn.ExtReturnStatusID == item.ExtReturnStatusID).FirstOrDefault();
                            if (objDetail == null)
                            {
                                OPS_ExtReturn obj = new OPS_ExtReturn();
                                obj.CreatedBy = Account.UserName;
                                obj.CreatedDate = DateTime.Now;
                                obj.SYSCustomerID = Account.SYSCustomerID;
                                obj.InvoiceNo = item.InvoiceNo;
                                obj.InvoiceDate = item.InvoiceDate;
                                obj.CustomerID = item.CustomerID;

                                obj.IsApproved = item.IsApproved;
                                // obj.Quantity = item.Quantity;
                                obj.ProductID = item.ProductID;
                                if (item.DITOMasterID > 0)
                                    obj.DITOMasterID = item.DITOMasterID;
                                else obj.DITOMasterID = null;

                                if (objProduct.OPS_DITOGroupProduct.DITOMasterID > 0)
                                {
                                    var master = objProduct.OPS_DITOGroupProduct.OPS_DITOMaster;
                                    obj.VehicleID = master.VehicleID;
                                    obj.VendorID = master.VendorOfVehicleID;
                                    obj.DriverID = master.DriverID1;
                                }
                                obj.Quantity = item.Quantity;
                                obj.ExtReturnStatusID = item.ExtReturnStatusID;
                                obj.Note = item.Note;

                                model.OPS_ExtReturn.Add(obj);

                                objDetail = new OPS_ExtReturnDetail();
                                objDetail.CreatedDate = DateTime.Now;
                                objDetail.CreatedBy = Account.UserName;
                                objDetail.DITOProductID = item.ID;
                                objDetail.Quantity = item.Quantity;
                                objDetail.OPS_ExtReturn = obj;
                                model.OPS_ExtReturnDetail.Add(objDetail);

                                objProduct.QuantityExtReturn = objProduct.QuantityExtReturn == null ? item.Quantity : objProduct.QuantityExtReturn += item.Quantity;
                            }
                            else
                            {
                                objDetail.ModifiedBy = Account.UserName;
                                objDetail.ModifiedDate = DateTime.Now;
                                objDetail.Quantity += item.Quantity;
                                objDetail.OPS_ExtReturn.Quantity += item.Quantity;
                                objDetail.OPS_ExtReturn.ModifiedBy = Account.UserName;
                                objDetail.OPS_ExtReturn.ModifiedDate = DateTime.Now;
                                objProduct.QuantityExtReturn = objProduct.QuantityExtReturn == null ? item.Quantity : objProduct.QuantityExtReturn += item.Quantity;
                            }

                        }
                        else throw FaultHelper.BusinessFault(null, null, "Không tìm thấy dữ liệu");
                    }

                    model.SaveChanges();
                }
            }
            catch (FaultException<DTOError> ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw FaultHelper.BusinessFault(ex);
            }
        }

        private List<DTOMONOPSExtReturnExcel> MONOPSExtReturn_ExcelOnline_GetData(Dictionary<string, string> excelInput, List<DTOMONOPSExtReturnExcel> data, DTOCUSSettingExtReturn objSetting, ref List<int> lstError)
        {
            #region GetData
            var ID = excelInput["ID"];
            var CustomerCode = excelInput["CustomerCode"];
            var CustomerName = excelInput["CustomerName"];
            var VehicleNo = excelInput["VehicleNo"];
            var VendorCode = excelInput["VendorCode"];
            var VendorName = excelInput["VendorName"];
            var DriverName = excelInput["DriverName"];
            var Packing = excelInput["Packing"];
            var GroupProductCode = excelInput["GroupProductCode"];
            var DITOMasterCode = excelInput["DITOMasterCode"];
            var OrderCode = excelInput["OrderCode"];
            var RequestDate = excelInput["RequestDate"];
            var ETA = excelInput["ETA"];
            var ETD = excelInput["ETD"];
            var DNCode = excelInput["DNCode"];
            var SOCode = excelInput["SOCode"];
            #endregion

            List<DTOMONOPSExtReturnExcel> temp = null;
            temp = data;

            if (objSetting.IDKey && objSetting.ID > 0)
            {
                var _id = -1;
                if (string.IsNullOrEmpty(ID))
                    lstError.Add(0);
                else
                {
                    try
                    {
                        _id = Convert.ToInt32(ID);
                    }
                    catch
                    {
                        lstError.Add(1);
                    }
                    temp = temp.Where(c => c.ID == _id).ToList();
                }
            }

            if (objSetting.CustomerCodeKey && objSetting.CustomerCode > 0)
            {
                if (string.IsNullOrEmpty(CustomerCode))
                {
                    lstError.Add(1);
                }
                else
                {
                    temp = temp.Where(c => c.CustomerCode == CustomerCode).ToList();
                }
            }

            if (objSetting.CustomerNameKey && objSetting.CustomerName > 0)
            {
                if (string.IsNullOrEmpty(CustomerName))
                {
                    lstError.Add(2);
                }
                else
                {
                    temp = temp.Where(c => c.CustomerName == CustomerName).ToList();
                }
            }

            if (objSetting.VehicleNoKey && objSetting.VehicleNo > 0)
            {
                if (string.IsNullOrEmpty(VehicleNo))
                {
                    lstError.Add(3);
                }
                else
                {
                    temp = temp.Where(c => c.VehicleNo == VehicleNo).ToList();
                }
            }
            if (objSetting.VendorCodeKey && objSetting.VendorCode > 0)
            {
                if (string.IsNullOrEmpty(VendorCode))
                {
                    lstError.Add(4);
                }
                else
                {
                    temp = temp.Where(c => c.VendorCode == VendorCode).ToList();
                }
            }

            if (objSetting.VendorNameKey && objSetting.VendorName > 0)
            {
                if (string.IsNullOrEmpty(VendorName))
                {
                    lstError.Add(5);
                }
                else
                {
                    temp = temp.Where(c => c.VendorName == VendorName).ToList();
                }
            }

            if (objSetting.DriverNameKey && objSetting.DriverName > 0)
            {
                if (string.IsNullOrEmpty(DriverName))
                {
                    lstError.Add(6);
                }
                else
                {
                    temp = temp.Where(c => c.DriverName == DriverName).ToList();
                }
            }

            if (objSetting.PackingKey && objSetting.Packing > 0)
            {
                if (string.IsNullOrEmpty(Packing))
                {
                    lstError.Add(7);
                }
                else
                {
                    temp = temp.Where(c => c.Packing == Packing).ToList();
                }
            }

            if (objSetting.GroupProductCodeKey && objSetting.GroupProductCode > 0)
            {
                if (string.IsNullOrEmpty(GroupProductCode))
                {
                    lstError.Add(8);
                }
                else
                {
                    temp = temp.Where(c => c.GroupProductCode == GroupProductCode).ToList();
                }
            }

            if (objSetting.DITOMasterCodeKey && objSetting.DITOMasterCode > 0)
            {
                if (string.IsNullOrEmpty(DITOMasterCode))
                {
                    lstError.Add(9);
                }
                else
                {
                    temp = temp.Where(c => c.DITOMasterCode == DITOMasterCode).ToList();
                }
            }

            if (objSetting.OrderCodeKey && objSetting.OrderCode > 0)
            {
                if (string.IsNullOrEmpty(OrderCode))
                {
                    lstError.Add(10);
                }
                else
                {
                    temp = temp.Where(c => c.OrderCode == OrderCode).ToList();
                }
            }

            if (objSetting.DNCodeKey && objSetting.DNCode > 0)
            {
                if (string.IsNullOrEmpty(DNCode))
                {
                    lstError.Add(14);
                }
                else
                {
                    temp = temp.Where(c => c.DNCode == DNCode).ToList();
                }
            }

            if (objSetting.SOCodeKey && objSetting.SOCode > 0)
            {
                if (string.IsNullOrEmpty(OrderCode))
                {
                    lstError.Add(15);
                }
                else
                {
                    temp = temp.Where(c => c.SOCode == SOCode).ToList();
                }
            }

            DateTime _date = new DateTime();
            if (objSetting.RequestDateKey && objSetting.RequestDate > 0)
            {
                if (string.IsNullOrEmpty(RequestDate))
                {
                    lstError.Add(11);
                }
                else
                {
                    _date = new DateTime();
                    try
                    {
                        _date = HelperExcel.ValueToDateVN(RequestDate);
                    }
                    catch
                    {
                        lstError.Add(16);
                    }
                    temp = temp.Where(c => c.RequestDate == _date).ToList();
                }
            }

            if (objSetting.ETDKey && objSetting.ETD > 0)
            {
                if (string.IsNullOrEmpty(ETD))
                {
                    lstError.Add(12);
                }
                else
                {
                    _date = new DateTime();
                    try
                    {
                        _date = HelperExcel.ValueToDateVN(ETD);
                    }
                    catch
                    {
                        lstError.Add(17);
                    }
                    temp = temp.Where(c => c.ETD == _date).ToList();
                }
            }

            if (objSetting.ETAKey && objSetting.ETA > 0)
            {
                if (string.IsNullOrEmpty(ETA))
                {
                    lstError.Add(13);
                }
                else
                {
                    _date = new DateTime();
                    try
                    {
                        _date = HelperExcel.ValueToDateVN(ETA);
                    }
                    catch
                    {
                        lstError.Add(18);
                    }
                    temp = temp.Where(c => c.ETA == _date).ToList();
                }
            }
            return temp;
        }

        private Dictionary<string, string> GetDataValue(Row checkRow, object obj, List<string> sValue)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();
            foreach (var prop in obj.GetType().GetProperties())
            {
                try
                {
                    var p = prop.Name;
                    if (!sValue.Contains(p))
                    {
                        var v = (int)prop.GetValue(obj, null);
                        var value = HelperExcel.GetString(checkRow, v - 1);
                        result.Add(p, v > 0 ? value : string.Empty);
                    }
                }
                catch (Exception)
                {
                }
            }
            return result;
        }

        private Dictionary<string, string> GetDataName()
        {
            Dictionary<string, string> result = new Dictionary<string, string>();

            result.Add("ID", "ID");
            result.Add("InvoiceNo", "Số chứng từ");
            result.Add("InvoiceDate", "Ngày chứng từ");
            result.Add("DITOMasterCode", "Mã chuyến");
            result.Add("CustomerCode", "Mã khách hàng");
            result.Add("VendorCode", "Mã nhà xe");
            result.Add("VendorName", "Tên nhà xe");
            result.Add("VehicleNo", "Xe");
            result.Add("GroupProductCode", "Mã nhóm sản phẩm");
            result.Add("Packing", "Mã sản phẩm");
            result.Add("OrderCode", "Mã ĐH");
            result.Add("DNCode", "Số DN");
            result.Add("SOCode", "Số SO");
            result.Add("RequestDate", "Ngày yêu cầu");
            result.Add("ETD", "ETD");
            result.Add("ETA", "ETA");
            result.Add("QuantityCurrent", "Số lượng còn lại");
            result.Add("Quantity", "Số lượng");
            result.Add("ExtReturnStatusCode", "Loại trả về");

            return result;
        }
        #endregion

        #endregion
    }
}
